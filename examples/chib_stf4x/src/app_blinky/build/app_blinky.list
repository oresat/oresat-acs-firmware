
build/app_blinky.elf:     file format elf32-littlearm


Disassembly of section .text:

080001c0 <Reset_Handler>:
 80001c0:	b672      	cpsid	i
 80001c2:	4826      	ldr	r0, [pc, #152]	; (800025c <endfiniloop+0x6>)
 80001c4:	f380 8809 	msr	PSP, r0
 80001c8:	4825      	ldr	r0, [pc, #148]	; (8000260 <endfiniloop+0xa>)
 80001ca:	f64e 5108 	movw	r1, #60680	; 0xed08
 80001ce:	f2ce 0100 	movt	r1, #57344	; 0xe000
 80001d2:	6008      	str	r0, [r1, #0]
 80001d4:	2002      	movs	r0, #2
 80001d6:	f380 8814 	msr	CONTROL, r0
 80001da:	f3bf 8f6f 	isb	sy
 80001de:	f001 f947 	bl	8001470 <__core_init>
 80001e2:	f000 fff5 	bl	80011d0 <__early_init>
 80001e6:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
 80001ea:	491e      	ldr	r1, [pc, #120]	; (8000264 <endfiniloop+0xe>)
 80001ec:	4a1e      	ldr	r2, [pc, #120]	; (8000268 <endfiniloop+0x12>)

080001ee <msloop>:
 80001ee:	4291      	cmp	r1, r2
 80001f0:	bf3c      	itt	cc
 80001f2:	f841 0b04 	strcc.w	r0, [r1], #4
 80001f6:	e7fa      	bcc.n	80001ee <msloop>
 80001f8:	491c      	ldr	r1, [pc, #112]	; (800026c <endfiniloop+0x16>)
 80001fa:	4a18      	ldr	r2, [pc, #96]	; (800025c <endfiniloop+0x6>)

080001fc <psloop>:
 80001fc:	4291      	cmp	r1, r2
 80001fe:	bf3c      	itt	cc
 8000200:	f841 0b04 	strcc.w	r0, [r1], #4
 8000204:	e7fa      	bcc.n	80001fc <psloop>
 8000206:	491a      	ldr	r1, [pc, #104]	; (8000270 <endfiniloop+0x1a>)
 8000208:	4a1a      	ldr	r2, [pc, #104]	; (8000274 <endfiniloop+0x1e>)
 800020a:	4b1b      	ldr	r3, [pc, #108]	; (8000278 <endfiniloop+0x22>)

0800020c <dloop>:
 800020c:	429a      	cmp	r2, r3
 800020e:	bf3e      	ittt	cc
 8000210:	f851 0b04 	ldrcc.w	r0, [r1], #4
 8000214:	f842 0b04 	strcc.w	r0, [r2], #4
 8000218:	e7f8      	bcc.n	800020c <dloop>
 800021a:	2000      	movs	r0, #0
 800021c:	4917      	ldr	r1, [pc, #92]	; (800027c <endfiniloop+0x26>)
 800021e:	4a18      	ldr	r2, [pc, #96]	; (8000280 <endfiniloop+0x2a>)

08000220 <bloop>:
 8000220:	4291      	cmp	r1, r2
 8000222:	bf3c      	itt	cc
 8000224:	f841 0b04 	strcc.w	r0, [r1], #4
 8000228:	e7fa      	bcc.n	8000220 <bloop>
 800022a:	f001 f8e1 	bl	80013f0 <__init_ram_areas>
 800022e:	f001 f917 	bl	8001460 <__late_init>
 8000232:	4c14      	ldr	r4, [pc, #80]	; (8000284 <endfiniloop+0x2e>)
 8000234:	4d14      	ldr	r5, [pc, #80]	; (8000288 <endfiniloop+0x32>)

08000236 <initloop>:
 8000236:	42ac      	cmp	r4, r5
 8000238:	da03      	bge.n	8000242 <endinitloop>
 800023a:	f854 1b04 	ldr.w	r1, [r4], #4
 800023e:	4788      	blx	r1
 8000240:	e7f9      	b.n	8000236 <initloop>

08000242 <endinitloop>:
 8000242:	f000 fd25 	bl	8000c90 <main>
 8000246:	4c11      	ldr	r4, [pc, #68]	; (800028c <endfiniloop+0x36>)
 8000248:	4d11      	ldr	r5, [pc, #68]	; (8000290 <endfiniloop+0x3a>)

0800024a <finiloop>:
 800024a:	42ac      	cmp	r4, r5
 800024c:	da03      	bge.n	8000256 <endfiniloop>
 800024e:	f854 1b04 	ldr.w	r1, [r4], #4
 8000252:	4788      	blx	r1
 8000254:	e7f9      	b.n	800024a <finiloop>

08000256 <endfiniloop>:
 8000256:	f001 b8fb 	b.w	8001450 <__default_exit>
 800025a:	0000      	.short	0x0000
 800025c:	20000400 	.word	0x20000400
 8000260:	08000000 	.word	0x08000000
 8000264:	20000000 	.word	0x20000000
 8000268:	20000200 	.word	0x20000200
 800026c:	20000200 	.word	0x20000200
 8000270:	08001564 	.word	0x08001564
 8000274:	20000400 	.word	0x20000400
 8000278:	20000400 	.word	0x20000400
 800027c:	20000400 	.word	0x20000400
 8000280:	20000748 	.word	0x20000748
 8000284:	080001c0 	.word	0x080001c0
 8000288:	080001c0 	.word	0x080001c0
 800028c:	080001c0 	.word	0x080001c0
 8000290:	080001c0 	.word	0x080001c0

08000294 <_port_switch>:
 8000294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000298:	f8c1 d00c 	str.w	sp, [r1, #12]
 800029c:	68c3      	ldr	r3, [r0, #12]
 800029e:	469d      	mov	sp, r3
 80002a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080002a4 <_port_thread_start>:
 80002a4:	2300      	movs	r3, #0
 80002a6:	f383 8811 	msr	BASEPRI, r3
 80002aa:	4628      	mov	r0, r5
 80002ac:	47a0      	blx	r4
 80002ae:	2000      	movs	r0, #0
 80002b0:	f001 f856 	bl	8001360 <chThdExit>

080002b4 <_port_switch_from_isr>:
 80002b4:	f001 f87c 	bl	80013b0 <chSchDoReschedule>

080002b8 <_port_exit_from_isr>:
 80002b8:	df00      	svc	0
 80002ba:	e7fe      	b.n	80002ba <_port_exit_from_isr+0x2>
 80002bc:	0000      	movs	r0, r0
	...

080002c0 <chTMStartMeasurementX.constprop.18>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 80002c0:	4b01      	ldr	r3, [pc, #4]	; (80002c8 <chTMStartMeasurementX.constprop.18+0x8>)
 80002c2:	685b      	ldr	r3, [r3, #4]
 *
 * @xclass
 */
NOINLINE void chTMStartMeasurementX(time_measurement_t *tmp) {

  tmp->last = chSysGetRealtimeCounterX();
 80002c4:	6083      	str	r3, [r0, #8]
}
 80002c6:	4770      	bx	lr
 80002c8:	e0001000 	.word	0xe0001000
 80002cc:	00000000 	.word	0x00000000

080002d0 <chCoreAllocAligned>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAllocAligned(size_t size, unsigned align) {
 80002d0:	b510      	push	{r4, lr}
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80002d2:	2320      	movs	r3, #32
 80002d4:	f383 8811 	msr	BASEPRI, r3
  size = MEM_ALIGN_NEXT(size, align);
 80002d8:	1e4b      	subs	r3, r1, #1
 80002da:	181b      	adds	r3, r3, r0
  p = (uint8_t *)MEM_ALIGN_NEXT(nextmem, align);
 80002dc:	480a      	ldr	r0, [pc, #40]	; (8000308 <chCoreAllocAligned+0x38>)
  size = MEM_ALIGN_NEXT(size, align);
 80002de:	424c      	negs	r4, r1
  p = (uint8_t *)MEM_ALIGN_NEXT(nextmem, align);
 80002e0:	6802      	ldr	r2, [r0, #0]
  size = MEM_ALIGN_NEXT(size, align);
 80002e2:	4023      	ands	r3, r4
  p = (uint8_t *)MEM_ALIGN_NEXT(nextmem, align);
 80002e4:	3a01      	subs	r2, #1
 80002e6:	1851      	adds	r1, r2, r1
  if (((size_t)endmem - (size_t)p) < size) {
 80002e8:	4a08      	ldr	r2, [pc, #32]	; (800030c <chCoreAllocAligned+0x3c>)
  p = (uint8_t *)MEM_ALIGN_NEXT(nextmem, align);
 80002ea:	4021      	ands	r1, r4
  if (((size_t)endmem - (size_t)p) < size) {
 80002ec:	6812      	ldr	r2, [r2, #0]
 80002ee:	1a52      	subs	r2, r2, r1
 80002f0:	4293      	cmp	r3, r2
 80002f2:	d806      	bhi.n	8000302 <chCoreAllocAligned+0x32>
  nextmem = p + size;
 80002f4:	18cb      	adds	r3, r1, r3
 80002f6:	6003      	str	r3, [r0, #0]
  return p;
 80002f8:	0008      	movs	r0, r1
 80002fa:	2300      	movs	r3, #0
 80002fc:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocAlignedI(size, align);
  chSysUnlock();

  return p;
}
 8000300:	bd10      	pop	{r4, pc}
    return NULL;
 8000302:	2000      	movs	r0, #0
 8000304:	e7f9      	b.n	80002fa <chCoreAllocAligned+0x2a>
 8000306:	46c0      	nop			; (mov r8, r8)
 8000308:	20000720 	.word	0x20000720
 800030c:	20000400 	.word	0x20000400

08000310 <notify2>:

#if STM32_SERIAL_USE_USART2 || defined(__DOXYGEN__)
static void notify2(io_queue_t *qp) {

  (void)qp;
  USART2->CR1 |= USART_CR1_TXEIE;
 8000310:	2380      	movs	r3, #128	; 0x80
 8000312:	4a02      	ldr	r2, [pc, #8]	; (800031c <notify2+0xc>)
 8000314:	68d1      	ldr	r1, [r2, #12]
 8000316:	430b      	orrs	r3, r1
 8000318:	60d3      	str	r3, [r2, #12]
}
 800031a:	4770      	bx	lr
 800031c:	40004400 	.word	0x40004400

08000320 <_port_irq_epilogue>:
 8000320:	2320      	movs	r3, #32
 8000322:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8000326:	4b0e      	ldr	r3, [pc, #56]	; (8000360 <_port_irq_epilogue+0x40>)
 8000328:	685b      	ldr	r3, [r3, #4]
 800032a:	051b      	lsls	r3, r3, #20
 800032c:	d403      	bmi.n	8000336 <_port_irq_epilogue+0x16>
 800032e:	2300      	movs	r3, #0
 8000330:	f383 8811 	msr	BASEPRI, r3
    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
    return;
  }
  port_unlock_from_isr();
}
 8000334:	4770      	bx	lr
  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 8000336:	f3ef 8309 	mrs	r3, PSP
    ctxp->xpsr = (regarm_t)0x01000000;
 800033a:	2280      	movs	r2, #128	; 0x80
 800033c:	3b20      	subs	r3, #32
 800033e:	0452      	lsls	r2, r2, #17
 8000340:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 8000342:	f383 8809 	msr	PSP, r3
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.queue);
 8000346:	4a07      	ldr	r2, [pc, #28]	; (8000364 <_port_irq_epilogue+0x44>)
 8000348:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->prio;
 800034a:	6992      	ldr	r2, [r2, #24]
    if (chSchIsPreemptionRequired()) {
 800034c:	6889      	ldr	r1, [r1, #8]
 800034e:	6892      	ldr	r2, [r2, #8]
 8000350:	4291      	cmp	r1, r2
 8000352:	d902      	bls.n	800035a <_port_irq_epilogue+0x3a>
      ctxp->pc = (regarm_t)_port_switch_from_isr;
 8000354:	4a04      	ldr	r2, [pc, #16]	; (8000368 <_port_irq_epilogue+0x48>)
 8000356:	619a      	str	r2, [r3, #24]
 8000358:	e7ec      	b.n	8000334 <_port_irq_epilogue+0x14>
      ctxp->pc = (regarm_t)_port_exit_from_isr;
 800035a:	4a04      	ldr	r2, [pc, #16]	; (800036c <_port_irq_epilogue+0x4c>)
 800035c:	619a      	str	r2, [r3, #24]
 800035e:	e7e9      	b.n	8000334 <_port_irq_epilogue+0x14>
 8000360:	e000ed00 	.word	0xe000ed00
 8000364:	200005cc 	.word	0x200005cc
 8000368:	080002b5 	.word	0x080002b5
 800036c:	080002b8 	.word	0x080002b8

08000370 <VectorB0>:
 * @brief   TIM2 interrupt handler.
 * @details This interrupt is used for system tick in free running mode.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(ST_HANDLER) {
 8000370:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000372:	4647      	mov	r7, r8
 8000374:	b480      	push	{r7}
  OSAL_IRQ_PROLOGUE();

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
 8000376:	2780      	movs	r7, #128	; 0x80
 8000378:	05ff      	lsls	r7, r7, #23
 800037a:	693b      	ldr	r3, [r7, #16]
 800037c:	079b      	lsls	r3, r3, #30
 800037e:	d404      	bmi.n	800038a <VectorB0+0x1a>
    osalSysLockFromISR();
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
 8000380:	f7ff ffce 	bl	8000320 <_port_irq_epilogue>
}
 8000384:	bc04      	pop	{r2}
 8000386:	4690      	mov	r8, r2
 8000388:	bdf0      	pop	{r4, r5, r6, r7, pc}
    STM32_ST_TIM->SR = 0U;
 800038a:	2300      	movs	r3, #0
 800038c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800038e:	3320      	adds	r3, #32
 8000390:	f383 8811 	msr	BASEPRI, r3
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  virtual_timer_t *vtp;
  systime_t now, delta;

  /* First timer to be processed.*/
  vtp = ch.vtlist.next;
 8000394:	4c1b      	ldr	r4, [pc, #108]	; (8000404 <VectorB0+0x94>)
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8000396:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000398:	69e3      	ldr	r3, [r4, #28]

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->delta <= (systime_t)(now - ch.vtlist.lasttime)) {
 800039a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800039c:	689a      	ldr	r2, [r3, #8]
 800039e:	1a45      	subs	r5, r0, r1
 80003a0:	4295      	cmp	r5, r2
 80003a2:	d31b      	bcc.n	80003dc <VectorB0+0x6c>
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.lasttime += vtp->delta;

    vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 80003a4:	0026      	movs	r6, r4
    ch.vtlist.next = vtp->next;
    fn = vtp->func;
    vtp->func = NULL;
 80003a6:	2500      	movs	r5, #0
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
 80003a8:	46b8      	mov	r8, r7
    vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 80003aa:	361c      	adds	r6, #28
    ch.vtlist.lasttime += vtp->delta;
 80003ac:	188a      	adds	r2, r1, r2
 80003ae:	62a2      	str	r2, [r4, #40]	; 0x28
    vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 80003b0:	681a      	ldr	r2, [r3, #0]
    fn = vtp->func;
 80003b2:	68d9      	ldr	r1, [r3, #12]
    vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 80003b4:	6056      	str	r6, [r2, #4]
    ch.vtlist.next = vtp->next;
 80003b6:	61e2      	str	r2, [r4, #28]
    vtp->func = NULL;
 80003b8:	60dd      	str	r5, [r3, #12]

    /* if the list becomes empty then the timer is stopped.*/
    if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 80003ba:	42b2      	cmp	r2, r6
 80003bc:	d01d      	beq.n	80003fa <VectorB0+0x8a>
 80003be:	f385 8811 	msr	BASEPRI, r5
       and in order to give a preemption chance to higher priority
       interrupts.*/
    chSysUnlockFromISR();

    /* The callback is invoked outside the kernel critical zone.*/
    fn(vtp->par);
 80003c2:	6918      	ldr	r0, [r3, #16]
 80003c4:	4788      	blx	r1
 80003c6:	2320      	movs	r3, #32
 80003c8:	f383 8811 	msr	BASEPRI, r3
  return (systime_t)STM32_ST_TIM->CNT;
 80003cc:	4642      	mov	r2, r8
       of the list.*/
    chSysLockFromISR();

    /* Next element in the list, the current time could have advanced so
       recalculating the time window.*/
    vtp = ch.vtlist.next;
 80003ce:	69e3      	ldr	r3, [r4, #28]
 80003d0:	6a50      	ldr	r0, [r2, #36]	; 0x24
  while (vtp->delta <= (systime_t)(now - ch.vtlist.lasttime)) {
 80003d2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80003d4:	689a      	ldr	r2, [r3, #8]
 80003d6:	1a47      	subs	r7, r0, r1
 80003d8:	42ba      	cmp	r2, r7
 80003da:	d9e7      	bls.n	80003ac <VectorB0+0x3c>
    now = chVTGetSystemTimeX();
  }

  /* if the list is empty, nothing else to do.*/
  if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 80003dc:	341c      	adds	r4, #28
 80003de:	42a3      	cmp	r3, r4
 80003e0:	d007      	beq.n	80003f2 <VectorB0+0x82>
    return;
  }

  /* Recalculating the next alarm time.*/
  delta = ch.vtlist.lasttime + vtp->delta - now;
 80003e2:	1852      	adds	r2, r2, r1
 80003e4:	1a12      	subs	r2, r2, r0
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
 80003e6:	2a01      	cmp	r2, #1
 80003e8:	d90a      	bls.n	8000400 <VectorB0+0x90>
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 80003ea:	2380      	movs	r3, #128	; 0x80
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
  }
  port_timer_set_alarm(now + delta);
 80003ec:	1812      	adds	r2, r2, r0
 80003ee:	05db      	lsls	r3, r3, #23
 80003f0:	635a      	str	r2, [r3, #52]	; 0x34
 80003f2:	2300      	movs	r3, #0
 80003f4:	f383 8811 	msr	BASEPRI, r3
 80003f8:	e7c2      	b.n	8000380 <VectorB0+0x10>
  STM32_ST_TIM->DIER = 0;
 80003fa:	4642      	mov	r2, r8
 80003fc:	60d5      	str	r5, [r2, #12]
 80003fe:	e7de      	b.n	80003be <VectorB0+0x4e>
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
 8000400:	2202      	movs	r2, #2
 8000402:	e7f2      	b.n	80003ea <VectorB0+0x7a>
 8000404:	200005cc 	.word	0x200005cc
	...

08000410 <SVC_Handler>:
  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 8000410:	f3ef 8309 	mrs	r3, PSP
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 8000414:	3320      	adds	r3, #32
 8000416:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800041a:	2300      	movs	r3, #0
 800041c:	f383 8811 	msr	BASEPRI, r3
}
 8000420:	4770      	bx	lr
 8000422:	46c0      	nop			; (mov r8, r8)
	...

08000430 <chTMStopMeasurementX>:
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 8000430:	4a0e      	ldr	r2, [pc, #56]	; (800046c <chTMStopMeasurementX+0x3c>)
 8000432:	4b0f      	ldr	r3, [pc, #60]	; (8000470 <chTMStopMeasurementX+0x40>)
 8000434:	6f51      	ldr	r1, [r2, #116]	; 0x74
  tmp->n++;
 8000436:	68c2      	ldr	r2, [r0, #12]
 8000438:	685b      	ldr	r3, [r3, #4]
 800043a:	3201      	adds	r2, #1
 800043c:	60c2      	str	r2, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
 800043e:	6882      	ldr	r2, [r0, #8]
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 8000440:	b530      	push	{r4, r5, lr}
  tmp->last = (now - tmp->last) - offset;
 8000442:	1a9b      	subs	r3, r3, r2
 8000444:	1a5b      	subs	r3, r3, r1
  tmp->cumulative += (rttime_t)tmp->last;
 8000446:	001c      	movs	r4, r3
 8000448:	6901      	ldr	r1, [r0, #16]
 800044a:	6942      	ldr	r2, [r0, #20]
 800044c:	2500      	movs	r5, #0
 800044e:	1864      	adds	r4, r4, r1
 8000450:	4155      	adcs	r5, r2
  if (tmp->last > tmp->worst) {
 8000452:	6842      	ldr	r2, [r0, #4]
  tmp->last = (now - tmp->last) - offset;
 8000454:	6083      	str	r3, [r0, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 8000456:	6104      	str	r4, [r0, #16]
 8000458:	6145      	str	r5, [r0, #20]
  if (tmp->last > tmp->worst) {
 800045a:	4293      	cmp	r3, r2
 800045c:	d900      	bls.n	8000460 <chTMStopMeasurementX+0x30>
    tmp->worst = tmp->last;
 800045e:	6043      	str	r3, [r0, #4]
  if (tmp->last < tmp->best) {
 8000460:	6802      	ldr	r2, [r0, #0]
 8000462:	4293      	cmp	r3, r2
 8000464:	d200      	bcs.n	8000468 <chTMStopMeasurementX+0x38>
    tmp->best = tmp->last;
 8000466:	6003      	str	r3, [r0, #0]
}
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	46c0      	nop			; (mov r8, r8)
 800046c:	200005cc 	.word	0x200005cc
 8000470:	e0001000 	.word	0xe0001000
	...

08000480 <wakeup>:
 8000480:	2320      	movs	r3, #32
 8000482:	f383 8811 	msr	BASEPRI, r3
  switch (tp->state) {
 8000486:	5cc3      	ldrb	r3, [r0, r3]
 8000488:	2b07      	cmp	r3, #7
 800048a:	d80c      	bhi.n	80004a6 <wakeup+0x26>
 800048c:	4a12      	ldr	r2, [pc, #72]	; (80004d8 <wakeup+0x58>)
 800048e:	009b      	lsls	r3, r3, #2
 8000490:	58d3      	ldr	r3, [r2, r3]
 8000492:	469f      	mov	pc, r3
    chSemFastSignalI(tp->u.wtsemp);
 8000494:	6a42      	ldr	r2, [r0, #36]	; 0x24
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->cnt++;
 8000496:	6893      	ldr	r3, [r2, #8]
 8000498:	3301      	adds	r3, #1
 800049a:	6093      	str	r3, [r2, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->queue.prev->queue.next = tp->queue.next;
 800049c:	6802      	ldr	r2, [r0, #0]
 800049e:	6843      	ldr	r3, [r0, #4]
 80004a0:	601a      	str	r2, [r3, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 80004a2:	6802      	ldr	r2, [r0, #0]
 80004a4:	6053      	str	r3, [r2, #4]
  tp->u.rdymsg = MSG_TIMEOUT;
 80004a6:	2301      	movs	r3, #1
  tp->state = CH_STATE_READY;
 80004a8:	2200      	movs	r2, #0
  tp->u.rdymsg = MSG_TIMEOUT;
 80004aa:	425b      	negs	r3, r3
 80004ac:	6243      	str	r3, [r0, #36]	; 0x24
  tp->state = CH_STATE_READY;
 80004ae:	3321      	adds	r3, #33	; 0x21
 80004b0:	54c2      	strb	r2, [r0, r3]
 80004b2:	6882      	ldr	r2, [r0, #8]
  cp = (thread_t *)&ch.rlist.queue;
 80004b4:	4b09      	ldr	r3, [pc, #36]	; (80004dc <wakeup+0x5c>)
    cp = cp->queue.next;
 80004b6:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 80004b8:	6899      	ldr	r1, [r3, #8]
 80004ba:	4291      	cmp	r1, r2
 80004bc:	d2fb      	bcs.n	80004b6 <wakeup+0x36>
  tp->queue.prev             = cp->queue.prev;
 80004be:	685a      	ldr	r2, [r3, #4]
  tp->queue.next             = cp;
 80004c0:	6003      	str	r3, [r0, #0]
  tp->queue.prev             = cp->queue.prev;
 80004c2:	6042      	str	r2, [r0, #4]
  tp->queue.prev->queue.next = tp;
 80004c4:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 80004c6:	6058      	str	r0, [r3, #4]
 80004c8:	2300      	movs	r3, #0
 80004ca:	f383 8811 	msr	BASEPRI, r3
}
 80004ce:	4770      	bx	lr
    *tp->u.wttrp = NULL;
 80004d0:	2200      	movs	r2, #0
 80004d2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80004d4:	601a      	str	r2, [r3, #0]
 80004d6:	e7e6      	b.n	80004a6 <wakeup+0x26>
 80004d8:	08001474 	.word	0x08001474
 80004dc:	200005cc 	.word	0x200005cc

080004e0 <chSchReadyI>:
  tp->state = CH_STATE_READY;
 80004e0:	2200      	movs	r2, #0
 80004e2:	2320      	movs	r3, #32
 80004e4:	54c2      	strb	r2, [r0, r3]
 80004e6:	6882      	ldr	r2, [r0, #8]
  cp = (thread_t *)&ch.rlist.queue;
 80004e8:	4b05      	ldr	r3, [pc, #20]	; (8000500 <chSchReadyI+0x20>)
    cp = cp->queue.next;
 80004ea:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 80004ec:	6899      	ldr	r1, [r3, #8]
 80004ee:	4291      	cmp	r1, r2
 80004f0:	d2fb      	bcs.n	80004ea <chSchReadyI+0xa>
  tp->queue.prev             = cp->queue.prev;
 80004f2:	685a      	ldr	r2, [r3, #4]
  tp->queue.next             = cp;
 80004f4:	6003      	str	r3, [r0, #0]
  tp->queue.prev             = cp->queue.prev;
 80004f6:	6042      	str	r2, [r0, #4]
  tp->queue.prev->queue.next = tp;
 80004f8:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 80004fa:	6058      	str	r0, [r3, #4]
}
 80004fc:	4770      	bx	lr
 80004fe:	46c0      	nop			; (mov r8, r8)
 8000500:	200005cc 	.word	0x200005cc
	...

08000510 <chEvtBroadcastFlagsI.constprop.13>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8000510:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000512:	4647      	mov	r7, r8
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
 8000514:	4e1a      	ldr	r6, [pc, #104]	; (8000580 <chEvtBroadcastFlagsI.constprop.13+0x70>)
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8000516:	b480      	push	{r7}
  elp = esp->next;
 8000518:	6874      	ldr	r4, [r6, #4]
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 800051a:	3604      	adds	r6, #4
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 800051c:	0005      	movs	r5, r0
  while (elp != (event_listener_t *)esp) {
 800051e:	42b4      	cmp	r4, r6
 8000520:	d023      	beq.n	800056a <chEvtBroadcastFlagsI.constprop.13+0x5a>
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
      ((tp->state == CH_STATE_WTANDEVT) &&
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
    tp->u.rdymsg = MSG_OK;
 8000522:	2300      	movs	r3, #0
  if (((tp->state == CH_STATE_WTOREVT) &&
 8000524:	2720      	movs	r7, #32
    tp->u.rdymsg = MSG_OK;
 8000526:	4698      	mov	r8, r3
 8000528:	e002      	b.n	8000530 <chEvtBroadcastFlagsI.constprop.13+0x20>
    elp = elp->next;
 800052a:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 800052c:	42b4      	cmp	r4, r6
 800052e:	d01c      	beq.n	800056a <chEvtBroadcastFlagsI.constprop.13+0x5a>
    elp->flags |= flags;
 8000530:	68e3      	ldr	r3, [r4, #12]
 8000532:	432b      	orrs	r3, r5
 8000534:	60e3      	str	r3, [r4, #12]
    if ((flags == (eventflags_t)0) ||
 8000536:	2d00      	cmp	r5, #0
 8000538:	d002      	beq.n	8000540 <chEvtBroadcastFlagsI.constprop.13+0x30>
 800053a:	6922      	ldr	r2, [r4, #16]
 800053c:	421a      	tst	r2, r3
 800053e:	d0f4      	beq.n	800052a <chEvtBroadcastFlagsI.constprop.13+0x1a>
      chEvtSignalI(elp->listener, elp->events);
 8000540:	6860      	ldr	r0, [r4, #4]
  tp->epending |= events;
 8000542:	68a3      	ldr	r3, [r4, #8]
 8000544:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8000546:	4313      	orrs	r3, r2
 8000548:	6343      	str	r3, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
 800054a:	5dc2      	ldrb	r2, [r0, r7]
 800054c:	2a0a      	cmp	r2, #10
 800054e:	d00f      	beq.n	8000570 <chEvtBroadcastFlagsI.constprop.13+0x60>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 8000550:	2a0b      	cmp	r2, #11
 8000552:	d1ea      	bne.n	800052a <chEvtBroadcastFlagsI.constprop.13+0x1a>
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
 8000554:	6a42      	ldr	r2, [r0, #36]	; 0x24
      ((tp->state == CH_STATE_WTANDEVT) &&
 8000556:	4013      	ands	r3, r2
 8000558:	429a      	cmp	r2, r3
 800055a:	d1e6      	bne.n	800052a <chEvtBroadcastFlagsI.constprop.13+0x1a>
    tp->u.rdymsg = MSG_OK;
 800055c:	4643      	mov	r3, r8
 800055e:	6243      	str	r3, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 8000560:	f7ff ffbe 	bl	80004e0 <chSchReadyI>
    elp = elp->next;
 8000564:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 8000566:	42b4      	cmp	r4, r6
 8000568:	d1e2      	bne.n	8000530 <chEvtBroadcastFlagsI.constprop.13+0x20>
}
 800056a:	bc04      	pop	{r2}
 800056c:	4690      	mov	r8, r2
 800056e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (((tp->state == CH_STATE_WTOREVT) &&
 8000570:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8000572:	421a      	tst	r2, r3
 8000574:	d0d9      	beq.n	800052a <chEvtBroadcastFlagsI.constprop.13+0x1a>
    tp->u.rdymsg = MSG_OK;
 8000576:	4643      	mov	r3, r8
 8000578:	6243      	str	r3, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 800057a:	f7ff ffb1 	bl	80004e0 <chSchReadyI>
 800057e:	e7f1      	b.n	8000564 <chEvtBroadcastFlagsI.constprop.13+0x54>
 8000580:	20000550 	.word	0x20000550
	...

08000590 <VectorD8>:
/**
 * @brief   USART2 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART2_HANDLER) {
 8000590:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000592:	464e      	mov	r6, r9
 8000594:	4645      	mov	r5, r8
 8000596:	4657      	mov	r7, sl
 8000598:	b4e0      	push	{r5, r6, r7}
  USART_TypeDef *u = sdp->usart;
 800059a:	4d69      	ldr	r5, [pc, #420]	; (8000740 <VectorD8+0x1b0>)
 800059c:	6f6e      	ldr	r6, [r5, #116]	; 0x74
  uint16_t cr1 = u->CR1;
 800059e:	68f3      	ldr	r3, [r6, #12]
 80005a0:	4699      	mov	r9, r3
  uint16_t sr = u->SR;
 80005a2:	6833      	ldr	r3, [r6, #0]
 80005a4:	b29c      	uxth	r4, r3
  if (sr & USART_SR_LBD) {
 80005a6:	05db      	lsls	r3, r3, #23
 80005a8:	d500      	bpl.n	80005ac <VectorD8+0x1c>
 80005aa:	e084      	b.n	80006b6 <VectorD8+0x126>
 80005ac:	2320      	movs	r3, #32
 80005ae:	f383 8811 	msr	BASEPRI, r3
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 80005b2:	330f      	adds	r3, #15
 80005b4:	4223      	tst	r3, r4
 80005b6:	d04c      	beq.n	8000652 <VectorD8+0xc2>
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
 80005b8:	3b20      	subs	r3, #32
 80005ba:	4698      	mov	r8, r3
    sts |= SD_PARITY_ERROR;
 80005bc:	2720      	movs	r7, #32
 80005be:	e008      	b.n	80005d2 <VectorD8+0x42>
    b = (uint8_t)u->DR & sdp->rxmask;
 80005c0:	6873      	ldr	r3, [r6, #4]
 80005c2:	469a      	mov	sl, r3
    if (sr & USART_SR_RXNE)
 80005c4:	4227      	tst	r7, r4
 80005c6:	d11c      	bne.n	8000602 <VectorD8+0x72>
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 80005c8:	232f      	movs	r3, #47	; 0x2f
    sr = u->SR;
 80005ca:	6834      	ldr	r4, [r6, #0]
 80005cc:	b2a4      	uxth	r4, r4
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 80005ce:	4223      	tst	r3, r4
 80005d0:	d03f      	beq.n	8000652 <VectorD8+0xc2>
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
 80005d2:	4643      	mov	r3, r8
 80005d4:	4223      	tst	r3, r4
 80005d6:	d0f3      	beq.n	80005c0 <VectorD8+0x30>
  if (sr & USART_SR_ORE)
 80005d8:	0720      	lsls	r0, r4, #28
    sts |= SD_OVERRUN_ERROR;
 80005da:	0fc0      	lsrs	r0, r0, #31
 80005dc:	01c0      	lsls	r0, r0, #7
  if (sr & USART_SR_PE)
 80005de:	07e3      	lsls	r3, r4, #31
 80005e0:	d500      	bpl.n	80005e4 <VectorD8+0x54>
    sts |= SD_PARITY_ERROR;
 80005e2:	4338      	orrs	r0, r7
  if (sr & USART_SR_FE)
 80005e4:	07a3      	lsls	r3, r4, #30
 80005e6:	d501      	bpl.n	80005ec <VectorD8+0x5c>
    sts |= SD_FRAMING_ERROR;
 80005e8:	2340      	movs	r3, #64	; 0x40
 80005ea:	4318      	orrs	r0, r3
  if (sr & USART_SR_NE)
 80005ec:	0763      	lsls	r3, r4, #29
 80005ee:	d502      	bpl.n	80005f6 <VectorD8+0x66>
    sts |= SD_NOISE_ERROR;
 80005f0:	2380      	movs	r3, #128	; 0x80
 80005f2:	005b      	lsls	r3, r3, #1
 80005f4:	4318      	orrs	r0, r3
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 80005f6:	f7ff ff8b 	bl	8000510 <chEvtBroadcastFlagsI.constprop.13>
    b = (uint8_t)u->DR & sdp->rxmask;
 80005fa:	6873      	ldr	r3, [r6, #4]
 80005fc:	469a      	mov	sl, r3
    if (sr & USART_SR_RXNE)
 80005fe:	4227      	tst	r7, r4
 8000600:	d0e2      	beq.n	80005c8 <VectorD8+0x38>
    b = (uint8_t)u->DR & sdp->rxmask;
 8000602:	2378      	movs	r3, #120	; 0x78
 8000604:	5cec      	ldrb	r4, [r5, r3]
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
 8000606:	696b      	ldr	r3, [r5, #20]
 8000608:	2b00      	cmp	r3, #0
 800060a:	d045      	beq.n	8000698 <VectorD8+0x108>
 */
msg_t iqPutI(input_queue_t *iqp, uint8_t b) {

  osalDbgCheckClassI();

  if (iqIsFullI(iqp)) {
 800060c:	6a2b      	ldr	r3, [r5, #32]
 800060e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8000610:	4293      	cmp	r3, r2
 8000612:	d048      	beq.n	80006a6 <VectorD8+0x116>
    return MSG_TIMEOUT;
  }

  iqp->q_counter++;
 8000614:	696a      	ldr	r2, [r5, #20]
 8000616:	3201      	adds	r2, #1
 8000618:	616a      	str	r2, [r5, #20]
  *iqp->q_wrptr++ = b;
 800061a:	1c5a      	adds	r2, r3, #1
 800061c:	622a      	str	r2, [r5, #32]
 800061e:	4652      	mov	r2, sl
 8000620:	4022      	ands	r2, r4
 8000622:	701a      	strb	r2, [r3, #0]
  if (iqp->q_wrptr >= iqp->q_top) {
 8000624:	6a2b      	ldr	r3, [r5, #32]
 8000626:	69ea      	ldr	r2, [r5, #28]
 8000628:	4293      	cmp	r3, r2
 800062a:	d301      	bcc.n	8000630 <VectorD8+0xa0>
    iqp->q_wrptr = iqp->q_buffer;
 800062c:	69ab      	ldr	r3, [r5, #24]
 800062e:	622b      	str	r3, [r5, #32]
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (queue_notempty(tqp)) {
 8000630:	002b      	movs	r3, r5
  return (bool)(tqp->next != (const thread_t *)tqp);
 8000632:	68e8      	ldr	r0, [r5, #12]
 8000634:	330c      	adds	r3, #12
 8000636:	4298      	cmp	r0, r3
 8000638:	d0c6      	beq.n	80005c8 <VectorD8+0x38>
  tqp->next             = tp->queue.next;
 800063a:	6802      	ldr	r2, [r0, #0]
 800063c:	60ea      	str	r2, [r5, #12]
  tqp->next->queue.prev = (thread_t *)tqp;
 800063e:	6053      	str	r3, [r2, #4]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
 8000640:	2300      	movs	r3, #0
 8000642:	6243      	str	r3, [r0, #36]	; 0x24
  (void) chSchReadyI(tp);
 8000644:	f7ff ff4c 	bl	80004e0 <chSchReadyI>
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8000648:	232f      	movs	r3, #47	; 0x2f
    sr = u->SR;
 800064a:	6834      	ldr	r4, [r6, #0]
 800064c:	b2a4      	uxth	r4, r4
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 800064e:	4223      	tst	r3, r4
 8000650:	d1bf      	bne.n	80005d2 <VectorD8+0x42>
 8000652:	2300      	movs	r3, #0
 8000654:	f383 8811 	msr	BASEPRI, r3
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
 8000658:	464a      	mov	r2, r9
 800065a:	3380      	adds	r3, #128	; 0x80
 800065c:	4213      	tst	r3, r2
 800065e:	d001      	beq.n	8000664 <VectorD8+0xd4>
 8000660:	4223      	tst	r3, r4
 8000662:	d135      	bne.n	80006d0 <VectorD8+0x140>
  if (sr & USART_SR_TC) {
 8000664:	0663      	lsls	r3, r4, #25
 8000666:	d510      	bpl.n	800068a <VectorD8+0xfa>
 8000668:	2320      	movs	r3, #32
 800066a:	f383 8811 	msr	BASEPRI, r3
    if (oqIsEmptyI(&sdp->oqueue))
 800066e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8000670:	6caa      	ldr	r2, [r5, #72]	; 0x48
 8000672:	4293      	cmp	r3, r2
 8000674:	d04f      	beq.n	8000716 <VectorD8+0x186>
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 8000676:	464a      	mov	r2, r9
 8000678:	4b32      	ldr	r3, [pc, #200]	; (8000744 <VectorD8+0x1b4>)
 800067a:	401a      	ands	r2, r3
    u->SR = ~USART_SR_TC;
 800067c:	2341      	movs	r3, #65	; 0x41
 800067e:	425b      	negs	r3, r3
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 8000680:	60f2      	str	r2, [r6, #12]
    u->SR = ~USART_SR_TC;
 8000682:	6033      	str	r3, [r6, #0]
 8000684:	2300      	movs	r3, #0
 8000686:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD2);

  OSAL_IRQ_EPILOGUE();
 800068a:	f7ff fe49 	bl	8000320 <_port_irq_epilogue>
}
 800068e:	bc1c      	pop	{r2, r3, r4}
 8000690:	4690      	mov	r8, r2
 8000692:	4699      	mov	r9, r3
 8000694:	46a2      	mov	sl, r4
 8000696:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000698:	2004      	movs	r0, #4
 800069a:	f7ff ff39 	bl	8000510 <chEvtBroadcastFlagsI.constprop.13>
  if (iqIsFullI(iqp)) {
 800069e:	6a2b      	ldr	r3, [r5, #32]
 80006a0:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80006a2:	4293      	cmp	r3, r2
 80006a4:	d1b6      	bne.n	8000614 <VectorD8+0x84>
 80006a6:	696a      	ldr	r2, [r5, #20]
 80006a8:	2a00      	cmp	r2, #0
 80006aa:	d0b3      	beq.n	8000614 <VectorD8+0x84>
 80006ac:	2080      	movs	r0, #128	; 0x80
 80006ae:	00c0      	lsls	r0, r0, #3
 80006b0:	f7ff ff2e 	bl	8000510 <chEvtBroadcastFlagsI.constprop.13>
 80006b4:	e788      	b.n	80005c8 <VectorD8+0x38>
 80006b6:	2320      	movs	r3, #32
 80006b8:	f383 8811 	msr	BASEPRI, r3
 80006bc:	2080      	movs	r0, #128	; 0x80
 80006be:	0080      	lsls	r0, r0, #2
 80006c0:	f7ff ff26 	bl	8000510 <chEvtBroadcastFlagsI.constprop.13>
    u->SR = ~USART_SR_LBD;
 80006c4:	4b20      	ldr	r3, [pc, #128]	; (8000748 <VectorD8+0x1b8>)
 80006c6:	6033      	str	r3, [r6, #0]
 80006c8:	2300      	movs	r3, #0
 80006ca:	f383 8811 	msr	BASEPRI, r3
 80006ce:	e76d      	b.n	80005ac <VectorD8+0x1c>
 80006d0:	3b60      	subs	r3, #96	; 0x60
 80006d2:	f383 8811 	msr	BASEPRI, r3
msg_t oqGetI(output_queue_t *oqp) {
  uint8_t b;

  osalDbgCheckClassI();

  if (oqIsEmptyI(oqp)) {
 80006d6:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80006d8:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 80006da:	429a      	cmp	r2, r3
 80006dc:	d022      	beq.n	8000724 <VectorD8+0x194>
    return MSG_TIMEOUT;
  }

  oqp->q_counter++;
 80006de:	6baa      	ldr	r2, [r5, #56]	; 0x38
 80006e0:	3201      	adds	r2, #1
 80006e2:	63aa      	str	r2, [r5, #56]	; 0x38
  b = *oqp->q_rdptr++;
 80006e4:	1c5a      	adds	r2, r3, #1
 80006e6:	64aa      	str	r2, [r5, #72]	; 0x48
 80006e8:	781f      	ldrb	r7, [r3, #0]
  if (oqp->q_rdptr >= oqp->q_top) {
 80006ea:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80006ec:	429a      	cmp	r2, r3
 80006ee:	d301      	bcc.n	80006f4 <VectorD8+0x164>
    oqp->q_rdptr = oqp->q_buffer;
 80006f0:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80006f2:	64ab      	str	r3, [r5, #72]	; 0x48
 80006f4:	002b      	movs	r3, r5
  return (bool)(tqp->next != (const thread_t *)tqp);
 80006f6:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80006f8:	3330      	adds	r3, #48	; 0x30
 80006fa:	4298      	cmp	r0, r3
 80006fc:	d006      	beq.n	800070c <VectorD8+0x17c>
  tqp->next             = tp->queue.next;
 80006fe:	6802      	ldr	r2, [r0, #0]
 8000700:	632a      	str	r2, [r5, #48]	; 0x30
  tqp->next->queue.prev = (thread_t *)tqp;
 8000702:	6053      	str	r3, [r2, #4]
  tp->u.rdymsg = msg;
 8000704:	2300      	movs	r3, #0
 8000706:	6243      	str	r3, [r0, #36]	; 0x24
  (void) chSchReadyI(tp);
 8000708:	f7ff feea 	bl	80004e0 <chSchReadyI>
      u->DR = b;
 800070c:	6077      	str	r7, [r6, #4]
 800070e:	2300      	movs	r3, #0
 8000710:	f383 8811 	msr	BASEPRI, r3
 8000714:	e7a6      	b.n	8000664 <VectorD8+0xd4>
    if (oqIsEmptyI(&sdp->oqueue))
 8000716:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8000718:	2b00      	cmp	r3, #0
 800071a:	d0ac      	beq.n	8000676 <VectorD8+0xe6>
 800071c:	2010      	movs	r0, #16
 800071e:	f7ff fef7 	bl	8000510 <chEvtBroadcastFlagsI.constprop.13>
 8000722:	e7a8      	b.n	8000676 <VectorD8+0xe6>
  if (oqIsEmptyI(oqp)) {
 8000724:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8000726:	2a00      	cmp	r2, #0
 8000728:	d0d9      	beq.n	80006de <VectorD8+0x14e>
 800072a:	2008      	movs	r0, #8
 800072c:	f7ff fef0 	bl	8000510 <chEvtBroadcastFlagsI.constprop.13>
      u->CR1 = (cr1 & ~USART_CR1_TXEIE) | USART_CR1_TCIE;
 8000730:	464a      	mov	r2, r9
 8000732:	4b06      	ldr	r3, [pc, #24]	; (800074c <VectorD8+0x1bc>)
 8000734:	401a      	ands	r2, r3
 8000736:	2340      	movs	r3, #64	; 0x40
 8000738:	4313      	orrs	r3, r2
 800073a:	60f3      	str	r3, [r6, #12]
 800073c:	e7e7      	b.n	800070e <VectorD8+0x17e>
 800073e:	46c0      	nop			; (mov r8, r8)
 8000740:	20000550 	.word	0x20000550
 8000744:	0000ffbf 	.word	0x0000ffbf
 8000748:	fffffeff 	.word	0xfffffeff
 800074c:	0000ff3f 	.word	0x0000ff3f

08000750 <_idle_thread>:
 *          that this thread is executed only if there are no other ready
 *          threads in the system.
 *
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void _idle_thread(void *p) {
 8000750:	e7fe      	b.n	8000750 <_idle_thread>
 8000752:	46c0      	nop			; (mov r8, r8)
	...

08000760 <BusFault_Handler>:
 *          This function simply stops the system into an infinite loop.
 *
 * @notapi
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void _unhandled_exception(void) {
 8000760:	e7fe      	b.n	8000760 <BusFault_Handler>
 8000762:	46c0      	nop			; (mov r8, r8)
	...

08000770 <chSchWakeupS.constprop.23>:
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8000770:	b570      	push	{r4, r5, r6, lr}
  ntp->u.rdymsg = msg;
 8000772:	2500      	movs	r5, #0
  thread_t *otp = currp;
 8000774:	4b12      	ldr	r3, [pc, #72]	; (80007c0 <chSchWakeupS.constprop.23+0x50>)
  ntp->u.rdymsg = msg;
 8000776:	6245      	str	r5, [r0, #36]	; 0x24
  thread_t *otp = currp;
 8000778:	6999      	ldr	r1, [r3, #24]
  if (ntp->prio <= otp->prio) {
 800077a:	6882      	ldr	r2, [r0, #8]
 800077c:	688c      	ldr	r4, [r1, #8]
 800077e:	42a2      	cmp	r2, r4
 8000780:	d80b      	bhi.n	800079a <chSchWakeupS.constprop.23+0x2a>
  tp->state = CH_STATE_READY;
 8000782:	2120      	movs	r1, #32
 8000784:	5445      	strb	r5, [r0, r1]
    cp = cp->queue.next;
 8000786:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8000788:	6899      	ldr	r1, [r3, #8]
 800078a:	428a      	cmp	r2, r1
 800078c:	d9fb      	bls.n	8000786 <chSchWakeupS.constprop.23+0x16>
  tp->queue.prev             = cp->queue.prev;
 800078e:	685a      	ldr	r2, [r3, #4]
  tp->queue.next             = cp;
 8000790:	6003      	str	r3, [r0, #0]
  tp->queue.prev             = cp->queue.prev;
 8000792:	6042      	str	r2, [r0, #4]
  tp->queue.prev->queue.next = tp;
 8000794:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 8000796:	6058      	str	r0, [r3, #4]
}
 8000798:	bd70      	pop	{r4, r5, r6, pc}
  tp->state = CH_STATE_READY;
 800079a:	2220      	movs	r2, #32
 800079c:	548d      	strb	r5, [r1, r2]
  cp = (thread_t *)&ch.rlist.queue;
 800079e:	001a      	movs	r2, r3
    cp = cp->queue.next;
 80007a0:	6812      	ldr	r2, [r2, #0]
  } while (cp->prio >= tp->prio);
 80007a2:	6895      	ldr	r5, [r2, #8]
 80007a4:	42ac      	cmp	r4, r5
 80007a6:	d9fb      	bls.n	80007a0 <chSchWakeupS.constprop.23+0x30>
  tp->queue.prev             = cp->queue.prev;
 80007a8:	6854      	ldr	r4, [r2, #4]
  tp->queue.next             = cp;
 80007aa:	600a      	str	r2, [r1, #0]
  tp->queue.prev             = cp->queue.prev;
 80007ac:	604c      	str	r4, [r1, #4]
  tp->queue.prev->queue.next = tp;
 80007ae:	6021      	str	r1, [r4, #0]
  cp->queue.prev             = tp;
 80007b0:	6051      	str	r1, [r2, #4]
    currp = ntp;
 80007b2:	6198      	str	r0, [r3, #24]
    ntp->state = CH_STATE_CURRENT;
 80007b4:	2201      	movs	r2, #1
 80007b6:	2320      	movs	r3, #32
 80007b8:	54c2      	strb	r2, [r0, r3]
    chSysSwitch(ntp, otp);
 80007ba:	f7ff fd6b 	bl	8000294 <_port_switch>
 80007be:	e7eb      	b.n	8000798 <chSchWakeupS.constprop.23+0x28>
 80007c0:	200005cc 	.word	0x200005cc
	...

080007d0 <chSchGoSleepS>:
  otp->state = newstate;
 80007d0:	2220      	movs	r2, #32
  thread_t *otp = currp;
 80007d2:	4b07      	ldr	r3, [pc, #28]	; (80007f0 <chSchGoSleepS+0x20>)
void chSchGoSleepS(tstate_t newstate) {
 80007d4:	b510      	push	{r4, lr}
  thread_t *otp = currp;
 80007d6:	6999      	ldr	r1, [r3, #24]
  otp->state = newstate;
 80007d8:	5488      	strb	r0, [r1, r2]
  thread_t *tp = tqp->next;
 80007da:	6818      	ldr	r0, [r3, #0]
  tqp->next             = tp->queue.next;
 80007dc:	6804      	ldr	r4, [r0, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 80007de:	6063      	str	r3, [r4, #4]
  tqp->next             = tp->queue.next;
 80007e0:	601c      	str	r4, [r3, #0]
  currp = queue_fifo_remove(&ch.rlist.queue);
 80007e2:	6198      	str	r0, [r3, #24]
  currp->state = CH_STATE_CURRENT;
 80007e4:	2301      	movs	r3, #1
 80007e6:	5483      	strb	r3, [r0, r2]
  chSysSwitch(currp, otp);
 80007e8:	f7ff fd54 	bl	8000294 <_port_switch>
}
 80007ec:	bd10      	pop	{r4, pc}
 80007ee:	46c0      	nop			; (mov r8, r8)
 80007f0:	200005cc 	.word	0x200005cc
	...

08000800 <chSchGoSleepTimeoutS>:
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 8000800:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000802:	b087      	sub	sp, #28
  if (TIME_INFINITE != time) {
 8000804:	1c4b      	adds	r3, r1, #1
 8000806:	d04a      	beq.n	800089e <chSchGoSleepTimeoutS+0x9e>
    chVTDoSetI(&vt, time, wakeup, currp);
 8000808:	4d43      	ldr	r5, [pc, #268]	; (8000918 <chSchGoSleepTimeoutS+0x118>)
  systime_t delta;

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->par = par;
 800080a:	ac01      	add	r4, sp, #4
 800080c:	69ab      	ldr	r3, [r5, #24]
 800080e:	6123      	str	r3, [r4, #16]
  vtp->func = vtfunc;
 8000810:	4b42      	ldr	r3, [pc, #264]	; (800091c <chSchGoSleepTimeoutS+0x11c>)
 8000812:	60e3      	str	r3, [r4, #12]
  return (systime_t)STM32_ST_TIM->CNT;
 8000814:	2380      	movs	r3, #128	; 0x80
 8000816:	05db      	lsls	r3, r3, #23
 8000818:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  {
    systime_t now = chVTGetSystemTimeX();

    /* If the requested delay is lower than the minimum safe delta then it
       is raised to the minimum safe value.*/
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
 800081a:	2901      	cmp	r1, #1
 800081c:	d943      	bls.n	80008a6 <chSchGoSleepTimeoutS+0xa6>
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 800081e:	002e      	movs	r6, r5
 8000820:	69eb      	ldr	r3, [r5, #28]
 8000822:	361c      	adds	r6, #28
 8000824:	42b3      	cmp	r3, r6
 8000826:	d064      	beq.n	80008f2 <chSchGoSleepTimeoutS+0xf2>
    /* Pointer to the first element in the delta list, which is non-empty.*/
    p = ch.vtlist.next;

    /* Delay as delta from 'lasttime'. Note, it can overflow and the value
       becomes lower than 'now'.*/
    delta = now - ch.vtlist.lasttime + delay;
 8000828:	6aae      	ldr	r6, [r5, #40]	; 0x28
 800082a:	1b92      	subs	r2, r2, r6
 800082c:	1889      	adds	r1, r1, r2

    if (delta < now - ch.vtlist.lasttime) {
 800082e:	428a      	cmp	r2, r1
 8000830:	d830      	bhi.n	8000894 <chSchGoSleepTimeoutS+0x94>
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->delta;
      p = p->next;
    }
    else if (delta < p->delta) {
 8000832:	689a      	ldr	r2, [r3, #8]
 8000834:	4291      	cmp	r1, r2
 8000836:	d203      	bcs.n	8000840 <chSchGoSleepTimeoutS+0x40>
 8000838:	e037      	b.n	80008aa <chSchGoSleepTimeoutS+0xaa>

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->delta < delta) {
    delta -= p->delta;
    p = p->next;
 800083a:	681b      	ldr	r3, [r3, #0]
    delta -= p->delta;
 800083c:	1a89      	subs	r1, r1, r2
  while (p->delta < delta) {
 800083e:	689a      	ldr	r2, [r3, #8]
 8000840:	428a      	cmp	r2, r1
 8000842:	d3fa      	bcc.n	800083a <chSchGoSleepTimeoutS+0x3a>
  }

  /* The timer is inserted in the delta list.*/
  vtp->next = p;
  vtp->prev = vtp->next->prev;
 8000844:	685a      	ldr	r2, [r3, #4]
  vtp->next = p;
 8000846:	9301      	str	r3, [sp, #4]
  vtp->prev = vtp->next->prev;
 8000848:	6062      	str	r2, [r4, #4]
  vtp->prev->next = vtp;
 800084a:	6014      	str	r4, [r2, #0]
  p->prev = vtp;
 800084c:	605c      	str	r4, [r3, #4]
  vtp->delta = delta
 800084e:	60a1      	str	r1, [r4, #8]

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->delta -= delta;
 8000850:	689a      	ldr	r2, [r3, #8]
 8000852:	1a51      	subs	r1, r2, r1
 8000854:	6099      	str	r1, [r3, #8]
  ch.vtlist.delta = (systime_t)-1;
 8000856:	2301      	movs	r3, #1
 8000858:	425b      	negs	r3, r3
 800085a:	626b      	str	r3, [r5, #36]	; 0x24
    chSchGoSleepS(newstate);
 800085c:	f7ff ffb8 	bl	80007d0 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 8000860:	9b04      	ldr	r3, [sp, #16]
 8000862:	2b00      	cmp	r3, #0
 8000864:	d012      	beq.n	800088c <chSchGoSleepTimeoutS+0x8c>
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  systime_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.next != vtp) {
 8000866:	69eb      	ldr	r3, [r5, #28]
 8000868:	42a3      	cmp	r3, r4
 800086a:	d023      	beq.n	80008b4 <chSchGoSleepTimeoutS+0xb4>
    /* Removing the element from the delta list.*/
    vtp->prev->next = vtp->next;
 800086c:	6862      	ldr	r2, [r4, #4]
 800086e:	9b01      	ldr	r3, [sp, #4]
 8000870:	6013      	str	r3, [r2, #0]
    vtp->next->prev = vtp->prev;
 8000872:	9b01      	ldr	r3, [sp, #4]
 8000874:	605a      	str	r2, [r3, #4]
    vtp->func = NULL;
 8000876:	2200      	movs	r2, #0
 8000878:	60e2      	str	r2, [r4, #12]

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 800087a:	002a      	movs	r2, r5
 800087c:	321c      	adds	r2, #28
 800087e:	4293      	cmp	r3, r2
 8000880:	d004      	beq.n	800088c <chSchGoSleepTimeoutS+0x8c>
      vtp->next->delta += vtp->delta;
 8000882:	6899      	ldr	r1, [r3, #8]
 8000884:	68a2      	ldr	r2, [r4, #8]
 8000886:	468c      	mov	ip, r1
 8000888:	4462      	add	r2, ip
 800088a:	609a      	str	r2, [r3, #8]
  return currp->u.rdymsg;
 800088c:	69ab      	ldr	r3, [r5, #24]
 800088e:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
 8000890:	b007      	add	sp, #28
 8000892:	bdf0      	pop	{r4, r5, r6, r7, pc}
      delta -= p->delta;
 8000894:	689a      	ldr	r2, [r3, #8]
      p = p->next;
 8000896:	681b      	ldr	r3, [r3, #0]
      delta -= p->delta;
 8000898:	1a89      	subs	r1, r1, r2
 800089a:	689a      	ldr	r2, [r3, #8]
 800089c:	e7d0      	b.n	8000840 <chSchGoSleepTimeoutS+0x40>
    chSchGoSleepS(newstate);
 800089e:	f7ff ff97 	bl	80007d0 <chSchGoSleepS>
 80008a2:	4d1d      	ldr	r5, [pc, #116]	; (8000918 <chSchGoSleepTimeoutS+0x118>)
 80008a4:	e7f2      	b.n	800088c <chSchGoSleepTimeoutS+0x8c>
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
 80008a6:	2102      	movs	r1, #2
 80008a8:	e7b9      	b.n	800081e <chSchGoSleepTimeoutS+0x1e>
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 80008aa:	2780      	movs	r7, #128	; 0x80
      port_timer_set_alarm(ch.vtlist.lasttime + delta);
 80008ac:	1876      	adds	r6, r6, r1
 80008ae:	05ff      	lsls	r7, r7, #23
 80008b0:	637e      	str	r6, [r7, #52]	; 0x34
 80008b2:	e7c5      	b.n	8000840 <chSchGoSleepTimeoutS+0x40>
    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.next = vtp->next;
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
 80008b4:	002b      	movs	r3, r5
  vtp->func = NULL;
 80008b6:	2100      	movs	r1, #0
  ch.vtlist.next = vtp->next;
 80008b8:	6822      	ldr	r2, [r4, #0]
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
 80008ba:	331c      	adds	r3, #28
  ch.vtlist.next = vtp->next;
 80008bc:	61ea      	str	r2, [r5, #28]
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
 80008be:	6053      	str	r3, [r2, #4]
  vtp->func = NULL;
 80008c0:	60e1      	str	r1, [r4, #12]

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 80008c2:	429a      	cmp	r2, r3
 80008c4:	d024      	beq.n	8000910 <chSchGoSleepTimeoutS+0x110>

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.next->delta += vtp->delta;
 80008c6:	6891      	ldr	r1, [r2, #8]
 80008c8:	68a3      	ldr	r3, [r4, #8]
 80008ca:	468c      	mov	ip, r1
 80008cc:	4463      	add	r3, ip
 80008ce:	6093      	str	r3, [r2, #8]
  return (systime_t)STM32_ST_TIM->CNT;
 80008d0:	2280      	movs	r2, #128	; 0x80
 80008d2:	05d2      	lsls	r2, r2, #23
 80008d4:	6a51      	ldr	r1, [r2, #36]	; 0x24
/*  if (ch.vtlist.next->delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.lasttime;
 80008d6:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80008d8:	1a8a      	subs	r2, r1, r2

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= ch.vtlist.next->delta) {
 80008da:	4293      	cmp	r3, r2
 80008dc:	d9d6      	bls.n	800088c <chSchGoSleepTimeoutS+0x8c>
    return;
  }

  /* Distance from the next scheduled event and now.*/
  delta = ch.vtlist.next->delta - nowdelta;
 80008de:	1a9b      	subs	r3, r3, r2

  /* Making sure to not schedule an event closer than CH_CFG_ST_TIMEDELTA
     ticks from now.*/
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
 80008e0:	2b01      	cmp	r3, #1
 80008e2:	d904      	bls.n	80008ee <chSchGoSleepTimeoutS+0xee>
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 80008e4:	2280      	movs	r2, #128	; 0x80
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
  }

  port_timer_set_alarm(ch.vtlist.lasttime + nowdelta + delta);
 80008e6:	18cb      	adds	r3, r1, r3
 80008e8:	05d2      	lsls	r2, r2, #23
 80008ea:	6353      	str	r3, [r2, #52]	; 0x34
 80008ec:	e7ce      	b.n	800088c <chSchGoSleepTimeoutS+0x8c>
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
 80008ee:	2302      	movs	r3, #2
 80008f0:	e7f8      	b.n	80008e4 <chSchGoSleepTimeoutS+0xe4>
      vtp->next = (virtual_timer_t *)&ch.vtlist;
 80008f2:	9301      	str	r3, [sp, #4]
      vtp->prev = (virtual_timer_t *)&ch.vtlist;
 80008f4:	6063      	str	r3, [r4, #4]
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 80008f6:	2380      	movs	r3, #128	; 0x80
      ch.vtlist.lasttime = now;
 80008f8:	62aa      	str	r2, [r5, #40]	; 0x28
      vtp->delta = delay;
 80008fa:	60a1      	str	r1, [r4, #8]
      port_timer_start_alarm(ch.vtlist.lasttime + delay);
 80008fc:	1851      	adds	r1, r2, r1
  STM32_ST_TIM->SR     = 0;
 80008fe:	2200      	movs	r2, #0
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8000900:	05db      	lsls	r3, r3, #23
      ch.vtlist.next = vtp;
 8000902:	61ec      	str	r4, [r5, #28]
      ch.vtlist.prev = vtp;
 8000904:	622c      	str	r4, [r5, #32]
 8000906:	6359      	str	r1, [r3, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 8000908:	611a      	str	r2, [r3, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 800090a:	3202      	adds	r2, #2
 800090c:	60da      	str	r2, [r3, #12]
 800090e:	e7a5      	b.n	800085c <chSchGoSleepTimeoutS+0x5c>
  STM32_ST_TIM->DIER = 0;
 8000910:	2380      	movs	r3, #128	; 0x80
 8000912:	05db      	lsls	r3, r3, #23
 8000914:	60d9      	str	r1, [r3, #12]
 8000916:	e7b9      	b.n	800088c <chSchGoSleepTimeoutS+0x8c>
 8000918:	200005cc 	.word	0x200005cc
 800091c:	08000481 	.word	0x08000481

08000920 <chThdSleep.constprop.15>:
void chThdSleep(systime_t time) {
 8000920:	b510      	push	{r4, lr}
 8000922:	2320      	movs	r3, #32
 8000924:	f383 8811 	msr	BASEPRI, r3
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, time);
 8000928:	4903      	ldr	r1, [pc, #12]	; (8000938 <chThdSleep.constprop.15+0x18>)
 800092a:	2008      	movs	r0, #8
 800092c:	f7ff ff68 	bl	8000800 <chSchGoSleepTimeoutS>
 8000930:	2300      	movs	r3, #0
 8000932:	f383 8811 	msr	BASEPRI, r3
}
 8000936:	bd10      	pop	{r4, pc}
 8000938:	00001388 	.word	0x00001388
 800093c:	00000000 	.word	0x00000000

08000940 <Thread1>:

/*
 * Green LED blinker thread, times are in milliseconds.
 */
static THD_WORKING_AREA(waThread1, 128);
static THD_FUNCTION(Thread1, arg) {
 8000940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  (void)arg;
  chRegSetThreadName("blinker");
  while (true) {
    palClearPad(GPIOA, GPIOA_LED_GREEN);
 8000942:	2720      	movs	r7, #32
 8000944:	2620      	movs	r6, #32
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.current->name = name;
 8000946:	4b08      	ldr	r3, [pc, #32]	; (8000968 <Thread1+0x28>)
 8000948:	4a08      	ldr	r2, [pc, #32]	; (800096c <Thread1+0x2c>)
 800094a:	699b      	ldr	r3, [r3, #24]
 800094c:	4c08      	ldr	r4, [pc, #32]	; (8000970 <Thread1+0x30>)
 800094e:	619a      	str	r2, [r3, #24]
    palClearPad(GPIOA, GPIOA_ARD_D2);
 8000950:	2580      	movs	r5, #128	; 0x80
 8000952:	00ed      	lsls	r5, r5, #3
    palClearPad(GPIOA, GPIOA_LED_GREEN);
 8000954:	8366      	strh	r6, [r4, #26]
    palClearPad(GPIOA, GPIOA_ARD_D2);
 8000956:	8365      	strh	r5, [r4, #26]
    chThdSleepMilliseconds(500);
 8000958:	f7ff ffe2 	bl	8000920 <chThdSleep.constprop.15>
    palSetPad(GPIOA, GPIOA_LED_GREEN);
 800095c:	8327      	strh	r7, [r4, #24]
		palSetPad(GPIOA, GPIOA_ARD_D2);
 800095e:	8325      	strh	r5, [r4, #24]
    chThdSleepMilliseconds(500);
 8000960:	f7ff ffde 	bl	8000920 <chThdSleep.constprop.15>
 8000964:	e7f4      	b.n	8000950 <Thread1+0x10>
 8000966:	46c0      	nop			; (mov r8, r8)
 8000968:	200005cc 	.word	0x200005cc
 800096c:	080014ac 	.word	0x080014ac
 8000970:	40020000 	.word	0x40020000
	...

08000980 <chThdEnqueueTimeoutS>:
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {
 8000980:	b510      	push	{r4, lr}
  if (TIME_IMMEDIATE == timeout) {
 8000982:	2900      	cmp	r1, #0
 8000984:	d00a      	beq.n	800099c <chThdEnqueueTimeoutS+0x1c>
  queue_insert(currp, tqp);
 8000986:	4b07      	ldr	r3, [pc, #28]	; (80009a4 <chThdEnqueueTimeoutS+0x24>)
  tp->queue.prev             = tqp->prev;
 8000988:	6842      	ldr	r2, [r0, #4]
 800098a:	699b      	ldr	r3, [r3, #24]
  tp->queue.next             = (thread_t *)tqp;
 800098c:	6018      	str	r0, [r3, #0]
  tp->queue.prev             = tqp->prev;
 800098e:	605a      	str	r2, [r3, #4]
  tp->queue.prev->queue.next = tp;
 8000990:	6013      	str	r3, [r2, #0]
  tqp->prev                  = tp;
 8000992:	6043      	str	r3, [r0, #4]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8000994:	2004      	movs	r0, #4
 8000996:	f7ff ff33 	bl	8000800 <chSchGoSleepTimeoutS>
}
 800099a:	bd10      	pop	{r4, pc}
    return MSG_TIMEOUT;
 800099c:	2001      	movs	r0, #1
 800099e:	4240      	negs	r0, r0
 80009a0:	e7fb      	b.n	800099a <chThdEnqueueTimeoutS+0x1a>
 80009a2:	46c0      	nop			; (mov r8, r8)
 80009a4:	200005cc 	.word	0x200005cc
	...

080009b0 <oqWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, systime_t timeout) {
 80009b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009b2:	4656      	mov	r6, sl
 80009b4:	464d      	mov	r5, r9
 80009b6:	4644      	mov	r4, r8
 80009b8:	465f      	mov	r7, fp
 80009ba:	b4f0      	push	{r4, r5, r6, r7}
 80009bc:	000e      	movs	r6, r1
  systime_t deadline;
  qnotify_t nfy = oqp->q_notify;
 80009be:	69c1      	ldr	r1, [r0, #28]
                      size_t n, systime_t timeout) {
 80009c0:	b085      	sub	sp, #20
 80009c2:	0015      	movs	r5, r2
 80009c4:	9301      	str	r3, [sp, #4]
 80009c6:	001a      	movs	r2, r3
 80009c8:	0004      	movs	r4, r0
  qnotify_t nfy = oqp->q_notify;
 80009ca:	4689      	mov	r9, r1
 80009cc:	2320      	movs	r3, #32
 80009ce:	f383 8811 	msr	BASEPRI, r3
  return (systime_t)STM32_ST_TIM->CNT;
 80009d2:	2380      	movs	r3, #128	; 0x80
  osalSysLock();

  /* Time deadline for the whole operation, note the result is invalid
     when timeout is TIME_INFINITE or TIME_IMMEDIATE but in that case
     the deadline is not used.*/
  deadline = osalOsGetSystemTimeX() + timeout;
 80009d4:	4694      	mov	ip, r2
 80009d6:	05db      	lsls	r3, r3, #23
 80009d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  size_t w = 0;
 80009da:	2700      	movs	r7, #0
  deadline = osalOsGetSystemTimeX() + timeout;
 80009dc:	4463      	add	r3, ip
 80009de:	9303      	str	r3, [sp, #12]
 80009e0:	2300      	movs	r3, #0
 80009e2:	469a      	mov	sl, r3
 80009e4:	3320      	adds	r3, #32
 80009e6:	469b      	mov	fp, r3
    msg_t msg;

    while (oqIsFullI(oqp)) {
      /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
         deadline.*/
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 80009e8:	1e53      	subs	r3, r2, #1
 80009ea:	9302      	str	r3, [sp, #8]
    while (oqIsFullI(oqp)) {
 80009ec:	68a3      	ldr	r3, [r4, #8]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d020      	beq.n	8000a34 <oqWriteTimeout+0x84>
        return w;
      }
    }

    /* Putting the character into the queue.*/
    oqp->q_counter--;
 80009f2:	68a3      	ldr	r3, [r4, #8]
 80009f4:	3b01      	subs	r3, #1
 80009f6:	60a3      	str	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 80009f8:	6963      	ldr	r3, [r4, #20]
 80009fa:	1c5a      	adds	r2, r3, #1
 80009fc:	6162      	str	r2, [r4, #20]
 80009fe:	1c72      	adds	r2, r6, #1
 8000a00:	4690      	mov	r8, r2
 8000a02:	7832      	ldrb	r2, [r6, #0]
 8000a04:	701a      	strb	r2, [r3, #0]
    if (oqp->q_wrptr >= oqp->q_top) {
 8000a06:	6963      	ldr	r3, [r4, #20]
 8000a08:	6922      	ldr	r2, [r4, #16]
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d301      	bcc.n	8000a12 <oqWriteTimeout+0x62>
      oqp->q_wrptr = oqp->q_buffer;
 8000a0e:	68e3      	ldr	r3, [r4, #12]
 8000a10:	6163      	str	r3, [r4, #20]
    }

    /* Inform the low side that the queue has at least one character available.*/
    if (nfy != NULL) {
 8000a12:	464b      	mov	r3, r9
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <oqWriteTimeout+0x6c>
      nfy(oqp);
 8000a18:	0020      	movs	r0, r4
 8000a1a:	47c8      	blx	r9
 8000a1c:	f38a 8811 	msr	BASEPRI, sl

    /* Giving a preemption chance in a controlled point.*/
    osalSysUnlock();

    w++;
    if (--n == 0U) {
 8000a20:	3d01      	subs	r5, #1
    w++;
 8000a22:	3701      	adds	r7, #1
    if (--n == 0U) {
 8000a24:	2d00      	cmp	r5, #0
 8000a26:	d018      	beq.n	8000a5a <oqWriteTimeout+0xaa>
 8000a28:	f38b 8811 	msr	BASEPRI, fp
    while (oqIsFullI(oqp)) {
 8000a2c:	68a3      	ldr	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 8000a2e:	4646      	mov	r6, r8
    while (oqIsFullI(oqp)) {
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d1de      	bne.n	80009f2 <oqWriteTimeout+0x42>
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 8000a34:	9b02      	ldr	r3, [sp, #8]
 8000a36:	3303      	adds	r3, #3
 8000a38:	d817      	bhi.n	8000a6a <oqWriteTimeout+0xba>
 8000a3a:	2380      	movs	r3, #128	; 0x80
 8000a3c:	05db      	lsls	r3, r3, #23
 8000a3e:	6a59      	ldr	r1, [r3, #36]	; 0x24
        systime_t next_timeout = deadline - osalOsGetSystemTimeX();
 8000a40:	9b03      	ldr	r3, [sp, #12]
 8000a42:	1a59      	subs	r1, r3, r1
        if (next_timeout > timeout) {
 8000a44:	9b01      	ldr	r3, [sp, #4]
 8000a46:	428b      	cmp	r3, r1
 8000a48:	d304      	bcc.n	8000a54 <oqWriteTimeout+0xa4>
  return chThdEnqueueTimeoutS(tqp, time);
 8000a4a:	0020      	movs	r0, r4
 8000a4c:	f7ff ff98 	bl	8000980 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
 8000a50:	2800      	cmp	r0, #0
 8000a52:	d0cb      	beq.n	80009ec <oqWriteTimeout+0x3c>
 8000a54:	2300      	movs	r3, #0
 8000a56:	f383 8811 	msr	BASEPRI, r3
      return w;
    }

    osalSysLock();
  }
}
 8000a5a:	0038      	movs	r0, r7
 8000a5c:	b005      	add	sp, #20
 8000a5e:	bc3c      	pop	{r2, r3, r4, r5}
 8000a60:	4690      	mov	r8, r2
 8000a62:	4699      	mov	r9, r3
 8000a64:	46a2      	mov	sl, r4
 8000a66:	46ab      	mov	fp, r5
 8000a68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a6a:	9901      	ldr	r1, [sp, #4]
 8000a6c:	0020      	movs	r0, r4
 8000a6e:	f7ff ff87 	bl	8000980 <chThdEnqueueTimeoutS>
 8000a72:	e7ed      	b.n	8000a50 <oqWriteTimeout+0xa0>
	...

08000a80 <_writet>:
static size_t _writet(void *ip, const uint8_t *bp, size_t n, systime_t timeout) {
 8000a80:	b510      	push	{r4, lr}
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 8000a82:	3030      	adds	r0, #48	; 0x30
 8000a84:	f7ff ff94 	bl	80009b0 <oqWriteTimeout>
}
 8000a88:	bd10      	pop	{r4, pc}
 8000a8a:	46c0      	nop			; (mov r8, r8)
 8000a8c:	0000      	movs	r0, r0
	...

08000a90 <_write>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 8000a90:	2301      	movs	r3, #1
static size_t _write(void *ip, const uint8_t *bp, size_t n) {
 8000a92:	b510      	push	{r4, lr}
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 8000a94:	3030      	adds	r0, #48	; 0x30
 8000a96:	425b      	negs	r3, r3
 8000a98:	f7ff ff8a 	bl	80009b0 <oqWriteTimeout>
}
 8000a9c:	bd10      	pop	{r4, pc}
 8000a9e:	46c0      	nop			; (mov r8, r8)

08000aa0 <oqPutTimeout>:
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {
 8000aa0:	b570      	push	{r4, r5, r6, lr}
 8000aa2:	2320      	movs	r3, #32
 8000aa4:	0004      	movs	r4, r0
 8000aa6:	000e      	movs	r6, r1
 8000aa8:	0015      	movs	r5, r2
 8000aaa:	f383 8811 	msr	BASEPRI, r3
 8000aae:	e005      	b.n	8000abc <oqPutTimeout+0x1c>
 8000ab0:	0029      	movs	r1, r5
 8000ab2:	0020      	movs	r0, r4
 8000ab4:	f7ff ff64 	bl	8000980 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
 8000ab8:	2800      	cmp	r0, #0
 8000aba:	db19      	blt.n	8000af0 <oqPutTimeout+0x50>
  while (oqIsFullI(oqp)) {
 8000abc:	68a3      	ldr	r3, [r4, #8]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d0f6      	beq.n	8000ab0 <oqPutTimeout+0x10>
  oqp->q_counter--;
 8000ac2:	68a3      	ldr	r3, [r4, #8]
 8000ac4:	3b01      	subs	r3, #1
 8000ac6:	60a3      	str	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 8000ac8:	6963      	ldr	r3, [r4, #20]
 8000aca:	1c5a      	adds	r2, r3, #1
 8000acc:	6162      	str	r2, [r4, #20]
 8000ace:	701e      	strb	r6, [r3, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 8000ad0:	6963      	ldr	r3, [r4, #20]
 8000ad2:	6922      	ldr	r2, [r4, #16]
 8000ad4:	4293      	cmp	r3, r2
 8000ad6:	d301      	bcc.n	8000adc <oqPutTimeout+0x3c>
    oqp->q_wrptr = oqp->q_buffer;
 8000ad8:	68e3      	ldr	r3, [r4, #12]
 8000ada:	6163      	str	r3, [r4, #20]
  if (oqp->q_notify != NULL) {
 8000adc:	69e3      	ldr	r3, [r4, #28]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <oqPutTimeout+0x46>
    oqp->q_notify(oqp);
 8000ae2:	0020      	movs	r0, r4
 8000ae4:	4798      	blx	r3
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	f383 8811 	msr	BASEPRI, r3
 8000aec:	2000      	movs	r0, #0
}
 8000aee:	bd70      	pop	{r4, r5, r6, pc}
 8000af0:	2300      	movs	r3, #0
 8000af2:	f383 8811 	msr	BASEPRI, r3
 8000af6:	e7fa      	b.n	8000aee <oqPutTimeout+0x4e>
	...

08000b00 <_putt>:
static msg_t _putt(void *ip, uint8_t b, systime_t timeout) {
 8000b00:	b510      	push	{r4, lr}
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 8000b02:	3030      	adds	r0, #48	; 0x30
 8000b04:	f7ff ffcc 	bl	8000aa0 <oqPutTimeout>
}
 8000b08:	bd10      	pop	{r4, pc}
 8000b0a:	46c0      	nop			; (mov r8, r8)
 8000b0c:	0000      	movs	r0, r0
	...

08000b10 <_put>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 8000b10:	2201      	movs	r2, #1
static msg_t _put(void *ip, uint8_t b) {
 8000b12:	b510      	push	{r4, lr}
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 8000b14:	3030      	adds	r0, #48	; 0x30
 8000b16:	4252      	negs	r2, r2
 8000b18:	f7ff ffc2 	bl	8000aa0 <oqPutTimeout>
}
 8000b1c:	bd10      	pop	{r4, pc}
 8000b1e:	46c0      	nop			; (mov r8, r8)

08000b20 <iqReadTimeout>:
                     size_t n, systime_t timeout) {
 8000b20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b22:	4656      	mov	r6, sl
 8000b24:	464d      	mov	r5, r9
 8000b26:	4644      	mov	r4, r8
 8000b28:	465f      	mov	r7, fp
 8000b2a:	b4f0      	push	{r4, r5, r6, r7}
 8000b2c:	000e      	movs	r6, r1
  qnotify_t nfy = iqp->q_notify;
 8000b2e:	69c1      	ldr	r1, [r0, #28]
                     size_t n, systime_t timeout) {
 8000b30:	b085      	sub	sp, #20
 8000b32:	0015      	movs	r5, r2
 8000b34:	9301      	str	r3, [sp, #4]
 8000b36:	001a      	movs	r2, r3
 8000b38:	0004      	movs	r4, r0
  qnotify_t nfy = iqp->q_notify;
 8000b3a:	4689      	mov	r9, r1
 8000b3c:	2320      	movs	r3, #32
 8000b3e:	f383 8811 	msr	BASEPRI, r3
 8000b42:	2380      	movs	r3, #128	; 0x80
  deadline = osalOsGetSystemTimeX() + timeout;
 8000b44:	4694      	mov	ip, r2
 8000b46:	05db      	lsls	r3, r3, #23
 8000b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  size_t r = 0;
 8000b4a:	2700      	movs	r7, #0
  deadline = osalOsGetSystemTimeX() + timeout;
 8000b4c:	4463      	add	r3, ip
 8000b4e:	9303      	str	r3, [sp, #12]
 8000b50:	2300      	movs	r3, #0
 8000b52:	469a      	mov	sl, r3
 8000b54:	3320      	adds	r3, #32
 8000b56:	469b      	mov	fp, r3
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 8000b58:	1e53      	subs	r3, r2, #1
 8000b5a:	9302      	str	r3, [sp, #8]
    while (iqIsEmptyI(iqp)) {
 8000b5c:	68a3      	ldr	r3, [r4, #8]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d020      	beq.n	8000ba4 <iqReadTimeout+0x84>
    iqp->q_counter--;
 8000b62:	68a3      	ldr	r3, [r4, #8]
 8000b64:	3b01      	subs	r3, #1
 8000b66:	60a3      	str	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
 8000b68:	1c73      	adds	r3, r6, #1
 8000b6a:	4698      	mov	r8, r3
 8000b6c:	69a3      	ldr	r3, [r4, #24]
 8000b6e:	1c5a      	adds	r2, r3, #1
 8000b70:	61a2      	str	r2, [r4, #24]
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	7033      	strb	r3, [r6, #0]
    if (iqp->q_rdptr >= iqp->q_top) {
 8000b76:	69a3      	ldr	r3, [r4, #24]
 8000b78:	6922      	ldr	r2, [r4, #16]
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d301      	bcc.n	8000b82 <iqReadTimeout+0x62>
      iqp->q_rdptr = iqp->q_buffer;
 8000b7e:	68e3      	ldr	r3, [r4, #12]
 8000b80:	61a3      	str	r3, [r4, #24]
    if (nfy != NULL) {
 8000b82:	464b      	mov	r3, r9
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <iqReadTimeout+0x6c>
      nfy(iqp);
 8000b88:	0020      	movs	r0, r4
 8000b8a:	47c8      	blx	r9
 8000b8c:	f38a 8811 	msr	BASEPRI, sl
    if (--n == 0U) {
 8000b90:	3d01      	subs	r5, #1
    r++;
 8000b92:	3701      	adds	r7, #1
    if (--n == 0U) {
 8000b94:	2d00      	cmp	r5, #0
 8000b96:	d018      	beq.n	8000bca <iqReadTimeout+0xaa>
 8000b98:	f38b 8811 	msr	BASEPRI, fp
    while (iqIsEmptyI(iqp)) {
 8000b9c:	68a3      	ldr	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
 8000b9e:	4646      	mov	r6, r8
    while (iqIsEmptyI(iqp)) {
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d1de      	bne.n	8000b62 <iqReadTimeout+0x42>
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 8000ba4:	9b02      	ldr	r3, [sp, #8]
 8000ba6:	3303      	adds	r3, #3
 8000ba8:	d817      	bhi.n	8000bda <iqReadTimeout+0xba>
 8000baa:	2380      	movs	r3, #128	; 0x80
 8000bac:	05db      	lsls	r3, r3, #23
 8000bae:	6a59      	ldr	r1, [r3, #36]	; 0x24
        systime_t next_timeout = deadline - osalOsGetSystemTimeX();
 8000bb0:	9b03      	ldr	r3, [sp, #12]
 8000bb2:	1a59      	subs	r1, r3, r1
        if (next_timeout > timeout) {
 8000bb4:	9b01      	ldr	r3, [sp, #4]
 8000bb6:	428b      	cmp	r3, r1
 8000bb8:	d304      	bcc.n	8000bc4 <iqReadTimeout+0xa4>
 8000bba:	0020      	movs	r0, r4
 8000bbc:	f7ff fee0 	bl	8000980 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
 8000bc0:	2800      	cmp	r0, #0
 8000bc2:	d0cb      	beq.n	8000b5c <iqReadTimeout+0x3c>
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	f383 8811 	msr	BASEPRI, r3
}
 8000bca:	0038      	movs	r0, r7
 8000bcc:	b005      	add	sp, #20
 8000bce:	bc3c      	pop	{r2, r3, r4, r5}
 8000bd0:	4690      	mov	r8, r2
 8000bd2:	4699      	mov	r9, r3
 8000bd4:	46a2      	mov	sl, r4
 8000bd6:	46ab      	mov	fp, r5
 8000bd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bda:	9901      	ldr	r1, [sp, #4]
 8000bdc:	0020      	movs	r0, r4
 8000bde:	f7ff fecf 	bl	8000980 <chThdEnqueueTimeoutS>
 8000be2:	e7ed      	b.n	8000bc0 <iqReadTimeout+0xa0>
	...

08000bf0 <_readt>:
static size_t _readt(void *ip, uint8_t *bp, size_t n, systime_t timeout) {
 8000bf0:	b510      	push	{r4, lr}
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 8000bf2:	300c      	adds	r0, #12
 8000bf4:	f7ff ff94 	bl	8000b20 <iqReadTimeout>
}
 8000bf8:	bd10      	pop	{r4, pc}
 8000bfa:	46c0      	nop			; (mov r8, r8)
 8000bfc:	0000      	movs	r0, r0
	...

08000c00 <_read>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 8000c00:	2301      	movs	r3, #1
static size_t _read(void *ip, uint8_t *bp, size_t n) {
 8000c02:	b510      	push	{r4, lr}
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 8000c04:	300c      	adds	r0, #12
 8000c06:	425b      	negs	r3, r3
 8000c08:	f7ff ff8a 	bl	8000b20 <iqReadTimeout>
}
 8000c0c:	bd10      	pop	{r4, pc}
 8000c0e:	46c0      	nop			; (mov r8, r8)

08000c10 <iqGetTimeout>:
msg_t iqGetTimeout(input_queue_t *iqp, systime_t timeout) {
 8000c10:	b570      	push	{r4, r5, r6, lr}
 8000c12:	2320      	movs	r3, #32
 8000c14:	0004      	movs	r4, r0
 8000c16:	000d      	movs	r5, r1
 8000c18:	f383 8811 	msr	BASEPRI, r3
 8000c1c:	e005      	b.n	8000c2a <iqGetTimeout+0x1a>
 8000c1e:	0029      	movs	r1, r5
 8000c20:	0020      	movs	r0, r4
 8000c22:	f7ff fead 	bl	8000980 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
 8000c26:	2800      	cmp	r0, #0
 8000c28:	db18      	blt.n	8000c5c <iqGetTimeout+0x4c>
  while (iqIsEmptyI(iqp)) {
 8000c2a:	68a3      	ldr	r3, [r4, #8]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d0f6      	beq.n	8000c1e <iqGetTimeout+0xe>
  iqp->q_counter--;
 8000c30:	68a3      	ldr	r3, [r4, #8]
  b = *iqp->q_rdptr++;
 8000c32:	69a2      	ldr	r2, [r4, #24]
  iqp->q_counter--;
 8000c34:	3b01      	subs	r3, #1
 8000c36:	60a3      	str	r3, [r4, #8]
  b = *iqp->q_rdptr++;
 8000c38:	1c53      	adds	r3, r2, #1
 8000c3a:	61a3      	str	r3, [r4, #24]
 8000c3c:	7815      	ldrb	r5, [r2, #0]
  if (iqp->q_rdptr >= iqp->q_top) {
 8000c3e:	6922      	ldr	r2, [r4, #16]
 8000c40:	4293      	cmp	r3, r2
 8000c42:	d301      	bcc.n	8000c48 <iqGetTimeout+0x38>
    iqp->q_rdptr = iqp->q_buffer;
 8000c44:	68e3      	ldr	r3, [r4, #12]
 8000c46:	61a3      	str	r3, [r4, #24]
  if (iqp->q_notify != NULL) {
 8000c48:	69e3      	ldr	r3, [r4, #28]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <iqGetTimeout+0x42>
    iqp->q_notify(iqp);
 8000c4e:	0020      	movs	r0, r4
 8000c50:	4798      	blx	r3
 8000c52:	2300      	movs	r3, #0
 8000c54:	f383 8811 	msr	BASEPRI, r3
  return (msg_t)b;
 8000c58:	0028      	movs	r0, r5
}
 8000c5a:	bd70      	pop	{r4, r5, r6, pc}
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	f383 8811 	msr	BASEPRI, r3
 8000c62:	e7fa      	b.n	8000c5a <iqGetTimeout+0x4a>
	...

08000c70 <_gett>:
static msg_t _gett(void *ip, systime_t timeout) {
 8000c70:	b510      	push	{r4, lr}
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 8000c72:	300c      	adds	r0, #12
 8000c74:	f7ff ffcc 	bl	8000c10 <iqGetTimeout>
}
 8000c78:	bd10      	pop	{r4, pc}
 8000c7a:	46c0      	nop			; (mov r8, r8)
 8000c7c:	0000      	movs	r0, r0
	...

08000c80 <_get>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 8000c80:	2101      	movs	r1, #1
static msg_t _get(void *ip) {
 8000c82:	b510      	push	{r4, lr}
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 8000c84:	300c      	adds	r0, #12
 8000c86:	4249      	negs	r1, r1
 8000c88:	f7ff ffc2 	bl	8000c10 <iqGetTimeout>
}
 8000c8c:	bd10      	pop	{r4, pc}
 8000c8e:	46c0      	nop			; (mov r8, r8)

08000c90 <main>:
void hal_lld_init(void) {

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c) and AHB2 is not
     present in STM32F410. */
  rccResetAHB1(~0);
 8000c90:	4bf8      	ldr	r3, [pc, #992]	; (8001074 <main+0x3e4>)
 8000c92:	2101      	movs	r1, #1
 8000c94:	691a      	ldr	r2, [r3, #16]
}

/*
 * Application entry point.
 */
int main(void) {
 8000c96:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c98:	2200      	movs	r2, #0
 8000c9a:	4644      	mov	r4, r8
 8000c9c:	465f      	mov	r7, fp
 8000c9e:	4656      	mov	r6, sl
 8000ca0:	464d      	mov	r5, r9
 8000ca2:	4249      	negs	r1, r1
 8000ca4:	b4f0      	push	{r4, r5, r6, r7}
 8000ca6:	6119      	str	r1, [r3, #16]
 8000ca8:	611a      	str	r2, [r3, #16]
#if !defined(STM32F410xx)
  rccResetAHB2(~0);
 8000caa:	6958      	ldr	r0, [r3, #20]
 8000cac:	6159      	str	r1, [r3, #20]
 8000cae:	615a      	str	r2, [r3, #20]
#endif
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 8000cb0:	6a18      	ldr	r0, [r3, #32]
 8000cb2:	4cf1      	ldr	r4, [pc, #964]	; (8001078 <main+0x3e8>)
 8000cb4:	b087      	sub	sp, #28
 8000cb6:	4320      	orrs	r0, r4
 8000cb8:	6218      	str	r0, [r3, #32]
 8000cba:	621a      	str	r2, [r3, #32]
  rccResetAPB2(~0);
 8000cbc:	6a58      	ldr	r0, [r3, #36]	; 0x24

  /* PWR clock enabled.*/
  rccEnablePWRInterface(FALSE);
 8000cbe:	2080      	movs	r0, #128	; 0x80
  PWR->CR |= PWR_CR_DBP;
 8000cc0:	2480      	movs	r4, #128	; 0x80
  rccResetAPB2(~0);
 8000cc2:	6259      	str	r1, [r3, #36]	; 0x24
 8000cc4:	625a      	str	r2, [r3, #36]	; 0x24
  rccEnablePWRInterface(FALSE);
 8000cc6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8000cc8:	0540      	lsls	r0, r0, #21
 8000cca:	4301      	orrs	r1, r0
  PWR->CR |= PWR_CR_DBP;
 8000ccc:	48eb      	ldr	r0, [pc, #940]	; (800107c <main+0x3ec>)
  rccEnablePWRInterface(FALSE);
 8000cce:	6419      	str	r1, [r3, #64]	; 0x40
  PWR->CR |= PWR_CR_DBP;
 8000cd0:	6801      	ldr	r1, [r0, #0]
 8000cd2:	0064      	lsls	r4, r4, #1
 8000cd4:	4321      	orrs	r1, r4
 8000cd6:	6001      	str	r1, [r0, #0]
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
 8000cd8:	21c0      	movs	r1, #192	; 0xc0
 8000cda:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8000cdc:	0089      	lsls	r1, r1, #2
 8000cde:	4001      	ands	r1, r0
 8000ce0:	2080      	movs	r0, #128	; 0x80
 8000ce2:	0080      	lsls	r0, r0, #2
 8000ce4:	4281      	cmp	r1, r0
 8000ce6:	d003      	beq.n	8000cf0 <main+0x60>
    RCC->BDCR = RCC_BDCR_BDRST;
 8000ce8:	2180      	movs	r1, #128	; 0x80
 8000cea:	0249      	lsls	r1, r1, #9
 8000cec:	6719      	str	r1, [r3, #112]	; 0x70
    RCC->BDCR = 0;
 8000cee:	671a      	str	r2, [r3, #112]	; 0x70
  PWR->CSR &= ~PWR_CSR_BRE;
 8000cf0:	4ae2      	ldr	r2, [pc, #904]	; (800107c <main+0x3ec>)
 8000cf2:	4be3      	ldr	r3, [pc, #908]	; (8001080 <main+0x3f0>)
 8000cf4:	6851      	ldr	r1, [r2, #4]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8000cf6:	2400      	movs	r4, #0
 8000cf8:	400b      	ands	r3, r1
 8000cfa:	6053      	str	r3, [r2, #4]
#elif defined(STM32F0XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F3XX) || defined(STM32F37X)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F2XX) || defined(STM32F4XX) || defined(STM32F7XX)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
 8000cfc:	4bdd      	ldr	r3, [pc, #884]	; (8001074 <main+0x3e4>)
  gpiop->AFRH    = config->afrh;
 8000cfe:	2599      	movs	r5, #153	; 0x99
  RCC->AHB1ENR   |= AHB1_EN_MASK;
 8000d00:	4698      	mov	r8, r3
 8000d02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d04:	23ff      	movs	r3, #255	; 0xff
 8000d06:	4641      	mov	r1, r8
 8000d08:	431a      	orrs	r2, r3
 8000d0a:	630a      	str	r2, [r1, #48]	; 0x30
  RCC->AHB1LPENR |= AHB1_LPEN_MASK;
 8000d0c:	6d0a      	ldr	r2, [r1, #80]	; 0x50
  gpiop->PUPDR   = config->pupdr;
 8000d0e:	48dd      	ldr	r0, [pc, #884]	; (8001084 <main+0x3f4>)
  RCC->AHB1LPENR |= AHB1_LPEN_MASK;
 8000d10:	4313      	orrs	r3, r2
  gpiop->OSPEEDR = config->ospeedr;
 8000d12:	2251      	movs	r2, #81	; 0x51
  RCC->AHB1LPENR |= AHB1_LPEN_MASK;
 8000d14:	650b      	str	r3, [r1, #80]	; 0x50
  gpiop->OTYPER  = config->otyper;
 8000d16:	4bdc      	ldr	r3, [pc, #880]	; (8001088 <main+0x3f8>)
  gpiop->OSPEEDR = config->ospeedr;
 8000d18:	4252      	negs	r2, r2
  gpiop->OTYPER  = config->otyper;
 8000d1a:	605c      	str	r4, [r3, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8000d1c:	609a      	str	r2, [r3, #8]
  gpiop->PUPDR   = config->pupdr;
 8000d1e:	4adb      	ldr	r2, [pc, #876]	; (800108c <main+0x3fc>)
  gpiop->ODR     = config->odr;
 8000d20:	49db      	ldr	r1, [pc, #876]	; (8001090 <main+0x400>)
  gpiop->PUPDR   = config->pupdr;
 8000d22:	60da      	str	r2, [r3, #12]
  gpiop->ODR     = config->odr;
 8000d24:	4adb      	ldr	r2, [pc, #876]	; (8001094 <main+0x404>)
  sdp->state = SD_STOP;
 8000d26:	2701      	movs	r7, #1
 8000d28:	615a      	str	r2, [r3, #20]
  gpiop->AFRL    = config->afrl;
 8000d2a:	4adb      	ldr	r2, [pc, #876]	; (8001098 <main+0x408>)
 8000d2c:	621a      	str	r2, [r3, #32]
  gpiop->AFRH    = config->afrh;
 8000d2e:	22aa      	movs	r2, #170	; 0xaa
 8000d30:	0312      	lsls	r2, r2, #12
 8000d32:	625a      	str	r2, [r3, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8000d34:	4ad9      	ldr	r2, [pc, #868]	; (800109c <main+0x40c>)
 8000d36:	601a      	str	r2, [r3, #0]
  gpiop->OSPEEDR = config->ospeedr;
 8000d38:	2301      	movs	r3, #1
  gpiop->OTYPER  = config->otyper;
 8000d3a:	4ad9      	ldr	r2, [pc, #868]	; (80010a0 <main+0x410>)
  gpiop->OSPEEDR = config->ospeedr;
 8000d3c:	425b      	negs	r3, r3
  gpiop->OTYPER  = config->otyper;
 8000d3e:	6054      	str	r4, [r2, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8000d40:	6093      	str	r3, [r2, #8]
  gpiop->PUPDR   = config->pupdr;
 8000d42:	60d0      	str	r0, [r2, #12]
  gpiop->ODR     = config->odr;
 8000d44:	6151      	str	r1, [r2, #20]
  gpiop->AFRL    = config->afrl;
 8000d46:	6214      	str	r4, [r2, #32]
  gpiop->AFRH    = config->afrh;
 8000d48:	6255      	str	r5, [r2, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8000d4a:	4dd6      	ldr	r5, [pc, #856]	; (80010a4 <main+0x414>)
 8000d4c:	6015      	str	r5, [r2, #0]
  gpiop->OTYPER  = config->otyper;
 8000d4e:	4ad6      	ldr	r2, [pc, #856]	; (80010a8 <main+0x418>)
  gpiop->PUPDR   = config->pupdr;
 8000d50:	4dd6      	ldr	r5, [pc, #856]	; (80010ac <main+0x41c>)
  gpiop->OTYPER  = config->otyper;
 8000d52:	6054      	str	r4, [r2, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8000d54:	6093      	str	r3, [r2, #8]
  gpiop->PUPDR   = config->pupdr;
 8000d56:	60d5      	str	r5, [r2, #12]
  gpiop->ODR     = config->odr;
 8000d58:	6151      	str	r1, [r2, #20]
  gpiop->AFRL    = config->afrl;
 8000d5a:	6214      	str	r4, [r2, #32]
  gpiop->AFRH    = config->afrh;
 8000d5c:	6254      	str	r4, [r2, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8000d5e:	6014      	str	r4, [r2, #0]
  gpiop->OTYPER  = config->otyper;
 8000d60:	4ad3      	ldr	r2, [pc, #844]	; (80010b0 <main+0x420>)
 8000d62:	6054      	str	r4, [r2, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8000d64:	6093      	str	r3, [r2, #8]
  gpiop->PUPDR   = config->pupdr;
 8000d66:	60d0      	str	r0, [r2, #12]
  gpiop->ODR     = config->odr;
 8000d68:	6151      	str	r1, [r2, #20]
  gpiop->AFRL    = config->afrl;
 8000d6a:	6214      	str	r4, [r2, #32]
  gpiop->AFRH    = config->afrh;
 8000d6c:	6254      	str	r4, [r2, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8000d6e:	6014      	str	r4, [r2, #0]
  gpiop->OTYPER  = config->otyper;
 8000d70:	4ad0      	ldr	r2, [pc, #832]	; (80010b4 <main+0x424>)
  sdp->vmt = &vmt;
 8000d72:	4ed1      	ldr	r6, [pc, #836]	; (80010b8 <main+0x428>)
 8000d74:	6054      	str	r4, [r2, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8000d76:	6093      	str	r3, [r2, #8]
  gpiop->PUPDR   = config->pupdr;
 8000d78:	60d0      	str	r0, [r2, #12]
  gpiop->ODR     = config->odr;
 8000d7a:	6151      	str	r1, [r2, #20]
  gpiop->AFRL    = config->afrl;
 8000d7c:	6214      	str	r4, [r2, #32]
  gpiop->AFRH    = config->afrh;
 8000d7e:	6254      	str	r4, [r2, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8000d80:	6014      	str	r4, [r2, #0]
  gpiop->OTYPER  = config->otyper;
 8000d82:	4ace      	ldr	r2, [pc, #824]	; (80010bc <main+0x42c>)
 8000d84:	6054      	str	r4, [r2, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8000d86:	6093      	str	r3, [r2, #8]
  gpiop->PUPDR   = config->pupdr;
 8000d88:	60d0      	str	r0, [r2, #12]
  gpiop->ODR     = config->odr;
 8000d8a:	6151      	str	r1, [r2, #20]
  gpiop->AFRL    = config->afrl;
 8000d8c:	6214      	str	r4, [r2, #32]
  gpiop->AFRH    = config->afrh;
 8000d8e:	6254      	str	r4, [r2, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8000d90:	6014      	str	r4, [r2, #0]
  gpiop->OTYPER  = config->otyper;
 8000d92:	4acb      	ldr	r2, [pc, #812]	; (80010c0 <main+0x430>)
 8000d94:	6054      	str	r4, [r2, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8000d96:	6093      	str	r3, [r2, #8]
  gpiop->PUPDR   = config->pupdr;
 8000d98:	60d0      	str	r0, [r2, #12]
  gpiop->ODR     = config->odr;
 8000d9a:	6151      	str	r1, [r2, #20]
  gpiop->PUPDR   = config->pupdr;
 8000d9c:	48c9      	ldr	r0, [pc, #804]	; (80010c4 <main+0x434>)
  gpiop->AFRL    = config->afrl;
 8000d9e:	6214      	str	r4, [r2, #32]
  gpiop->AFRH    = config->afrh;
 8000da0:	6254      	str	r4, [r2, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8000da2:	6014      	str	r4, [r2, #0]
  gpiop->OTYPER  = config->otyper;
 8000da4:	4ac8      	ldr	r2, [pc, #800]	; (80010c8 <main+0x438>)
 8000da6:	6054      	str	r4, [r2, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8000da8:	6093      	str	r3, [r2, #8]
  gpiop->PUPDR   = config->pupdr;
 8000daa:	60d0      	str	r0, [r2, #12]
  gpiop->ODR     = config->odr;
 8000dac:	6151      	str	r1, [r2, #20]
  gpiop->AFRL    = config->afrl;
 8000dae:	6214      	str	r4, [r2, #32]
  gpiop->AFRH    = config->afrh;
 8000db0:	6254      	str	r4, [r2, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8000db2:	6014      	str	r4, [r2, #0]
 8000db4:	0032      	movs	r2, r6
 8000db6:	49c5      	ldr	r1, [pc, #788]	; (80010cc <main+0x43c>)
 8000db8:	c202      	stmia	r2!, {r1}
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->next = (event_listener_t *)esp;
 8000dba:	6072      	str	r2, [r6, #4]
  tqp->next = (thread_t *)tqp;
 8000dbc:	0032      	movs	r2, r6
 8000dbe:	320c      	adds	r2, #12
 8000dc0:	60f2      	str	r2, [r6, #12]
  tqp->prev = (thread_t *)tqp;
 8000dc2:	6132      	str	r2, [r6, #16]
  iqp->q_buffer  = bp;
 8000dc4:	0032      	movs	r2, r6
 8000dc6:	3254      	adds	r2, #84	; 0x54
 8000dc8:	61b2      	str	r2, [r6, #24]
  iqp->q_rdptr   = bp;
 8000dca:	6272      	str	r2, [r6, #36]	; 0x24
  iqp->q_wrptr   = bp;
 8000dcc:	6232      	str	r2, [r6, #32]
  iqp->q_top     = bp + size;
 8000dce:	0032      	movs	r2, r6
  tqp->next = (thread_t *)tqp;
 8000dd0:	0031      	movs	r1, r6
 8000dd2:	3264      	adds	r2, #100	; 0x64
 8000dd4:	61f2      	str	r2, [r6, #28]
  oqp->q_buffer  = bp;
 8000dd6:	63f2      	str	r2, [r6, #60]	; 0x3c
  oqp->q_rdptr   = bp;
 8000dd8:	64b2      	str	r2, [r6, #72]	; 0x48
  oqp->q_wrptr   = bp;
 8000dda:	6472      	str	r2, [r6, #68]	; 0x44
  oqp->q_top     = bp + size;
 8000ddc:	0032      	movs	r2, r6
 8000dde:	3130      	adds	r1, #48	; 0x30
 8000de0:	6331      	str	r1, [r6, #48]	; 0x30
  tqp->prev = (thread_t *)tqp;
 8000de2:	6371      	str	r1, [r6, #52]	; 0x34
  oqp->q_counter = size;
 8000de4:	2110      	movs	r1, #16
  oqp->q_top     = bp + size;
 8000de6:	3274      	adds	r2, #116	; 0x74
 8000de8:	6432      	str	r2, [r6, #64]	; 0x40
  oqp->q_notify  = onfy;
 8000dea:	4ab9      	ldr	r2, [pc, #740]	; (80010d0 <main+0x440>)
  iqp->q_counter = 0;
 8000dec:	6174      	str	r4, [r6, #20]
  oqp->q_notify  = onfy;
 8000dee:	64f2      	str	r2, [r6, #76]	; 0x4c
  SD1.usart = USART1;
#endif

#if STM32_SERIAL_USE_USART2
  sdObjectInit(&SD2, NULL, notify2);
  SD2.usart = USART2;
 8000df0:	4ab8      	ldr	r2, [pc, #736]	; (80010d4 <main+0x444>)
  oqp->q_counter = size;
 8000df2:	63b1      	str	r1, [r6, #56]	; 0x38
 8000df4:	6772      	str	r2, [r6, #116]	; 0x74

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 8000df6:	4642      	mov	r2, r8
 8000df8:	468b      	mov	fp, r1
 8000dfa:	4641      	mov	r1, r8
 8000dfc:	6c12      	ldr	r2, [r2, #64]	; 0x40
  sdp->state = SD_STOP;
 8000dfe:	7237      	strb	r7, [r6, #8]
 8000e00:	433a      	orrs	r2, r7
  iqp->q_notify  = infy;
 8000e02:	62b4      	str	r4, [r6, #40]	; 0x28
  iqp->q_link    = link;
 8000e04:	62f6      	str	r6, [r6, #44]	; 0x2c
  oqp->q_link    = link;
 8000e06:	6536      	str	r6, [r6, #80]	; 0x50
 8000e08:	640a      	str	r2, [r1, #64]	; 0x40

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 8000e0a:	49b3      	ldr	r1, [pc, #716]	; (80010d8 <main+0x448>)
 8000e0c:	688a      	ldr	r2, [r1, #8]
 8000e0e:	433a      	orrs	r2, r7
 8000e10:	608a      	str	r2, [r1, #8]

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8000e12:	2280      	movs	r2, #128	; 0x80
 8000e14:	49b1      	ldr	r1, [pc, #708]	; (80010dc <main+0x44c>)
 8000e16:	05d2      	lsls	r2, r2, #23
 8000e18:	6291      	str	r1, [r2, #40]	; 0x28
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 8000e1a:	62d3      	str	r3, [r2, #44]	; 0x2c
  STM32_ST_TIM->CCMR1  = 0;
 8000e1c:	6194      	str	r4, [r2, #24]
  STM32_ST_TIM->CCR[0] = 0;
 8000e1e:	6354      	str	r4, [r2, #52]	; 0x34
  STM32_ST_TIM->DIER   = 0;
 8000e20:	60d4      	str	r4, [r2, #12]
  STM32_ST_TIM->CR2    = 0;
 8000e22:	6054      	str	r4, [r2, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 8000e24:	6157      	str	r7, [r2, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 8000e26:	6017      	str	r7, [r2, #0]

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8000e28:	4aad      	ldr	r2, [pc, #692]	; (80010e0 <main+0x450>)
  tqp->next = (thread_t *)tqp;
 8000e2a:	4dae      	ldr	r5, [pc, #696]	; (80010e4 <main+0x454>)
 8000e2c:	4691      	mov	r9, r2
 8000e2e:	2280      	movs	r2, #128	; 0x80
 8000e30:	4692      	mov	sl, r2
 8000e32:	22c7      	movs	r2, #199	; 0xc7
 8000e34:	4649      	mov	r1, r9
 8000e36:	4650      	mov	r0, sl
 8000e38:	0092      	lsls	r2, r2, #2
 8000e3a:	5488      	strb	r0, [r1, r2]
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8000e3c:	2280      	movs	r2, #128	; 0x80
 8000e3e:	21c0      	movs	r1, #192	; 0xc0
 8000e40:	4648      	mov	r0, r9
 8000e42:	0049      	lsls	r1, r1, #1
 8000e44:	0552      	lsls	r2, r2, #21
 8000e46:	5042      	str	r2, [r0, r1]
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8000e48:	6002      	str	r2, [r0, #0]
  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
 8000e4a:	002a      	movs	r2, r5
 8000e4c:	321c      	adds	r2, #28
 8000e4e:	61ea      	str	r2, [r5, #28]
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
 8000e50:	622a      	str	r2, [r5, #32]
  ch.vtlist.delta = (systime_t)-1;
 8000e52:	626b      	str	r3, [r5, #36]	; 0x24
  tmp->cumulative = (rttime_t)0;
 8000e54:	2200      	movs	r2, #0
  tmp->best       = (rtcnt_t)-1;
 8000e56:	9300      	str	r3, [sp, #0]
  tmp->cumulative = (rttime_t)0;
 8000e58:	2300      	movs	r3, #0
  chTMStartMeasurementX(&tm);
 8000e5a:	4668      	mov	r0, sp
 8000e5c:	602d      	str	r5, [r5, #0]
  tqp->prev = (thread_t *)tqp;
 8000e5e:	606d      	str	r5, [r5, #4]
  tmp->cumulative = (rttime_t)0;
 8000e60:	9204      	str	r2, [sp, #16]
 8000e62:	9305      	str	r3, [sp, #20]
  ch.rlist.prio = NOPRIO;
 8000e64:	60ac      	str	r4, [r5, #8]
  ch.rlist.newer = (thread_t *)&ch.rlist;
 8000e66:	612d      	str	r5, [r5, #16]
  ch.rlist.older = (thread_t *)&ch.rlist;
 8000e68:	616d      	str	r5, [r5, #20]
  ch.vtlist.lasttime = (systime_t)0;
 8000e6a:	62ac      	str	r4, [r5, #40]	; 0x28
  ch.tm.offset = (rtcnt_t)0;
 8000e6c:	676c      	str	r4, [r5, #116]	; 0x74
  tmp->worst      = (rtcnt_t)0;
 8000e6e:	9401      	str	r4, [sp, #4]
  tmp->last       = (rtcnt_t)0;
 8000e70:	9402      	str	r4, [sp, #8]
  tmp->n          = (ucnt_t)0;
 8000e72:	9403      	str	r4, [sp, #12]
  chTMStartMeasurementX(&tm);
 8000e74:	f7ff fa24 	bl	80002c0 <chTMStartMeasurementX.constprop.18>
  chTMStopMeasurementX(&tm);
 8000e78:	4668      	mov	r0, sp
 8000e7a:	f7ff fad9 	bl	8000430 <chTMStopMeasurementX>
  ch.tm.offset = tm.last;
 8000e7e:	9b02      	ldr	r3, [sp, #8]
  nextmem = __heap_base__;
 8000e80:	4a99      	ldr	r2, [pc, #612]	; (80010e8 <main+0x458>)
 8000e82:	676b      	str	r3, [r5, #116]	; 0x74
 8000e84:	4b99      	ldr	r3, [pc, #612]	; (80010ec <main+0x45c>)
  tp->mtxlist   = NULL;
 8000e86:	66ac      	str	r4, [r5, #104]	; 0x68
 8000e88:	601a      	str	r2, [r3, #0]
  endmem  = __heap_end__;
 8000e8a:	4a99      	ldr	r2, [pc, #612]	; (80010f0 <main+0x460>)
 8000e8c:	4b99      	ldr	r3, [pc, #612]	; (80010f4 <main+0x464>)
  tp->epending  = (eventmask_t)0;
 8000e8e:	666c      	str	r4, [r5, #100]	; 0x64
 8000e90:	601a      	str	r2, [r3, #0]
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.provider = chCoreAllocAligned;
 8000e92:	4b99      	ldr	r3, [pc, #612]	; (80010f8 <main+0x468>)
 8000e94:	4a99      	ldr	r2, [pc, #612]	; (80010fc <main+0x46c>)
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->queue);
  mp->owner = NULL;
 8000e96:	619c      	str	r4, [r3, #24]
 8000e98:	601a      	str	r2, [r3, #0]
  tqp->next = (thread_t *)tqp;
 8000e9a:	001a      	movs	r2, r3
 8000e9c:	3210      	adds	r2, #16
 8000e9e:	611a      	str	r2, [r3, #16]
  tqp->prev = (thread_t *)tqp;
 8000ea0:	615a      	str	r2, [r3, #20]
  H_NEXT(&default_heap.header) = NULL;
 8000ea2:	609c      	str	r4, [r3, #8]
  H_PAGES(&default_heap.header) = 0;
 8000ea4:	60dc      	str	r4, [r3, #12]
  tp->prio      = prio;
 8000ea6:	4653      	mov	r3, sl
 8000ea8:	63ab      	str	r3, [r5, #56]	; 0x38
  tp->flags     = CH_FLAG_MODE_STATIC;
 8000eaa:	3b2f      	subs	r3, #47	; 0x2f
 8000eac:	54ec      	strb	r4, [r5, r3]
  tp->realprio  = prio;
 8000eae:	4653      	mov	r3, sl
 8000eb0:	66eb      	str	r3, [r5, #108]	; 0x6c
  tp->refs      = (trefs_t)1;
 8000eb2:	3b2e      	subs	r3, #46	; 0x2e
 8000eb4:	54ef      	strb	r7, [r5, r3]
  tp->name      = name;
 8000eb6:	4b92      	ldr	r3, [pc, #584]	; (8001100 <main+0x470>)
  REG_INSERT(tp);
 8000eb8:	696a      	ldr	r2, [r5, #20]
  tp->name      = name;
 8000eba:	64ab      	str	r3, [r5, #72]	; 0x48
  REG_INSERT(tp);
 8000ebc:	002b      	movs	r3, r5
 8000ebe:	3330      	adds	r3, #48	; 0x30
 8000ec0:	646a      	str	r2, [r5, #68]	; 0x44
 8000ec2:	642d      	str	r5, [r5, #64]	; 0x40
 8000ec4:	6113      	str	r3, [r2, #16]
  tlp->next = (thread_t *)tlp;
 8000ec6:	002a      	movs	r2, r5
 8000ec8:	3258      	adds	r2, #88	; 0x58
 8000eca:	65aa      	str	r2, [r5, #88]	; 0x58
  tqp->next = (thread_t *)tqp;
 8000ecc:	002a      	movs	r2, r5
 8000ece:	325c      	adds	r2, #92	; 0x5c
 8000ed0:	616b      	str	r3, [r5, #20]
 8000ed2:	65ea      	str	r2, [r5, #92]	; 0x5c
  tqp->prev = (thread_t *)tqp;
 8000ed4:	662a      	str	r2, [r5, #96]	; 0x60
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
#if CH_CFG_USE_REGISTRY == TRUE
  currp = _thread_init(&ch.mainthread, (const char *)&ch_debug, NORMALPRIO);
 8000ed6:	61ab      	str	r3, [r5, #24]
#elif CH_CFG_USE_DYNAMIC == TRUE
  currp->wabase = NULL;
#endif

  /* Setting up the caller as current thread.*/
  currp->state = CH_STATE_CURRENT;
 8000ed8:	2350      	movs	r3, #80	; 0x50
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000eda:	2080      	movs	r0, #128	; 0x80
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000edc:	4a89      	ldr	r2, [pc, #548]	; (8001104 <main+0x474>)
 8000ede:	54ef      	strb	r7, [r5, r3]
 8000ee0:	68d1      	ldr	r1, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ee2:	4b89      	ldr	r3, [pc, #548]	; (8001108 <main+0x478>)
  currp->wabase = NULL;
 8000ee4:	64ec      	str	r4, [r5, #76]	; 0x4c
 8000ee6:	400b      	ands	r3, r1
  reg_value  =  (reg_value                                   |
 8000ee8:	4988      	ldr	r1, [pc, #544]	; (800110c <main+0x47c>)
 8000eea:	0440      	lsls	r0, r0, #17
 8000eec:	430b      	orrs	r3, r1
 8000eee:	4988      	ldr	r1, [pc, #544]	; (8001110 <main+0x480>)
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8000ef0:	60d3      	str	r3, [r2, #12]
 8000ef2:	68cb      	ldr	r3, [r1, #12]
 8000ef4:	4303      	orrs	r3, r0
 8000ef6:	60cb      	str	r3, [r1, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000ef8:	4986      	ldr	r1, [pc, #536]	; (8001114 <main+0x484>)
 8000efa:	680b      	ldr	r3, [r1, #0]
 8000efc:	433b      	orrs	r3, r7
 8000efe:	600b      	str	r3, [r1, #0]
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f00:	465b      	mov	r3, fp
 8000f02:	77d3      	strb	r3, [r2, #31]
 8000f04:	2320      	movs	r3, #32
 8000f06:	469b      	mov	fp, r3
 8000f08:	4659      	mov	r1, fp
 8000f0a:	3302      	adds	r3, #2
 8000f0c:	54d1      	strb	r1, [r2, r3]
 8000f0e:	f384 8811 	msr	BASEPRI, r4
  __ASM volatile ("cpsie i" : : : "memory");
 8000f12:	b662      	cpsie	i
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8000f14:	f38b 8811 	msr	BASEPRI, fp
  tp->wabase = tdp->wbase;
 8000f18:	4b7f      	ldr	r3, [pc, #508]	; (8001118 <main+0x488>)
 8000f1a:	22ac      	movs	r2, #172	; 0xac
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8000f1c:	0019      	movs	r1, r3
  tp->wabase = tdp->wbase;
 8000f1e:	509b      	str	r3, [r3, r2]
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8000f20:	316c      	adds	r1, #108	; 0x6c
 8000f22:	3a10      	subs	r2, #16
 8000f24:	5099      	str	r1, [r3, r2]
 8000f26:	4a7d      	ldr	r2, [pc, #500]	; (800111c <main+0x48c>)
  REG_INSERT(tp);
 8000f28:	0018      	movs	r0, r3
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8000f2a:	66da      	str	r2, [r3, #108]	; 0x6c
 8000f2c:	4a7c      	ldr	r2, [pc, #496]	; (8001120 <main+0x490>)
  REG_INSERT(tp);
 8000f2e:	3090      	adds	r0, #144	; 0x90
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8000f30:	4692      	mov	sl, r2
 8000f32:	228c      	movs	r2, #140	; 0x8c
 8000f34:	4651      	mov	r1, sl
 8000f36:	5099      	str	r1, [r3, r2]
  tp->state     = CH_STATE_WTSTART;
 8000f38:	2102      	movs	r1, #2
  tp->prio      = prio;
 8000f3a:	320c      	adds	r2, #12
 8000f3c:	509f      	str	r7, [r3, r2]
  tp->state     = CH_STATE_WTSTART;
 8000f3e:	3218      	adds	r2, #24
 8000f40:	5499      	strb	r1, [r3, r2]
  tp->flags     = CH_FLAG_MODE_STATIC;
 8000f42:	3201      	adds	r2, #1
 8000f44:	549c      	strb	r4, [r3, r2]
  tp->realprio  = prio;
 8000f46:	321b      	adds	r2, #27
 8000f48:	509f      	str	r7, [r3, r2]
  tp->mtxlist   = NULL;
 8000f4a:	3a04      	subs	r2, #4
 8000f4c:	509c      	str	r4, [r3, r2]
  tp->epending  = (eventmask_t)0;
 8000f4e:	3a04      	subs	r2, #4
 8000f50:	509c      	str	r4, [r3, r2]
  tp->name      = name;
 8000f52:	4974      	ldr	r1, [pc, #464]	; (8001124 <main+0x494>)
  tp->refs      = (trefs_t)1;
 8000f54:	3a12      	subs	r2, #18
 8000f56:	549f      	strb	r7, [r3, r2]
  tp->name      = name;
 8000f58:	3a0a      	subs	r2, #10
 8000f5a:	5099      	str	r1, [r3, r2]
  REG_INSERT(tp);
 8000f5c:	21a4      	movs	r1, #164	; 0xa4
 8000f5e:	3a08      	subs	r2, #8
 8000f60:	509d      	str	r5, [r3, r2]
 8000f62:	696a      	ldr	r2, [r5, #20]
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8000f64:	671c      	str	r4, [r3, #112]	; 0x70
  REG_INSERT(tp);
 8000f66:	505a      	str	r2, [r3, r1]
  tlp->next = (thread_t *)tlp;
 8000f68:	0019      	movs	r1, r3
 8000f6a:	6110      	str	r0, [r2, #16]
 8000f6c:	22b8      	movs	r2, #184	; 0xb8
 8000f6e:	31b8      	adds	r1, #184	; 0xb8
 8000f70:	5099      	str	r1, [r3, r2]
  tqp->next = (thread_t *)tqp;
 8000f72:	001a      	movs	r2, r3
 8000f74:	21bc      	movs	r1, #188	; 0xbc
 8000f76:	32bc      	adds	r2, #188	; 0xbc
  tqp->prev = (thread_t *)tqp;
 8000f78:	37bf      	adds	r7, #191	; 0xbf
  tqp->next = (thread_t *)tqp;
 8000f7a:	505a      	str	r2, [r3, r1]
  tqp->prev = (thread_t *)tqp;
 8000f7c:	51da      	str	r2, [r3, r7]
 8000f7e:	6168      	str	r0, [r5, #20]
  chSchWakeupS(tp, MSG_OK);
 8000f80:	f7ff fbf6 	bl	8000770 <chSchWakeupS.constprop.23>
 8000f84:	f384 8811 	msr	BASEPRI, r4
 8000f88:	f38b 8811 	msr	BASEPRI, fp
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    config = &default_config;

  if (sdp->state == SD_STOP) {
 8000f8c:	7a33      	ldrb	r3, [r6, #8]
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	d100      	bne.n	8000f94 <main+0x304>
 8000f92:	e103      	b.n	800119c <main+0x50c>
  USART_TypeDef *u = sdp->usart;
 8000f94:	6f73      	ldr	r3, [r6, #116]	; 0x74
  if ((sdp->usart == USART1) || (sdp->usart == USART6))
 8000f96:	4a64      	ldr	r2, [pc, #400]	; (8001128 <main+0x498>)
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d100      	bne.n	8000f9e <main+0x30e>
 8000f9c:	e0fb      	b.n	8001196 <main+0x506>
 8000f9e:	4a63      	ldr	r2, [pc, #396]	; (800112c <main+0x49c>)
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	d100      	bne.n	8000fa6 <main+0x316>
 8000fa4:	e0f7      	b.n	8001196 <main+0x506>
    u->BRR = STM32_PCLK1 / config->speed;
 8000fa6:	4a62      	ldr	r2, [pc, #392]	; (8001130 <main+0x4a0>)
 8000fa8:	609a      	str	r2, [r3, #8]
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8000faa:	2240      	movs	r2, #64	; 0x40
 8000fac:	611a      	str	r2, [r3, #16]
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8000fae:	3a3f      	subs	r2, #63	; 0x3f
 8000fb0:	615a      	str	r2, [r3, #20]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 8000fb2:	4a60      	ldr	r2, [pc, #384]	; (8001134 <main+0x4a4>)
 8000fb4:	60da      	str	r2, [r3, #12]
  u->SR = 0;
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	601a      	str	r2, [r3, #0]
  (void)u->SR;  /* SR reset step 1.*/
 8000fba:	6819      	ldr	r1, [r3, #0]
  (void)u->DR;  /* SR reset step 2.*/
 8000fbc:	685b      	ldr	r3, [r3, #4]
    sdp->rxmask = 0xFF;
 8000fbe:	21ff      	movs	r1, #255	; 0xff
 8000fc0:	2378      	movs	r3, #120	; 0x78
 8000fc2:	54f1      	strb	r1, [r6, r3]
  sdp->state = SD_READY;
 8000fc4:	3b76      	subs	r3, #118	; 0x76
 8000fc6:	7233      	strb	r3, [r6, #8]
 8000fc8:	f382 8811 	msr	BASEPRI, r2
      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 8000fcc:	3203      	adds	r2, #3
 8000fce:	4694      	mov	ip, r2
      else {
        /* If going into a non-alternate mode then the mode is switched
           before setting the alternate mode in order to avoid glitches.*/
        port->MODER   = (port->MODER & ~m2) | moder;
        if (bit < 8)
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 8000fd0:	320c      	adds	r2, #12
  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 8000fd2:	2401      	movs	r4, #1
  uint32_t bit     = 0;
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	2020      	movs	r0, #32
    if ((mask & 1) != 0) {
 8000fd8:	2601      	movs	r6, #1
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 8000fda:	4693      	mov	fp, r2
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 8000fdc:	4b2a      	ldr	r3, [pc, #168]	; (8001088 <main+0x3f8>)
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
      }
    }
    mask >>= 1;
 8000fde:	0840      	lsrs	r0, r0, #1
    if (!mask)
 8000fe0:	2905      	cmp	r1, #5
 8000fe2:	d026      	beq.n	8001032 <main+0x3a2>
      return;
    otyper <<= 1;
    ospeedr <<= 2;
    pupdr <<= 2;
    moder <<= 2;
 8000fe4:	00a4      	lsls	r4, r4, #2
    bit++;
 8000fe6:	3101      	adds	r1, #1
    if ((mask & 1) != 0) {
 8000fe8:	4206      	tst	r6, r0
 8000fea:	d0f8      	beq.n	8000fde <main+0x34e>
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 8000fec:	0037      	movs	r7, r6
 8000fee:	408f      	lsls	r7, r1
 8000ff0:	685a      	ldr	r2, [r3, #4]
    mask >>= 1;
 8000ff2:	0840      	lsrs	r0, r0, #1
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 8000ff4:	43ba      	bics	r2, r7
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 8000ff6:	4667      	mov	r7, ip
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 8000ff8:	605a      	str	r2, [r3, #4]
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 8000ffa:	689a      	ldr	r2, [r3, #8]
 8000ffc:	4690      	mov	r8, r2
 8000ffe:	004a      	lsls	r2, r1, #1
 8001000:	4097      	lsls	r7, r2
 8001002:	43fa      	mvns	r2, r7
 8001004:	4647      	mov	r7, r8
 8001006:	4017      	ands	r7, r2
 8001008:	609f      	str	r7, [r3, #8]
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 800100a:	68df      	ldr	r7, [r3, #12]
 800100c:	4017      	ands	r7, r2
 800100e:	60df      	str	r7, [r3, #12]
        port->MODER   = (port->MODER & ~m2) | moder;
 8001010:	681f      	ldr	r7, [r3, #0]
 8001012:	403a      	ands	r2, r7
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 8001014:	008f      	lsls	r7, r1, #2
 8001016:	46b8      	mov	r8, r7
        port->MODER   = (port->MODER & ~m2) | moder;
 8001018:	4322      	orrs	r2, r4
 800101a:	601a      	str	r2, [r3, #0]
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 800101c:	6a1a      	ldr	r2, [r3, #32]
 800101e:	465f      	mov	r7, fp
 8001020:	4691      	mov	r9, r2
 8001022:	4642      	mov	r2, r8
 8001024:	4097      	lsls	r7, r2
 8001026:	003a      	movs	r2, r7
 8001028:	464f      	mov	r7, r9
 800102a:	4397      	bics	r7, r2
 800102c:	621f      	str	r7, [r3, #32]
    if (!mask)
 800102e:	2905      	cmp	r1, #5
 8001030:	d1d8      	bne.n	8000fe4 <main+0x354>
 8001032:	2320      	movs	r3, #32
 8001034:	f383 8811 	msr	BASEPRI, r3
  tp->wabase = (stkalign_t *)wsp;
 8001038:	4b3f      	ldr	r3, [pc, #252]	; (8001138 <main+0x4a8>)
 800103a:	228e      	movs	r2, #142	; 0x8e
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 800103c:	0019      	movs	r1, r3
  tp->wabase = (stkalign_t *)wsp;
 800103e:	0052      	lsls	r2, r2, #1
 8001040:	509b      	str	r3, [r3, r2]
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8001042:	31dc      	adds	r1, #220	; 0xdc
 8001044:	3a10      	subs	r2, #16
 8001046:	5099      	str	r1, [r3, r2]
 8001048:	493c      	ldr	r1, [pc, #240]	; (800113c <main+0x4ac>)
 800104a:	2400      	movs	r4, #0
 800104c:	3a30      	subs	r2, #48	; 0x30
 800104e:	5099      	str	r1, [r3, r2]
 8001050:	4651      	mov	r1, sl
 8001052:	3204      	adds	r2, #4
 8001054:	509c      	str	r4, [r3, r2]
 8001056:	321c      	adds	r2, #28
 8001058:	5099      	str	r1, [r3, r2]
  tp->prio      = prio;
 800105a:	2184      	movs	r1, #132	; 0x84
  tp->state     = CH_STATE_WTSTART;
 800105c:	2002      	movs	r0, #2
  tp->prio      = prio;
 800105e:	3a7c      	subs	r2, #124	; 0x7c
 8001060:	0049      	lsls	r1, r1, #1
 8001062:	505a      	str	r2, [r3, r1]
  tp->state     = CH_STATE_WTSTART;
 8001064:	3118      	adds	r1, #24
 8001066:	5458      	strb	r0, [r3, r1]
  tp->flags     = CH_FLAG_MODE_STATIC;
 8001068:	2122      	movs	r1, #34	; 0x22
 800106a:	31ff      	adds	r1, #255	; 0xff
 800106c:	545c      	strb	r4, [r3, r1]
  tp->realprio  = prio;
 800106e:	311b      	adds	r1, #27
 8001070:	e066      	b.n	8001140 <main+0x4b0>
 8001072:	46c0      	nop			; (mov r8, r8)
 8001074:	40023800 	.word	0x40023800
 8001078:	efffffff 	.word	0xefffffff
 800107c:	40007000 	.word	0x40007000
 8001080:	fffffdff 	.word	0xfffffdff
 8001084:	55555555 	.word	0x55555555
 8001088:	40020000 	.word	0x40020000
 800108c:	64155505 	.word	0x64155505
 8001090:	0000ffff 	.word	0x0000ffff
 8001094:	0000fbff 	.word	0x0000fbff
 8001098:	55507700 	.word	0x55507700
 800109c:	2a91a9a0 	.word	0x2a91a9a0
 80010a0:	40020400 	.word	0x40020400
 80010a4:	000a0080 	.word	0x000a0080
 80010a8:	40020800 	.word	0x40020800
 80010ac:	01555555 	.word	0x01555555
 80010b0:	40020c00 	.word	0x40020c00
 80010b4:	40021000 	.word	0x40021000
 80010b8:	20000550 	.word	0x20000550
 80010bc:	40021400 	.word	0x40021400
 80010c0:	40021800 	.word	0x40021800
 80010c4:	55555550 	.word	0x55555550
 80010c8:	40021c00 	.word	0x40021c00
 80010cc:	08001544 	.word	0x08001544
 80010d0:	08000311 	.word	0x08000311
 80010d4:	40004400 	.word	0x40004400
 80010d8:	e0042000 	.word	0xe0042000
 80010dc:	00002327 	.word	0x00002327
 80010e0:	e000e100 	.word	0xe000e100
 80010e4:	200005cc 	.word	0x200005cc
 80010e8:	20000748 	.word	0x20000748
 80010ec:	20000720 	.word	0x20000720
 80010f0:	20020000 	.word	0x20020000
 80010f4:	20000400 	.word	0x20000400
 80010f8:	20000728 	.word	0x20000728
 80010fc:	080002d1 	.word	0x080002d1
 8001100:	08001494 	.word	0x08001494
 8001104:	e000ed00 	.word	0xe000ed00
 8001108:	0000f8ff 	.word	0x0000f8ff
 800110c:	05fa0300 	.word	0x05fa0300
 8001110:	e000edf0 	.word	0xe000edf0
 8001114:	e0001000 	.word	0xe0001000
 8001118:	20000648 	.word	0x20000648
 800111c:	08000751 	.word	0x08000751
 8001120:	080002a5 	.word	0x080002a5
 8001124:	080014b4 	.word	0x080014b4
 8001128:	40011000 	.word	0x40011000
 800112c:	40011400 	.word	0x40011400
 8001130:	00000493 	.word	0x00000493
 8001134:	0000212c 	.word	0x0000212c
 8001138:	20000408 	.word	0x20000408
 800113c:	08000941 	.word	0x08000941
 8001140:	505a      	str	r2, [r3, r1]
  tp->mtxlist   = NULL;
 8001142:	32b8      	adds	r2, #184	; 0xb8
 8001144:	509c      	str	r4, [r3, r2]
  tp->refs      = (trefs_t)1;
 8001146:	393c      	subs	r1, #60	; 0x3c
  tp->epending  = (eventmask_t)0;
 8001148:	3a04      	subs	r2, #4
 800114a:	509c      	str	r4, [r3, r2]
  tp->refs      = (trefs_t)1;
 800114c:	39ff      	subs	r1, #255	; 0xff
 800114e:	3a12      	subs	r2, #18
 8001150:	5499      	strb	r1, [r3, r2]
  tp->name      = name;
 8001152:	491b      	ldr	r1, [pc, #108]	; (80011c0 <main+0x530>)
 8001154:	3a0a      	subs	r2, #10
 8001156:	5099      	str	r1, [r3, r2]
  REG_INSERT(tp);
 8001158:	218a      	movs	r1, #138	; 0x8a
 800115a:	3a08      	subs	r2, #8
 800115c:	509d      	str	r5, [r3, r2]
 800115e:	696a      	ldr	r2, [r5, #20]
 8001160:	1c58      	adds	r0, r3, #1
 8001162:	0049      	lsls	r1, r1, #1
 8001164:	505a      	str	r2, [r3, r1]
 8001166:	30ff      	adds	r0, #255	; 0xff
  tlp->next = (thread_t *)tlp;
 8001168:	0019      	movs	r1, r3
 800116a:	6110      	str	r0, [r2, #16]
 800116c:	2294      	movs	r2, #148	; 0x94
 800116e:	3129      	adds	r1, #41	; 0x29
 8001170:	31ff      	adds	r1, #255	; 0xff
 8001172:	0052      	lsls	r2, r2, #1
 8001174:	5099      	str	r1, [r3, r2]
  tqp->next = (thread_t *)tqp;
 8001176:	001a      	movs	r2, r3
 8001178:	2196      	movs	r1, #150	; 0x96
 800117a:	322d      	adds	r2, #45	; 0x2d
 800117c:	32ff      	adds	r2, #255	; 0xff
 800117e:	0049      	lsls	r1, r1, #1
 8001180:	505a      	str	r2, [r3, r1]
  tqp->prev = (thread_t *)tqp;
 8001182:	3104      	adds	r1, #4
 8001184:	505a      	str	r2, [r3, r1]
 8001186:	6168      	str	r0, [r5, #20]
  chSchWakeupS(tp, MSG_OK);
 8001188:	f7ff faf2 	bl	8000770 <chSchWakeupS.constprop.23>
 800118c:	f384 8811 	msr	BASEPRI, r4
      //if (!palReadPad(GPIOC, GPIOC_BUTTON))
        //test_execute((BaseSequentialStream *)&SD2);
    /*palClearPad(GPIOA, GPIOA_LED_GREEN);*/
    /*chThdSleepMilliseconds(500);*/
    /*palSetPad(GPIOA, GPIOA_LED_GREEN);*/
    chThdSleepMilliseconds(500);
 8001190:	f7ff fbc6 	bl	8000920 <chThdSleep.constprop.15>
 8001194:	e7fc      	b.n	8001190 <main+0x500>
    u->BRR = STM32_PCLK2 / config->speed;
 8001196:	4a0b      	ldr	r2, [pc, #44]	; (80011c4 <main+0x534>)
 8001198:	609a      	str	r2, [r3, #8]
 800119a:	e706      	b.n	8000faa <main+0x31a>
      nvicEnableVector(STM32_USART1_NUMBER, STM32_SERIAL_USART1_PRIORITY);
    }
#endif
#if STM32_SERIAL_USE_USART2
    if (&SD2 == sdp) {
      rccEnableUSART2(FALSE);
 800119c:	4643      	mov	r3, r8
 800119e:	2280      	movs	r2, #128	; 0x80
 80011a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a2:	0292      	lsls	r2, r2, #10
 80011a4:	4313      	orrs	r3, r2
 80011a6:	4642      	mov	r2, r8
 80011a8:	6413      	str	r3, [r2, #64]	; 0x40
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80011aa:	464a      	mov	r2, r9
 80011ac:	4b06      	ldr	r3, [pc, #24]	; (80011c8 <main+0x538>)
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80011ae:	4649      	mov	r1, r9
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80011b0:	54d7      	strb	r7, [r2, r3]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80011b2:	22c2      	movs	r2, #194	; 0xc2
 80011b4:	2340      	movs	r3, #64	; 0x40
 80011b6:	0052      	lsls	r2, r2, #1
 80011b8:	508b      	str	r3, [r1, r2]
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80011ba:	604b      	str	r3, [r1, #4]
 80011bc:	e6ea      	b.n	8000f94 <main+0x304>
 80011be:	46c0      	nop			; (mov r8, r8)
 80011c0:	080014bc 	.word	0x080014bc
 80011c4:	00000927 	.word	0x00000927
 80011c8:	00000326 	.word	0x00000326
 80011cc:	00000000 	.word	0x00000000

080011d0 <__early_init>:
#if !STM32_NO_INIT
  /* PWR clock enable.*/
#if defined(HAL_USE_RTC) && defined(RCC_APB1ENR_RTCAPBEN)
  RCC->APB1ENR = RCC_APB1ENR_PWREN | RCC_APB1ENR_RTCAPBEN;
#else
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 80011d0:	2380      	movs	r3, #128	; 0x80
#endif

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 80011d2:	22c0      	movs	r2, #192	; 0xc0
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 80011d4:	4953      	ldr	r1, [pc, #332]	; (8001324 <__early_init+0x154>)
 80011d6:	055b      	lsls	r3, r3, #21
 80011d8:	640b      	str	r3, [r1, #64]	; 0x40
  PWR->CR = STM32_VOS;
 80011da:	4b53      	ldr	r3, [pc, #332]	; (8001328 <__early_init+0x158>)
 80011dc:	0212      	lsls	r2, r2, #8
 80011de:	601a      	str	r2, [r3, #0]
  PWR->CR = 0;
#endif

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 80011e0:	2301      	movs	r3, #1
  while (!(RCC->CR & RCC_CR_HSIRDY))
 80011e2:	2002      	movs	r0, #2
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 80011e4:	680a      	ldr	r2, [r1, #0]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	600b      	str	r3, [r1, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 80011ea:	680a      	ldr	r2, [r1, #0]
 80011ec:	4b4d      	ldr	r3, [pc, #308]	; (8001324 <__early_init+0x154>)
 80011ee:	4210      	tst	r0, r2
 80011f0:	d0fb      	beq.n	80011ea <__early_init+0x1a>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
 80011f2:	2103      	movs	r1, #3
 80011f4:	689a      	ldr	r2, [r3, #8]
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 80011f6:	200c      	movs	r0, #12
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
 80011f8:	438a      	bics	r2, r1
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 80011fa:	0019      	movs	r1, r3
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
 80011fc:	609a      	str	r2, [r3, #8]
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
 80011fe:	689a      	ldr	r2, [r3, #8]
 8001200:	609a      	str	r2, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8001202:	688b      	ldr	r3, [r1, #8]
 8001204:	4a47      	ldr	r2, [pc, #284]	; (8001324 <__early_init+0x154>)
 8001206:	4003      	ands	r3, r0
 8001208:	d1fb      	bne.n	8001202 <__early_init+0x32>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 800120a:	20f9      	movs	r0, #249	; 0xf9
 800120c:	6811      	ldr	r1, [r2, #0]
 800120e:	4001      	ands	r1, r0
 8001210:	6011      	str	r1, [r2, #0]
  
#if STM32_HSE_ENABLED
  /* HSE activation.*/
#if defined(STM32_HSE_BYPASS)
  /* HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
 8001212:	21a0      	movs	r1, #160	; 0xa0
#else
  /* No HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON;
#endif
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 8001214:	2080      	movs	r0, #128	; 0x80
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 8001216:	6093      	str	r3, [r2, #8]
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
 8001218:	6813      	ldr	r3, [r2, #0]
 800121a:	02c9      	lsls	r1, r1, #11
 800121c:	430b      	orrs	r3, r1
 800121e:	6013      	str	r3, [r2, #0]
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 8001220:	0280      	lsls	r0, r0, #10
 8001222:	6811      	ldr	r1, [r2, #0]
 8001224:	4b3f      	ldr	r3, [pc, #252]	; (8001324 <__early_init+0x154>)
 8001226:	4201      	tst	r1, r0
 8001228:	d0fb      	beq.n	8001222 <__early_init+0x52>
    ;                           /* Waits until HSE is stable.               */
#endif

#if STM32_LSI_ENABLED
  /* LSI activation.*/
  RCC->CSR |= RCC_CSR_LSION;
 800122a:	2201      	movs	r2, #1
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 800122c:	2002      	movs	r0, #2
  RCC->CSR |= RCC_CSR_LSION;
 800122e:	6f59      	ldr	r1, [r3, #116]	; 0x74
 8001230:	430a      	orrs	r2, r1
 8001232:	675a      	str	r2, [r3, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 8001234:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001236:	493b      	ldr	r1, [pc, #236]	; (8001324 <__early_init+0x154>)
 8001238:	4210      	tst	r0, r2
 800123a:	d0fb      	beq.n	8001234 <__early_init+0x64>

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 800123c:	2280      	movs	r2, #128	; 0x80
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
 800123e:	4b3b      	ldr	r3, [pc, #236]	; (800132c <__early_init+0x15c>)
  RCC->CR |= RCC_CR_PLLON;
 8001240:	0452      	lsls	r2, r2, #17
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
 8001242:	604b      	str	r3, [r1, #4]
  RCC->CR |= RCC_CR_PLLON;
 8001244:	680b      	ldr	r3, [r1, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 8001246:	4838      	ldr	r0, [pc, #224]	; (8001328 <__early_init+0x158>)
  RCC->CR |= RCC_CR_PLLON;
 8001248:	4313      	orrs	r3, r2
 800124a:	600b      	str	r3, [r1, #0]
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 800124c:	2180      	movs	r1, #128	; 0x80
 800124e:	01c9      	lsls	r1, r1, #7
 8001250:	6842      	ldr	r2, [r0, #4]
 8001252:	4b35      	ldr	r3, [pc, #212]	; (8001328 <__early_init+0x158>)
 8001254:	420a      	tst	r2, r1
 8001256:	d0fb      	beq.n	8001250 <__early_init+0x80>
    ;                           /* Waits until power regulator is stable.   */

#if STM32_OVERDRIVE_REQUIRED
  /* Overdrive activation performed after activating the PLL in order to save
     time as recommended in RM in "Entering Over-drive mode" paragraph.*/
  PWR->CR |= PWR_CR_ODEN;
 8001258:	2080      	movs	r0, #128	; 0x80
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	0240      	lsls	r0, r0, #9
 800125e:	4302      	orrs	r2, r0
 8001260:	601a      	str	r2, [r3, #0]
  while (!(PWR->CSR & PWR_CSR_ODRDY))
 8001262:	001a      	movs	r2, r3
 8001264:	6851      	ldr	r1, [r2, #4]
 8001266:	4b30      	ldr	r3, [pc, #192]	; (8001328 <__early_init+0x158>)
 8001268:	4201      	tst	r1, r0
 800126a:	d0fb      	beq.n	8001264 <__early_init+0x94>
      ;
  PWR->CR |= PWR_CR_ODSWEN;
 800126c:	2180      	movs	r1, #128	; 0x80
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	0289      	lsls	r1, r1, #10
 8001272:	430a      	orrs	r2, r1
 8001274:	601a      	str	r2, [r3, #0]
  while (!(PWR->CSR & PWR_CSR_ODSWRDY))
 8001276:	685a      	ldr	r2, [r3, #4]
 8001278:	420a      	tst	r2, r1
 800127a:	d0fc      	beq.n	8001276 <__early_init+0xa6>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */
#endif /* defined(STM32F4XX) */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
 800127c:	2180      	movs	r1, #128	; 0x80
 800127e:	4829      	ldr	r0, [pc, #164]	; (8001324 <__early_init+0x154>)
 8001280:	0489      	lsls	r1, r1, #18
 8001282:	6802      	ldr	r2, [r0, #0]
 8001284:	4b27      	ldr	r3, [pc, #156]	; (8001324 <__early_init+0x154>)
 8001286:	420a      	tst	r2, r1
 8001288:	d0fb      	beq.n	8001282 <__early_init+0xb2>
    ;
#endif /* STM32_ACTIVATE_PLL */

#if STM32_ACTIVATE_PLLI2S
  /* PLLI2S activation.*/
  RCC->PLLI2SCFGR = STM32_PLLI2SR | STM32_PLLI2SN | STM32_PLLI2SP |
 800128a:	2284      	movs	r2, #132	; 0x84
 800128c:	4928      	ldr	r1, [pc, #160]	; (8001330 <__early_init+0x160>)
                    STM32_PLLI2SQ | STM32_PLLI2SM;
  RCC->CR |= RCC_CR_PLLI2SON;

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLI2SRDY))
 800128e:	2080      	movs	r0, #128	; 0x80
  RCC->PLLI2SCFGR = STM32_PLLI2SR | STM32_PLLI2SN | STM32_PLLI2SP |
 8001290:	5099      	str	r1, [r3, r2]
  RCC->CR |= RCC_CR_PLLI2SON;
 8001292:	2180      	movs	r1, #128	; 0x80
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	04c9      	lsls	r1, r1, #19
 8001298:	430a      	orrs	r2, r1
 800129a:	601a      	str	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_PLLI2SRDY))
 800129c:	001a      	movs	r2, r3
 800129e:	0500      	lsls	r0, r0, #20
 80012a0:	6811      	ldr	r1, [r2, #0]
 80012a2:	4b20      	ldr	r3, [pc, #128]	; (8001324 <__early_init+0x154>)
 80012a4:	4201      	tst	r1, r0
 80012a6:	d0fb      	beq.n	80012a0 <__early_init+0xd0>
    ;
#endif /* STM32_ACTIVATE_PLLI2S */

#if STM32_ACTIVATE_PLLSAI
  /* PLLSAI activation.*/
  RCC->PLLSAICFGR = STM32_PLLSAIR | STM32_PLLSAIN | STM32_PLLSAIP |
 80012a8:	2288      	movs	r2, #136	; 0x88
 80012aa:	4922      	ldr	r1, [pc, #136]	; (8001334 <__early_init+0x164>)
                    STM32_PLLSAIQ | STM32_PLLSAIM;
  RCC->CR |= RCC_CR_PLLSAION;

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLSAIRDY))
 80012ac:	2080      	movs	r0, #128	; 0x80
  RCC->PLLSAICFGR = STM32_PLLSAIR | STM32_PLLSAIN | STM32_PLLSAIP |
 80012ae:	5099      	str	r1, [r3, r2]
  RCC->CR |= RCC_CR_PLLSAION;
 80012b0:	2180      	movs	r1, #128	; 0x80
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	0549      	lsls	r1, r1, #21
 80012b6:	430a      	orrs	r2, r1
 80012b8:	601a      	str	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_PLLSAIRDY))
 80012ba:	0580      	lsls	r0, r0, #22
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	4919      	ldr	r1, [pc, #100]	; (8001324 <__early_init+0x154>)
 80012c0:	4202      	tst	r2, r0
 80012c2:	d0fb      	beq.n	80012bc <__early_init+0xec>
    ;
#endif /* STM32_ACTIVATE_PLLSAI */

  /* Other clock-related settings (dividers, MCO etc).*/
  RCC->CFGR = STM32_MCO2PRE | STM32_MCO2SEL | STM32_MCO1PRE | STM32_MCO1SEL |
 80012c4:	4b1c      	ldr	r3, [pc, #112]	; (8001338 <__early_init+0x168>)
    dckcfgr |= STM32_SAI1SEL;
#endif
#if STM32_PLLSAIDIVR != STM32_PLLSAIDIVR_OFF
    dckcfgr |= STM32_PLLSAIDIVR;
#endif
    RCC->DCKCFGR = dckcfgr | STM32_PLLI2SDIVQ | STM32_PLLSAIDIVQ;
 80012c6:	2280      	movs	r2, #128	; 0x80
  RCC->CFGR = STM32_MCO2PRE | STM32_MCO2SEL | STM32_MCO1PRE | STM32_MCO1SEL |
 80012c8:	608b      	str	r3, [r1, #8]
    RCC->DCKCFGR = dckcfgr | STM32_PLLI2SDIVQ | STM32_PLLSAIDIVQ;
 80012ca:	238c      	movs	r3, #140	; 0x8c
 80012cc:	0412      	lsls	r2, r2, #16
 80012ce:	50ca      	str	r2, [r1, r3]
  }
  RCC->DCKCFGR2 = STM32_CK48MSEL;
 80012d0:	2280      	movs	r2, #128	; 0x80
 80012d2:	3308      	adds	r3, #8
 80012d4:	0512      	lsls	r2, r2, #20
 80012d6:	50ca      	str	r2, [r1, r3]

  /* Flash setup.*/
#if !defined(STM32_REMOVE_REVISION_A_FIX)
  /* Some old revisions of F4x MCUs randomly crashes with compiler
     optimizations enabled AND flash caches enabled. */
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 80012d8:	4b18      	ldr	r3, [pc, #96]	; (800133c <__early_init+0x16c>)
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	4b18      	ldr	r3, [pc, #96]	; (8001340 <__early_init+0x170>)
 80012de:	429a      	cmp	r2, r3
 80012e0:	d016      	beq.n	8001310 <__early_init+0x140>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 80012e2:	4a18      	ldr	r2, [pc, #96]	; (8001344 <__early_init+0x174>)
 80012e4:	4b18      	ldr	r3, [pc, #96]	; (8001348 <__early_init+0x178>)
 80012e6:	601a      	str	r2, [r3, #0]
               FLASH_ACR_DCEN | STM32_FLASHBITS;
#endif

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
 80012e8:	2302      	movs	r3, #2
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 80012ea:	200c      	movs	r0, #12
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
 80012ec:	4a0d      	ldr	r2, [pc, #52]	; (8001324 <__early_init+0x154>)
 80012ee:	6891      	ldr	r1, [r2, #8]
 80012f0:	430b      	orrs	r3, r1
 80012f2:	6093      	str	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 80012f4:	6893      	ldr	r3, [r2, #8]
 80012f6:	490b      	ldr	r1, [pc, #44]	; (8001324 <__early_init+0x154>)
 80012f8:	4003      	ands	r3, r0
 80012fa:	2b08      	cmp	r3, #8
 80012fc:	d1fa      	bne.n	80012f4 <__early_init+0x124>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, TRUE);
 80012fe:	2080      	movs	r0, #128	; 0x80
 8001300:	6c4a      	ldr	r2, [r1, #68]	; 0x44
 8001302:	01c0      	lsls	r0, r0, #7
 8001304:	4302      	orrs	r2, r0
 8001306:	644a      	str	r2, [r1, #68]	; 0x44
 8001308:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800130a:	4303      	orrs	r3, r0
 800130c:	664b      	str	r3, [r1, #100]	; 0x64
 *          and before any other initialization.
 */
void __early_init(void) {

  stm32_clock_init();
}
 800130e:	4770      	bx	lr
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 8001310:	4b0e      	ldr	r3, [pc, #56]	; (800134c <__early_init+0x17c>)
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	4b0e      	ldr	r3, [pc, #56]	; (8001350 <__early_init+0x180>)
 8001316:	429a      	cmp	r2, r3
 8001318:	d1e3      	bne.n	80012e2 <__early_init+0x112>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
 800131a:	2206      	movs	r2, #6
 800131c:	4b0a      	ldr	r3, [pc, #40]	; (8001348 <__early_init+0x178>)
 800131e:	32ff      	adds	r2, #255	; 0xff
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	e7e1      	b.n	80012e8 <__early_init+0x118>
 8001324:	40023800 	.word	0x40023800
 8001328:	40007000 	.word	0x40007000
 800132c:	07405a08 	.word	0x07405a08
 8001330:	44013004 	.word	0x44013004
 8001334:	44033004 	.word	0x44033004
 8001338:	40089400 	.word	0x40089400
 800133c:	e0042000 	.word	0xe0042000
 8001340:	20006411 	.word	0x20006411
 8001344:	00000705 	.word	0x00000705
 8001348:	40023c00 	.word	0x40023c00
 800134c:	e000ed00 	.word	0xe000ed00
 8001350:	410fc241 	.word	0x410fc241
	...

08001360 <chThdExit>:
void chThdExit(msg_t msg) {
 8001360:	b570      	push	{r4, r5, r6, lr}
 8001362:	2320      	movs	r3, #32
 8001364:	f383 8811 	msr	BASEPRI, r3
  thread_t *tp = currp;
 8001368:	4b0f      	ldr	r3, [pc, #60]	; (80013a8 <chThdExit+0x48>)
 800136a:	699c      	ldr	r4, [r3, #24]
  while (list_notempty(&tp->waiting)) {
 800136c:	0025      	movs	r5, r4
  tp->u.exitcode = msg;
 800136e:	6260      	str	r0, [r4, #36]	; 0x24
  return (bool)(tlp->next != (thread_t *)tlp);
 8001370:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  while (list_notempty(&tp->waiting)) {
 8001372:	3528      	adds	r5, #40	; 0x28
 8001374:	4285      	cmp	r5, r0
 8001376:	d006      	beq.n	8001386 <chThdExit+0x26>
  tlp->next = tp->queue.next;
 8001378:	6803      	ldr	r3, [r0, #0]
 800137a:	62a3      	str	r3, [r4, #40]	; 0x28
    (void) chSchReadyI(list_remove(&tp->waiting));
 800137c:	f7ff f8b0 	bl	80004e0 <chSchReadyI>
  return (bool)(tlp->next != (thread_t *)tlp);
 8001380:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  while (list_notempty(&tp->waiting)) {
 8001382:	42a8      	cmp	r0, r5
 8001384:	d1f8      	bne.n	8001378 <chThdExit+0x18>
  if ((tp->refs == (trefs_t)0) &&
 8001386:	2322      	movs	r3, #34	; 0x22
 8001388:	5ce3      	ldrb	r3, [r4, r3]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d108      	bne.n	80013a0 <chThdExit+0x40>
      ((tp->flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC)) {
 800138e:	2321      	movs	r3, #33	; 0x21
  if ((tp->refs == (trefs_t)0) &&
 8001390:	5ce3      	ldrb	r3, [r4, r3]
 8001392:	079b      	lsls	r3, r3, #30
 8001394:	d104      	bne.n	80013a0 <chThdExit+0x40>
    REG_REMOVE(tp);
 8001396:	6922      	ldr	r2, [r4, #16]
 8001398:	6963      	ldr	r3, [r4, #20]
 800139a:	611a      	str	r2, [r3, #16]
 800139c:	6922      	ldr	r2, [r4, #16]
 800139e:	6153      	str	r3, [r2, #20]
  chSchGoSleepS(CH_STATE_FINAL);
 80013a0:	200f      	movs	r0, #15
 80013a2:	f7ff fa15 	bl	80007d0 <chSchGoSleepS>
}
 80013a6:	bd70      	pop	{r4, r5, r6, pc}
 80013a8:	200005cc 	.word	0x200005cc
 80013ac:	00000000 	.word	0x00000000

080013b0 <chSchDoReschedule>:
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoReschedule(void) {
  thread_t *otp = currp;
 80013b0:	4a0d      	ldr	r2, [pc, #52]	; (80013e8 <chSchDoReschedule+0x38>)
void chSchDoReschedule(void) {
 80013b2:	b510      	push	{r4, lr}
  thread_t *tp = tqp->next;
 80013b4:	6810      	ldr	r0, [r2, #0]
  thread_t *otp = currp;
 80013b6:	6991      	ldr	r1, [r2, #24]
  tqp->next             = tp->queue.next;
 80013b8:	6803      	ldr	r3, [r0, #0]

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
 80013ba:	2401      	movs	r4, #1
  tqp->next->queue.prev = (thread_t *)tqp;
 80013bc:	605a      	str	r2, [r3, #4]
  tqp->next             = tp->queue.next;
 80013be:	6013      	str	r3, [r2, #0]
  currp = queue_fifo_remove(&ch.rlist.queue);
 80013c0:	6190      	str	r0, [r2, #24]
  currp->state = CH_STATE_CURRENT;
 80013c2:	2220      	movs	r2, #32
 80013c4:	5484      	strb	r4, [r0, r2]
  tp->state = CH_STATE_READY;
 80013c6:	2400      	movs	r4, #0
 80013c8:	548c      	strb	r4, [r1, r2]
 80013ca:	688a      	ldr	r2, [r1, #8]
 80013cc:	e000      	b.n	80013d0 <chSchDoReschedule+0x20>
 80013ce:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio > tp->prio);
 80013d0:	689c      	ldr	r4, [r3, #8]
 80013d2:	4294      	cmp	r4, r2
 80013d4:	d8fb      	bhi.n	80013ce <chSchDoReschedule+0x1e>
  tp->queue.prev             = cp->queue.prev;
 80013d6:	685a      	ldr	r2, [r3, #4]
  tp->queue.next             = cp;
 80013d8:	600b      	str	r3, [r1, #0]
  tp->queue.prev             = cp->queue.prev;
 80013da:	604a      	str	r2, [r1, #4]
  tp->queue.prev->queue.next = tp;
 80013dc:	6011      	str	r1, [r2, #0]
  cp->queue.prev             = tp;
 80013de:	6059      	str	r1, [r3, #4]
     ahead of its peers.*/
  otp = chSchReadyAheadI(otp);
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 80013e0:	f7fe ff58 	bl	8000294 <_port_switch>
}
 80013e4:	bd10      	pop	{r4, pc}
 80013e6:	46c0      	nop			; (mov r8, r8)
 80013e8:	200005cc 	.word	0x200005cc
 80013ec:	00000000 	.word	0x00000000

080013f0 <__init_ram_areas>:
      *p = 0;
      p++;
    }
    rap++;
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 80013f0:	2280      	movs	r2, #128	; 0x80
 80013f2:	4694      	mov	ip, r2
void __init_ram_areas(void) {
 80013f4:	b5f0      	push	{r4, r5, r6, r7, lr}
      *p = 0;
 80013f6:	2600      	movs	r6, #0
  const ram_init_area_t *rap = ram_areas;
 80013f8:	4f10      	ldr	r7, [pc, #64]	; (800143c <__init_ram_areas+0x4c>)
void __init_ram_areas(void) {
 80013fa:	4d11      	ldr	r5, [pc, #68]	; (8001440 <__init_ram_areas+0x50>)
 80013fc:	4c11      	ldr	r4, [pc, #68]	; (8001444 <__init_ram_areas+0x54>)
 80013fe:	4b12      	ldr	r3, [pc, #72]	; (8001448 <__init_ram_areas+0x58>)
 8001400:	4912      	ldr	r1, [pc, #72]	; (800144c <__init_ram_areas+0x5c>)
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 8001402:	44bc      	add	ip, r7
    while (p < rap->clear_area) {
 8001404:	429c      	cmp	r4, r3
 8001406:	d90d      	bls.n	8001424 <__init_ram_areas+0x34>
 8001408:	001a      	movs	r2, r3
      *p = *tp;
 800140a:	c901      	ldmia	r1!, {r0}
 800140c:	c201      	stmia	r2!, {r0}
    while (p < rap->clear_area) {
 800140e:	4294      	cmp	r4, r2
 8001410:	d8fb      	bhi.n	800140a <__init_ram_areas+0x1a>
 8001412:	43da      	mvns	r2, r3
 8001414:	1914      	adds	r4, r2, r4
 8001416:	08a4      	lsrs	r4, r4, #2
 8001418:	3401      	adds	r4, #1
 800141a:	00a4      	lsls	r4, r4, #2
 800141c:	191b      	adds	r3, r3, r4
    while (p < rap->no_init_area) {
 800141e:	429d      	cmp	r5, r3
 8001420:	d902      	bls.n	8001428 <__init_ram_areas+0x38>
      *p = 0;
 8001422:	c340      	stmia	r3!, {r6}
    while (p < rap->no_init_area) {
 8001424:	429d      	cmp	r5, r3
 8001426:	d8fc      	bhi.n	8001422 <__init_ram_areas+0x32>
    rap++;
 8001428:	3710      	adds	r7, #16
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 800142a:	4567      	cmp	r7, ip
 800142c:	d004      	beq.n	8001438 <__init_ram_areas+0x48>
 800142e:	68bc      	ldr	r4, [r7, #8]
 8001430:	68fd      	ldr	r5, [r7, #12]
 8001432:	6839      	ldr	r1, [r7, #0]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	e7e5      	b.n	8001404 <__init_ram_areas+0x14>
#endif
}
 8001438:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800143a:	46c0      	nop			; (mov r8, r8)
 800143c:	080014c4 	.word	0x080014c4
 8001440:	20000748 	.word	0x20000748
 8001444:	20000748 	.word	0x20000748
 8001448:	20000748 	.word	0x20000748
 800144c:	08001564 	.word	0x08001564

08001450 <__default_exit>:
void __default_exit(void) {
 8001450:	e7fe      	b.n	8001450 <__default_exit>
 8001452:	46c0      	nop			; (mov r8, r8)
	...

08001460 <__late_init>:
 8001460:	4770      	bx	lr
 8001462:	46c0      	nop			; (mov r8, r8)
	...

08001470 <__core_init>:
}
 8001470:	4770      	bx	lr
 8001472:	46c0      	nop			; (mov r8, r8)

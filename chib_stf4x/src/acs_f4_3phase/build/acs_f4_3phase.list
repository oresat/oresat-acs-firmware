
build/acs_f4_3phase.elf:     file format elf32-littlearm


Disassembly of section .text:

080001c0 <Reset_Handler>:
 80001c0:	b672      	cpsid	i
 80001c2:	4826      	ldr	r0, [pc, #152]	; (800025c <endfiniloop+0x6>)
 80001c4:	f380 8809 	msr	PSP, r0
 80001c8:	4825      	ldr	r0, [pc, #148]	; (8000260 <endfiniloop+0xa>)
 80001ca:	f64e 5108 	movw	r1, #60680	; 0xed08
 80001ce:	f2ce 0100 	movt	r1, #57344	; 0xe000
 80001d2:	6008      	str	r0, [r1, #0]
 80001d4:	2002      	movs	r0, #2
 80001d6:	f380 8814 	msr	CONTROL, r0
 80001da:	f3bf 8f6f 	isb	sy
 80001de:	f000 ff2f 	bl	8001040 <__core_init>
 80001e2:	f001 f8a5 	bl	8001330 <__early_init>
 80001e6:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
 80001ea:	491e      	ldr	r1, [pc, #120]	; (8000264 <endfiniloop+0xe>)
 80001ec:	4a1e      	ldr	r2, [pc, #120]	; (8000268 <endfiniloop+0x12>)

080001ee <msloop>:
 80001ee:	4291      	cmp	r1, r2
 80001f0:	bf3c      	itt	cc
 80001f2:	f841 0b04 	strcc.w	r0, [r1], #4
 80001f6:	e7fa      	bcc.n	80001ee <msloop>
 80001f8:	491c      	ldr	r1, [pc, #112]	; (800026c <endfiniloop+0x16>)
 80001fa:	4a18      	ldr	r2, [pc, #96]	; (800025c <endfiniloop+0x6>)

080001fc <psloop>:
 80001fc:	4291      	cmp	r1, r2
 80001fe:	bf3c      	itt	cc
 8000200:	f841 0b04 	strcc.w	r0, [r1], #4
 8000204:	e7fa      	bcc.n	80001fc <psloop>
 8000206:	491a      	ldr	r1, [pc, #104]	; (8000270 <endfiniloop+0x1a>)
 8000208:	4a1a      	ldr	r2, [pc, #104]	; (8000274 <endfiniloop+0x1e>)
 800020a:	4b1b      	ldr	r3, [pc, #108]	; (8000278 <endfiniloop+0x22>)

0800020c <dloop>:
 800020c:	429a      	cmp	r2, r3
 800020e:	bf3e      	ittt	cc
 8000210:	f851 0b04 	ldrcc.w	r0, [r1], #4
 8000214:	f842 0b04 	strcc.w	r0, [r2], #4
 8000218:	e7f8      	bcc.n	800020c <dloop>
 800021a:	2000      	movs	r0, #0
 800021c:	4917      	ldr	r1, [pc, #92]	; (800027c <endfiniloop+0x26>)
 800021e:	4a18      	ldr	r2, [pc, #96]	; (8000280 <endfiniloop+0x2a>)

08000220 <bloop>:
 8000220:	4291      	cmp	r1, r2
 8000222:	bf3c      	itt	cc
 8000224:	f841 0b04 	strcc.w	r0, [r1], #4
 8000228:	e7fa      	bcc.n	8000220 <bloop>
 800022a:	f000 fec1 	bl	8000fb0 <__init_ram_areas>
 800022e:	f000 feff 	bl	8001030 <__late_init>
 8000232:	4c14      	ldr	r4, [pc, #80]	; (8000284 <endfiniloop+0x2e>)
 8000234:	4d14      	ldr	r5, [pc, #80]	; (8000288 <endfiniloop+0x32>)

08000236 <initloop>:
 8000236:	42ac      	cmp	r4, r5
 8000238:	da03      	bge.n	8000242 <endinitloop>
 800023a:	f854 1b04 	ldr.w	r1, [r4], #4
 800023e:	4788      	blx	r1
 8000240:	e7f9      	b.n	8000236 <initloop>

08000242 <endinitloop>:
 8000242:	f001 fca5 	bl	8001b90 <main>
 8000246:	4c11      	ldr	r4, [pc, #68]	; (800028c <endfiniloop+0x36>)
 8000248:	4d11      	ldr	r5, [pc, #68]	; (8000290 <endfiniloop+0x3a>)

0800024a <finiloop>:
 800024a:	42ac      	cmp	r4, r5
 800024c:	da03      	bge.n	8000256 <endfiniloop>
 800024e:	f854 1b04 	ldr.w	r1, [r4], #4
 8000252:	4788      	blx	r1
 8000254:	e7f9      	b.n	800024a <finiloop>

08000256 <endfiniloop>:
 8000256:	f000 bee3 	b.w	8001020 <__default_exit>
 800025a:	0000      	.short	0x0000
 800025c:	20000400 	.word	0x20000400
 8000260:	08000000 	.word	0x08000000
 8000264:	20000000 	.word	0x20000000
 8000268:	20000200 	.word	0x20000200
 800026c:	20000200 	.word	0x20000200
 8000270:	0800241c 	.word	0x0800241c
 8000274:	20000400 	.word	0x20000400
 8000278:	2000049c 	.word	0x2000049c
 800027c:	200004a0 	.word	0x200004a0
 8000280:	20001018 	.word	0x20001018
 8000284:	080001c0 	.word	0x080001c0
 8000288:	080001c0 	.word	0x080001c0
 800028c:	080001c0 	.word	0x080001c0
 8000290:	080001c0 	.word	0x080001c0

08000294 <_port_switch>:
 8000294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000298:	f8c1 d00c 	str.w	sp, [r1, #12]
 800029c:	68c3      	ldr	r3, [r0, #12]
 800029e:	469d      	mov	sp, r3
 80002a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080002a4 <_port_thread_start>:
 80002a4:	f000 faec 	bl	8000880 <_dbg_check_unlock>
 80002a8:	2300      	movs	r3, #0
 80002aa:	f383 8811 	msr	BASEPRI, r3
 80002ae:	4628      	mov	r0, r5
 80002b0:	47a0      	blx	r4
 80002b2:	2000      	movs	r0, #0
 80002b4:	f000 fe44 	bl	8000f40 <chThdExit>

080002b8 <_port_switch_from_isr>:
 80002b8:	f000 fb12 	bl	80008e0 <_dbg_check_lock>
 80002bc:	f000 f9e0 	bl	8000680 <chSchDoReschedule>
 80002c0:	f000 fade 	bl	8000880 <_dbg_check_unlock>

080002c4 <_port_exit_from_isr>:
 80002c4:	df00      	svc	0
 80002c6:	e7fe      	b.n	80002c6 <_port_exit_from_isr+0x2>

080002c8 <__udivsi3>:
 80002c8:	2200      	movs	r2, #0
 80002ca:	0843      	lsrs	r3, r0, #1
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d374      	bcc.n	80003ba <__udivsi3+0xf2>
 80002d0:	0903      	lsrs	r3, r0, #4
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d35f      	bcc.n	8000396 <__udivsi3+0xce>
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d344      	bcc.n	8000366 <__udivsi3+0x9e>
 80002dc:	0b03      	lsrs	r3, r0, #12
 80002de:	428b      	cmp	r3, r1
 80002e0:	d328      	bcc.n	8000334 <__udivsi3+0x6c>
 80002e2:	0c03      	lsrs	r3, r0, #16
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d30d      	bcc.n	8000304 <__udivsi3+0x3c>
 80002e8:	22ff      	movs	r2, #255	; 0xff
 80002ea:	0209      	lsls	r1, r1, #8
 80002ec:	ba12      	rev	r2, r2
 80002ee:	0c03      	lsrs	r3, r0, #16
 80002f0:	428b      	cmp	r3, r1
 80002f2:	d302      	bcc.n	80002fa <__udivsi3+0x32>
 80002f4:	1212      	asrs	r2, r2, #8
 80002f6:	0209      	lsls	r1, r1, #8
 80002f8:	d065      	beq.n	80003c6 <__udivsi3+0xfe>
 80002fa:	0b03      	lsrs	r3, r0, #12
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d319      	bcc.n	8000334 <__udivsi3+0x6c>
 8000300:	e000      	b.n	8000304 <__udivsi3+0x3c>
 8000302:	0a09      	lsrs	r1, r1, #8
 8000304:	0bc3      	lsrs	r3, r0, #15
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__udivsi3+0x46>
 800030a:	03cb      	lsls	r3, r1, #15
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0b83      	lsrs	r3, r0, #14
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__udivsi3+0x52>
 8000316:	038b      	lsls	r3, r1, #14
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0b43      	lsrs	r3, r0, #13
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__udivsi3+0x5e>
 8000322:	034b      	lsls	r3, r1, #13
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0b03      	lsrs	r3, r0, #12
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__udivsi3+0x6a>
 800032e:	030b      	lsls	r3, r1, #12
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0ac3      	lsrs	r3, r0, #11
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__udivsi3+0x76>
 800033a:	02cb      	lsls	r3, r1, #11
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0a83      	lsrs	r3, r0, #10
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__udivsi3+0x82>
 8000346:	028b      	lsls	r3, r1, #10
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	0a43      	lsrs	r3, r0, #9
 800034e:	428b      	cmp	r3, r1
 8000350:	d301      	bcc.n	8000356 <__udivsi3+0x8e>
 8000352:	024b      	lsls	r3, r1, #9
 8000354:	1ac0      	subs	r0, r0, r3
 8000356:	4152      	adcs	r2, r2
 8000358:	0a03      	lsrs	r3, r0, #8
 800035a:	428b      	cmp	r3, r1
 800035c:	d301      	bcc.n	8000362 <__udivsi3+0x9a>
 800035e:	020b      	lsls	r3, r1, #8
 8000360:	1ac0      	subs	r0, r0, r3
 8000362:	4152      	adcs	r2, r2
 8000364:	d2cd      	bcs.n	8000302 <__udivsi3+0x3a>
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__udivsi3+0xa8>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__udivsi3+0xb4>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__udivsi3+0xc0>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__udivsi3+0xcc>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__udivsi3+0xd8>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__udivsi3+0xe4>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0843      	lsrs	r3, r0, #1
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__udivsi3+0xf0>
 80003b4:	004b      	lsls	r3, r1, #1
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	1a41      	subs	r1, r0, r1
 80003bc:	d200      	bcs.n	80003c0 <__udivsi3+0xf8>
 80003be:	4601      	mov	r1, r0
 80003c0:	4152      	adcs	r2, r2
 80003c2:	4610      	mov	r0, r2
 80003c4:	4770      	bx	lr
 80003c6:	e7ff      	b.n	80003c8 <__udivsi3+0x100>
 80003c8:	b501      	push	{r0, lr}
 80003ca:	2000      	movs	r0, #0
 80003cc:	f000 f806 	bl	80003dc <__aeabi_idiv0>
 80003d0:	bd02      	pop	{r1, pc}
 80003d2:	46c0      	nop			; (mov r8, r8)

080003d4 <__aeabi_uidivmod>:
 80003d4:	2900      	cmp	r1, #0
 80003d6:	d0f7      	beq.n	80003c8 <__udivsi3+0x100>
 80003d8:	e776      	b.n	80002c8 <__udivsi3>
 80003da:	4770      	bx	lr

080003dc <__aeabi_idiv0>:
 80003dc:	4770      	bx	lr
 80003de:	46c0      	nop			; (mov r8, r8)

080003e0 <SVC_Handler>:
 * @details The SVC vector is used for exception mode re-entering after a
 *          context switch.
 * @note    The PendSV vector is only used in advanced kernel mode.
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void SVC_Handler(void) {
 80003e0:	b580      	push	{r7, lr}
 80003e2:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 80003e4:	f3ef 8309 	mrs	r3, PSP
  /* The port_extctx structure is pointed by the PSP register.*/
  ctxp = (struct port_extctx *)__get_PSP();

  /* Discarding the current exception context and positioning the stack to
     point to the real one.*/
  ctxp++;
 80003e8:	3320      	adds	r3, #32
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 80003ea:	f383 8809 	msr	PSP, r3
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80003ee:	2300      	movs	r3, #0
 80003f0:	f383 8811 	msr	BASEPRI, r3
  /* Restoring real position of the original stack frame.*/
  __set_PSP((uint32_t)ctxp);

  /* Restoring the normal interrupts status.*/
  port_unlock_from_isr();
}
 80003f4:	46bd      	mov	sp, r7
 80003f6:	bd80      	pop	{r7, pc}
	...

08000400 <trace_next>:
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8000400:	2180      	movs	r1, #128	; 0x80
 *
 * @notapi
 */
static NOINLINE void trace_next(void) {

  ch.dbg.trace_buffer.ptr->time    = chVTGetSystemTimeX();
 8000402:	4a0a      	ldr	r2, [pc, #40]	; (800042c <trace_next+0x2c>)
 8000404:	05c9      	lsls	r1, r1, #23
 8000406:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8000408:	6a49      	ldr	r1, [r1, #36]	; 0x24
 800040a:	6059      	str	r1, [r3, #4]
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 800040c:	4908      	ldr	r1, [pc, #32]	; (8000430 <trace_next+0x30>)
 800040e:	6848      	ldr	r0, [r1, #4]
#if PORT_SUPPORTS_RT == TRUE
  ch.dbg.trace_buffer.ptr->rtstamp = chSysGetRealtimeCounterX();
 8000410:	7819      	ldrb	r1, [r3, #0]
 8000412:	0200      	lsls	r0, r0, #8
 8000414:	4301      	orrs	r1, r0
 8000416:	6019      	str	r1, [r3, #0]
#endif

  /* Trace hook, useful in order to interface debug tools.*/
  CH_CFG_TRACE_HOOK(ch.dbg.trace_buffer.ptr);

  if (++ch.dbg.trace_buffer.ptr >=
 8000418:	2184      	movs	r1, #132	; 0x84
 800041a:	0109      	lsls	r1, r1, #4
 800041c:	3310      	adds	r3, #16
 800041e:	1851      	adds	r1, r2, r1
 8000420:	428b      	cmp	r3, r1
 8000422:	d301      	bcc.n	8000428 <trace_next+0x28>
      &ch.dbg.trace_buffer.buffer[CH_DBG_TRACE_BUFFER_SIZE]) {
    ch.dbg.trace_buffer.ptr = &ch.dbg.trace_buffer.buffer[0];
 8000424:	0013      	movs	r3, r2
 8000426:	3340      	adds	r3, #64	; 0x40
 8000428:	63d3      	str	r3, [r2, #60]	; 0x3c
  }
}
 800042a:	4770      	bx	lr
 800042c:	20000544 	.word	0x20000544
 8000430:	e0001000 	.word	0xe0001000
	...

08000440 <_idle_thread.lto_priv.18>:
 *          that this thread is executed only if there are no other ready
 *          threads in the system.
 *
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void _idle_thread(void *p) {
 8000440:	e7fe      	b.n	8000440 <_idle_thread.lto_priv.18>
 8000442:	46c0      	nop			; (mov r8, r8)
	...

08000450 <_port_irq_epilogue>:
/*===========================================================================*/

/**
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {
 8000450:	b580      	push	{r7, lr}
 8000452:	2320      	movs	r3, #32
 8000454:	af00      	add	r7, sp, #0
 8000456:	f383 8811 	msr	BASEPRI, r3

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 800045a:	4b0f      	ldr	r3, [pc, #60]	; (8000498 <_port_irq_epilogue+0x48>)
 800045c:	685b      	ldr	r3, [r3, #4]
 800045e:	051b      	lsls	r3, r3, #20
 8000460:	d404      	bmi.n	800046c <_port_irq_epilogue+0x1c>
 8000462:	2300      	movs	r3, #0
 8000464:	f383 8811 	msr	BASEPRI, r3
    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
    return;
  }
  port_unlock_from_isr();
}
 8000468:	46bd      	mov	sp, r7
 800046a:	bd80      	pop	{r7, pc}
  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 800046c:	f3ef 8309 	mrs	r3, PSP
    ctxp->xpsr = (regarm_t)0x01000000;
 8000470:	2280      	movs	r2, #128	; 0x80
 8000472:	3b20      	subs	r3, #32
 8000474:	0452      	lsls	r2, r2, #17
 8000476:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 8000478:	f383 8809 	msr	PSP, r3
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.queue);
 800047c:	4a07      	ldr	r2, [pc, #28]	; (800049c <_port_irq_epilogue+0x4c>)
 800047e:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->prio;
 8000480:	6992      	ldr	r2, [r2, #24]
    if (chSchIsPreemptionRequired()) {
 8000482:	6889      	ldr	r1, [r1, #8]
 8000484:	6892      	ldr	r2, [r2, #8]
 8000486:	4291      	cmp	r1, r2
 8000488:	d902      	bls.n	8000490 <_port_irq_epilogue+0x40>
      ctxp->pc = (regarm_t)_port_switch_from_isr;
 800048a:	4a05      	ldr	r2, [pc, #20]	; (80004a0 <_port_irq_epilogue+0x50>)
 800048c:	619a      	str	r2, [r3, #24]
 800048e:	e7eb      	b.n	8000468 <_port_irq_epilogue+0x18>
      ctxp->pc = (regarm_t)_port_exit_from_isr;
 8000490:	4a04      	ldr	r2, [pc, #16]	; (80004a4 <_port_irq_epilogue+0x54>)
 8000492:	619a      	str	r2, [r3, #24]
 8000494:	e7e8      	b.n	8000468 <_port_irq_epilogue+0x18>
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	e000ed00 	.word	0xe000ed00
 800049c:	20000544 	.word	0x20000544
 80004a0:	080002b9 	.word	0x080002b9
 80004a4:	080002c4 	.word	0x080002c4
	...

080004b0 <chTMStopMeasurementX>:
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 80004b0:	4a0e      	ldr	r2, [pc, #56]	; (80004ec <chTMStopMeasurementX+0x3c>)
 80004b2:	490f      	ldr	r1, [pc, #60]	; (80004f0 <chTMStopMeasurementX+0x40>)
 80004b4:	4b0f      	ldr	r3, [pc, #60]	; (80004f4 <chTMStopMeasurementX+0x44>)
 80004b6:	5889      	ldr	r1, [r1, r2]
  tmp->n++;
 80004b8:	68c2      	ldr	r2, [r0, #12]
 80004ba:	685b      	ldr	r3, [r3, #4]
 80004bc:	3201      	adds	r2, #1
 80004be:	60c2      	str	r2, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
 80004c0:	6882      	ldr	r2, [r0, #8]
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 80004c2:	b530      	push	{r4, r5, lr}
  tmp->last = (now - tmp->last) - offset;
 80004c4:	1a9b      	subs	r3, r3, r2
 80004c6:	1a5b      	subs	r3, r3, r1
  tmp->cumulative += (rttime_t)tmp->last;
 80004c8:	001c      	movs	r4, r3
 80004ca:	6901      	ldr	r1, [r0, #16]
 80004cc:	6942      	ldr	r2, [r0, #20]
 80004ce:	2500      	movs	r5, #0
 80004d0:	1864      	adds	r4, r4, r1
 80004d2:	4155      	adcs	r5, r2
  if (tmp->last > tmp->worst) {
 80004d4:	6842      	ldr	r2, [r0, #4]
  tmp->last = (now - tmp->last) - offset;
 80004d6:	6083      	str	r3, [r0, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 80004d8:	6104      	str	r4, [r0, #16]
 80004da:	6145      	str	r5, [r0, #20]
  if (tmp->last > tmp->worst) {
 80004dc:	4293      	cmp	r3, r2
 80004de:	d900      	bls.n	80004e2 <chTMStopMeasurementX+0x32>
    tmp->worst = tmp->last;
 80004e0:	6043      	str	r3, [r0, #4]
  if (tmp->last < tmp->best) {
 80004e2:	6802      	ldr	r2, [r0, #0]
 80004e4:	4293      	cmp	r3, r2
 80004e6:	d200      	bcs.n	80004ea <chTMStopMeasurementX+0x3a>
    tmp->best = tmp->last;
 80004e8:	6003      	str	r3, [r0, #0]
}
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	00000884 	.word	0x00000884
 80004f0:	20000544 	.word	0x20000544
 80004f4:	e0001000 	.word	0xe0001000
	...

08000500 <_trace_switch.part.0>:
void _trace_switch(thread_t *ntp, thread_t *otp) {

  (void)ntp;

  if ((ch.dbg.trace_buffer.suspended & CH_DBG_TRACE_MASK_SWITCH) == 0U) {
    ch.dbg.trace_buffer.ptr->type        = CH_TRACE_TYPE_SWITCH;
 8000500:	2207      	movs	r2, #7
void _trace_switch(thread_t *ntp, thread_t *otp) {
 8000502:	b570      	push	{r4, r5, r6, lr}
    ch.dbg.trace_buffer.ptr->type        = CH_TRACE_TYPE_SWITCH;
 8000504:	2501      	movs	r5, #1
 8000506:	4c0a      	ldr	r4, [pc, #40]	; (8000530 <_trace_switch.part.0+0x30>)
 8000508:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800050a:	7819      	ldrb	r1, [r3, #0]
 800050c:	4391      	bics	r1, r2
 800050e:	4329      	orrs	r1, r5
 8000510:	7019      	strb	r1, [r3, #0]
    ch.dbg.trace_buffer.ptr->state       = (uint8_t)otp->state;
 8000512:	2120      	movs	r1, #32
 8000514:	781d      	ldrb	r5, [r3, #0]
 8000516:	5c41      	ldrb	r1, [r0, r1]
 8000518:	402a      	ands	r2, r5
 800051a:	00c9      	lsls	r1, r1, #3
 800051c:	430a      	orrs	r2, r1
 800051e:	701a      	strb	r2, [r3, #0]
    ch.dbg.trace_buffer.ptr->u.sw.ntp    = currp;
 8000520:	69a2      	ldr	r2, [r4, #24]
 8000522:	609a      	str	r2, [r3, #8]
    ch.dbg.trace_buffer.ptr->u.sw.wtobjp = otp->u.wtobjp;
 8000524:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8000526:	60da      	str	r2, [r3, #12]
    trace_next();
 8000528:	f7ff ff6a 	bl	8000400 <trace_next>
  }
}
 800052c:	bd70      	pop	{r4, r5, r6, pc}
 800052e:	46c0      	nop			; (mov r8, r8)
 8000530:	20000544 	.word	0x20000544
	...

08000540 <_trace_isr_leave>:
 *
 * @param[in] isr       name of the isr
 *
 * @notapi
 */
void _trace_isr_leave(const char *isr) {
 8000540:	b510      	push	{r4, lr}

  if ((ch.dbg.trace_buffer.suspended & CH_DBG_TRACE_MASK_ISR) == 0U) {
 8000542:	4b0b      	ldr	r3, [pc, #44]	; (8000570 <_trace_isr_leave+0x30>)
 8000544:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 8000546:	0792      	lsls	r2, r2, #30
 8000548:	d410      	bmi.n	800056c <_trace_isr_leave+0x2c>
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800054a:	2220      	movs	r2, #32
 800054c:	f382 8811 	msr	BASEPRI, r2
    port_lock_from_isr();
    ch.dbg.trace_buffer.ptr->type        = CH_TRACE_TYPE_ISR_LEAVE;
 8000550:	2403      	movs	r4, #3
 8000552:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8000554:	3a19      	subs	r2, #25
 8000556:	780b      	ldrb	r3, [r1, #0]
    ch.dbg.trace_buffer.ptr->state       = 0U;
    ch.dbg.trace_buffer.ptr->u.isr.name  = isr;
 8000558:	6088      	str	r0, [r1, #8]
    ch.dbg.trace_buffer.ptr->type        = CH_TRACE_TYPE_ISR_LEAVE;
 800055a:	4393      	bics	r3, r2
 800055c:	4323      	orrs	r3, r4
    ch.dbg.trace_buffer.ptr->state       = 0U;
 800055e:	4013      	ands	r3, r2
 8000560:	700b      	strb	r3, [r1, #0]
    trace_next();
 8000562:	f7ff ff4d 	bl	8000400 <trace_next>
 8000566:	2300      	movs	r3, #0
 8000568:	f383 8811 	msr	BASEPRI, r3
    port_unlock_from_isr();
  }
}
 800056c:	bd10      	pop	{r4, pc}
 800056e:	46c0      	nop			; (mov r8, r8)
 8000570:	20000544 	.word	0x20000544
	...

08000580 <_trace_isr_enter>:
void _trace_isr_enter(const char *isr) {
 8000580:	b510      	push	{r4, lr}
  if ((ch.dbg.trace_buffer.suspended & CH_DBG_TRACE_MASK_ISR) == 0U) {
 8000582:	4b0b      	ldr	r3, [pc, #44]	; (80005b0 <_trace_isr_enter+0x30>)
 8000584:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 8000586:	0792      	lsls	r2, r2, #30
 8000588:	d410      	bmi.n	80005ac <_trace_isr_enter+0x2c>
 800058a:	2220      	movs	r2, #32
 800058c:	f382 8811 	msr	BASEPRI, r2
    ch.dbg.trace_buffer.ptr->type        = CH_TRACE_TYPE_ISR_ENTER;
 8000590:	2402      	movs	r4, #2
 8000592:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8000594:	3a19      	subs	r2, #25
 8000596:	780b      	ldrb	r3, [r1, #0]
    ch.dbg.trace_buffer.ptr->u.isr.name  = isr;
 8000598:	6088      	str	r0, [r1, #8]
    ch.dbg.trace_buffer.ptr->type        = CH_TRACE_TYPE_ISR_ENTER;
 800059a:	4393      	bics	r3, r2
 800059c:	4323      	orrs	r3, r4
    ch.dbg.trace_buffer.ptr->state       = 0U;
 800059e:	4013      	ands	r3, r2
 80005a0:	700b      	strb	r3, [r1, #0]
    trace_next();
 80005a2:	f7ff ff2d 	bl	8000400 <trace_next>
 80005a6:	2300      	movs	r3, #0
 80005a8:	f383 8811 	msr	BASEPRI, r3
}
 80005ac:	bd10      	pop	{r4, pc}
 80005ae:	46c0      	nop			; (mov r8, r8)
 80005b0:	20000544 	.word	0x20000544
	...

080005c0 <chSysHalt>:
 *
 * @param[in] reason        pointer to an error string
 *
 * @special
 */
void chSysHalt(const char *reason) {
 80005c0:	b570      	push	{r4, r5, r6, lr}
 80005c2:	0005      	movs	r5, r0
  __ASM volatile ("cpsid i" : : : "memory");
 80005c4:	b672      	cpsid	i
 *
 * @notapi
 */
void _trace_halt(const char *reason) {

  if ((ch.dbg.trace_buffer.suspended & CH_DBG_TRACE_MASK_HALT) == 0U) {
 80005c6:	4c09      	ldr	r4, [pc, #36]	; (80005ec <chSysHalt+0x2c>)
 80005c8:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 80005ca:	075b      	lsls	r3, r3, #29
 80005cc:	d501      	bpl.n	80005d2 <chSysHalt+0x12>

  /* Logging the event.*/
  _trace_halt(reason);

  /* Pointing to the passed message.*/
  ch.dbg.panic_msg = reason;
 80005ce:	62e5      	str	r5, [r4, #44]	; 0x2c
 80005d0:	e7fe      	b.n	80005d0 <chSysHalt+0x10>
    ch.dbg.trace_buffer.ptr->type          = CH_TRACE_TYPE_HALT;
 80005d2:	2207      	movs	r2, #7
 80005d4:	2004      	movs	r0, #4
 80005d6:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80005d8:	780b      	ldrb	r3, [r1, #0]
    ch.dbg.trace_buffer.ptr->state         = 0;
    ch.dbg.trace_buffer.ptr->u.halt.reason = reason;
 80005da:	608d      	str	r5, [r1, #8]
    ch.dbg.trace_buffer.ptr->type          = CH_TRACE_TYPE_HALT;
 80005dc:	4393      	bics	r3, r2
 80005de:	4303      	orrs	r3, r0
    ch.dbg.trace_buffer.ptr->state         = 0;
 80005e0:	4013      	ands	r3, r2
 80005e2:	700b      	strb	r3, [r1, #0]
    trace_next();
 80005e4:	f7ff ff0c 	bl	8000400 <trace_next>
 80005e8:	62e5      	str	r5, [r4, #44]	; 0x2c
 80005ea:	e7f1      	b.n	80005d0 <chSysHalt+0x10>
 80005ec:	20000544 	.word	0x20000544

080005f0 <chDbgCheckClassS>:
 *
 * @api
 */
void chDbgCheckClassS(void) {

  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 80005f0:	4b05      	ldr	r3, [pc, #20]	; (8000608 <chDbgCheckClassS+0x18>)
void chDbgCheckClassS(void) {
 80005f2:	b510      	push	{r4, lr}
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 80005f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005f6:	2a00      	cmp	r2, #0
 80005f8:	d103      	bne.n	8000602 <chDbgCheckClassS+0x12>
 80005fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	dd00      	ble.n	8000602 <chDbgCheckClassS+0x12>
    chSysHalt("SV#11");
  }
}
 8000600:	bd10      	pop	{r4, pc}
    chSysHalt("SV#11");
 8000602:	4802      	ldr	r0, [pc, #8]	; (800060c <chDbgCheckClassS+0x1c>)
 8000604:	f7ff ffdc 	bl	80005c0 <chSysHalt>
 8000608:	20000544 	.word	0x20000544
 800060c:	08002220 	.word	0x08002220

08000610 <chSchGoSleepS>:
void chSchGoSleepS(tstate_t newstate) {
 8000610:	b570      	push	{r4, r5, r6, lr}
 8000612:	0006      	movs	r6, r0
  chDbgCheckClassS();
 8000614:	f7ff ffec 	bl	80005f0 <chDbgCheckClassS>
  otp->state = newstate;
 8000618:	2120      	movs	r1, #32
  thread_t *otp = currp;
 800061a:	4c0f      	ldr	r4, [pc, #60]	; (8000658 <chSchGoSleepS+0x48>)
 800061c:	69a5      	ldr	r5, [r4, #24]
  tp->queue.prev->queue.next = tp;
  tqp->prev                  = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;
 800061e:	6823      	ldr	r3, [r4, #0]
  otp->state = newstate;
 8000620:	546e      	strb	r6, [r5, r1]

  tqp->next             = tp->queue.next;
 8000622:	681a      	ldr	r2, [r3, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8000624:	6054      	str	r4, [r2, #4]
  tqp->next             = tp->queue.next;
 8000626:	6022      	str	r2, [r4, #0]
  currp->state = CH_STATE_CURRENT;
 8000628:	2201      	movs	r2, #1
 800062a:	545a      	strb	r2, [r3, r1]
  currp = queue_fifo_remove(&ch.rlist.queue);
 800062c:	61a3      	str	r3, [r4, #24]
  if ((ch.dbg.trace_buffer.suspended & CH_DBG_TRACE_MASK_SWITCH) == 0U) {
 800062e:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8000630:	421a      	tst	r2, r3
 8000632:	d102      	bne.n	800063a <chSchGoSleepS+0x2a>
 8000634:	0028      	movs	r0, r5
 8000636:	f7ff ff63 	bl	8000500 <_trace_switch.part.0>
  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 800063a:	f3ef 8309 	mrs	r3, PSP
  chSysSwitch(currp, otp);
 800063e:	69ea      	ldr	r2, [r5, #28]
 8000640:	3b24      	subs	r3, #36	; 0x24
 8000642:	429a      	cmp	r2, r3
 8000644:	d804      	bhi.n	8000650 <chSchGoSleepS+0x40>
 8000646:	0029      	movs	r1, r5
 8000648:	69a0      	ldr	r0, [r4, #24]
 800064a:	f7ff fe23 	bl	8000294 <_port_switch>
}
 800064e:	bd70      	pop	{r4, r5, r6, pc}
  chSysSwitch(currp, otp);
 8000650:	4802      	ldr	r0, [pc, #8]	; (800065c <chSchGoSleepS+0x4c>)
 8000652:	f7ff ffb5 	bl	80005c0 <chSysHalt>
 8000656:	46c0      	nop			; (mov r8, r8)
 8000658:	20000544 	.word	0x20000544
 800065c:	08002228 	.word	0x08002228

08000660 <chDbgCheckClassI>:
  if ((ch.dbg.isr_cnt < (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8000660:	4b05      	ldr	r3, [pc, #20]	; (8000678 <chDbgCheckClassI+0x18>)
void chDbgCheckClassI(void) {
 8000662:	b510      	push	{r4, lr}
  if ((ch.dbg.isr_cnt < (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8000664:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000666:	2a00      	cmp	r2, #0
 8000668:	db03      	blt.n	8000672 <chDbgCheckClassI+0x12>
 800066a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800066c:	2b00      	cmp	r3, #0
 800066e:	dd00      	ble.n	8000672 <chDbgCheckClassI+0x12>
}
 8000670:	bd10      	pop	{r4, pc}
    chSysHalt("SV#10");
 8000672:	4802      	ldr	r0, [pc, #8]	; (800067c <chDbgCheckClassI+0x1c>)
 8000674:	f7ff ffa4 	bl	80005c0 <chSysHalt>
 8000678:	20000544 	.word	0x20000544
 800067c:	08002218 	.word	0x08002218

08000680 <chSchDoReschedule>:
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself.
 *
 * @special
 */
void chSchDoRescheduleAhead(void) {
 8000680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  thread_t *otp = currp;

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
 8000682:	2201      	movs	r2, #1
 8000684:	2720      	movs	r7, #32
  thread_t *otp = currp;
 8000686:	4d1a      	ldr	r5, [pc, #104]	; (80006f0 <chSchDoReschedule+0x70>)
  thread_t *tp = tqp->next;
 8000688:	682b      	ldr	r3, [r5, #0]
 800068a:	69ae      	ldr	r6, [r5, #24]
  tqp->next             = tp->queue.next;
 800068c:	681c      	ldr	r4, [r3, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 800068e:	6065      	str	r5, [r4, #4]
  tqp->next             = tp->queue.next;
 8000690:	602c      	str	r4, [r5, #0]
  currp->state = CH_STATE_CURRENT;
 8000692:	55da      	strb	r2, [r3, r7]
  currp = queue_fifo_remove(&ch.rlist.queue);
 8000694:	61ab      	str	r3, [r5, #24]
  chDbgCheckClassI();
 8000696:	f7ff ffe3 	bl	8000660 <chDbgCheckClassI>
  chDbgCheck(tp != NULL);
 800069a:	2e00      	cmp	r6, #0
 800069c:	d022      	beq.n	80006e4 <chSchDoReschedule+0x64>
  chDbgAssert((tp->state != CH_STATE_READY) &&
 800069e:	5df3      	ldrb	r3, [r6, r7]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d01f      	beq.n	80006e4 <chSchDoReschedule+0x64>
 80006a4:	2b0f      	cmp	r3, #15
 80006a6:	d01d      	beq.n	80006e4 <chSchDoReschedule+0x64>
  tp->state = CH_STATE_READY;
 80006a8:	2300      	movs	r3, #0
 80006aa:	55f3      	strb	r3, [r6, r7]
 80006ac:	68b3      	ldr	r3, [r6, #8]
 80006ae:	e000      	b.n	80006b2 <chSchDoReschedule+0x32>
 80006b0:	6824      	ldr	r4, [r4, #0]
  } while (cp->prio > tp->prio);
 80006b2:	68a2      	ldr	r2, [r4, #8]
 80006b4:	429a      	cmp	r2, r3
 80006b6:	d8fb      	bhi.n	80006b0 <chSchDoReschedule+0x30>
  tp->queue.prev             = cp->queue.prev;
 80006b8:	6863      	ldr	r3, [r4, #4]
  tp->queue.next             = cp;
 80006ba:	6034      	str	r4, [r6, #0]
  tp->queue.prev             = cp->queue.prev;
 80006bc:	6073      	str	r3, [r6, #4]
  tp->queue.prev->queue.next = tp;
 80006be:	601e      	str	r6, [r3, #0]
  cp->queue.prev             = tp;
 80006c0:	6066      	str	r6, [r4, #4]
 80006c2:	8f2b      	ldrh	r3, [r5, #56]	; 0x38
 80006c4:	07db      	lsls	r3, r3, #31
 80006c6:	d402      	bmi.n	80006ce <chSchDoReschedule+0x4e>
 80006c8:	0030      	movs	r0, r6
 80006ca:	f7ff ff19 	bl	8000500 <_trace_switch.part.0>
 80006ce:	f3ef 8309 	mrs	r3, PSP

  /* Placing in ready list ahead of peers.*/
  otp = chSchReadyAheadI(otp);

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 80006d2:	69f2      	ldr	r2, [r6, #28]
 80006d4:	3b24      	subs	r3, #36	; 0x24
 80006d6:	429a      	cmp	r2, r3
 80006d8:	d807      	bhi.n	80006ea <chSchDoReschedule+0x6a>
 80006da:	69a8      	ldr	r0, [r5, #24]
 80006dc:	0031      	movs	r1, r6
 80006de:	f7ff fdd9 	bl	8000294 <_port_switch>
}
 80006e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chDbgCheck(tp != NULL);
 80006e4:	4803      	ldr	r0, [pc, #12]	; (80006f4 <chSchDoReschedule+0x74>)
 80006e6:	f7ff ff6b 	bl	80005c0 <chSysHalt>
  chSysSwitch(currp, otp);
 80006ea:	4803      	ldr	r0, [pc, #12]	; (80006f8 <chSchDoReschedule+0x78>)
 80006ec:	f7ff ff68 	bl	80005c0 <chSysHalt>
 80006f0:	20000544 	.word	0x20000544
 80006f4:	08002174 	.word	0x08002174
 80006f8:	08002228 	.word	0x08002228
 80006fc:	00000000 	.word	0x00000000

08000700 <chSchReadyI>:
thread_t *chSchReadyI(thread_t *tp) {
 8000700:	b510      	push	{r4, lr}
 8000702:	0004      	movs	r4, r0
  chDbgCheckClassI();
 8000704:	f7ff ffac 	bl	8000660 <chDbgCheckClassI>
  chDbgCheck(tp != NULL);
 8000708:	2c00      	cmp	r4, #0
 800070a:	d014      	beq.n	8000736 <chSchReadyI+0x36>
  chDbgAssert((tp->state != CH_STATE_READY) &&
 800070c:	2320      	movs	r3, #32
 800070e:	5ce2      	ldrb	r2, [r4, r3]
 8000710:	2a00      	cmp	r2, #0
 8000712:	d010      	beq.n	8000736 <chSchReadyI+0x36>
 8000714:	2a0f      	cmp	r2, #15
 8000716:	d00e      	beq.n	8000736 <chSchReadyI+0x36>
  tp->state = CH_STATE_READY;
 8000718:	2200      	movs	r2, #0
 800071a:	54e2      	strb	r2, [r4, r3]
 800071c:	68a2      	ldr	r2, [r4, #8]
  cp = (thread_t *)&ch.rlist.queue;
 800071e:	4b07      	ldr	r3, [pc, #28]	; (800073c <chSchReadyI+0x3c>)
    cp = cp->queue.next;
 8000720:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8000722:	6899      	ldr	r1, [r3, #8]
 8000724:	4291      	cmp	r1, r2
 8000726:	d2fb      	bcs.n	8000720 <chSchReadyI+0x20>
  tp->queue.prev             = cp->queue.prev;
 8000728:	685a      	ldr	r2, [r3, #4]
  tp->queue.next             = cp;
 800072a:	6023      	str	r3, [r4, #0]
  tp->queue.prev             = cp->queue.prev;
 800072c:	6062      	str	r2, [r4, #4]
}
 800072e:	0020      	movs	r0, r4
  tp->queue.prev->queue.next = tp;
 8000730:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 8000732:	605c      	str	r4, [r3, #4]
}
 8000734:	bd10      	pop	{r4, pc}
  chDbgCheck(tp != NULL);
 8000736:	4802      	ldr	r0, [pc, #8]	; (8000740 <chSchReadyI+0x40>)
 8000738:	f7ff ff42 	bl	80005c0 <chSysHalt>
 800073c:	20000544 	.word	0x20000544
 8000740:	08002148 	.word	0x08002148
	...

08000750 <_dbg_check_leave_isr>:
void _dbg_check_leave_isr(void) {
 8000750:	b510      	push	{r4, lr}
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8000752:	2320      	movs	r3, #32
 8000754:	f383 8811 	msr	BASEPRI, r3
  if ((ch.dbg.isr_cnt <= (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8000758:	4a07      	ldr	r2, [pc, #28]	; (8000778 <_dbg_check_leave_isr+0x28>)
 800075a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800075c:	2b00      	cmp	r3, #0
 800075e:	dd02      	ble.n	8000766 <_dbg_check_leave_isr+0x16>
 8000760:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8000762:	2900      	cmp	r1, #0
 8000764:	d002      	beq.n	800076c <_dbg_check_leave_isr+0x1c>
    chSysHalt("SV#9");
 8000766:	4805      	ldr	r0, [pc, #20]	; (800077c <_dbg_check_leave_isr+0x2c>)
 8000768:	f7ff ff2a 	bl	80005c0 <chSysHalt>
  ch.dbg.isr_cnt--;
 800076c:	3b01      	subs	r3, #1
 800076e:	6313      	str	r3, [r2, #48]	; 0x30
 8000770:	2300      	movs	r3, #0
 8000772:	f383 8811 	msr	BASEPRI, r3
}
 8000776:	bd10      	pop	{r4, pc}
 8000778:	20000544 	.word	0x20000544
 800077c:	080021f0 	.word	0x080021f0

08000780 <_dbg_check_enter_isr>:
void _dbg_check_enter_isr(void) {
 8000780:	b510      	push	{r4, lr}
 8000782:	2320      	movs	r3, #32
 8000784:	f383 8811 	msr	BASEPRI, r3
  if ((ch.dbg.isr_cnt < (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8000788:	4a07      	ldr	r2, [pc, #28]	; (80007a8 <_dbg_check_enter_isr+0x28>)
 800078a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800078c:	2b00      	cmp	r3, #0
 800078e:	db02      	blt.n	8000796 <_dbg_check_enter_isr+0x16>
 8000790:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8000792:	2900      	cmp	r1, #0
 8000794:	d002      	beq.n	800079c <_dbg_check_enter_isr+0x1c>
    chSysHalt("SV#8");
 8000796:	4805      	ldr	r0, [pc, #20]	; (80007ac <_dbg_check_enter_isr+0x2c>)
 8000798:	f7ff ff12 	bl	80005c0 <chSysHalt>
  ch.dbg.isr_cnt++;
 800079c:	3301      	adds	r3, #1
 800079e:	6313      	str	r3, [r2, #48]	; 0x30
 80007a0:	2300      	movs	r3, #0
 80007a2:	f383 8811 	msr	BASEPRI, r3
}
 80007a6:	bd10      	pop	{r4, pc}
 80007a8:	20000544 	.word	0x20000544
 80007ac:	080021e8 	.word	0x080021e8

080007b0 <_dbg_check_unlock_from_isr>:
  if ((ch.dbg.isr_cnt <= (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 80007b0:	4b06      	ldr	r3, [pc, #24]	; (80007cc <_dbg_check_unlock_from_isr+0x1c>)
void _dbg_check_unlock_from_isr(void) {
 80007b2:	b510      	push	{r4, lr}
  if ((ch.dbg.isr_cnt <= (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 80007b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007b6:	2a00      	cmp	r2, #0
 80007b8:	dd05      	ble.n	80007c6 <_dbg_check_unlock_from_isr+0x16>
 80007ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007bc:	2a00      	cmp	r2, #0
 80007be:	dd02      	ble.n	80007c6 <_dbg_check_unlock_from_isr+0x16>
  _dbg_leave_lock();
 80007c0:	2200      	movs	r2, #0
 80007c2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80007c4:	bd10      	pop	{r4, pc}
    chSysHalt("SV#7");
 80007c6:	4802      	ldr	r0, [pc, #8]	; (80007d0 <_dbg_check_unlock_from_isr+0x20>)
 80007c8:	f7ff fefa 	bl	80005c0 <chSysHalt>
 80007cc:	20000544 	.word	0x20000544
 80007d0:	08002210 	.word	0x08002210
	...

080007e0 <_dbg_check_lock_from_isr>:
  if ((ch.dbg.isr_cnt <= (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 80007e0:	4b06      	ldr	r3, [pc, #24]	; (80007fc <_dbg_check_lock_from_isr+0x1c>)
void _dbg_check_lock_from_isr(void) {
 80007e2:	b510      	push	{r4, lr}
  if ((ch.dbg.isr_cnt <= (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 80007e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007e6:	2a00      	cmp	r2, #0
 80007e8:	dd02      	ble.n	80007f0 <_dbg_check_lock_from_isr+0x10>
 80007ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007ec:	2a00      	cmp	r2, #0
 80007ee:	d002      	beq.n	80007f6 <_dbg_check_lock_from_isr+0x16>
    chSysHalt("SV#6");
 80007f0:	4803      	ldr	r0, [pc, #12]	; (8000800 <_dbg_check_lock_from_isr+0x20>)
 80007f2:	f7ff fee5 	bl	80005c0 <chSysHalt>
  _dbg_enter_lock();
 80007f6:	2201      	movs	r2, #1
 80007f8:	635a      	str	r2, [r3, #52]	; 0x34
}
 80007fa:	bd10      	pop	{r4, pc}
 80007fc:	20000544 	.word	0x20000544
 8000800:	08002200 	.word	0x08002200
	...

08000810 <wakeup>:
static void wakeup(void *p) {
 8000810:	b570      	push	{r4, r5, r6, lr}
 8000812:	0004      	movs	r4, r0
 8000814:	2520      	movs	r5, #32
 8000816:	f385 8811 	msr	BASEPRI, r5
 */
static inline void chSysLockFromISR(void) {

  port_lock_from_isr();
  _stats_start_measure_crit_isr();
  _dbg_check_lock_from_isr();
 800081a:	f7ff ffe1 	bl	80007e0 <_dbg_check_lock_from_isr>
  switch (tp->state) {
 800081e:	5d63      	ldrb	r3, [r4, r5]
 8000820:	2b07      	cmp	r3, #7
 8000822:	d80e      	bhi.n	8000842 <wakeup+0x32>
 8000824:	4a12      	ldr	r2, [pc, #72]	; (8000870 <wakeup+0x60>)
 8000826:	009b      	lsls	r3, r3, #2
 8000828:	58d3      	ldr	r3, [r2, r3]
 800082a:	469f      	mov	pc, r3
    chSemFastSignalI(tp->u.wtsemp);
 800082c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 *
 * @iclass
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();
 800082e:	f7ff ff17 	bl	8000660 <chDbgCheckClassI>

  sp->cnt++;
 8000832:	68ab      	ldr	r3, [r5, #8]
 8000834:	3301      	adds	r3, #1
 8000836:	60ab      	str	r3, [r5, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->queue.prev->queue.next = tp->queue.next;
 8000838:	6822      	ldr	r2, [r4, #0]
 800083a:	6863      	ldr	r3, [r4, #4]
 800083c:	601a      	str	r2, [r3, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 800083e:	6822      	ldr	r2, [r4, #0]
 8000840:	6053      	str	r3, [r2, #4]
  tp->u.rdymsg = MSG_TIMEOUT;
 8000842:	2301      	movs	r3, #1
 8000844:	425b      	negs	r3, r3
 8000846:	6263      	str	r3, [r4, #36]	; 0x24
  (void) chSchReadyI(tp);
 8000848:	0020      	movs	r0, r4
 800084a:	f7ff ff59 	bl	8000700 <chSchReadyI>
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {

  _dbg_check_unlock_from_isr();
 800084e:	f7ff ffaf 	bl	80007b0 <_dbg_check_unlock_from_isr>
 8000852:	2300      	movs	r3, #0
 8000854:	f383 8811 	msr	BASEPRI, r3
}
 8000858:	bd70      	pop	{r4, r5, r6, pc}
    *tp->u.wttrp = NULL;
 800085a:	2200      	movs	r2, #0
 800085c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  (void) chSchReadyI(tp);
 800085e:	0020      	movs	r0, r4
    *tp->u.wttrp = NULL;
 8000860:	601a      	str	r2, [r3, #0]
  tp->u.rdymsg = MSG_TIMEOUT;
 8000862:	2301      	movs	r3, #1
 8000864:	425b      	negs	r3, r3
 8000866:	6263      	str	r3, [r4, #36]	; 0x24
  (void) chSchReadyI(tp);
 8000868:	f7ff ff4a 	bl	8000700 <chSchReadyI>
 800086c:	e7ef      	b.n	800084e <wakeup+0x3e>
 800086e:	46c0      	nop			; (mov r8, r8)
 8000870:	080020e0 	.word	0x080020e0
	...

08000880 <_dbg_check_unlock>:
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8000880:	4b06      	ldr	r3, [pc, #24]	; (800089c <_dbg_check_unlock+0x1c>)
void _dbg_check_unlock(void) {
 8000882:	b510      	push	{r4, lr}
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8000884:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000886:	2a00      	cmp	r2, #0
 8000888:	d104      	bne.n	8000894 <_dbg_check_unlock+0x14>
 800088a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800088c:	2900      	cmp	r1, #0
 800088e:	dd01      	ble.n	8000894 <_dbg_check_unlock+0x14>
  _dbg_leave_lock();
 8000890:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000892:	bd10      	pop	{r4, pc}
    chSysHalt("SV#5");
 8000894:	4802      	ldr	r0, [pc, #8]	; (80008a0 <_dbg_check_unlock+0x20>)
 8000896:	f7ff fe93 	bl	80005c0 <chSysHalt>
 800089a:	46c0      	nop			; (mov r8, r8)
 800089c:	20000544 	.word	0x20000544
 80008a0:	08002208 	.word	0x08002208
	...

080008b0 <chSysUnlock.lto_priv.19>:
static inline void chSysUnlock(void) {
 80008b0:	b510      	push	{r4, lr}
  _dbg_check_unlock();
 80008b2:	f7ff ffe5 	bl	8000880 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80008b6:	4b08      	ldr	r3, [pc, #32]	; (80008d8 <chSysUnlock.lto_priv.19+0x28>)
 80008b8:	681a      	ldr	r2, [r3, #0]
 80008ba:	429a      	cmp	r2, r3
 80008bc:	d004      	beq.n	80008c8 <chSysUnlock.lto_priv.19+0x18>
 80008be:	699b      	ldr	r3, [r3, #24]
 80008c0:	6899      	ldr	r1, [r3, #8]
 80008c2:	6893      	ldr	r3, [r2, #8]
 80008c4:	4299      	cmp	r1, r3
 80008c6:	d303      	bcc.n	80008d0 <chSysUnlock.lto_priv.19+0x20>
 80008c8:	2300      	movs	r3, #0
 80008ca:	f383 8811 	msr	BASEPRI, r3
}
 80008ce:	bd10      	pop	{r4, pc}
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80008d0:	4802      	ldr	r0, [pc, #8]	; (80008dc <chSysUnlock.lto_priv.19+0x2c>)
 80008d2:	f7ff fe75 	bl	80005c0 <chSysHalt>
 80008d6:	46c0      	nop			; (mov r8, r8)
 80008d8:	20000544 	.word	0x20000544
 80008dc:	08002100 	.word	0x08002100

080008e0 <_dbg_check_lock>:
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 80008e0:	4b06      	ldr	r3, [pc, #24]	; (80008fc <_dbg_check_lock+0x1c>)
void _dbg_check_lock(void) {
 80008e2:	b510      	push	{r4, lr}
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 80008e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80008e6:	2a00      	cmp	r2, #0
 80008e8:	d102      	bne.n	80008f0 <_dbg_check_lock+0x10>
 80008ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008ec:	2a00      	cmp	r2, #0
 80008ee:	d002      	beq.n	80008f6 <_dbg_check_lock+0x16>
    chSysHalt("SV#4");
 80008f0:	4803      	ldr	r0, [pc, #12]	; (8000900 <_dbg_check_lock+0x20>)
 80008f2:	f7ff fe65 	bl	80005c0 <chSysHalt>
  _dbg_enter_lock();
 80008f6:	2201      	movs	r2, #1
 80008f8:	635a      	str	r2, [r3, #52]	; 0x34
}
 80008fa:	bd10      	pop	{r4, pc}
 80008fc:	20000544 	.word	0x20000544
 8000900:	080021f8 	.word	0x080021f8
	...

08000910 <chCoreAllocAligned>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAllocAligned(size_t size, unsigned align) {
 8000910:	b570      	push	{r4, r5, r6, lr}
 8000912:	2320      	movs	r3, #32
 8000914:	0005      	movs	r5, r0
 8000916:	000c      	movs	r4, r1
 8000918:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 800091c:	f7ff ffe0 	bl	80008e0 <_dbg_check_lock>
  chDbgCheckClassI();
 8000920:	f7ff fe9e 	bl	8000660 <chDbgCheckClassI>
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));
 8000924:	2c00      	cmp	r4, #0
 8000926:	d021      	beq.n	800096c <chCoreAllocAligned+0x5c>
 8000928:	1e62      	subs	r2, r4, #1
 800092a:	4222      	tst	r2, r4
 800092c:	d11e      	bne.n	800096c <chCoreAllocAligned+0x5c>
  p = (uint8_t *)MEM_ALIGN_NEXT(nextmem, align);
 800092e:	4913      	ldr	r1, [pc, #76]	; (800097c <chCoreAllocAligned+0x6c>)
  size = MEM_ALIGN_NEXT(size, align);
 8000930:	18ad      	adds	r5, r5, r2
  p = (uint8_t *)MEM_ALIGN_NEXT(nextmem, align);
 8000932:	680a      	ldr	r2, [r1, #0]
  size = MEM_ALIGN_NEXT(size, align);
 8000934:	4263      	negs	r3, r4
  p = (uint8_t *)MEM_ALIGN_NEXT(nextmem, align);
 8000936:	3a01      	subs	r2, #1
 8000938:	1914      	adds	r4, r2, r4
 800093a:	401c      	ands	r4, r3
  size = MEM_ALIGN_NEXT(size, align);
 800093c:	401d      	ands	r5, r3
  if (((size_t)endmem - (size_t)p) < size) {
 800093e:	4b10      	ldr	r3, [pc, #64]	; (8000980 <chCoreAllocAligned+0x70>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	1b1b      	subs	r3, r3, r4
 8000944:	429d      	cmp	r5, r3
 8000946:	d817      	bhi.n	8000978 <chCoreAllocAligned+0x68>
  nextmem = p + size;
 8000948:	1965      	adds	r5, r4, r5
 800094a:	600d      	str	r5, [r1, #0]
  _dbg_check_unlock();
 800094c:	f7ff ff98 	bl	8000880 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8000950:	4b0c      	ldr	r3, [pc, #48]	; (8000984 <chCoreAllocAligned+0x74>)
 8000952:	681a      	ldr	r2, [r3, #0]
 8000954:	429a      	cmp	r2, r3
 8000956:	d004      	beq.n	8000962 <chCoreAllocAligned+0x52>
 8000958:	699b      	ldr	r3, [r3, #24]
 800095a:	6899      	ldr	r1, [r3, #8]
 800095c:	6893      	ldr	r3, [r2, #8]
 800095e:	4299      	cmp	r1, r3
 8000960:	d307      	bcc.n	8000972 <chCoreAllocAligned+0x62>
 8000962:	2300      	movs	r3, #0
 8000964:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocAlignedI(size, align);
  chSysUnlock();

  return p;
}
 8000968:	0020      	movs	r0, r4
 800096a:	bd70      	pop	{r4, r5, r6, pc}
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));
 800096c:	4806      	ldr	r0, [pc, #24]	; (8000988 <chCoreAllocAligned+0x78>)
 800096e:	f7ff fe27 	bl	80005c0 <chSysHalt>
 8000972:	4806      	ldr	r0, [pc, #24]	; (800098c <chCoreAllocAligned+0x7c>)
 8000974:	f7ff fe24 	bl	80005c0 <chSysHalt>
    return NULL;
 8000978:	2400      	movs	r4, #0
 800097a:	e7e7      	b.n	800094c <chCoreAllocAligned+0x3c>
 800097c:	20000ecc 	.word	0x20000ecc
 8000980:	20000ec8 	.word	0x20000ec8
 8000984:	20000544 	.word	0x20000544
 8000988:	08002160 	.word	0x08002160
 800098c:	08002118 	.word	0x08002118

08000990 <chRegFindThreadByWorkingArea>:
 * @return              A pointer to the found thread.
 * @retval NULL         if a matching thread has not been found.
 *
 * @api
 */
thread_t *chRegFindThreadByWorkingArea(stkalign_t *wa) {
 8000990:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000992:	464e      	mov	r6, r9
 8000994:	46de      	mov	lr, fp
 8000996:	4657      	mov	r7, sl
 8000998:	4645      	mov	r5, r8
 800099a:	b5e0      	push	{r5, r6, r7, lr}
 800099c:	2320      	movs	r3, #32
 800099e:	b085      	sub	sp, #20
 80009a0:	0006      	movs	r6, r0
 80009a2:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 80009a6:	f7ff ff9b 	bl	80008e0 <_dbg_check_lock>
  tp->refs++;
 80009aa:	2222      	movs	r2, #34	; 0x22
  tp = ch.rlist.newer;
 80009ac:	4cc2      	ldr	r4, [pc, #776]	; (8000cb8 <chRegFindThreadByWorkingArea+0x328>)
 80009ae:	6927      	ldr	r7, [r4, #16]
  tp->refs++;
 80009b0:	5cbb      	ldrb	r3, [r7, r2]
 80009b2:	3301      	adds	r3, #1
 80009b4:	54bb      	strb	r3, [r7, r2]
  _dbg_check_unlock();
 80009b6:	f7ff ff63 	bl	8000880 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80009ba:	6823      	ldr	r3, [r4, #0]
 80009bc:	42a3      	cmp	r3, r4
 80009be:	d004      	beq.n	80009ca <chRegFindThreadByWorkingArea+0x3a>
 80009c0:	69a2      	ldr	r2, [r4, #24]
 80009c2:	689b      	ldr	r3, [r3, #8]
 80009c4:	6892      	ldr	r2, [r2, #8]
 80009c6:	429a      	cmp	r2, r3
 80009c8:	d34f      	bcc.n	8000a6a <chRegFindThreadByWorkingArea+0xda>
 80009ca:	2300      	movs	r3, #0
 80009cc:	f383 8811 	msr	BASEPRI, r3
  if ((tp->refs == (trefs_t)0) && (tp->state == CH_STATE_FINAL)) {
    REG_REMOVE(tp);
    chSysUnlock();

#if CH_CFG_USE_DYNAMIC == TRUE
    switch (tp->flags & CH_FLAG_MODE_MASK) {
 80009d0:	3321      	adds	r3, #33	; 0x21
 80009d2:	4699      	mov	r9, r3
 80009d4:	3b1e      	subs	r3, #30
 80009d6:	469a      	mov	sl, r3
 */
void chHeapFree(void *p) {
  heap_header_t *qp, *hp;
  memory_heap_t *heapp;

  chDbgCheck((p != NULL) && MEM_IS_ALIGNED(p, CH_HEAP_ALIGNMENT));
 80009d8:	3304      	adds	r3, #4
 80009da:	469b      	mov	fp, r3
  thread_t *ctp;

  /* Scanning registry.*/
  ctp = chRegFirstThread();
  do {
    if (chThdGetWorkingAreaX(ctp) == wa) {
 80009dc:	69fb      	ldr	r3, [r7, #28]
 80009de:	429e      	cmp	r6, r3
 80009e0:	d100      	bne.n	80009e4 <chRegFindThreadByWorkingArea+0x54>
 80009e2:	e0e6      	b.n	8000bb2 <chRegFindThreadByWorkingArea+0x222>
 80009e4:	2320      	movs	r3, #32
 80009e6:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 80009ea:	f7ff ff79 	bl	80008e0 <_dbg_check_lock>
  ntp = tp->newer;
 80009ee:	693d      	ldr	r5, [r7, #16]
  if (ntp == (thread_t *)&ch.rlist) {
 80009f0:	42a5      	cmp	r5, r4
 80009f2:	d100      	bne.n	80009f6 <chRegFindThreadByWorkingArea+0x66>
 80009f4:	e0df      	b.n	8000bb6 <chRegFindThreadByWorkingArea+0x226>
    chDbgAssert(ntp->refs < (trefs_t)255, "too many references");
 80009f6:	2222      	movs	r2, #34	; 0x22
 80009f8:	5cab      	ldrb	r3, [r5, r2]
 80009fa:	2bff      	cmp	r3, #255	; 0xff
 80009fc:	d04d      	beq.n	8000a9a <chRegFindThreadByWorkingArea+0x10a>
    ntp->refs++;
 80009fe:	3301      	adds	r3, #1
 8000a00:	54ab      	strb	r3, [r5, r2]
  _dbg_check_unlock();
 8000a02:	f7ff ff3d 	bl	8000880 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8000a06:	6823      	ldr	r3, [r4, #0]
 8000a08:	42a3      	cmp	r3, r4
 8000a0a:	d004      	beq.n	8000a16 <chRegFindThreadByWorkingArea+0x86>
 8000a0c:	69a2      	ldr	r2, [r4, #24]
 8000a0e:	689b      	ldr	r3, [r3, #8]
 8000a10:	6892      	ldr	r2, [r2, #8]
 8000a12:	429a      	cmp	r2, r3
 8000a14:	d329      	bcc.n	8000a6a <chRegFindThreadByWorkingArea+0xda>
 8000a16:	2300      	movs	r3, #0
 8000a18:	f383 8811 	msr	BASEPRI, r3
 8000a1c:	3320      	adds	r3, #32
 8000a1e:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8000a22:	f7ff ff5d 	bl	80008e0 <_dbg_check_lock>
  chDbgAssert(tp->refs > (trefs_t)0, "not referenced");
 8000a26:	2222      	movs	r2, #34	; 0x22
 8000a28:	5cbb      	ldrb	r3, [r7, r2]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d032      	beq.n	8000a94 <chRegFindThreadByWorkingArea+0x104>
  tp->refs--;
 8000a2e:	3b01      	subs	r3, #1
 8000a30:	54bb      	strb	r3, [r7, r2]
  if ((tp->refs == (trefs_t)0) && (tp->state == CH_STATE_FINAL)) {
 8000a32:	6a3a      	ldr	r2, [r7, #32]
 8000a34:	4ba1      	ldr	r3, [pc, #644]	; (8000cbc <chRegFindThreadByWorkingArea+0x32c>)
 8000a36:	4013      	ands	r3, r2
 8000a38:	2b0f      	cmp	r3, #15
 8000a3a:	d019      	beq.n	8000a70 <chRegFindThreadByWorkingArea+0xe0>
  _dbg_check_unlock();
 8000a3c:	f7ff ff20 	bl	8000880 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8000a40:	6823      	ldr	r3, [r4, #0]
 8000a42:	42a3      	cmp	r3, r4
 8000a44:	d004      	beq.n	8000a50 <chRegFindThreadByWorkingArea+0xc0>
 8000a46:	69a2      	ldr	r2, [r4, #24]
 8000a48:	689b      	ldr	r3, [r3, #8]
 8000a4a:	6892      	ldr	r2, [r2, #8]
 8000a4c:	429a      	cmp	r2, r3
 8000a4e:	d31e      	bcc.n	8000a8e <chRegFindThreadByWorkingArea+0xfe>
 8000a50:	2300      	movs	r3, #0
 8000a52:	f383 8811 	msr	BASEPRI, r3
 8000a56:	1e2f      	subs	r7, r5, #0
      return ctp;
    }
    ctp = chRegNextThread(ctp);
  } while (ctp != NULL);
 8000a58:	d1c0      	bne.n	80009dc <chRegFindThreadByWorkingArea+0x4c>

  return NULL;
}
 8000a5a:	0028      	movs	r0, r5
 8000a5c:	b005      	add	sp, #20
 8000a5e:	bc3c      	pop	{r2, r3, r4, r5}
 8000a60:	4690      	mov	r8, r2
 8000a62:	4699      	mov	r9, r3
 8000a64:	46a2      	mov	sl, r4
 8000a66:	46ab      	mov	fp, r5
 8000a68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a6a:	4895      	ldr	r0, [pc, #596]	; (8000cc0 <chRegFindThreadByWorkingArea+0x330>)
 8000a6c:	f7ff fda8 	bl	80005c0 <chSysHalt>
    REG_REMOVE(tp);
 8000a70:	697b      	ldr	r3, [r7, #20]
 8000a72:	693a      	ldr	r2, [r7, #16]
 8000a74:	611a      	str	r2, [r3, #16]
 8000a76:	693a      	ldr	r2, [r7, #16]
 8000a78:	6153      	str	r3, [r2, #20]
  _dbg_check_unlock();
 8000a7a:	f7ff ff01 	bl	8000880 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8000a7e:	6823      	ldr	r3, [r4, #0]
 8000a80:	42a3      	cmp	r3, r4
 8000a82:	d00d      	beq.n	8000aa0 <chRegFindThreadByWorkingArea+0x110>
 8000a84:	69a2      	ldr	r2, [r4, #24]
 8000a86:	689b      	ldr	r3, [r3, #8]
 8000a88:	6892      	ldr	r2, [r2, #8]
 8000a8a:	429a      	cmp	r2, r3
 8000a8c:	d208      	bcs.n	8000aa0 <chRegFindThreadByWorkingArea+0x110>
 8000a8e:	488d      	ldr	r0, [pc, #564]	; (8000cc4 <chRegFindThreadByWorkingArea+0x334>)
 8000a90:	f7ff fd96 	bl	80005c0 <chSysHalt>
  chDbgAssert(tp->refs > (trefs_t)0, "not referenced");
 8000a94:	488c      	ldr	r0, [pc, #560]	; (8000cc8 <chRegFindThreadByWorkingArea+0x338>)
 8000a96:	f7ff fd93 	bl	80005c0 <chSysHalt>
    chDbgAssert(ntp->refs < (trefs_t)255, "too many references");
 8000a9a:	488c      	ldr	r0, [pc, #560]	; (8000ccc <chRegFindThreadByWorkingArea+0x33c>)
 8000a9c:	f7ff fd90 	bl	80005c0 <chSysHalt>
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	f383 8811 	msr	BASEPRI, r3
    switch (tp->flags & CH_FLAG_MODE_MASK) {
 8000aa6:	464b      	mov	r3, r9
 8000aa8:	4652      	mov	r2, sl
 8000aaa:	5cfb      	ldrb	r3, [r7, r3]
 8000aac:	4013      	ands	r3, r2
 8000aae:	2b01      	cmp	r3, #1
 8000ab0:	d022      	beq.n	8000af8 <chRegFindThreadByWorkingArea+0x168>
 8000ab2:	2b02      	cmp	r3, #2
 8000ab4:	d1cf      	bne.n	8000a56 <chRegFindThreadByWorkingArea+0xc6>
      chHeapFree(chThdGetWorkingAreaX(tp));
      break;
#endif
#if CH_CFG_USE_MEMPOOLS == TRUE
    case CH_FLAG_MODE_MPOOL:
      chPoolFree(tp->mpool, chThdGetWorkingAreaX(tp));
 8000ab6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000ab8:	69ff      	ldr	r7, [r7, #28]
 8000aba:	4698      	mov	r8, r3
 8000abc:	2320      	movs	r3, #32
 8000abe:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8000ac2:	f7ff ff0d 	bl	80008e0 <_dbg_check_lock>
 * @iclass
 */
void chPoolFreeI(memory_pool_t *mp, void *objp) {
  struct pool_header *php = objp;

  chDbgCheckClassI();
 8000ac6:	f7ff fdcb 	bl	8000660 <chDbgCheckClassI>
  chDbgCheck((mp != NULL) && (objp != NULL));
 8000aca:	4643      	mov	r3, r8
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d077      	beq.n	8000bc0 <chRegFindThreadByWorkingArea+0x230>
 8000ad0:	2f00      	cmp	r7, #0
 8000ad2:	d075      	beq.n	8000bc0 <chRegFindThreadByWorkingArea+0x230>

  php->next = mp->next;
 8000ad4:	4643      	mov	r3, r8
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	603b      	str	r3, [r7, #0]
  mp->next = php;
 8000ada:	4643      	mov	r3, r8
 8000adc:	601f      	str	r7, [r3, #0]
  _dbg_check_unlock();
 8000ade:	f7ff fecf 	bl	8000880 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8000ae2:	6823      	ldr	r3, [r4, #0]
 8000ae4:	42a3      	cmp	r3, r4
 8000ae6:	d0b3      	beq.n	8000a50 <chRegFindThreadByWorkingArea+0xc0>
 8000ae8:	69a2      	ldr	r2, [r4, #24]
 8000aea:	689b      	ldr	r3, [r3, #8]
 8000aec:	6892      	ldr	r2, [r2, #8]
 8000aee:	429a      	cmp	r2, r3
 8000af0:	d2ae      	bcs.n	8000a50 <chRegFindThreadByWorkingArea+0xc0>
 8000af2:	4877      	ldr	r0, [pc, #476]	; (8000cd0 <chRegFindThreadByWorkingArea+0x340>)
 8000af4:	f7ff fd64 	bl	80005c0 <chSysHalt>
 8000af8:	69fb      	ldr	r3, [r7, #28]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d05d      	beq.n	8000bba <chRegFindThreadByWorkingArea+0x22a>
 8000afe:	465a      	mov	r2, fp
 8000b00:	4213      	tst	r3, r2
 8000b02:	d15a      	bne.n	8000bba <chRegFindThreadByWorkingArea+0x22a>

  /*lint -save -e9087 [11.3] Safe cast.*/
  hp = (heap_header_t *)p - 1U;
  /*lint -restore*/
  heapp = H_HEAP(hp);
 8000b04:	2208      	movs	r2, #8
 8000b06:	4252      	negs	r2, r2
 8000b08:	4690      	mov	r8, r2
 8000b0a:	4498      	add	r8, r3
 8000b0c:	4643      	mov	r3, r8
 8000b0e:	681b      	ldr	r3, [r3, #0]
  qp = &heapp->header;

  /* Size is converted in number of elementary allocation units.*/
  H_PAGES(hp) = MEM_ALIGN_NEXT(H_SIZE(hp),
 8000b10:	4641      	mov	r1, r8
  heapp = H_HEAP(hp);
 8000b12:	001a      	movs	r2, r3
 8000b14:	9301      	str	r3, [sp, #4]
  H_PAGES(hp) = MEM_ALIGN_NEXT(H_SIZE(hp),
 8000b16:	4643      	mov	r3, r8
 8000b18:	685b      	ldr	r3, [r3, #4]
 8000b1a:	3307      	adds	r3, #7
                               CH_HEAP_ALIGNMENT) / CH_HEAP_ALIGNMENT;
 8000b1c:	08db      	lsrs	r3, r3, #3
  H_PAGES(hp) = MEM_ALIGN_NEXT(H_SIZE(hp),
 8000b1e:	604b      	str	r3, [r1, #4]

  /* Taking heap mutex/semaphore.*/
  H_LOCK(heapp);
 8000b20:	0013      	movs	r3, r2
 8000b22:	3310      	adds	r3, #16
 8000b24:	9300      	str	r3, [sp, #0]
 8000b26:	2220      	movs	r2, #32
 8000b28:	f382 8811 	msr	BASEPRI, r2
  _dbg_check_lock();
 8000b2c:	f7ff fed8 	bl	80008e0 <_dbg_check_lock>
 * @sclass
 */
void chMtxLockS(mutex_t *mp) {
  thread_t *ctp = currp;

  chDbgCheckClassS();
 8000b30:	f7ff fd5e 	bl	80005f0 <chDbgCheckClassS>
  chDbgCheck(mp != NULL);
 8000b34:	9b00      	ldr	r3, [sp, #0]
  thread_t *ctp = currp;
 8000b36:	69a7      	ldr	r7, [r4, #24]
  chDbgCheck(mp != NULL);
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d037      	beq.n	8000bac <chRegFindThreadByWorkingArea+0x21c>

  /* Is the mutex already locked? */
  if (mp->owner != NULL) {
 8000b3c:	9b01      	ldr	r3, [sp, #4]
 8000b3e:	6998      	ldr	r0, [r3, #24]
 8000b40:	2800      	cmp	r0, #0
 8000b42:	d100      	bne.n	8000b46 <chRegFindThreadByWorkingArea+0x1b6>
 8000b44:	e0ce      	b.n	8000ce4 <chRegFindThreadByWorkingArea+0x354>
      while (tp->prio < ctp->prio) {
        /* Make priority of thread tp match the running thread's priority.*/
        tp->prio = ctp->prio;

        /* The following states need priority queues reordering.*/
        switch (tp->state) {
 8000b46:	2320      	movs	r3, #32
 8000b48:	469c      	mov	ip, r3
      while (tp->prio < ctp->prio) {
 8000b4a:	68ba      	ldr	r2, [r7, #8]
 8000b4c:	6883      	ldr	r3, [r0, #8]
 8000b4e:	429a      	cmp	r2, r3
 8000b50:	d912      	bls.n	8000b78 <chRegFindThreadByWorkingArea+0x1e8>
        switch (tp->state) {
 8000b52:	4663      	mov	r3, ip
        tp->prio = ctp->prio;
 8000b54:	6082      	str	r2, [r0, #8]
        switch (tp->state) {
 8000b56:	5cc3      	ldrb	r3, [r0, r3]
 8000b58:	2b06      	cmp	r3, #6
 8000b5a:	d04a      	beq.n	8000bf2 <chRegFindThreadByWorkingArea+0x262>
 8000b5c:	2b07      	cmp	r3, #7
 8000b5e:	d032      	beq.n	8000bc6 <chRegFindThreadByWorkingArea+0x236>
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d109      	bne.n	8000b78 <chRegFindThreadByWorkingArea+0x1e8>
          break;
#endif
        case CH_STATE_READY:
#if CH_DBG_ENABLE_ASSERTS == TRUE
          /* Prevents an assertion in chSchReadyI().*/
          tp->state = CH_STATE_CURRENT;
 8000b64:	2301      	movs	r3, #1
 8000b66:	2220      	movs	r2, #32
 8000b68:	5483      	strb	r3, [r0, r2]
  tp->queue.prev->queue.next = tp->queue.next;
 8000b6a:	6802      	ldr	r2, [r0, #0]
 8000b6c:	6843      	ldr	r3, [r0, #4]
 8000b6e:	601a      	str	r2, [r3, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 8000b70:	6802      	ldr	r2, [r0, #0]
 8000b72:	6053      	str	r3, [r2, #4]
#endif
          /* Re-enqueues tp with its new priority on the ready list.*/
          (void) chSchReadyI(queue_dequeue(tp));
 8000b74:	f7ff fdc4 	bl	8000700 <chSchReadyI>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8000b78:	9a00      	ldr	r2, [sp, #0]
 8000b7a:	0013      	movs	r3, r2
 8000b7c:	e003      	b.n	8000b86 <chRegFindThreadByWorkingArea+0x1f6>
 8000b7e:	6899      	ldr	r1, [r3, #8]
 8000b80:	68b8      	ldr	r0, [r7, #8]
 8000b82:	4281      	cmp	r1, r0
 8000b84:	d303      	bcc.n	8000b8e <chRegFindThreadByWorkingArea+0x1fe>
    cp = cp->queue.next;
 8000b86:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8000b88:	429a      	cmp	r2, r3
 8000b8a:	d1f8      	bne.n	8000b7e <chRegFindThreadByWorkingArea+0x1ee>
 8000b8c:	9b00      	ldr	r3, [sp, #0]
  tp->queue.prev             = cp->queue.prev;
 8000b8e:	685a      	ldr	r2, [r3, #4]
  tp->queue.next             = cp;
 8000b90:	603b      	str	r3, [r7, #0]
  tp->queue.prev             = cp->queue.prev;
 8000b92:	607a      	str	r2, [r7, #4]
  tp->queue.prev->queue.next = tp;
 8000b94:	6017      	str	r7, [r2, #0]
  cp->queue.prev             = tp;
 8000b96:	605f      	str	r7, [r3, #4]
        break;
      }

      /* Sleep on the mutex.*/
      queue_prio_insert(ctp, &mp->queue);
      ctp->u.wtmtxp = mp;
 8000b98:	9b00      	ldr	r3, [sp, #0]
      chSchGoSleepS(CH_STATE_WTMTX);
 8000b9a:	2006      	movs	r0, #6
      ctp->u.wtmtxp = mp;
 8000b9c:	627b      	str	r3, [r7, #36]	; 0x24
      chSchGoSleepS(CH_STATE_WTMTX);
 8000b9e:	f7ff fd37 	bl	8000610 <chSchGoSleepS>

      /* It is assumed that the thread performing the unlock operation assigns
         the mutex to this thread.*/
      chDbgAssert(mp->owner == ctp, "not owner");
 8000ba2:	9b01      	ldr	r3, [sp, #4]
 8000ba4:	699b      	ldr	r3, [r3, #24]
 8000ba6:	9302      	str	r3, [sp, #8]
 8000ba8:	429f      	cmp	r7, r3
 8000baa:	d039      	beq.n	8000c20 <chRegFindThreadByWorkingArea+0x290>
  chDbgCheck(mp != NULL);
 8000bac:	4849      	ldr	r0, [pc, #292]	; (8000cd4 <chRegFindThreadByWorkingArea+0x344>)
 8000bae:	f7ff fd07 	bl	80005c0 <chSysHalt>
    if (chThdGetWorkingAreaX(ctp) == wa) {
 8000bb2:	003d      	movs	r5, r7
 8000bb4:	e751      	b.n	8000a5a <chRegFindThreadByWorkingArea+0xca>
    ntp = NULL;
 8000bb6:	2500      	movs	r5, #0
 8000bb8:	e723      	b.n	8000a02 <chRegFindThreadByWorkingArea+0x72>
  chDbgCheck((p != NULL) && MEM_IS_ALIGNED(p, CH_HEAP_ALIGNMENT));
 8000bba:	4847      	ldr	r0, [pc, #284]	; (8000cd8 <chRegFindThreadByWorkingArea+0x348>)
 8000bbc:	f7ff fd00 	bl	80005c0 <chSysHalt>
  chDbgCheck((mp != NULL) && (objp != NULL));
 8000bc0:	4846      	ldr	r0, [pc, #280]	; (8000cdc <chRegFindThreadByWorkingArea+0x34c>)
 8000bc2:	f7ff fcfd 	bl	80005c0 <chSysHalt>
  tp->queue.prev->queue.next = tp->queue.next;
 8000bc6:	6843      	ldr	r3, [r0, #4]
 8000bc8:	6801      	ldr	r1, [r0, #0]
          queue_prio_insert(queue_dequeue(tp), &tp->u.wtmtxp->queue);
 8000bca:	4684      	mov	ip, r0
 8000bcc:	6019      	str	r1, [r3, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 8000bce:	6801      	ldr	r1, [r0, #0]
 8000bd0:	604b      	str	r3, [r1, #4]
 8000bd2:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8000bd4:	000b      	movs	r3, r1
 8000bd6:	e002      	b.n	8000bde <chRegFindThreadByWorkingArea+0x24e>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8000bd8:	6898      	ldr	r0, [r3, #8]
 8000bda:	4282      	cmp	r2, r0
 8000bdc:	d802      	bhi.n	8000be4 <chRegFindThreadByWorkingArea+0x254>
    cp = cp->queue.next;
 8000bde:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8000be0:	4299      	cmp	r1, r3
 8000be2:	d1f9      	bne.n	8000bd8 <chRegFindThreadByWorkingArea+0x248>
 8000be4:	4660      	mov	r0, ip
  tp->queue.prev             = cp->queue.prev;
 8000be6:	685a      	ldr	r2, [r3, #4]
  tp->queue.next             = cp;
 8000be8:	6003      	str	r3, [r0, #0]
  tp->queue.prev             = cp->queue.prev;
 8000bea:	6042      	str	r2, [r0, #4]
  tp->queue.prev->queue.next = tp;
 8000bec:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 8000bee:	6058      	str	r0, [r3, #4]
 8000bf0:	e7c2      	b.n	8000b78 <chRegFindThreadByWorkingArea+0x1e8>
  tp->queue.prev->queue.next = tp->queue.next;
 8000bf2:	6841      	ldr	r1, [r0, #4]
 8000bf4:	6803      	ldr	r3, [r0, #0]
          queue_prio_insert(queue_dequeue(tp), &tp->u.wtmtxp->queue);
 8000bf6:	9002      	str	r0, [sp, #8]
 8000bf8:	600b      	str	r3, [r1, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 8000bfa:	6803      	ldr	r3, [r0, #0]
 8000bfc:	6059      	str	r1, [r3, #4]
 8000bfe:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8000c00:	000b      	movs	r3, r1
 8000c02:	e002      	b.n	8000c0a <chRegFindThreadByWorkingArea+0x27a>
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8000c04:	6898      	ldr	r0, [r3, #8]
 8000c06:	4282      	cmp	r2, r0
 8000c08:	d802      	bhi.n	8000c10 <chRegFindThreadByWorkingArea+0x280>
    cp = cp->queue.next;
 8000c0a:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8000c0c:	4299      	cmp	r1, r3
 8000c0e:	d1f9      	bne.n	8000c04 <chRegFindThreadByWorkingArea+0x274>
 8000c10:	9802      	ldr	r0, [sp, #8]
  tp->queue.prev             = cp->queue.prev;
 8000c12:	685a      	ldr	r2, [r3, #4]
  tp->queue.next             = cp;
 8000c14:	6003      	str	r3, [r0, #0]
  tp->queue.prev             = cp->queue.prev;
 8000c16:	6042      	str	r2, [r0, #4]
  tp->queue.prev->queue.next = tp;
 8000c18:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 8000c1a:	6058      	str	r0, [r3, #4]
          tp = tp->u.wtmtxp->owner;
 8000c1c:	6888      	ldr	r0, [r1, #8]
 8000c1e:	e794      	b.n	8000b4a <chRegFindThreadByWorkingArea+0x1ba>
      chDbgAssert(ctp->mtxlist == mp, "not owned");
 8000c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000c22:	9a00      	ldr	r2, [sp, #0]
 8000c24:	429a      	cmp	r2, r3
 8000c26:	d1c1      	bne.n	8000bac <chRegFindThreadByWorkingArea+0x21c>
  _dbg_check_unlock();
 8000c28:	f7ff fe2a 	bl	8000880 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8000c2c:	6823      	ldr	r3, [r4, #0]
 8000c2e:	42a3      	cmp	r3, r4
 8000c30:	d005      	beq.n	8000c3e <chRegFindThreadByWorkingArea+0x2ae>
 8000c32:	69a2      	ldr	r2, [r4, #24]
 8000c34:	689b      	ldr	r3, [r3, #8]
 8000c36:	6892      	ldr	r2, [r2, #8]
 8000c38:	429a      	cmp	r2, r3
 8000c3a:	d200      	bcs.n	8000c3e <chRegFindThreadByWorkingArea+0x2ae>
 8000c3c:	e0a3      	b.n	8000d86 <chRegFindThreadByWorkingArea+0x3f6>
  qp = &heapp->header;
 8000c3e:	9901      	ldr	r1, [sp, #4]
 8000c40:	2300      	movs	r3, #0
 8000c42:	3108      	adds	r1, #8
 8000c44:	f383 8811 	msr	BASEPRI, r3
 8000c48:	000b      	movs	r3, r1
 8000c4a:	4640      	mov	r0, r8

  while (true) {
    chDbgAssert((hp < qp) || (hp >= H_LIMIT(qp)), "within free block");
 8000c4c:	4298      	cmp	r0, r3
 8000c4e:	d305      	bcc.n	8000c5c <chRegFindThreadByWorkingArea+0x2cc>
 8000c50:	685a      	ldr	r2, [r3, #4]
 8000c52:	3201      	adds	r2, #1
 8000c54:	00d2      	lsls	r2, r2, #3
 8000c56:	189a      	adds	r2, r3, r2
 8000c58:	4290      	cmp	r0, r2
 8000c5a:	d3ae      	bcc.n	8000bba <chRegFindThreadByWorkingArea+0x22a>

    if (((qp == &heapp->header) || (hp > qp)) &&
        ((H_NEXT(qp) == NULL) || (hp < H_NEXT(qp)))) {
 8000c5c:	681a      	ldr	r2, [r3, #0]
    if (((qp == &heapp->header) || (hp > qp)) &&
 8000c5e:	4299      	cmp	r1, r3
 8000c60:	d001      	beq.n	8000c66 <chRegFindThreadByWorkingArea+0x2d6>
 8000c62:	4298      	cmp	r0, r3
 8000c64:	d903      	bls.n	8000c6e <chRegFindThreadByWorkingArea+0x2de>
 8000c66:	2a00      	cmp	r2, #0
 8000c68:	d003      	beq.n	8000c72 <chRegFindThreadByWorkingArea+0x2e2>
        ((H_NEXT(qp) == NULL) || (hp < H_NEXT(qp)))) {
 8000c6a:	4290      	cmp	r0, r2
 8000c6c:	d301      	bcc.n	8000c72 <chRegFindThreadByWorkingArea+0x2e2>
        H_PAGES(qp) += H_PAGES(hp) + 1U;
        H_NEXT(qp) = H_NEXT(hp);
      }
      break;
    }
    qp = H_NEXT(qp);
 8000c6e:	0013      	movs	r3, r2
 8000c70:	e7ec      	b.n	8000c4c <chRegFindThreadByWorkingArea+0x2bc>
 8000c72:	4680      	mov	r8, r0
      H_NEXT(hp) = H_NEXT(qp);
 8000c74:	6002      	str	r2, [r0, #0]
      H_NEXT(qp) = hp;
 8000c76:	6018      	str	r0, [r3, #0]
      if (H_LIMIT(hp) == H_NEXT(hp)) {
 8000c78:	6842      	ldr	r2, [r0, #4]
 8000c7a:	6800      	ldr	r0, [r0, #0]
 8000c7c:	1c51      	adds	r1, r2, #1
 8000c7e:	00ca      	lsls	r2, r1, #3
 8000c80:	4442      	add	r2, r8
 8000c82:	4282      	cmp	r2, r0
 8000c84:	d100      	bne.n	8000c88 <chRegFindThreadByWorkingArea+0x2f8>
 8000c86:	e08e      	b.n	8000da6 <chRegFindThreadByWorkingArea+0x416>
      if ((H_LIMIT(qp) == hp)) {
 8000c88:	6858      	ldr	r0, [r3, #4]
 8000c8a:	1c41      	adds	r1, r0, #1
 8000c8c:	00c9      	lsls	r1, r1, #3
 8000c8e:	1859      	adds	r1, r3, r1
 8000c90:	4588      	cmp	r8, r1
 8000c92:	d100      	bne.n	8000c96 <chRegFindThreadByWorkingArea+0x306>
 8000c94:	e07e      	b.n	8000d94 <chRegFindThreadByWorkingArea+0x404>
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxUnlock(mutex_t *mp) {
  thread_t *ctp = currp;
 8000c96:	69a3      	ldr	r3, [r4, #24]
 8000c98:	4698      	mov	r8, r3
 8000c9a:	2320      	movs	r3, #32
 8000c9c:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8000ca0:	f7ff fe1e 	bl	80008e0 <_dbg_check_lock>

  chDbgCheck(mp != NULL);

  chSysLock();

  chDbgAssert(ctp->mtxlist != NULL, "owned mutexes list empty");
 8000ca4:	4643      	mov	r3, r8
 8000ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d002      	beq.n	8000cb2 <chRegFindThreadByWorkingArea+0x322>
  chDbgAssert(ctp->mtxlist->owner == ctp, "ownership failure");
 8000cac:	689a      	ldr	r2, [r3, #8]
 8000cae:	4590      	cmp	r8, r2
 8000cb0:	d01f      	beq.n	8000cf2 <chRegFindThreadByWorkingArea+0x362>
  chDbgAssert(ctp->mtxlist != NULL, "owned mutexes list empty");
 8000cb2:	480b      	ldr	r0, [pc, #44]	; (8000ce0 <chRegFindThreadByWorkingArea+0x350>)
 8000cb4:	f7ff fc84 	bl	80005c0 <chSysHalt>
 8000cb8:	20000544 	.word	0x20000544
 8000cbc:	00ff00ff 	.word	0x00ff00ff
 8000cc0:	0800213c 	.word	0x0800213c
 8000cc4:	08002100 	.word	0x08002100
 8000cc8:	080021ac 	.word	0x080021ac
 8000ccc:	080021c8 	.word	0x080021c8
 8000cd0:	08002124 	.word	0x08002124
 8000cd4:	08002154 	.word	0x08002154
 8000cd8:	08002194 	.word	0x08002194
 8000cdc:	08002188 	.word	0x08002188
 8000ce0:	080021a0 	.word	0x080021a0
    mp->owner = ctp;
 8000ce4:	9b01      	ldr	r3, [sp, #4]
    mp->next = ctp->mtxlist;
 8000ce6:	6bba      	ldr	r2, [r7, #56]	; 0x38
    mp->owner = ctp;
 8000ce8:	619f      	str	r7, [r3, #24]
    mp->next = ctp->mtxlist;
 8000cea:	61da      	str	r2, [r3, #28]
    ctp->mtxlist = mp;
 8000cec:	9b00      	ldr	r3, [sp, #0]
 8000cee:	63bb      	str	r3, [r7, #56]	; 0x38
 8000cf0:	e79a      	b.n	8000c28 <chRegFindThreadByWorkingArea+0x298>
  chDbgAssert(mp->cnt >= (cnt_t)1, "counter is not positive");

  if (--mp->cnt == (cnt_t)0) {
#endif

    chDbgAssert(ctp->mtxlist == mp, "not next in list");
 8000cf2:	9a00      	ldr	r2, [sp, #0]
 8000cf4:	429a      	cmp	r2, r3
 8000cf6:	d1dc      	bne.n	8000cb2 <chRegFindThreadByWorkingArea+0x322>

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->mtxlist = mp->next;
 8000cf8:	4642      	mov	r2, r8
 8000cfa:	9f01      	ldr	r7, [sp, #4]
 8000cfc:	69fb      	ldr	r3, [r7, #28]
 8000cfe:	6393      	str	r3, [r2, #56]	; 0x38
 8000d00:	9302      	str	r3, [sp, #8]
 * @deprecated
 * @sclass
 */
static inline bool chMtxQueueNotEmptyS(mutex_t *mp) {

  chDbgCheckClassS();
 8000d02:	f7ff fc75 	bl	80005f0 <chDbgCheckClassS>
  return (bool)(tqp->next != (const thread_t *)tqp);
 8000d06:	693f      	ldr	r7, [r7, #16]

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 8000d08:	9b00      	ldr	r3, [sp, #0]
 8000d0a:	42bb      	cmp	r3, r7
 8000d0c:	d03e      	beq.n	8000d8c <chRegFindThreadByWorkingArea+0x3fc>
      thread_t *tp;

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->realprio;
 8000d0e:	4643      	mov	r3, r8
 8000d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d12:	9303      	str	r3, [sp, #12]
 8000d14:	e00d      	b.n	8000d32 <chRegFindThreadByWorkingArea+0x3a2>
 8000d16:	f7ff fc6b 	bl	80005f0 <chDbgCheckClassS>
 8000d1a:	9a02      	ldr	r2, [sp, #8]
 8000d1c:	6813      	ldr	r3, [r2, #0]
      lmp = ctp->mtxlist;
      while (lmp != NULL) {
        /* If the highest priority thread waiting in the mutexes list has a
           greater priority than the current thread base priority then the
           final priority will have at least that priority.*/
        if (chMtxQueueNotEmptyS(lmp) &&
 8000d1e:	429a      	cmp	r2, r3
 8000d20:	d004      	beq.n	8000d2c <chRegFindThreadByWorkingArea+0x39c>
 8000d22:	689b      	ldr	r3, [r3, #8]
 8000d24:	9a03      	ldr	r2, [sp, #12]
 8000d26:	429a      	cmp	r2, r3
 8000d28:	d200      	bcs.n	8000d2c <chRegFindThreadByWorkingArea+0x39c>
 8000d2a:	9303      	str	r3, [sp, #12]
            (lmp->queue.next->prio > newprio)) {
          newprio = lmp->queue.next->prio;
        }
        lmp = lmp->next;
 8000d2c:	9b02      	ldr	r3, [sp, #8]
 8000d2e:	68db      	ldr	r3, [r3, #12]
 8000d30:	9302      	str	r3, [sp, #8]
      while (lmp != NULL) {
 8000d32:	9b02      	ldr	r3, [sp, #8]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d1ee      	bne.n	8000d16 <chRegFindThreadByWorkingArea+0x386>
      }

      /* Assigns to the current thread the highest priority among all the
         waiting threads.*/
      ctp->prio = newprio;
 8000d38:	4643      	mov	r3, r8
 8000d3a:	9a03      	ldr	r2, [sp, #12]
  tqp->next->queue.prev = (thread_t *)tqp;
 8000d3c:	9900      	ldr	r1, [sp, #0]
 8000d3e:	609a      	str	r2, [r3, #8]
  tqp->next             = tp->queue.next;
 8000d40:	9a01      	ldr	r2, [sp, #4]
 8000d42:	683b      	ldr	r3, [r7, #0]

      /* Note, not using chSchWakeupS() becuase that function expects the
         current thread to have the higher or equal priority than the ones
         in the ready list. This is not necessarily true here because we
         just changed priority.*/
      (void) chSchReadyI(tp);
 8000d44:	0038      	movs	r0, r7
 8000d46:	6113      	str	r3, [r2, #16]
  tqp->next->queue.prev = (thread_t *)tqp;
 8000d48:	6059      	str	r1, [r3, #4]
      mp->next = tp->mtxlist;
 8000d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
      mp->owner = tp;
 8000d4c:	6197      	str	r7, [r2, #24]
      mp->next = tp->mtxlist;
 8000d4e:	61d3      	str	r3, [r2, #28]
      tp->mtxlist = mp;
 8000d50:	63b9      	str	r1, [r7, #56]	; 0x38
      (void) chSchReadyI(tp);
 8000d52:	f7ff fcd5 	bl	8000700 <chSchReadyI>
  chDbgCheckClassS();
 8000d56:	f7ff fc4b 	bl	80005f0 <chDbgCheckClassS>
 *
 * @iclass
 */
static inline bool chSchIsRescRequiredI(void) {

  chDbgCheckClassI();
 8000d5a:	f7ff fc81 	bl	8000660 <chDbgCheckClassI>

  return firstprio(&ch.rlist.queue) > currp->prio;
 8000d5e:	6822      	ldr	r2, [r4, #0]
 8000d60:	69a3      	ldr	r3, [r4, #24]
  if (chSchIsRescRequiredI()) {
 8000d62:	6892      	ldr	r2, [r2, #8]
 8000d64:	689b      	ldr	r3, [r3, #8]
 8000d66:	429a      	cmp	r2, r3
 8000d68:	d901      	bls.n	8000d6e <chRegFindThreadByWorkingArea+0x3de>
    chSchDoRescheduleAhead();
 8000d6a:	f7ff fc89 	bl	8000680 <chSchDoReschedule>
  _dbg_check_unlock();
 8000d6e:	f7ff fd87 	bl	8000880 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8000d72:	6823      	ldr	r3, [r4, #0]
 8000d74:	42a3      	cmp	r3, r4
 8000d76:	d100      	bne.n	8000d7a <chRegFindThreadByWorkingArea+0x3ea>
 8000d78:	e66a      	b.n	8000a50 <chRegFindThreadByWorkingArea+0xc0>
 8000d7a:	69a2      	ldr	r2, [r4, #24]
 8000d7c:	689b      	ldr	r3, [r3, #8]
 8000d7e:	6892      	ldr	r2, [r2, #8]
 8000d80:	429a      	cmp	r2, r3
 8000d82:	d300      	bcc.n	8000d86 <chRegFindThreadByWorkingArea+0x3f6>
 8000d84:	e664      	b.n	8000a50 <chRegFindThreadByWorkingArea+0xc0>
 8000d86:	480c      	ldr	r0, [pc, #48]	; (8000db8 <chRegFindThreadByWorkingArea+0x428>)
 8000d88:	f7ff fc1a 	bl	80005c0 <chSysHalt>
      chSchRescheduleS();
    }
    else {
      mp->owner = NULL;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	9a01      	ldr	r2, [sp, #4]
 8000d90:	6193      	str	r3, [r2, #24]
 8000d92:	e7ec      	b.n	8000d6e <chRegFindThreadByWorkingArea+0x3de>
        H_PAGES(qp) += H_PAGES(hp) + 1U;
 8000d94:	4642      	mov	r2, r8
 8000d96:	6852      	ldr	r2, [r2, #4]
 8000d98:	3201      	adds	r2, #1
 8000d9a:	1812      	adds	r2, r2, r0
 8000d9c:	605a      	str	r2, [r3, #4]
        H_NEXT(qp) = H_NEXT(hp);
 8000d9e:	4642      	mov	r2, r8
 8000da0:	6812      	ldr	r2, [r2, #0]
 8000da2:	601a      	str	r2, [r3, #0]
 8000da4:	e777      	b.n	8000c96 <chRegFindThreadByWorkingArea+0x306>
        H_PAGES(hp) += H_PAGES(H_NEXT(hp)) + 1U;
 8000da6:	6850      	ldr	r0, [r2, #4]
 8000da8:	4684      	mov	ip, r0
 8000daa:	4640      	mov	r0, r8
 8000dac:	4461      	add	r1, ip
 8000dae:	6041      	str	r1, [r0, #4]
        H_NEXT(hp) = H_NEXT(H_NEXT(hp));
 8000db0:	6812      	ldr	r2, [r2, #0]
 8000db2:	6002      	str	r2, [r0, #0]
 8000db4:	e768      	b.n	8000c88 <chRegFindThreadByWorkingArea+0x2f8>
 8000db6:	46c0      	nop			; (mov r8, r8)
 8000db8:	0800210c 	.word	0x0800210c
 8000dbc:	00000000 	.word	0x00000000

08000dc0 <chThdSleep>:
 *                      - @a TIME_IMMEDIATE this value is not allowed.
 *                      .
 *
 * @api
 */
void chThdSleep(systime_t time) {
 8000dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dc2:	2320      	movs	r3, #32
 8000dc4:	b087      	sub	sp, #28
 8000dc6:	0005      	movs	r5, r0
 8000dc8:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8000dcc:	f7ff fd88 	bl	80008e0 <_dbg_check_lock>
 *
 * @sclass
 */
static inline void chThdSleepS(systime_t time) {

  chDbgCheck(time != TIME_IMMEDIATE);
 8000dd0:	2d00      	cmp	r5, #0
 8000dd2:	d04e      	beq.n	8000e72 <chThdSleep+0xb2>
  chDbgCheckClassS();
 8000dd4:	f7ff fc0c 	bl	80005f0 <chDbgCheckClassS>
  if (TIME_INFINITE != time) {
 8000dd8:	1c6b      	adds	r3, r5, #1
 8000dda:	d04d      	beq.n	8000e78 <chThdSleep+0xb8>
void chVTDoSetI(virtual_timer_t *vtp, systime_t delay,
                vtfunc_t vtfunc, void *par) {
  virtual_timer_t *p;
  systime_t delta;

  chDbgCheckClassI();
 8000ddc:	f7ff fc40 	bl	8000660 <chDbgCheckClassI>
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->par = par;
  vtp->func = vtfunc;
 8000de0:	4b51      	ldr	r3, [pc, #324]	; (8000f28 <chThdSleep+0x168>)
  vtp->par = par;
 8000de2:	af01      	add	r7, sp, #4
  vtp->func = vtfunc;
 8000de4:	60fb      	str	r3, [r7, #12]
 8000de6:	2380      	movs	r3, #128	; 0x80
    chVTDoSetI(&vt, time, wakeup, currp);
 8000de8:	4e50      	ldr	r6, [pc, #320]	; (8000f2c <chThdSleep+0x16c>)
 8000dea:	05db      	lsls	r3, r3, #23
 8000dec:	69b4      	ldr	r4, [r6, #24]
 8000dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  vtp->par = par;
 8000df0:	613c      	str	r4, [r7, #16]
  {
    systime_t now = chVTGetSystemTimeX();

    /* If the requested delay is lower than the minimum safe delta then it
       is raised to the minimum safe value.*/
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
 8000df2:	2d01      	cmp	r5, #1
 8000df4:	d05b      	beq.n	8000eae <chThdSleep+0xee>
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8000df6:	0032      	movs	r2, r6
 8000df8:	69f4      	ldr	r4, [r6, #28]
 8000dfa:	321c      	adds	r2, #28
 8000dfc:	4294      	cmp	r4, r2
 8000dfe:	d100      	bne.n	8000e02 <chThdSleep+0x42>
 8000e00:	e079      	b.n	8000ef6 <chThdSleep+0x136>
    /* Pointer to the first element in the delta list, which is non-empty.*/
    p = ch.vtlist.next;

    /* Delay as delta from 'lasttime'. Note, it can overflow and the value
       becomes lower than 'now'.*/
    delta = now - ch.vtlist.lasttime + delay;
 8000e02:	6ab0      	ldr	r0, [r6, #40]	; 0x28
 8000e04:	1a1b      	subs	r3, r3, r0
 8000e06:	18ed      	adds	r5, r5, r3

    if (delta < now - ch.vtlist.lasttime) {
 8000e08:	42ab      	cmp	r3, r5
 8000e0a:	d848      	bhi.n	8000e9e <chThdSleep+0xde>
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->delta;
      p = p->next;
    }
    else if (delta < p->delta) {
 8000e0c:	68a3      	ldr	r3, [r4, #8]
 8000e0e:	429d      	cmp	r5, r3
 8000e10:	d203      	bcs.n	8000e1a <chThdSleep+0x5a>
 8000e12:	e04e      	b.n	8000eb2 <chThdSleep+0xf2>

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->delta < delta) {
    delta -= p->delta;
    p = p->next;
 8000e14:	6824      	ldr	r4, [r4, #0]
    delta -= p->delta;
 8000e16:	1aed      	subs	r5, r5, r3
  while (p->delta < delta) {
 8000e18:	68a3      	ldr	r3, [r4, #8]
 8000e1a:	42ab      	cmp	r3, r5
 8000e1c:	d3fa      	bcc.n	8000e14 <chThdSleep+0x54>
  }

  /* The timer is inserted in the delta list.*/
  vtp->next = p;
  vtp->prev = vtp->next->prev;
 8000e1e:	6863      	ldr	r3, [r4, #4]
  vtp->next = p;
 8000e20:	9401      	str	r4, [sp, #4]
  vtp->prev = vtp->next->prev;
 8000e22:	607b      	str	r3, [r7, #4]
  vtp->prev->next = vtp;
 8000e24:	601f      	str	r7, [r3, #0]
  p->prev = vtp;
 8000e26:	6067      	str	r7, [r4, #4]
  vtp->delta = delta
 8000e28:	60bd      	str	r5, [r7, #8]

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->delta -= delta;
 8000e2a:	68a3      	ldr	r3, [r4, #8]
 8000e2c:	1b5d      	subs	r5, r3, r5
  ch.vtlist.delta = (systime_t)-1;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	425b      	negs	r3, r3
  p->delta -= delta;
 8000e32:	60a5      	str	r5, [r4, #8]
  ch.vtlist.delta = (systime_t)-1;
 8000e34:	6273      	str	r3, [r6, #36]	; 0x24
    chSchGoSleepS(newstate);
 8000e36:	2008      	movs	r0, #8
 8000e38:	f7ff fbea 	bl	8000610 <chSchGoSleepS>
 *
 * @iclass
 */
static inline bool chVTIsArmedI(virtual_timer_t *vtp) {

  chDbgCheckClassI();
 8000e3c:	f7ff fc10 	bl	8000660 <chDbgCheckClassI>
    if (chVTIsArmedI(&vt)) {
 8000e40:	9b04      	ldr	r3, [sp, #16]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d01c      	beq.n	8000e80 <chThdSleep+0xc0>
 *
 * @iclass
 */
void chVTDoResetI(virtual_timer_t *vtp) {

  chDbgCheckClassI();
 8000e46:	f7ff fc0b 	bl	8000660 <chDbgCheckClassI>
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  systime_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.next != vtp) {
 8000e4a:	69f3      	ldr	r3, [r6, #28]
 8000e4c:	42bb      	cmp	r3, r7
 8000e4e:	d035      	beq.n	8000ebc <chThdSleep+0xfc>
    /* Removing the element from the delta list.*/
    vtp->prev->next = vtp->next;
 8000e50:	687a      	ldr	r2, [r7, #4]
 8000e52:	9b01      	ldr	r3, [sp, #4]
 8000e54:	6013      	str	r3, [r2, #0]
    vtp->next->prev = vtp->prev;
 8000e56:	9b01      	ldr	r3, [sp, #4]
 8000e58:	605a      	str	r2, [r3, #4]
    vtp->func = NULL;
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	60fa      	str	r2, [r7, #12]

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 8000e5e:	0032      	movs	r2, r6
 8000e60:	321c      	adds	r2, #28
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d00c      	beq.n	8000e80 <chThdSleep+0xc0>
      vtp->next->delta += vtp->delta;
 8000e66:	6899      	ldr	r1, [r3, #8]
 8000e68:	68ba      	ldr	r2, [r7, #8]
 8000e6a:	468c      	mov	ip, r1
 8000e6c:	4462      	add	r2, ip
 8000e6e:	609a      	str	r2, [r3, #8]
 8000e70:	e006      	b.n	8000e80 <chThdSleep+0xc0>
 8000e72:	482f      	ldr	r0, [pc, #188]	; (8000f30 <chThdSleep+0x170>)
 8000e74:	f7ff fba4 	bl	80005c0 <chSysHalt>
    chSchGoSleepS(newstate);
 8000e78:	2008      	movs	r0, #8
 8000e7a:	f7ff fbc9 	bl	8000610 <chSchGoSleepS>
 8000e7e:	4e2b      	ldr	r6, [pc, #172]	; (8000f2c <chThdSleep+0x16c>)
  _dbg_check_unlock();
 8000e80:	f7ff fcfe 	bl	8000880 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8000e84:	6833      	ldr	r3, [r6, #0]
 8000e86:	42b3      	cmp	r3, r6
 8000e88:	d004      	beq.n	8000e94 <chThdSleep+0xd4>
 8000e8a:	69b2      	ldr	r2, [r6, #24]
 8000e8c:	689b      	ldr	r3, [r3, #8]
 8000e8e:	6892      	ldr	r2, [r2, #8]
 8000e90:	429a      	cmp	r2, r3
 8000e92:	d309      	bcc.n	8000ea8 <chThdSleep+0xe8>
 8000e94:	2300      	movs	r3, #0
 8000e96:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  chThdSleepS(time);
  chSysUnlock();
}
 8000e9a:	b007      	add	sp, #28
 8000e9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      delta -= p->delta;
 8000e9e:	68a3      	ldr	r3, [r4, #8]
      p = p->next;
 8000ea0:	6824      	ldr	r4, [r4, #0]
      delta -= p->delta;
 8000ea2:	1aed      	subs	r5, r5, r3
 8000ea4:	68a3      	ldr	r3, [r4, #8]
 8000ea6:	e7b8      	b.n	8000e1a <chThdSleep+0x5a>
 8000ea8:	4822      	ldr	r0, [pc, #136]	; (8000f34 <chThdSleep+0x174>)
 8000eaa:	f7ff fb89 	bl	80005c0 <chSysHalt>
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
 8000eae:	3501      	adds	r5, #1
 8000eb0:	e7a1      	b.n	8000df6 <chThdSleep+0x36>
      port_timer_set_alarm(ch.vtlist.lasttime + delta);
 8000eb2:	1940      	adds	r0, r0, r5
 *
 * @notapi
 */
static inline void port_timer_set_alarm(systime_t time) {

  stSetAlarm(time);
 8000eb4:	f000 fb44 	bl	8001540 <stSetAlarm>
 8000eb8:	68a3      	ldr	r3, [r4, #8]
 8000eba:	e7ae      	b.n	8000e1a <chThdSleep+0x5a>
    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.next = vtp->next;
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
 8000ebc:	0033      	movs	r3, r6
  vtp->func = NULL;
 8000ebe:	2100      	movs	r1, #0
  ch.vtlist.next = vtp->next;
 8000ec0:	683a      	ldr	r2, [r7, #0]
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
 8000ec2:	331c      	adds	r3, #28
  ch.vtlist.next = vtp->next;
 8000ec4:	61f2      	str	r2, [r6, #28]
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
 8000ec6:	6053      	str	r3, [r2, #4]
  vtp->func = NULL;
 8000ec8:	60f9      	str	r1, [r7, #12]

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8000eca:	429a      	cmp	r2, r3
 8000ecc:	d027      	beq.n	8000f1e <chThdSleep+0x15e>

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.next->delta += vtp->delta;
 8000ece:	6891      	ldr	r1, [r2, #8]
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	468c      	mov	ip, r1
 8000ed4:	4463      	add	r3, ip
 8000ed6:	6093      	str	r3, [r2, #8]
 8000ed8:	2280      	movs	r2, #128	; 0x80
 8000eda:	05d2      	lsls	r2, r2, #23
 8000edc:	6a51      	ldr	r1, [r2, #36]	; 0x24
/*  if (ch.vtlist.next->delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.lasttime;
 8000ede:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 8000ee0:	1a88      	subs	r0, r1, r2

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= ch.vtlist.next->delta) {
 8000ee2:	4283      	cmp	r3, r0
 8000ee4:	d9cc      	bls.n	8000e80 <chThdSleep+0xc0>
    return;
  }

  /* Distance from the next scheduled event and now.*/
  delta = ch.vtlist.next->delta - nowdelta;
 8000ee6:	1a18      	subs	r0, r3, r0
     ticks from now.*/
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
  }

  port_timer_set_alarm(ch.vtlist.lasttime + nowdelta + delta);
 8000ee8:	2802      	cmp	r0, #2
 8000eea:	d200      	bcs.n	8000eee <chThdSleep+0x12e>
 8000eec:	2002      	movs	r0, #2
 8000eee:	1840      	adds	r0, r0, r1
 8000ef0:	f000 fb26 	bl	8001540 <stSetAlarm>
 8000ef4:	e7c4      	b.n	8000e80 <chThdSleep+0xc0>
 *
 * @notapi
 */
static inline bool st_lld_is_alarm_active(void) {

  return (bool)((STM32_ST_TIM->DIER & STM32_TIM_DIER_CC1IE) != 0);
 8000ef6:	2180      	movs	r1, #128	; 0x80
 8000ef8:	2002      	movs	r0, #2
      ch.vtlist.lasttime = now;
 8000efa:	62b3      	str	r3, [r6, #40]	; 0x28
      vtp->delta = delay;
 8000efc:	60bd      	str	r5, [r7, #8]
 8000efe:	05c9      	lsls	r1, r1, #23
 8000f00:	68ca      	ldr	r2, [r1, #12]
      ch.vtlist.next = vtp;
 8000f02:	61f7      	str	r7, [r6, #28]
      ch.vtlist.prev = vtp;
 8000f04:	6237      	str	r7, [r6, #32]
      vtp->next = (virtual_timer_t *)&ch.vtlist;
 8000f06:	9401      	str	r4, [sp, #4]
      vtp->prev = (virtual_timer_t *)&ch.vtlist;
 8000f08:	607c      	str	r4, [r7, #4]
 8000f0a:	4002      	ands	r2, r0
 *
 * @api
 */
void stStartAlarm(systime_t abstime) {

  osalDbgAssert(stIsAlarmActive() == false, "already active");
 8000f0c:	d104      	bne.n	8000f18 <chThdSleep+0x158>
      port_timer_start_alarm(ch.vtlist.lasttime + delay);
 8000f0e:	195d      	adds	r5, r3, r5
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8000f10:	634d      	str	r5, [r1, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 8000f12:	610a      	str	r2, [r1, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8000f14:	60c8      	str	r0, [r1, #12]
 8000f16:	e78e      	b.n	8000e36 <chThdSleep+0x76>
 8000f18:	4807      	ldr	r0, [pc, #28]	; (8000f38 <chThdSleep+0x178>)
 8000f1a:	f7ff fb51 	bl	80005c0 <chSysHalt>
  STM32_ST_TIM->DIER = 0;
 8000f1e:	2380      	movs	r3, #128	; 0x80
 8000f20:	05db      	lsls	r3, r3, #23
 8000f22:	60d9      	str	r1, [r3, #12]
 8000f24:	e7ac      	b.n	8000e80 <chThdSleep+0xc0>
 8000f26:	46c0      	nop			; (mov r8, r8)
 8000f28:	08000811 	.word	0x08000811
 8000f2c:	20000544 	.word	0x20000544
 8000f30:	08002130 	.word	0x08002130
 8000f34:	08002100 	.word	0x08002100
 8000f38:	080021d8 	.word	0x080021d8
 8000f3c:	00000000 	.word	0x00000000

08000f40 <chThdExit>:
void chThdExit(msg_t msg) {
 8000f40:	b570      	push	{r4, r5, r6, lr}
 8000f42:	2320      	movs	r3, #32
 8000f44:	0005      	movs	r5, r0
 8000f46:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8000f4a:	f7ff fcc9 	bl	80008e0 <_dbg_check_lock>
  thread_t *tp = currp;
 8000f4e:	4b11      	ldr	r3, [pc, #68]	; (8000f94 <chThdExit+0x54>)
 8000f50:	699c      	ldr	r4, [r3, #24]
  tp->u.exitcode = msg;
 8000f52:	6265      	str	r5, [r4, #36]	; 0x24
  while (list_notempty(&tp->waiting)) {
 8000f54:	0025      	movs	r5, r4
  return (bool)(tlp->next != (thread_t *)tlp);
 8000f56:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8000f58:	3528      	adds	r5, #40	; 0x28
 8000f5a:	4285      	cmp	r5, r0
 8000f5c:	d006      	beq.n	8000f6c <chThdExit+0x2c>
  tlp->next = tp->queue.next;
 8000f5e:	6803      	ldr	r3, [r0, #0]
 8000f60:	62a3      	str	r3, [r4, #40]	; 0x28
    (void) chSchReadyI(list_remove(&tp->waiting));
 8000f62:	f7ff fbcd 	bl	8000700 <chSchReadyI>
  return (bool)(tlp->next != (thread_t *)tlp);
 8000f66:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  while (list_notempty(&tp->waiting)) {
 8000f68:	42a8      	cmp	r0, r5
 8000f6a:	d1f8      	bne.n	8000f5e <chThdExit+0x1e>
  if ((tp->refs == (trefs_t)0) &&
 8000f6c:	2322      	movs	r3, #34	; 0x22
 8000f6e:	5ce3      	ldrb	r3, [r4, r3]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d108      	bne.n	8000f86 <chThdExit+0x46>
      ((tp->flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC)) {
 8000f74:	2321      	movs	r3, #33	; 0x21
  if ((tp->refs == (trefs_t)0) &&
 8000f76:	5ce3      	ldrb	r3, [r4, r3]
 8000f78:	079b      	lsls	r3, r3, #30
 8000f7a:	d104      	bne.n	8000f86 <chThdExit+0x46>
    REG_REMOVE(tp);
 8000f7c:	6922      	ldr	r2, [r4, #16]
 8000f7e:	6963      	ldr	r3, [r4, #20]
 8000f80:	611a      	str	r2, [r3, #16]
 8000f82:	6922      	ldr	r2, [r4, #16]
 8000f84:	6153      	str	r3, [r2, #20]
  chSchGoSleepS(CH_STATE_FINAL);
 8000f86:	200f      	movs	r0, #15
 8000f88:	f7ff fb42 	bl	8000610 <chSchGoSleepS>
  chDbgAssert(false, "zombies apocalypse");
 8000f8c:	4802      	ldr	r0, [pc, #8]	; (8000f98 <chThdExit+0x58>)
 8000f8e:	f7ff fb17 	bl	80005c0 <chSysHalt>
 8000f92:	46c0      	nop			; (mov r8, r8)
 8000f94:	20000544 	.word	0x20000544
 8000f98:	080021bc 	.word	0x080021bc
 8000f9c:	00000000 	.word	0x00000000

08000fa0 <BusFault_Handler>:
 *
 * @notapi
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
__attribute__((weak))
void _unhandled_exception(void) {
 8000fa0:	e7fe      	b.n	8000fa0 <BusFault_Handler>
 8000fa2:	46c0      	nop			; (mov r8, r8)
	...

08000fb0 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 8000fb0:	2203      	movs	r2, #3
 8000fb2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fb4:	46c6      	mov	lr, r8
 8000fb6:	4690      	mov	r8, r2
      *p = 0;
      p++;
    }
    rap++;
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 8000fb8:	327d      	adds	r2, #125	; 0x7d
 8000fba:	4694      	mov	ip, r2
      *p = 0;
 8000fbc:	2600      	movs	r6, #0
void __init_ram_areas(void) {
 8000fbe:	b500      	push	{lr}
  const ram_init_area_t *rap = ram_areas;
 8000fc0:	4f11      	ldr	r7, [pc, #68]	; (8001008 <__init_ram_areas+0x58>)
void __init_ram_areas(void) {
 8000fc2:	4d12      	ldr	r5, [pc, #72]	; (800100c <__init_ram_areas+0x5c>)
 8000fc4:	4c12      	ldr	r4, [pc, #72]	; (8001010 <__init_ram_areas+0x60>)
 8000fc6:	4b13      	ldr	r3, [pc, #76]	; (8001014 <__init_ram_areas+0x64>)
 8000fc8:	4913      	ldr	r1, [pc, #76]	; (8001018 <__init_ram_areas+0x68>)
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 8000fca:	44bc      	add	ip, r7
    while (p < rap->clear_area) {
 8000fcc:	429c      	cmp	r4, r3
 8000fce:	d90d      	bls.n	8000fec <__init_ram_areas+0x3c>
 8000fd0:	001a      	movs	r2, r3
      *p = *tp;
 8000fd2:	c901      	ldmia	r1!, {r0}
 8000fd4:	c201      	stmia	r2!, {r0}
    while (p < rap->clear_area) {
 8000fd6:	4294      	cmp	r4, r2
 8000fd8:	d8fb      	bhi.n	8000fd2 <__init_ram_areas+0x22>
 8000fda:	43da      	mvns	r2, r3
 8000fdc:	1914      	adds	r4, r2, r4
 8000fde:	4642      	mov	r2, r8
 8000fe0:	4394      	bics	r4, r2
 8000fe2:	3404      	adds	r4, #4
 8000fe4:	191b      	adds	r3, r3, r4
    while (p < rap->no_init_area) {
 8000fe6:	429d      	cmp	r5, r3
 8000fe8:	d902      	bls.n	8000ff0 <__init_ram_areas+0x40>
      *p = 0;
 8000fea:	c340      	stmia	r3!, {r6}
    while (p < rap->no_init_area) {
 8000fec:	429d      	cmp	r5, r3
 8000fee:	d8fc      	bhi.n	8000fea <__init_ram_areas+0x3a>
    rap++;
 8000ff0:	3710      	adds	r7, #16
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 8000ff2:	4567      	cmp	r7, ip
 8000ff4:	d004      	beq.n	8001000 <__init_ram_areas+0x50>
 8000ff6:	6839      	ldr	r1, [r7, #0]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	68bc      	ldr	r4, [r7, #8]
 8000ffc:	68fd      	ldr	r5, [r7, #12]
 8000ffe:	e7e5      	b.n	8000fcc <__init_ram_areas+0x1c>
#endif
}
 8001000:	bc04      	pop	{r2}
 8001002:	4690      	mov	r8, r2
 8001004:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001006:	46c0      	nop			; (mov r8, r8)
 8001008:	08002238 	.word	0x08002238
 800100c:	20001018 	.word	0x20001018
 8001010:	20001018 	.word	0x20001018
 8001014:	20001018 	.word	0x20001018
 8001018:	080024b8 	.word	0x080024b8
 800101c:	00000000 	.word	0x00000000

08001020 <__default_exit>:
void __default_exit(void) {
 8001020:	e7fe      	b.n	8001020 <__default_exit>
 8001022:	46c0      	nop			; (mov r8, r8)
	...

08001030 <__late_init>:
 8001030:	4770      	bx	lr
 8001032:	46c0      	nop			; (mov r8, r8)
	...

08001040 <__core_init>:
}
 8001040:	4770      	bx	lr
 8001042:	46c0      	nop			; (mov r8, r8)
	...

08001050 <pwm1c1cb>:
  palClearPad(GPIOA, GPIOA_LED_GREEN);
}

static void pwm1c1cb(PWMDriver *pwmp) { // channel 1 callback
  (void)pwmp;
  palSetPad(GPIOA, GPIOA_LED_GREEN);
 8001050:	2220      	movs	r2, #32
 8001052:	4b01      	ldr	r3, [pc, #4]	; (8001058 <pwm1c1cb+0x8>)
 8001054:	831a      	strh	r2, [r3, #24]
}
 8001056:	4770      	bx	lr
 8001058:	40020000 	.word	0x40020000
 800105c:	00000000 	.word	0x00000000

08001060 <pwm3c1cb>:
 8001060:	2220      	movs	r2, #32
 8001062:	4b01      	ldr	r3, [pc, #4]	; (8001068 <pwm3c1cb+0x8>)
 8001064:	831a      	strh	r2, [r3, #24]
 8001066:	4770      	bx	lr
 8001068:	40020000 	.word	0x40020000
 800106c:	00000000 	.word	0x00000000

08001070 <pwm1pcb>:
  palClearPad(GPIOA, GPIOA_LED_GREEN);
 8001070:	2220      	movs	r2, #32
 8001072:	4b01      	ldr	r3, [pc, #4]	; (8001078 <pwm1pcb+0x8>)
 8001074:	835a      	strh	r2, [r3, #26]
}
 8001076:	4770      	bx	lr
 8001078:	40020000 	.word	0x40020000
 800107c:	00000000 	.word	0x00000000

08001080 <pwm3pcb>:
 8001080:	2220      	movs	r2, #32
 8001082:	4b01      	ldr	r3, [pc, #4]	; (8001088 <pwm3pcb+0x8>)
 8001084:	835a      	strh	r2, [r3, #26]
 8001086:	4770      	bx	lr
 8001088:	40020000 	.word	0x40020000
 800108c:	00000000 	.word	0x00000000

08001090 <pwm2c1cb>:
 8001090:	2220      	movs	r2, #32
 8001092:	4b01      	ldr	r3, [pc, #4]	; (8001098 <pwm2c1cb+0x8>)
 8001094:	831a      	strh	r2, [r3, #24]
 8001096:	4770      	bx	lr
 8001098:	40020000 	.word	0x40020000
 800109c:	00000000 	.word	0x00000000

080010a0 <pwm2pcb>:
 80010a0:	2220      	movs	r2, #32
 80010a2:	4b01      	ldr	r3, [pc, #4]	; (80010a8 <pwm2pcb+0x8>)
 80010a4:	835a      	strh	r2, [r3, #26]
 80010a6:	4770      	bx	lr
 80010a8:	40020000 	.word	0x40020000
 80010ac:	00000000 	.word	0x00000000

080010b0 <pwm_lld_serve_interrupt>:
 * @notapi
 */
void pwm_lld_serve_interrupt(PWMDriver *pwmp) {
  uint32_t sr;

  sr  = pwmp->tim->SR;
 80010b0:	6982      	ldr	r2, [r0, #24]
void pwm_lld_serve_interrupt(PWMDriver *pwmp) {
 80010b2:	b570      	push	{r4, r5, r6, lr}
  sr  = pwmp->tim->SR;
 80010b4:	6913      	ldr	r3, [r2, #16]
  sr &= pwmp->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
 80010b6:	68d4      	ldr	r4, [r2, #12]
void pwm_lld_serve_interrupt(PWMDriver *pwmp) {
 80010b8:	0005      	movs	r5, r0
 80010ba:	401c      	ands	r4, r3
  sr &= pwmp->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
 80010bc:	23ff      	movs	r3, #255	; 0xff
 80010be:	4023      	ands	r3, r4
  pwmp->tim->SR = ~sr;
 80010c0:	43db      	mvns	r3, r3
 80010c2:	6113      	str	r3, [r2, #16]
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
 80010c4:	07a3      	lsls	r3, r4, #30
 80010c6:	d504      	bpl.n	80010d2 <pwm_lld_serve_interrupt+0x22>
      (pwmp->config->channels[0].callback != NULL))
 80010c8:	6843      	ldr	r3, [r0, #4]
 80010ca:	691b      	ldr	r3, [r3, #16]
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d000      	beq.n	80010d2 <pwm_lld_serve_interrupt+0x22>
    pwmp->config->channels[0].callback(pwmp);
 80010d0:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
 80010d2:	0763      	lsls	r3, r4, #29
 80010d4:	d505      	bpl.n	80010e2 <pwm_lld_serve_interrupt+0x32>
      (pwmp->config->channels[1].callback != NULL))
 80010d6:	686b      	ldr	r3, [r5, #4]
 80010d8:	699b      	ldr	r3, [r3, #24]
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <pwm_lld_serve_interrupt+0x32>
    pwmp->config->channels[1].callback(pwmp);
 80010de:	0028      	movs	r0, r5
 80010e0:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
 80010e2:	0723      	lsls	r3, r4, #28
 80010e4:	d505      	bpl.n	80010f2 <pwm_lld_serve_interrupt+0x42>
      (pwmp->config->channels[2].callback != NULL))
 80010e6:	686b      	ldr	r3, [r5, #4]
 80010e8:	6a1b      	ldr	r3, [r3, #32]
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <pwm_lld_serve_interrupt+0x42>
    pwmp->config->channels[2].callback(pwmp);
 80010ee:	0028      	movs	r0, r5
 80010f0:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC4IF) != 0) &&
 80010f2:	06e3      	lsls	r3, r4, #27
 80010f4:	d505      	bpl.n	8001102 <pwm_lld_serve_interrupt+0x52>
      (pwmp->config->channels[3].callback != NULL))
 80010f6:	686b      	ldr	r3, [r5, #4]
 80010f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((sr & STM32_TIM_SR_CC4IF) != 0) &&
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <pwm_lld_serve_interrupt+0x52>
    pwmp->config->channels[3].callback(pwmp);
 80010fe:	0028      	movs	r0, r5
 8001100:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_UIF) != 0) && (pwmp->config->callback != NULL))
 8001102:	07e3      	lsls	r3, r4, #31
 8001104:	d505      	bpl.n	8001112 <pwm_lld_serve_interrupt+0x62>
 8001106:	686b      	ldr	r3, [r5, #4]
 8001108:	689b      	ldr	r3, [r3, #8]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <pwm_lld_serve_interrupt+0x62>
    pwmp->config->callback(pwmp);
 800110e:	0028      	movs	r0, r5
 8001110:	4798      	blx	r3
}
 8001112:	bd70      	pop	{r4, r5, r6, pc}
	...

08001120 <VectorA0>:
OSAL_IRQ_HANDLER(STM32_TIM9_HANDLER) {
 8001120:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 8001122:	4c08      	ldr	r4, [pc, #32]	; (8001144 <VectorA0+0x24>)
 8001124:	0020      	movs	r0, r4
 8001126:	f7ff fa2b 	bl	8000580 <_trace_isr_enter>
 800112a:	f7ff fb29 	bl	8000780 <_dbg_check_enter_isr>
  pwm_lld_serve_interrupt(&PWMD9);
 800112e:	4806      	ldr	r0, [pc, #24]	; (8001148 <VectorA0+0x28>)
 8001130:	f7ff ffbe 	bl	80010b0 <pwm_lld_serve_interrupt>
  OSAL_IRQ_EPILOGUE();
 8001134:	f7ff fb0c 	bl	8000750 <_dbg_check_leave_isr>
 8001138:	0020      	movs	r0, r4
 800113a:	f7ff fa01 	bl	8000540 <_trace_isr_leave>
 800113e:	f7ff f987 	bl	8000450 <_port_irq_epilogue>
}
 8001142:	bd10      	pop	{r4, pc}
 8001144:	08002348 	.word	0x08002348
 8001148:	20000528 	.word	0x20000528
 800114c:	00000000 	.word	0x00000000

08001150 <VectorF8>:
OSAL_IRQ_HANDLER(STM32_TIM8_CC_HANDLER) {
 8001150:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 8001152:	4c08      	ldr	r4, [pc, #32]	; (8001174 <VectorF8+0x24>)
 8001154:	0020      	movs	r0, r4
 8001156:	f7ff fa13 	bl	8000580 <_trace_isr_enter>
 800115a:	f7ff fb11 	bl	8000780 <_dbg_check_enter_isr>
  pwm_lld_serve_interrupt(&PWMD8);
 800115e:	4806      	ldr	r0, [pc, #24]	; (8001178 <VectorF8+0x28>)
 8001160:	f7ff ffa6 	bl	80010b0 <pwm_lld_serve_interrupt>
  OSAL_IRQ_EPILOGUE();
 8001164:	f7ff faf4 	bl	8000750 <_dbg_check_leave_isr>
 8001168:	0020      	movs	r0, r4
 800116a:	f7ff f9e9 	bl	8000540 <_trace_isr_leave>
 800116e:	f7ff f96f 	bl	8000450 <_port_irq_epilogue>
}
 8001172:	bd10      	pop	{r4, pc}
 8001174:	0800233c 	.word	0x0800233c
 8001178:	2000050c 	.word	0x2000050c
 800117c:	00000000 	.word	0x00000000

08001180 <VectorF0>:
OSAL_IRQ_HANDLER(STM32_TIM8_UP_HANDLER) {
 8001180:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 8001182:	4c08      	ldr	r4, [pc, #32]	; (80011a4 <VectorF0+0x24>)
 8001184:	0020      	movs	r0, r4
 8001186:	f7ff f9fb 	bl	8000580 <_trace_isr_enter>
 800118a:	f7ff faf9 	bl	8000780 <_dbg_check_enter_isr>
  pwm_lld_serve_interrupt(&PWMD8);
 800118e:	4806      	ldr	r0, [pc, #24]	; (80011a8 <VectorF0+0x28>)
 8001190:	f7ff ff8e 	bl	80010b0 <pwm_lld_serve_interrupt>
  OSAL_IRQ_EPILOGUE();
 8001194:	f7ff fadc 	bl	8000750 <_dbg_check_leave_isr>
 8001198:	0020      	movs	r0, r4
 800119a:	f7ff f9d1 	bl	8000540 <_trace_isr_leave>
 800119e:	f7ff f957 	bl	8000450 <_port_irq_epilogue>
}
 80011a2:	bd10      	pop	{r4, pc}
 80011a4:	08002330 	.word	0x08002330
 80011a8:	2000050c 	.word	0x2000050c
 80011ac:	00000000 	.word	0x00000000

080011b0 <Vector108>:
OSAL_IRQ_HANDLER(STM32_TIM5_HANDLER) {
 80011b0:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 80011b2:	4c08      	ldr	r4, [pc, #32]	; (80011d4 <Vector108+0x24>)
 80011b4:	0020      	movs	r0, r4
 80011b6:	f7ff f9e3 	bl	8000580 <_trace_isr_enter>
 80011ba:	f7ff fae1 	bl	8000780 <_dbg_check_enter_isr>
  pwm_lld_serve_interrupt(&PWMD5);
 80011be:	4806      	ldr	r0, [pc, #24]	; (80011d8 <Vector108+0x28>)
 80011c0:	f7ff ff76 	bl	80010b0 <pwm_lld_serve_interrupt>
  OSAL_IRQ_EPILOGUE();
 80011c4:	f7ff fac4 	bl	8000750 <_dbg_check_leave_isr>
 80011c8:	0020      	movs	r0, r4
 80011ca:	f7ff f9b9 	bl	8000540 <_trace_isr_leave>
 80011ce:	f7ff f93f 	bl	8000450 <_port_irq_epilogue>
}
 80011d2:	bd10      	pop	{r4, pc}
 80011d4:	08002324 	.word	0x08002324
 80011d8:	200004f0 	.word	0x200004f0
 80011dc:	00000000 	.word	0x00000000

080011e0 <VectorB8>:
OSAL_IRQ_HANDLER(STM32_TIM4_HANDLER) {
 80011e0:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 80011e2:	4c08      	ldr	r4, [pc, #32]	; (8001204 <VectorB8+0x24>)
 80011e4:	0020      	movs	r0, r4
 80011e6:	f7ff f9cb 	bl	8000580 <_trace_isr_enter>
 80011ea:	f7ff fac9 	bl	8000780 <_dbg_check_enter_isr>
  pwm_lld_serve_interrupt(&PWMD4);
 80011ee:	4806      	ldr	r0, [pc, #24]	; (8001208 <VectorB8+0x28>)
 80011f0:	f7ff ff5e 	bl	80010b0 <pwm_lld_serve_interrupt>
  OSAL_IRQ_EPILOGUE();
 80011f4:	f7ff faac 	bl	8000750 <_dbg_check_leave_isr>
 80011f8:	0020      	movs	r0, r4
 80011fa:	f7ff f9a1 	bl	8000540 <_trace_isr_leave>
 80011fe:	f7ff f927 	bl	8000450 <_port_irq_epilogue>
}
 8001202:	bd10      	pop	{r4, pc}
 8001204:	08002318 	.word	0x08002318
 8001208:	200004d4 	.word	0x200004d4
 800120c:	00000000 	.word	0x00000000

08001210 <VectorAC>:
OSAL_IRQ_HANDLER(STM32_TIM1_CC_HANDLER) {
 8001210:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 8001212:	4c08      	ldr	r4, [pc, #32]	; (8001234 <VectorAC+0x24>)
 8001214:	0020      	movs	r0, r4
 8001216:	f7ff f9b3 	bl	8000580 <_trace_isr_enter>
 800121a:	f7ff fab1 	bl	8000780 <_dbg_check_enter_isr>
  pwm_lld_serve_interrupt(&PWMD1);
 800121e:	4806      	ldr	r0, [pc, #24]	; (8001238 <VectorAC+0x28>)
 8001220:	f7ff ff46 	bl	80010b0 <pwm_lld_serve_interrupt>
  OSAL_IRQ_EPILOGUE();
 8001224:	f7ff fa94 	bl	8000750 <_dbg_check_leave_isr>
 8001228:	0020      	movs	r0, r4
 800122a:	f7ff f989 	bl	8000540 <_trace_isr_leave>
 800122e:	f7ff f90f 	bl	8000450 <_port_irq_epilogue>
}
 8001232:	bd10      	pop	{r4, pc}
 8001234:	080022f4 	.word	0x080022f4
 8001238:	200004b8 	.word	0x200004b8
 800123c:	00000000 	.word	0x00000000

08001240 <VectorA4>:
OSAL_IRQ_HANDLER(STM32_TIM1_UP_HANDLER) {
 8001240:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 8001242:	4c08      	ldr	r4, [pc, #32]	; (8001264 <VectorA4+0x24>)
 8001244:	0020      	movs	r0, r4
 8001246:	f7ff f99b 	bl	8000580 <_trace_isr_enter>
 800124a:	f7ff fa99 	bl	8000780 <_dbg_check_enter_isr>
  pwm_lld_serve_interrupt(&PWMD1);
 800124e:	4806      	ldr	r0, [pc, #24]	; (8001268 <VectorA4+0x28>)
 8001250:	f7ff ff2e 	bl	80010b0 <pwm_lld_serve_interrupt>
  OSAL_IRQ_EPILOGUE();
 8001254:	f7ff fa7c 	bl	8000750 <_dbg_check_leave_isr>
 8001258:	0020      	movs	r0, r4
 800125a:	f7ff f971 	bl	8000540 <_trace_isr_leave>
 800125e:	f7ff f8f7 	bl	8000450 <_port_irq_epilogue>
}
 8001262:	bd10      	pop	{r4, pc}
 8001264:	080022dc 	.word	0x080022dc
 8001268:	200004b8 	.word	0x200004b8
 800126c:	00000000 	.word	0x00000000

08001270 <VectorB4>:
/**
 * @brief   TIM3 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM3_HANDLER) {
 8001270:	b570      	push	{r4, r5, r6, lr}

  OSAL_IRQ_PROLOGUE();
 8001272:	4e2b      	ldr	r6, [pc, #172]	; (8001320 <VectorB4+0xb0>)
 8001274:	0030      	movs	r0, r6
 8001276:	f7ff f983 	bl	8000580 <_trace_isr_enter>
 800127a:	f7ff fa81 	bl	8000780 <_dbg_check_enter_isr>
 * @notapi
 */
void icu_lld_serve_interrupt(ICUDriver *icup) {
  uint32_t sr;

  sr  = icup->tim->SR;
 800127e:	4d29      	ldr	r5, [pc, #164]	; (8001324 <VectorB4+0xb4>)
 8001280:	68ea      	ldr	r2, [r5, #12]
 8001282:	6913      	ldr	r3, [r2, #16]
  sr &= icup->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
 8001284:	68d4      	ldr	r4, [r2, #12]
 8001286:	401c      	ands	r4, r3
 8001288:	23ff      	movs	r3, #255	; 0xff
 800128a:	4023      	ands	r3, r4
  icup->tim->SR = ~sr;
 800128c:	43db      	mvns	r3, r3
 800128e:	6113      	str	r3, [r2, #16]
  if (icup->config->channel == ICU_CHANNEL_1) {
 8001290:	686b      	ldr	r3, [r5, #4]
 8001292:	7d1a      	ldrb	r2, [r3, #20]
 8001294:	2a00      	cmp	r2, #0
 8001296:	d116      	bne.n	80012c6 <VectorB4+0x56>
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
 8001298:	0762      	lsls	r2, r4, #29
 800129a:	d534      	bpl.n	8001306 <VectorB4+0x96>
      _icu_isr_invoke_width_cb(icup);
 800129c:	782a      	ldrb	r2, [r5, #0]
 800129e:	2a04      	cmp	r2, #4
 80012a0:	d02c      	beq.n	80012fc <VectorB4+0x8c>
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
 80012a2:	07a3      	lsls	r3, r4, #30
 80012a4:	d416      	bmi.n	80012d4 <VectorB4+0x64>
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
      _icu_isr_invoke_width_cb(icup);
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
      _icu_isr_invoke_period_cb(icup);
  }
  if ((sr & STM32_TIM_SR_UIF) != 0)
 80012a6:	07e3      	lsls	r3, r4, #31
 80012a8:	d505      	bpl.n	80012b6 <VectorB4+0x46>
    _icu_isr_invoke_overflow_cb(icup);
 80012aa:	686b      	ldr	r3, [r5, #4]
 80012ac:	0028      	movs	r0, r5
 80012ae:	691b      	ldr	r3, [r3, #16]
 80012b0:	4798      	blx	r3
 80012b2:	2303      	movs	r3, #3
 80012b4:	702b      	strb	r3, [r5, #0]
  OSAL_IRQ_EPILOGUE();
 80012b6:	f7ff fa4b 	bl	8000750 <_dbg_check_leave_isr>
 80012ba:	0030      	movs	r0, r6
 80012bc:	f7ff f940 	bl	8000540 <_trace_isr_leave>
 80012c0:	f7ff f8c6 	bl	8000450 <_port_irq_epilogue>
}
 80012c4:	bd70      	pop	{r4, r5, r6, pc}
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
 80012c6:	07a2      	lsls	r2, r4, #30
 80012c8:	d50c      	bpl.n	80012e4 <VectorB4+0x74>
      _icu_isr_invoke_width_cb(icup);
 80012ca:	782a      	ldrb	r2, [r5, #0]
 80012cc:	2a04      	cmp	r2, #4
 80012ce:	d004      	beq.n	80012da <VectorB4+0x6a>
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
 80012d0:	0763      	lsls	r3, r4, #29
 80012d2:	d5e8      	bpl.n	80012a6 <VectorB4+0x36>
      _icu_isr_invoke_period_cb(icup);
 80012d4:	2304      	movs	r3, #4
 80012d6:	702b      	strb	r3, [r5, #0]
 80012d8:	e7e5      	b.n	80012a6 <VectorB4+0x36>
      _icu_isr_invoke_width_cb(icup);
 80012da:	6899      	ldr	r1, [r3, #8]
 80012dc:	2900      	cmp	r1, #0
 80012de:	d01b      	beq.n	8001318 <VectorB4+0xa8>
 80012e0:	0028      	movs	r0, r5
 80012e2:	4788      	blx	r1
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
 80012e4:	0763      	lsls	r3, r4, #29
 80012e6:	d5de      	bpl.n	80012a6 <VectorB4+0x36>
      _icu_isr_invoke_period_cb(icup);
 80012e8:	782b      	ldrb	r3, [r5, #0]
 80012ea:	2b04      	cmp	r3, #4
 80012ec:	d1f2      	bne.n	80012d4 <VectorB4+0x64>
 80012ee:	686b      	ldr	r3, [r5, #4]
 80012f0:	68db      	ldr	r3, [r3, #12]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d0ee      	beq.n	80012d4 <VectorB4+0x64>
 80012f6:	0028      	movs	r0, r5
 80012f8:	4798      	blx	r3
 80012fa:	e7eb      	b.n	80012d4 <VectorB4+0x64>
      _icu_isr_invoke_width_cb(icup);
 80012fc:	689a      	ldr	r2, [r3, #8]
 80012fe:	2a00      	cmp	r2, #0
 8001300:	d007      	beq.n	8001312 <VectorB4+0xa2>
 8001302:	0028      	movs	r0, r5
 8001304:	4790      	blx	r2
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
 8001306:	07a3      	lsls	r3, r4, #30
 8001308:	d5cd      	bpl.n	80012a6 <VectorB4+0x36>
      _icu_isr_invoke_period_cb(icup);
 800130a:	782b      	ldrb	r3, [r5, #0]
 800130c:	2b04      	cmp	r3, #4
 800130e:	d1e1      	bne.n	80012d4 <VectorB4+0x64>
 8001310:	e7ed      	b.n	80012ee <VectorB4+0x7e>
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
 8001312:	07a2      	lsls	r2, r4, #30
 8001314:	d4ec      	bmi.n	80012f0 <VectorB4+0x80>
 8001316:	e7c6      	b.n	80012a6 <VectorB4+0x36>
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
 8001318:	4222      	tst	r2, r4
 800131a:	d1e9      	bne.n	80012f0 <VectorB4+0x80>
 800131c:	e7c3      	b.n	80012a6 <VectorB4+0x36>
 800131e:	46c0      	nop			; (mov r8, r8)
 8001320:	0800230c 	.word	0x0800230c
 8001324:	200004a0 	.word	0x200004a0
	...

08001330 <__early_init>:
#if !STM32_NO_INIT
  /* PWR clock enable.*/
#if defined(HAL_USE_RTC) && defined(RCC_APB1ENR_RTCAPBEN)
  RCC->APB1ENR = RCC_APB1ENR_PWREN | RCC_APB1ENR_RTCAPBEN;
#else
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8001330:	2380      	movs	r3, #128	; 0x80
#endif

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 8001332:	21c0      	movs	r1, #192	; 0xc0
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8001334:	4a38      	ldr	r2, [pc, #224]	; (8001418 <__early_init+0xe8>)
 8001336:	055b      	lsls	r3, r3, #21
 8001338:	6413      	str	r3, [r2, #64]	; 0x40
  PWR->CR = STM32_VOS;
 800133a:	4b38      	ldr	r3, [pc, #224]	; (800141c <__early_init+0xec>)
 800133c:	0209      	lsls	r1, r1, #8
 800133e:	6019      	str	r1, [r3, #0]
  PWR->CR = 0;
#endif

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8001340:	2101      	movs	r1, #1
 8001342:	6813      	ldr	r3, [r2, #0]
 8001344:	430b      	orrs	r3, r1
 8001346:	6013      	str	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 8001348:	3101      	adds	r1, #1
 800134a:	6813      	ldr	r3, [r2, #0]
 800134c:	4219      	tst	r1, r3
 800134e:	d0fc      	beq.n	800134a <__early_init+0x1a>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
 8001350:	2103      	movs	r1, #3
 8001352:	6893      	ldr	r3, [r2, #8]
 8001354:	438b      	bics	r3, r1
 8001356:	6093      	str	r3, [r2, #8]
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
 8001358:	6893      	ldr	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 800135a:	3109      	adds	r1, #9
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
 800135c:	6093      	str	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 800135e:	4a2e      	ldr	r2, [pc, #184]	; (8001418 <__early_init+0xe8>)
 8001360:	6893      	ldr	r3, [r2, #8]
 8001362:	400b      	ands	r3, r1
 8001364:	d1fc      	bne.n	8001360 <__early_init+0x30>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8001366:	21f9      	movs	r1, #249	; 0xf9
 8001368:	6810      	ldr	r0, [r2, #0]
 800136a:	4001      	ands	r1, r0
 800136c:	6011      	str	r1, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 800136e:	6093      	str	r3, [r2, #8]
  
#if STM32_HSE_ENABLED
  /* HSE activation.*/
#if defined(STM32_HSE_BYPASS)
  /* HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
 8001370:	23a0      	movs	r3, #160	; 0xa0
 8001372:	6811      	ldr	r1, [r2, #0]
 8001374:	02db      	lsls	r3, r3, #11
 8001376:	430b      	orrs	r3, r1
#else
  /* No HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON;
#endif
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 8001378:	2180      	movs	r1, #128	; 0x80
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
 800137a:	6013      	str	r3, [r2, #0]
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 800137c:	4a26      	ldr	r2, [pc, #152]	; (8001418 <__early_init+0xe8>)
 800137e:	0289      	lsls	r1, r1, #10
 8001380:	6813      	ldr	r3, [r2, #0]
 8001382:	420b      	tst	r3, r1
 8001384:	d0fc      	beq.n	8001380 <__early_init+0x50>
    ;                           /* Waits until HSE is stable.               */
#endif

#if STM32_LSI_ENABLED
  /* LSI activation.*/
  RCC->CSR |= RCC_CSR_LSION;
 8001386:	2101      	movs	r1, #1
 8001388:	6f53      	ldr	r3, [r2, #116]	; 0x74
 800138a:	430b      	orrs	r3, r1
 800138c:	6753      	str	r3, [r2, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 800138e:	4a22      	ldr	r2, [pc, #136]	; (8001418 <__early_init+0xe8>)
 8001390:	3101      	adds	r1, #1
 8001392:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8001394:	4219      	tst	r1, r3
 8001396:	d0fc      	beq.n	8001392 <__early_init+0x62>
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
 8001398:	4b21      	ldr	r3, [pc, #132]	; (8001420 <__early_init+0xf0>)
 800139a:	6053      	str	r3, [r2, #4]
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 800139c:	2380      	movs	r3, #128	; 0x80
 800139e:	6811      	ldr	r1, [r2, #0]
 80013a0:	045b      	lsls	r3, r3, #17
 80013a2:	430b      	orrs	r3, r1
 80013a4:	6013      	str	r3, [r2, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 80013a6:	2280      	movs	r2, #128	; 0x80
 80013a8:	491c      	ldr	r1, [pc, #112]	; (800141c <__early_init+0xec>)
 80013aa:	01d2      	lsls	r2, r2, #7
 80013ac:	684b      	ldr	r3, [r1, #4]
 80013ae:	4213      	tst	r3, r2
 80013b0:	d0fc      	beq.n	80013ac <__early_init+0x7c>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */
#endif /* defined(STM32F4XX) */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
 80013b2:	2180      	movs	r1, #128	; 0x80
 80013b4:	4a18      	ldr	r2, [pc, #96]	; (8001418 <__early_init+0xe8>)
 80013b6:	0489      	lsls	r1, r1, #18
 80013b8:	6813      	ldr	r3, [r2, #0]
 80013ba:	420b      	tst	r3, r1
 80013bc:	d0fc      	beq.n	80013b8 <__early_init+0x88>
  while (!(RCC->CR & RCC_CR_PLLSAIRDY))
    ;
#endif /* STM32_ACTIVATE_PLLSAI */

  /* Other clock-related settings (dividers, MCO etc).*/
  RCC->CFGR = STM32_MCO2PRE | STM32_MCO2SEL | STM32_MCO1PRE | STM32_MCO1SEL |
 80013be:	4b19      	ldr	r3, [pc, #100]	; (8001424 <__early_init+0xf4>)
    dckcfgr |= STM32_SAI1SEL;
#endif
#if STM32_PLLSAIDIVR != STM32_PLLSAIDIVR_OFF
    dckcfgr |= STM32_PLLSAIDIVR;
#endif
    RCC->DCKCFGR = dckcfgr | STM32_PLLI2SDIVQ | STM32_PLLSAIDIVQ;
 80013c0:	218c      	movs	r1, #140	; 0x8c
  RCC->CFGR = STM32_MCO2PRE | STM32_MCO2SEL | STM32_MCO1PRE | STM32_MCO1SEL |
 80013c2:	6093      	str	r3, [r2, #8]
    RCC->DCKCFGR = dckcfgr | STM32_PLLI2SDIVQ | STM32_PLLSAIDIVQ;
 80013c4:	2300      	movs	r3, #0
 80013c6:	5053      	str	r3, [r2, r1]
  }
  RCC->DCKCFGR2 = STM32_CK48MSEL;
 80013c8:	3108      	adds	r1, #8
 80013ca:	5053      	str	r3, [r2, r1]

  /* Flash setup.*/
#if !defined(STM32_REMOVE_REVISION_A_FIX)
  /* Some old revisions of F4x MCUs randomly crashes with compiler
     optimizations enabled AND flash caches enabled. */
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 80013cc:	4b16      	ldr	r3, [pc, #88]	; (8001428 <__early_init+0xf8>)
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	4b16      	ldr	r3, [pc, #88]	; (800142c <__early_init+0xfc>)
 80013d2:	429a      	cmp	r2, r3
 80013d4:	d015      	beq.n	8001402 <__early_init+0xd2>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 80013d6:	4a16      	ldr	r2, [pc, #88]	; (8001430 <__early_init+0x100>)
 80013d8:	4b16      	ldr	r3, [pc, #88]	; (8001434 <__early_init+0x104>)
 80013da:	601a      	str	r2, [r3, #0]
               FLASH_ACR_DCEN | STM32_FLASHBITS;
#endif

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
 80013dc:	2102      	movs	r1, #2
 80013de:	4a0e      	ldr	r2, [pc, #56]	; (8001418 <__early_init+0xe8>)
 80013e0:	6893      	ldr	r3, [r2, #8]
 80013e2:	430b      	orrs	r3, r1
 80013e4:	6093      	str	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 80013e6:	310a      	adds	r1, #10
 80013e8:	6893      	ldr	r3, [r2, #8]
 80013ea:	400b      	ands	r3, r1
 80013ec:	2b08      	cmp	r3, #8
 80013ee:	d1fb      	bne.n	80013e8 <__early_init+0xb8>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, TRUE);
 80013f0:	2380      	movs	r3, #128	; 0x80
 80013f2:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80013f4:	01db      	lsls	r3, r3, #7
 80013f6:	4319      	orrs	r1, r3
 80013f8:	6451      	str	r1, [r2, #68]	; 0x44
 80013fa:	6e51      	ldr	r1, [r2, #100]	; 0x64
 80013fc:	430b      	orrs	r3, r1
 80013fe:	6653      	str	r3, [r2, #100]	; 0x64
 *          and before any other initialization.
 */
void __early_init(void) {

  stm32_clock_init();
}
 8001400:	4770      	bx	lr
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 8001402:	4b0d      	ldr	r3, [pc, #52]	; (8001438 <__early_init+0x108>)
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	4b0d      	ldr	r3, [pc, #52]	; (800143c <__early_init+0x10c>)
 8001408:	429a      	cmp	r2, r3
 800140a:	d1e4      	bne.n	80013d6 <__early_init+0xa6>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
 800140c:	2206      	movs	r2, #6
 800140e:	4b09      	ldr	r3, [pc, #36]	; (8001434 <__early_init+0x104>)
 8001410:	32ff      	adds	r2, #255	; 0xff
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	e7e2      	b.n	80013dc <__early_init+0xac>
 8001416:	46c0      	nop			; (mov r8, r8)
 8001418:	40023800 	.word	0x40023800
 800141c:	40007000 	.word	0x40007000
 8001420:	07405408 	.word	0x07405408
 8001424:	38889400 	.word	0x38889400
 8001428:	e0042000 	.word	0xe0042000
 800142c:	20006411 	.word	0x20006411
 8001430:	00000705 	.word	0x00000705
 8001434:	40023c00 	.word	0x40023c00
 8001438:	e000ed00 	.word	0xe000ed00
 800143c:	410fc241 	.word	0x410fc241

08001440 <_pal_lld_setgroupmode>:
 *
 * @notapi
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {
 8001440:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001442:	464e      	mov	r6, r9
 8001444:	46de      	mov	lr, fp
 8001446:	4657      	mov	r7, sl
 8001448:	4645      	mov	r5, r8
 800144a:	b5e0      	push	{r5, r6, r7, lr}

  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 800144c:	2603      	movs	r6, #3
 800144e:	0033      	movs	r3, r6
 8001450:	4013      	ands	r3, r2
 8001452:	469b      	mov	fp, r3
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
 8001454:	0753      	lsls	r3, r2, #29
 8001456:	0fdb      	lsrs	r3, r3, #31
 8001458:	469c      	mov	ip, r3
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
 800145a:	08d7      	lsrs	r7, r2, #3
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
 800145c:	0953      	lsrs	r3, r2, #5
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
 800145e:	0552      	lsls	r2, r2, #21
                           iomode_t mode) {
 8001460:	b083      	sub	sp, #12
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
 8001462:	4037      	ands	r7, r6
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
 8001464:	401e      	ands	r6, r3
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
 8001466:	0f13      	lsrs	r3, r2, #28
 8001468:	9301      	str	r3, [sp, #4]
  uint32_t bit     = 0;
  while (true) {
    if ((mask & 1) != 0) {
 800146a:	2301      	movs	r3, #1
  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 800146c:	465c      	mov	r4, fp
    if ((mask & 1) != 0) {
 800146e:	4699      	mov	r9, r3
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
 8001470:	0033      	movs	r3, r6
  uint32_t bit     = 0;
 8001472:	2500      	movs	r5, #0
      m2 = 3 << (bit * 2);
 8001474:	4666      	mov	r6, ip
 8001476:	9400      	str	r4, [sp, #0]
 8001478:	469c      	mov	ip, r3
 800147a:	e010      	b.n	800149e <_pal_lld_setgroupmode+0x5e>
      else {
        /* If going into a non-alternate mode then the mode is switched
           before setting the alternate mode in order to avoid glitches.*/
        port->MODER   = (port->MODER & ~m2) | moder;
        if (bit < 8)
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 800147c:	4652      	mov	r2, sl
 800147e:	6a03      	ldr	r3, [r0, #32]
 8001480:	4393      	bics	r3, r2
 8001482:	4642      	mov	r2, r8
 8001484:	4313      	orrs	r3, r2
 8001486:	6203      	str	r3, [r0, #32]
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
      }
    }
    mask >>= 1;
 8001488:	0849      	lsrs	r1, r1, #1
    if (!mask)
 800148a:	d03a      	beq.n	8001502 <_pal_lld_setgroupmode+0xc2>
      return;
    otyper <<= 1;
    ospeedr <<= 2;
    pupdr <<= 2;
 800148c:	4663      	mov	r3, ip
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	469c      	mov	ip, r3
    moder <<= 2;
 8001492:	9b00      	ldr	r3, [sp, #0]
    otyper <<= 1;
 8001494:	0076      	lsls	r6, r6, #1
    moder <<= 2;
 8001496:	009b      	lsls	r3, r3, #2
    ospeedr <<= 2;
 8001498:	00bf      	lsls	r7, r7, #2
    moder <<= 2;
 800149a:	9300      	str	r3, [sp, #0]
    bit++;
 800149c:	3501      	adds	r5, #1
    if ((mask & 1) != 0) {
 800149e:	464b      	mov	r3, r9
 80014a0:	420b      	tst	r3, r1
 80014a2:	d0f1      	beq.n	8001488 <_pal_lld_setgroupmode+0x48>
      altrmask = altr << ((bit & 7) * 4);
 80014a4:	2307      	movs	r3, #7
 80014a6:	9a01      	ldr	r2, [sp, #4]
 80014a8:	402b      	ands	r3, r5
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	409a      	lsls	r2, r3
 80014ae:	4690      	mov	r8, r2
      m4 = 15 << ((bit & 7) * 4);
 80014b0:	220f      	movs	r2, #15
 80014b2:	409a      	lsls	r2, r3
 80014b4:	4692      	mov	sl, r2
      m1 = 1 << bit;
 80014b6:	464a      	mov	r2, r9
 80014b8:	40aa      	lsls	r2, r5
      m2 = 3 << (bit * 2);
 80014ba:	2403      	movs	r4, #3
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 80014bc:	6843      	ldr	r3, [r0, #4]
 80014be:	4393      	bics	r3, r2
 80014c0:	4333      	orrs	r3, r6
 80014c2:	6043      	str	r3, [r0, #4]
      m2 = 3 << (bit * 2);
 80014c4:	006b      	lsls	r3, r5, #1
 80014c6:	409c      	lsls	r4, r3
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 80014c8:	43e3      	mvns	r3, r4
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 80014ca:	4664      	mov	r4, ip
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 80014cc:	6882      	ldr	r2, [r0, #8]
 80014ce:	401a      	ands	r2, r3
 80014d0:	433a      	orrs	r2, r7
 80014d2:	6082      	str	r2, [r0, #8]
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 80014d4:	68c2      	ldr	r2, [r0, #12]
 80014d6:	401a      	ands	r2, r3
 80014d8:	4322      	orrs	r2, r4
 80014da:	60c2      	str	r2, [r0, #12]
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
 80014dc:	465a      	mov	r2, fp
 80014de:	2a02      	cmp	r2, #2
 80014e0:	d016      	beq.n	8001510 <_pal_lld_setgroupmode+0xd0>
        port->MODER   = (port->MODER & ~m2) | moder;
 80014e2:	6802      	ldr	r2, [r0, #0]
 80014e4:	4013      	ands	r3, r2
 80014e6:	9a00      	ldr	r2, [sp, #0]
 80014e8:	4313      	orrs	r3, r2
 80014ea:	6003      	str	r3, [r0, #0]
        if (bit < 8)
 80014ec:	2d07      	cmp	r5, #7
 80014ee:	d9c5      	bls.n	800147c <_pal_lld_setgroupmode+0x3c>
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 80014f0:	4652      	mov	r2, sl
 80014f2:	6a43      	ldr	r3, [r0, #36]	; 0x24
    mask >>= 1;
 80014f4:	0849      	lsrs	r1, r1, #1
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 80014f6:	4393      	bics	r3, r2
 80014f8:	4642      	mov	r2, r8
 80014fa:	4313      	orrs	r3, r2
 80014fc:	6243      	str	r3, [r0, #36]	; 0x24
    if (!mask)
 80014fe:	2900      	cmp	r1, #0
 8001500:	d1c4      	bne.n	800148c <_pal_lld_setgroupmode+0x4c>
  }
}
 8001502:	b003      	add	sp, #12
 8001504:	bc3c      	pop	{r2, r3, r4, r5}
 8001506:	4690      	mov	r8, r2
 8001508:	4699      	mov	r9, r3
 800150a:	46a2      	mov	sl, r4
 800150c:	46ab      	mov	fp, r5
 800150e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (bit < 8)
 8001510:	2d07      	cmp	r5, #7
 8001512:	d80b      	bhi.n	800152c <_pal_lld_setgroupmode+0xec>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 8001514:	4654      	mov	r4, sl
 8001516:	6a02      	ldr	r2, [r0, #32]
 8001518:	43a2      	bics	r2, r4
 800151a:	4644      	mov	r4, r8
 800151c:	4322      	orrs	r2, r4
 800151e:	6202      	str	r2, [r0, #32]
        port->MODER   = (port->MODER & ~m2) | moder;
 8001520:	6802      	ldr	r2, [r0, #0]
 8001522:	4013      	ands	r3, r2
 8001524:	9a00      	ldr	r2, [sp, #0]
 8001526:	4313      	orrs	r3, r2
 8001528:	6003      	str	r3, [r0, #0]
 800152a:	e7ad      	b.n	8001488 <_pal_lld_setgroupmode+0x48>
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 800152c:	4654      	mov	r4, sl
 800152e:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8001530:	43a2      	bics	r2, r4
 8001532:	4644      	mov	r4, r8
 8001534:	4322      	orrs	r2, r4
 8001536:	6242      	str	r2, [r0, #36]	; 0x24
 8001538:	e7f2      	b.n	8001520 <_pal_lld_setgroupmode+0xe0>
 800153a:	46c0      	nop			; (mov r8, r8)
 800153c:	0000      	movs	r0, r0
	...

08001540 <stSetAlarm>:
  return (bool)((STM32_ST_TIM->DIER & STM32_TIM_DIER_CC1IE) != 0);
 8001540:	2380      	movs	r3, #128	; 0x80
 8001542:	05db      	lsls	r3, r3, #23
 8001544:	68da      	ldr	r2, [r3, #12]
 *
 * @param[in] abstime   the time to be set for the next alarm
 *
 * @api
 */
void stSetAlarm(systime_t abstime) {
 8001546:	b510      	push	{r4, lr}

  osalDbgAssert(stIsAlarmActive() != false, "not active");
 8001548:	0792      	lsls	r2, r2, #30
 800154a:	d501      	bpl.n	8001550 <stSetAlarm+0x10>
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 800154c:	6358      	str	r0, [r3, #52]	; 0x34

  st_lld_set_alarm(abstime);
}
 800154e:	bd10      	pop	{r4, pc}
  osalDbgAssert(stIsAlarmActive() != false, "not active");
 8001550:	4801      	ldr	r0, [pc, #4]	; (8001558 <stSetAlarm+0x18>)
 8001552:	f7ff f835 	bl	80005c0 <chSysHalt>
 8001556:	46c0      	nop			; (mov r8, r8)
 8001558:	08002300 	.word	0x08002300
 800155c:	00000000 	.word	0x00000000

08001560 <VectorB0>:
 * @brief   TIM2 interrupt handler.
 * @details This interrupt is used for system tick in free running mode.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(ST_HANDLER) {
 8001560:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001562:	46d6      	mov	lr, sl
 8001564:	464f      	mov	r7, r9
 8001566:	4646      	mov	r6, r8

  OSAL_IRQ_PROLOGUE();
 8001568:	4b37      	ldr	r3, [pc, #220]	; (8001648 <VectorB0+0xe8>)
OSAL_IRQ_HANDLER(ST_HANDLER) {
 800156a:	b5c0      	push	{r6, r7, lr}
  OSAL_IRQ_PROLOGUE();
 800156c:	0018      	movs	r0, r3
 800156e:	4699      	mov	r9, r3
 8001570:	f7ff f806 	bl	8000580 <_trace_isr_enter>
 8001574:	f7ff f904 	bl	8000780 <_dbg_check_enter_isr>

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
 8001578:	2380      	movs	r3, #128	; 0x80
 800157a:	05db      	lsls	r3, r3, #23
 800157c:	4698      	mov	r8, r3
 800157e:	691b      	ldr	r3, [r3, #16]
 8001580:	079b      	lsls	r3, r3, #30
 8001582:	d40b      	bmi.n	800159c <VectorB0+0x3c>
    osalSysLockFromISR();
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
 8001584:	f7ff f8e4 	bl	8000750 <_dbg_check_leave_isr>
 8001588:	4648      	mov	r0, r9
 800158a:	f7fe ffd9 	bl	8000540 <_trace_isr_leave>
 800158e:	f7fe ff5f 	bl	8000450 <_port_irq_epilogue>
}
 8001592:	bc1c      	pop	{r2, r3, r4}
 8001594:	4690      	mov	r8, r2
 8001596:	4699      	mov	r9, r3
 8001598:	46a2      	mov	sl, r4
 800159a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    STM32_ST_TIM->SR = 0U;
 800159c:	2300      	movs	r3, #0
 800159e:	4642      	mov	r2, r8
 80015a0:	6113      	str	r3, [r2, #16]
 80015a2:	3320      	adds	r3, #32
 80015a4:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock_from_isr();
 80015a8:	f7ff f91a 	bl	80007e0 <_dbg_check_lock_from_isr>
 *
 * @iclass
 */
void chSysTimerHandlerI(void) {

  chDbgCheckClassI();
 80015ac:	f7ff f858 	bl	8000660 <chDbgCheckClassI>
 *
 * @iclass
 */
static inline void chVTDoTickI(void) {

  chDbgCheckClassI();
 80015b0:	f7ff f856 	bl	8000660 <chDbgCheckClassI>
  return (systime_t)STM32_ST_TIM->CNT;
 80015b4:	4643      	mov	r3, r8
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  virtual_timer_t *vtp;
  systime_t now, delta;

  /* First timer to be processed.*/
  vtp = ch.vtlist.next;
 80015b6:	4d25      	ldr	r5, [pc, #148]	; (800164c <VectorB0+0xec>)
 80015b8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80015ba:	69ec      	ldr	r4, [r5, #28]

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->delta <= (systime_t)(now - ch.vtlist.lasttime)) {
 80015bc:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80015be:	68a2      	ldr	r2, [r4, #8]
 80015c0:	1ac8      	subs	r0, r1, r3
 80015c2:	4290      	cmp	r0, r2
 80015c4:	d31f      	bcc.n	8001606 <VectorB0+0xa6>
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.lasttime += vtp->delta;

    vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 80015c6:	002f      	movs	r7, r5
    ch.vtlist.next = vtp->next;
    fn = vtp->func;
    vtp->func = NULL;
 80015c8:	2600      	movs	r6, #0
    vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 80015ca:	371c      	adds	r7, #28
    ch.vtlist.lasttime += vtp->delta;
 80015cc:	189b      	adds	r3, r3, r2
 80015ce:	62ab      	str	r3, [r5, #40]	; 0x28
    fn = vtp->func;
 80015d0:	68e2      	ldr	r2, [r4, #12]
    vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 80015d2:	6823      	ldr	r3, [r4, #0]
    fn = vtp->func;
 80015d4:	4692      	mov	sl, r2
    vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 80015d6:	605f      	str	r7, [r3, #4]
    ch.vtlist.next = vtp->next;
 80015d8:	61eb      	str	r3, [r5, #28]
    vtp->func = NULL;
 80015da:	60e6      	str	r6, [r4, #12]

    /* if the list becomes empty then the timer is stopped.*/
    if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 80015dc:	42bb      	cmp	r3, r7
 80015de:	d02b      	beq.n	8001638 <VectorB0+0xd8>
  _dbg_check_unlock_from_isr();
 80015e0:	f7ff f8e6 	bl	80007b0 <_dbg_check_unlock_from_isr>
 80015e4:	f386 8811 	msr	BASEPRI, r6
       and in order to give a preemption chance to higher priority
       interrupts.*/
    chSysUnlockFromISR();

    /* The callback is invoked outside the kernel critical zone.*/
    fn(vtp->par);
 80015e8:	6920      	ldr	r0, [r4, #16]
 80015ea:	47d0      	blx	sl
 80015ec:	2320      	movs	r3, #32
 80015ee:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock_from_isr();
 80015f2:	f7ff f8f5 	bl	80007e0 <_dbg_check_lock_from_isr>
 80015f6:	4643      	mov	r3, r8
       of the list.*/
    chSysLockFromISR();

    /* Next element in the list, the current time could have advanced so
       recalculating the time window.*/
    vtp = ch.vtlist.next;
 80015f8:	69ec      	ldr	r4, [r5, #28]
 80015fa:	6a59      	ldr	r1, [r3, #36]	; 0x24
  while (vtp->delta <= (systime_t)(now - ch.vtlist.lasttime)) {
 80015fc:	68a2      	ldr	r2, [r4, #8]
 80015fe:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001600:	1ac8      	subs	r0, r1, r3
 8001602:	4282      	cmp	r2, r0
 8001604:	d9e2      	bls.n	80015cc <VectorB0+0x6c>
    now = chVTGetSystemTimeX();
  }

  /* if the list is empty, nothing else to do.*/
  if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 8001606:	4812      	ldr	r0, [pc, #72]	; (8001650 <VectorB0+0xf0>)
 8001608:	4284      	cmp	r4, r0
 800160a:	d00f      	beq.n	800162c <VectorB0+0xcc>
    return;
  }

  /* Recalculating the next alarm time.*/
  delta = ch.vtlist.lasttime + vtp->delta - now;
 800160c:	18d3      	adds	r3, r2, r3
 800160e:	1a5c      	subs	r4, r3, r1
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
  }
  port_timer_set_alarm(now + delta);
 8001610:	2c02      	cmp	r4, #2
 8001612:	d314      	bcc.n	800163e <VectorB0+0xde>
 8001614:	1864      	adds	r4, r4, r1
 8001616:	0020      	movs	r0, r4
 8001618:	f7ff ff92 	bl	8001540 <stSetAlarm>
 800161c:	2380      	movs	r3, #128	; 0x80
 800161e:	05db      	lsls	r3, r3, #23
 8001620:	6a5a      	ldr	r2, [r3, #36]	; 0x24

  chDbgAssert((chVTGetSystemTimeX() - ch.vtlist.lasttime) <=
 8001622:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001624:	1ad2      	subs	r2, r2, r3
 8001626:	1ae3      	subs	r3, r4, r3
 8001628:	429a      	cmp	r2, r3
 800162a:	d80a      	bhi.n	8001642 <VectorB0+0xe2>
  _dbg_check_unlock_from_isr();
 800162c:	f7ff f8c0 	bl	80007b0 <_dbg_check_unlock_from_isr>
 8001630:	2300      	movs	r3, #0
 8001632:	f383 8811 	msr	BASEPRI, r3
 8001636:	e7a5      	b.n	8001584 <VectorB0+0x24>
  STM32_ST_TIM->DIER = 0;
 8001638:	4643      	mov	r3, r8
 800163a:	60de      	str	r6, [r3, #12]
 800163c:	e7d0      	b.n	80015e0 <VectorB0+0x80>
  port_timer_set_alarm(now + delta);
 800163e:	2402      	movs	r4, #2
 8001640:	e7e8      	b.n	8001614 <VectorB0+0xb4>
  chDbgAssert((chVTGetSystemTimeX() - ch.vtlist.lasttime) <=
 8001642:	4804      	ldr	r0, [pc, #16]	; (8001654 <VectorB0+0xf4>)
 8001644:	f7fe ffbc 	bl	80005c0 <chSysHalt>
 8001648:	080022d0 	.word	0x080022d0
 800164c:	20000544 	.word	0x20000544
 8001650:	20000560 	.word	0x20000560
 8001654:	080022c4 	.word	0x080022c4
	...

08001660 <chSysUnlock.lto_priv.20>:
static inline void chSysUnlock(void) {
 8001660:	b510      	push	{r4, lr}
  _dbg_check_unlock();
 8001662:	f7ff f90d 	bl	8000880 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8001666:	4b08      	ldr	r3, [pc, #32]	; (8001688 <chSysUnlock.lto_priv.20+0x28>)
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	429a      	cmp	r2, r3
 800166c:	d004      	beq.n	8001678 <chSysUnlock.lto_priv.20+0x18>
 800166e:	699b      	ldr	r3, [r3, #24]
 8001670:	6899      	ldr	r1, [r3, #8]
 8001672:	6893      	ldr	r3, [r2, #8]
 8001674:	4299      	cmp	r1, r3
 8001676:	d303      	bcc.n	8001680 <chSysUnlock.lto_priv.20+0x20>
 8001678:	2300      	movs	r3, #0
 800167a:	f383 8811 	msr	BASEPRI, r3
}
 800167e:	bd10      	pop	{r4, pc}
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8001680:	4802      	ldr	r0, [pc, #8]	; (800168c <chSysUnlock.lto_priv.20+0x2c>)
 8001682:	f7fe ff9d 	bl	80005c0 <chSysHalt>
 8001686:	46c0      	nop			; (mov r8, r8)
 8001688:	20000544 	.word	0x20000544
 800168c:	080022b8 	.word	0x080022b8

08001690 <pwmEnablePeriodicNotification>:
 *
 * @param[in] pwmp      pointer to a @p PWMDriver object
 *
 * @api
 */
void pwmEnablePeriodicNotification(PWMDriver *pwmp) {
 8001690:	b510      	push	{r4, lr}
 8001692:	1e04      	subs	r4, r0, #0

  osalDbgCheck(pwmp != NULL);
 8001694:	d007      	beq.n	80016a6 <pwmEnablePeriodicNotification+0x16>
 8001696:	2320      	movs	r3, #32
 8001698:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 800169c:	f7ff f920 	bl	80008e0 <_dbg_check_lock>

  osalSysLock();

  osalDbgAssert(pwmp->state == PWM_READY, "not ready");
 80016a0:	7823      	ldrb	r3, [r4, #0]
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d002      	beq.n	80016ac <pwmEnablePeriodicNotification+0x1c>
  osalDbgCheck(pwmp != NULL);
 80016a6:	480a      	ldr	r0, [pc, #40]	; (80016d0 <pwmEnablePeriodicNotification+0x40>)
 80016a8:	f7fe ff8a 	bl	80005c0 <chSysHalt>
  osalDbgAssert(pwmp->config->callback != NULL, "undefined periodic callback");
 80016ac:	6863      	ldr	r3, [r4, #4]
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d0f8      	beq.n	80016a6 <pwmEnablePeriodicNotification+0x16>
  if ((dier & STM32_TIM_DIER_UIE) == 0) {
 80016b4:	2101      	movs	r1, #1
  uint32_t dier = pwmp->tim->DIER;
 80016b6:	69a3      	ldr	r3, [r4, #24]
 80016b8:	68da      	ldr	r2, [r3, #12]
  if ((dier & STM32_TIM_DIER_UIE) == 0) {
 80016ba:	420a      	tst	r2, r1
 80016bc:	d104      	bne.n	80016c8 <pwmEnablePeriodicNotification+0x38>
    pwmp->tim->DIER = dier | STM32_TIM_DIER_UIE;
 80016be:	430a      	orrs	r2, r1
 80016c0:	60da      	str	r2, [r3, #12]
    pwmp->tim->SR &= STM32_TIM_SR_UIF;
 80016c2:	691a      	ldr	r2, [r3, #16]
 80016c4:	4011      	ands	r1, r2
 80016c6:	6119      	str	r1, [r3, #16]
 *
 * @special
 */
static inline void osalSysUnlock(void) {

  chSysUnlock();
 80016c8:	f7ff ffca 	bl	8001660 <chSysUnlock.lto_priv.20>

  pwmEnablePeriodicNotificationI(pwmp);

  osalSysUnlock();
}
 80016cc:	bd10      	pop	{r4, pc}
 80016ce:	46c0      	nop			; (mov r8, r8)
 80016d0:	08002354 	.word	0x08002354
	...

080016e0 <pwmStart>:
void pwmStart(PWMDriver *pwmp, const PWMConfig *config) {
 80016e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016e2:	46c6      	mov	lr, r8
 80016e4:	0004      	movs	r4, r0
 80016e6:	b500      	push	{lr}
 80016e8:	000d      	movs	r5, r1
  osalDbgCheck((pwmp != NULL) && (config != NULL));
 80016ea:	2800      	cmp	r0, #0
 80016ec:	d00a      	beq.n	8001704 <pwmStart+0x24>
 80016ee:	2900      	cmp	r1, #0
 80016f0:	d008      	beq.n	8001704 <pwmStart+0x24>
 80016f2:	2320      	movs	r3, #32
 80016f4:	f383 8811 	msr	BASEPRI, r3
 80016f8:	f7ff f8f2 	bl	80008e0 <_dbg_check_lock>
  osalDbgAssert((pwmp->state == PWM_STOP) || (pwmp->state == PWM_READY),
 80016fc:	7823      	ldrb	r3, [r4, #0]
 80016fe:	1e5a      	subs	r2, r3, #1
 8001700:	2a01      	cmp	r2, #1
 8001702:	d902      	bls.n	800170a <pwmStart+0x2a>
  osalDbgCheck((pwmp != NULL) && (config != NULL));
 8001704:	4881      	ldr	r0, [pc, #516]	; (800190c <pwmStart+0x22c>)
 8001706:	f7fe ff5b 	bl	80005c0 <chSysHalt>
  pwmp->period = config->period;
 800170a:	686a      	ldr	r2, [r5, #4]
  pwmp->config = config;
 800170c:	6065      	str	r5, [r4, #4]
  pwmp->period = config->period;
 800170e:	60a2      	str	r2, [r4, #8]
  if (pwmp->state == PWM_STOP) {
 8001710:	2b01      	cmp	r3, #1
 8001712:	d062      	beq.n	80017da <pwmStart+0xfa>
    pwmp->tim->CR1    = 0;                  /* Timer disabled.              */
 8001714:	2300      	movs	r3, #0
 8001716:	69a6      	ldr	r6, [r4, #24]
 8001718:	6033      	str	r3, [r6, #0]
    pwmp->tim->CCR[0] = 0;                  /* Comparator 1 disabled.       */
 800171a:	6373      	str	r3, [r6, #52]	; 0x34
    pwmp->tim->CCR[1] = 0;                  /* Comparator 2 disabled.       */
 800171c:	63b3      	str	r3, [r6, #56]	; 0x38
    pwmp->tim->CCR[2] = 0;                  /* Comparator 3 disabled.       */
 800171e:	63f3      	str	r3, [r6, #60]	; 0x3c
    pwmp->tim->CCR[3] = 0;                  /* Comparator 4 disabled.       */
 8001720:	6433      	str	r3, [r6, #64]	; 0x40
    pwmp->tim->CNT  = 0;                    /* Counter reset to zero.       */
 8001722:	6273      	str	r3, [r6, #36]	; 0x24
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
 8001724:	682b      	ldr	r3, [r5, #0]
 8001726:	6967      	ldr	r7, [r4, #20]
 8001728:	0019      	movs	r1, r3
 800172a:	0038      	movs	r0, r7
 800172c:	4698      	mov	r8, r3
 800172e:	f7fe fdcb 	bl	80002c8 <__udivsi3>
  osalDbgAssert((psc <= 0xFFFF) &&
 8001732:	4a77      	ldr	r2, [pc, #476]	; (8001910 <pwmStart+0x230>)
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
 8001734:	1e43      	subs	r3, r0, #1
  osalDbgAssert((psc <= 0xFFFF) &&
 8001736:	4293      	cmp	r3, r2
 8001738:	d803      	bhi.n	8001742 <pwmStart+0x62>
 800173a:	4642      	mov	r2, r8
 800173c:	4350      	muls	r0, r2
 800173e:	4287      	cmp	r7, r0
 8001740:	d002      	beq.n	8001748 <pwmStart+0x68>
 8001742:	4874      	ldr	r0, [pc, #464]	; (8001914 <pwmStart+0x234>)
 8001744:	f7fe ff3c 	bl	80005c0 <chSysHalt>
  pwmp->tim->PSC  = psc;
 8001748:	62b3      	str	r3, [r6, #40]	; 0x28
  pwmp->tim->ARR  = pwmp->period - 1;
 800174a:	68a3      	ldr	r3, [r4, #8]
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
 800174c:	68ea      	ldr	r2, [r5, #12]
  pwmp->tim->ARR  = pwmp->period - 1;
 800174e:	3b01      	subs	r3, #1
 8001750:	62f3      	str	r3, [r6, #44]	; 0x2c
  pwmp->tim->CR2  = pwmp->config->cr2;
 8001752:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001754:	6073      	str	r3, [r6, #4]
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
 8001756:	230f      	movs	r3, #15
 8001758:	4013      	ands	r3, r2
 800175a:	2b01      	cmp	r3, #1
 800175c:	d051      	beq.n	8001802 <pwmStart+0x122>
 800175e:	2b02      	cmp	r3, #2
 8001760:	d050      	beq.n	8001804 <pwmStart+0x124>
  ccer = 0;
 8001762:	2300      	movs	r3, #0
  switch (pwmp->config->channels[1].mode & PWM_OUTPUT_MASK) {
 8001764:	220f      	movs	r2, #15
 8001766:	6969      	ldr	r1, [r5, #20]
 8001768:	400a      	ands	r2, r1
 800176a:	2a01      	cmp	r2, #1
 800176c:	d003      	beq.n	8001776 <pwmStart+0x96>
 800176e:	2a02      	cmp	r2, #2
 8001770:	d103      	bne.n	800177a <pwmStart+0x9a>
    ccer |= STM32_TIM_CCER_CC2P;
 8001772:	321e      	adds	r2, #30
 8001774:	4313      	orrs	r3, r2
    ccer |= STM32_TIM_CCER_CC2E;
 8001776:	2210      	movs	r2, #16
 8001778:	4313      	orrs	r3, r2
  switch (pwmp->config->channels[2].mode & PWM_OUTPUT_MASK) {
 800177a:	220f      	movs	r2, #15
 800177c:	69e9      	ldr	r1, [r5, #28]
 800177e:	400a      	ands	r2, r1
 8001780:	2a01      	cmp	r2, #1
 8001782:	d004      	beq.n	800178e <pwmStart+0xae>
 8001784:	2a02      	cmp	r2, #2
 8001786:	d105      	bne.n	8001794 <pwmStart+0xb4>
    ccer |= STM32_TIM_CCER_CC3P;
 8001788:	32ff      	adds	r2, #255	; 0xff
 800178a:	32ff      	adds	r2, #255	; 0xff
 800178c:	4313      	orrs	r3, r2
    ccer |= STM32_TIM_CCER_CC3E;
 800178e:	2280      	movs	r2, #128	; 0x80
 8001790:	0052      	lsls	r2, r2, #1
 8001792:	4313      	orrs	r3, r2
  switch (pwmp->config->channels[3].mode & PWM_OUTPUT_MASK) {
 8001794:	220f      	movs	r2, #15
 8001796:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8001798:	400a      	ands	r2, r1
 800179a:	2a01      	cmp	r2, #1
 800179c:	d004      	beq.n	80017a8 <pwmStart+0xc8>
 800179e:	2a02      	cmp	r2, #2
 80017a0:	d105      	bne.n	80017ae <pwmStart+0xce>
    ccer |= STM32_TIM_CCER_CC4P;
 80017a2:	2280      	movs	r2, #128	; 0x80
 80017a4:	0192      	lsls	r2, r2, #6
 80017a6:	4313      	orrs	r3, r2
    ccer |= STM32_TIM_CCER_CC4E;
 80017a8:	2280      	movs	r2, #128	; 0x80
 80017aa:	0152      	lsls	r2, r2, #5
 80017ac:	4313      	orrs	r3, r2
  pwmp->tim->CCER  = ccer;
 80017ae:	6233      	str	r3, [r6, #32]
  pwmp->tim->EGR   = STM32_TIM_EGR_UG;      /* Update event.                */
 80017b0:	2301      	movs	r3, #1
  pwmp->tim->DIER  = pwmp->config->dier &   /* DMA-related DIER settings.   */
 80017b2:	21ff      	movs	r1, #255	; 0xff
  pwmp->tim->SR    = 0;                     /* Clear pending IRQs.          */
 80017b4:	2200      	movs	r2, #0
  pwmp->tim->EGR   = STM32_TIM_EGR_UG;      /* Update event.                */
 80017b6:	6173      	str	r3, [r6, #20]
  pwmp->tim->DIER  = pwmp->config->dier &   /* DMA-related DIER settings.   */
 80017b8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  pwmp->tim->SR    = 0;                     /* Clear pending IRQs.          */
 80017ba:	6132      	str	r2, [r6, #16]
  pwmp->tim->DIER  = pwmp->config->dier &   /* DMA-related DIER settings.   */
 80017bc:	438b      	bics	r3, r1
 80017be:	60f3      	str	r3, [r6, #12]
  pwmp->tim->BDTR  = STM32_TIM_BDTR_MOE;
 80017c0:	2380      	movs	r3, #128	; 0x80
 80017c2:	021b      	lsls	r3, r3, #8
 80017c4:	6473      	str	r3, [r6, #68]	; 0x44
  pwmp->tim->CR1   = STM32_TIM_CR1_ARPE | STM32_TIM_CR1_URS |
 80017c6:	2385      	movs	r3, #133	; 0x85
 80017c8:	6033      	str	r3, [r6, #0]
  pwmp->state = PWM_READY;
 80017ca:	3b83      	subs	r3, #131	; 0x83
  pwmp->enabled = 0;
 80017cc:	60e2      	str	r2, [r4, #12]
  pwmp->state = PWM_READY;
 80017ce:	7023      	strb	r3, [r4, #0]
 80017d0:	f7ff ff46 	bl	8001660 <chSysUnlock.lto_priv.20>
}
 80017d4:	bc04      	pop	{r2}
 80017d6:	4690      	mov	r8, r2
 80017d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (&PWMD1 == pwmp) {
 80017da:	4a4f      	ldr	r2, [pc, #316]	; (8001918 <pwmStart+0x238>)
 80017dc:	4294      	cmp	r4, r2
 80017de:	d079      	beq.n	80018d4 <pwmStart+0x1f4>
    if (&PWMD4 == pwmp) {
 80017e0:	4b4e      	ldr	r3, [pc, #312]	; (800191c <pwmStart+0x23c>)
 80017e2:	429c      	cmp	r4, r3
 80017e4:	d05f      	beq.n	80018a6 <pwmStart+0x1c6>
    if (&PWMD5 == pwmp) {
 80017e6:	4b4e      	ldr	r3, [pc, #312]	; (8001920 <pwmStart+0x240>)
 80017e8:	429c      	cmp	r4, r3
 80017ea:	d045      	beq.n	8001878 <pwmStart+0x198>
    if (&PWMD8 == pwmp) {
 80017ec:	4b4d      	ldr	r3, [pc, #308]	; (8001924 <pwmStart+0x244>)
 80017ee:	429c      	cmp	r4, r3
 80017f0:	d024      	beq.n	800183c <pwmStart+0x15c>
    if (&PWMD9 == pwmp) {
 80017f2:	4b4d      	ldr	r3, [pc, #308]	; (8001928 <pwmStart+0x248>)
 80017f4:	429c      	cmp	r4, r3
 80017f6:	d008      	beq.n	800180a <pwmStart+0x12a>
    pwmp->tim->CCMR1 = STM32_TIM_CCMR1_OC1M(6) | STM32_TIM_CCMR1_OC1PE |
 80017f8:	69a6      	ldr	r6, [r4, #24]
 80017fa:	4b4c      	ldr	r3, [pc, #304]	; (800192c <pwmStart+0x24c>)
 80017fc:	61b3      	str	r3, [r6, #24]
    pwmp->tim->CCMR2 = STM32_TIM_CCMR2_OC3M(6) | STM32_TIM_CCMR2_OC3PE |
 80017fe:	61f3      	str	r3, [r6, #28]
 8001800:	e790      	b.n	8001724 <pwmStart+0x44>
  ccer = 0;
 8001802:	2300      	movs	r3, #0
    ccer |= STM32_TIM_CCER_CC1E;
 8001804:	2201      	movs	r2, #1
 8001806:	4313      	orrs	r3, r2
 8001808:	e7ac      	b.n	8001764 <pwmStart+0x84>
      rccEnableTIM9(FALSE);
 800180a:	2280      	movs	r2, #128	; 0x80
 800180c:	4b48      	ldr	r3, [pc, #288]	; (8001930 <pwmStart+0x250>)
 800180e:	0252      	lsls	r2, r2, #9
 8001810:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001812:	4311      	orrs	r1, r2
 8001814:	6459      	str	r1, [r3, #68]	; 0x44
      rccResetTIM9();
 8001816:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001818:	430a      	orrs	r2, r1
 800181a:	625a      	str	r2, [r3, #36]	; 0x24
 800181c:	2200      	movs	r2, #0
 800181e:	625a      	str	r2, [r3, #36]	; 0x24

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001820:	22c6      	movs	r2, #198	; 0xc6
 8001822:	2170      	movs	r1, #112	; 0x70
 8001824:	4b43      	ldr	r3, [pc, #268]	; (8001934 <pwmStart+0x254>)
 8001826:	0092      	lsls	r2, r2, #2
 8001828:	5499      	strb	r1, [r3, r2]
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800182a:	2280      	movs	r2, #128	; 0x80
 800182c:	3111      	adds	r1, #17
 800182e:	0452      	lsls	r2, r2, #17
 8001830:	31ff      	adds	r1, #255	; 0xff
 8001832:	505a      	str	r2, [r3, r1]
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001834:	601a      	str	r2, [r3, #0]
      pwmp->clock = STM32_TIMCLK2;
 8001836:	4b40      	ldr	r3, [pc, #256]	; (8001938 <pwmStart+0x258>)
 8001838:	6163      	str	r3, [r4, #20]
 800183a:	e7dd      	b.n	80017f8 <pwmStart+0x118>
      rccEnableTIM8(FALSE);
 800183c:	2202      	movs	r2, #2
 800183e:	4b3c      	ldr	r3, [pc, #240]	; (8001930 <pwmStart+0x250>)
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001840:	2080      	movs	r0, #128	; 0x80
 8001842:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001844:	0140      	lsls	r0, r0, #5
 8001846:	4311      	orrs	r1, r2
 8001848:	6459      	str	r1, [r3, #68]	; 0x44
      rccResetTIM8();
 800184a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800184c:	430a      	orrs	r2, r1
 800184e:	625a      	str	r2, [r3, #36]	; 0x24
 8001850:	2200      	movs	r2, #0
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001852:	21cb      	movs	r1, #203	; 0xcb
 8001854:	625a      	str	r2, [r3, #36]	; 0x24
 8001856:	4b37      	ldr	r3, [pc, #220]	; (8001934 <pwmStart+0x254>)
 8001858:	3270      	adds	r2, #112	; 0x70
 800185a:	0089      	lsls	r1, r1, #2
 800185c:	545a      	strb	r2, [r3, r1]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800185e:	39a9      	subs	r1, #169	; 0xa9
 8001860:	39ff      	subs	r1, #255	; 0xff
 8001862:	5058      	str	r0, [r3, r1]
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001864:	6058      	str	r0, [r3, #4]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001866:	4835      	ldr	r0, [pc, #212]	; (800193c <pwmStart+0x25c>)
 8001868:	541a      	strb	r2, [r3, r0]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800186a:	2280      	movs	r2, #128	; 0x80
 800186c:	01d2      	lsls	r2, r2, #7
 800186e:	505a      	str	r2, [r3, r1]
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001870:	605a      	str	r2, [r3, #4]
      pwmp->clock = STM32_TIMCLK2;
 8001872:	4b31      	ldr	r3, [pc, #196]	; (8001938 <pwmStart+0x258>)
 8001874:	6163      	str	r3, [r4, #20]
 8001876:	e7bc      	b.n	80017f2 <pwmStart+0x112>
      rccEnableTIM5(FALSE);
 8001878:	2208      	movs	r2, #8
 800187a:	4b2d      	ldr	r3, [pc, #180]	; (8001930 <pwmStart+0x250>)
 800187c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800187e:	4311      	orrs	r1, r2
 8001880:	6419      	str	r1, [r3, #64]	; 0x40
      rccResetTIM5();
 8001882:	6a19      	ldr	r1, [r3, #32]
 8001884:	430a      	orrs	r2, r1
 8001886:	621a      	str	r2, [r3, #32]
 8001888:	2200      	movs	r2, #0
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800188a:	2170      	movs	r1, #112	; 0x70
 800188c:	621a      	str	r2, [r3, #32]
 800188e:	4b29      	ldr	r3, [pc, #164]	; (8001934 <pwmStart+0x254>)
 8001890:	4a2b      	ldr	r2, [pc, #172]	; (8001940 <pwmStart+0x260>)
 8001892:	5499      	strb	r1, [r3, r2]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001894:	2280      	movs	r2, #128	; 0x80
 8001896:	3115      	adds	r1, #21
 8001898:	02d2      	lsls	r2, r2, #11
 800189a:	31ff      	adds	r1, #255	; 0xff
 800189c:	505a      	str	r2, [r3, r1]
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800189e:	605a      	str	r2, [r3, #4]
      pwmp->clock = STM32_TIMCLK1;
 80018a0:	4b28      	ldr	r3, [pc, #160]	; (8001944 <pwmStart+0x264>)
 80018a2:	6163      	str	r3, [r4, #20]
 80018a4:	e7a2      	b.n	80017ec <pwmStart+0x10c>
      rccEnableTIM4(FALSE);
 80018a6:	2204      	movs	r2, #4
 80018a8:	4b21      	ldr	r3, [pc, #132]	; (8001930 <pwmStart+0x250>)
 80018aa:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80018ac:	4311      	orrs	r1, r2
 80018ae:	6419      	str	r1, [r3, #64]	; 0x40
      rccResetTIM4();
 80018b0:	6a19      	ldr	r1, [r3, #32]
 80018b2:	430a      	orrs	r2, r1
 80018b4:	621a      	str	r2, [r3, #32]
 80018b6:	2200      	movs	r2, #0
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80018b8:	2170      	movs	r1, #112	; 0x70
 80018ba:	621a      	str	r2, [r3, #32]
 80018bc:	4b1d      	ldr	r3, [pc, #116]	; (8001934 <pwmStart+0x254>)
 80018be:	4a22      	ldr	r2, [pc, #136]	; (8001948 <pwmStart+0x268>)
 80018c0:	5499      	strb	r1, [r3, r2]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80018c2:	2280      	movs	r2, #128	; 0x80
 80018c4:	3111      	adds	r1, #17
 80018c6:	05d2      	lsls	r2, r2, #23
 80018c8:	31ff      	adds	r1, #255	; 0xff
 80018ca:	505a      	str	r2, [r3, r1]
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80018cc:	601a      	str	r2, [r3, #0]
      pwmp->clock = STM32_TIMCLK1;
 80018ce:	4b1d      	ldr	r3, [pc, #116]	; (8001944 <pwmStart+0x264>)
 80018d0:	6163      	str	r3, [r4, #20]
 80018d2:	e788      	b.n	80017e6 <pwmStart+0x106>
      rccEnableTIM1(FALSE);
 80018d4:	4a16      	ldr	r2, [pc, #88]	; (8001930 <pwmStart+0x250>)
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80018d6:	2080      	movs	r0, #128	; 0x80
 80018d8:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80018da:	0480      	lsls	r0, r0, #18
 80018dc:	4319      	orrs	r1, r3
 80018de:	6451      	str	r1, [r2, #68]	; 0x44
      rccResetTIM1();
 80018e0:	6a51      	ldr	r1, [r2, #36]	; 0x24
 80018e2:	430b      	orrs	r3, r1
 80018e4:	6253      	str	r3, [r2, #36]	; 0x24
 80018e6:	2300      	movs	r3, #0
 80018e8:	6253      	str	r3, [r2, #36]	; 0x24
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80018ea:	2270      	movs	r2, #112	; 0x70
 80018ec:	4b11      	ldr	r3, [pc, #68]	; (8001934 <pwmStart+0x254>)
 80018ee:	4917      	ldr	r1, [pc, #92]	; (800194c <pwmStart+0x26c>)
 80018f0:	545a      	strb	r2, [r3, r1]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80018f2:	399a      	subs	r1, #154	; 0x9a
 80018f4:	39ff      	subs	r1, #255	; 0xff
 80018f6:	5058      	str	r0, [r3, r1]
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80018f8:	6018      	str	r0, [r3, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80018fa:	4815      	ldr	r0, [pc, #84]	; (8001950 <pwmStart+0x270>)
 80018fc:	541a      	strb	r2, [r3, r0]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80018fe:	2280      	movs	r2, #128	; 0x80
 8001900:	0512      	lsls	r2, r2, #20
 8001902:	505a      	str	r2, [r3, r1]
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001904:	601a      	str	r2, [r3, #0]
      pwmp->clock = STM32_TIMCLK2;
 8001906:	4b0c      	ldr	r3, [pc, #48]	; (8001938 <pwmStart+0x258>)
 8001908:	6163      	str	r3, [r4, #20]
 800190a:	e769      	b.n	80017e0 <pwmStart+0x100>
 800190c:	080022e8 	.word	0x080022e8
 8001910:	0000ffff 	.word	0x0000ffff
 8001914:	08002374 	.word	0x08002374
 8001918:	200004b8 	.word	0x200004b8
 800191c:	200004d4 	.word	0x200004d4
 8001920:	200004f0 	.word	0x200004f0
 8001924:	2000050c 	.word	0x2000050c
 8001928:	20000528 	.word	0x20000528
 800192c:	00006868 	.word	0x00006868
 8001930:	40023800 	.word	0x40023800
 8001934:	e000e100 	.word	0xe000e100
 8001938:	0a037a00 	.word	0x0a037a00
 800193c:	0000032e 	.word	0x0000032e
 8001940:	00000332 	.word	0x00000332
 8001944:	0501bd00 	.word	0x0501bd00
 8001948:	0000031e 	.word	0x0000031e
 800194c:	00000319 	.word	0x00000319
 8001950:	0000031b 	.word	0x0000031b
	...

08001960 <pwmThread1.lto_priv.17>:
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.current->name = name;
 8001960:	4b34      	ldr	r3, [pc, #208]	; (8001a34 <pwmThread1.lto_priv.17+0xd4>)
//  palClearPad(GPIOA, GPIOA_LED_GREEN);
}


static THD_WORKING_AREA(pwmThread1_wa, 128);
static THD_FUNCTION(pwmThread1, arg) {
 8001962:	b570      	push	{r4, r5, r6, lr}
 8001964:	699b      	ldr	r3, [r3, #24]
  pwmStart(&PHASE_U, &pwm1cfg);
 8001966:	4c34      	ldr	r4, [pc, #208]	; (8001a38 <pwmThread1.lto_priv.17+0xd8>)
 8001968:	4a34      	ldr	r2, [pc, #208]	; (8001a3c <pwmThread1.lto_priv.17+0xdc>)
 800196a:	4935      	ldr	r1, [pc, #212]	; (8001a40 <pwmThread1.lto_priv.17+0xe0>)
 800196c:	619a      	str	r2, [r3, #24]
 800196e:	0020      	movs	r0, r4
 8001970:	f7ff feb6 	bl	80016e0 <pwmStart>
  pwmEnablePeriodicNotification(&PHASE_U);
 8001974:	0020      	movs	r0, r4
 8001976:	f7ff fe8b 	bl	8001690 <pwmEnablePeriodicNotification>
  palSetPadMode(GPIOA, 8, PAL_MODE_ALTERNATE(1));
 800197a:	2180      	movs	r1, #128	; 0x80
 800197c:	2282      	movs	r2, #130	; 0x82
 800197e:	0049      	lsls	r1, r1, #1
 8001980:	4830      	ldr	r0, [pc, #192]	; (8001a44 <pwmThread1.lto_priv.17+0xe4>)
 8001982:	f7ff fd5d 	bl	8001440 <_pal_lld_setgroupmode>
  chThdSleepMilliseconds(2000);
 8001986:	4830      	ldr	r0, [pc, #192]	; (8001a48 <pwmThread1.lto_priv.17+0xe8>)
 8001988:	f7ff fa1a 	bl	8000dc0 <chThdSleep>
  pwmEnableChannel(&PHASE_U, 0, PWM_PERCENTAGE_TO_WIDTH(&PHASE_U, 5000));
 800198c:	4d2f      	ldr	r5, [pc, #188]	; (8001a4c <pwmThread1.lto_priv.17+0xec>)
 800198e:	68a0      	ldr	r0, [r4, #8]
 8001990:	492f      	ldr	r1, [pc, #188]	; (8001a50 <pwmThread1.lto_priv.17+0xf0>)
 8001992:	4368      	muls	r0, r5
 8001994:	f7fe fc98 	bl	80002c8 <__udivsi3>
 8001998:	0001      	movs	r1, r0
 800199a:	0020      	movs	r0, r4
 800199c:	f000 f8b0 	bl	8001b00 <pwmEnableChannel.constprop.3>
  pwmEnableChannelNotification(&PHASE_U, 0);
 80019a0:	0020      	movs	r0, r4
 80019a2:	f000 f8cd 	bl	8001b40 <pwmEnableChannelNotification.constprop.1>
  chThdSleepMilliseconds(5000);
 80019a6:	482b      	ldr	r0, [pc, #172]	; (8001a54 <pwmThread1.lto_priv.17+0xf4>)
 80019a8:	f7ff fa0a 	bl	8000dc0 <chThdSleep>
  pwmStart(&PHASE_V, &pwm2cfg);
 80019ac:	4c2a      	ldr	r4, [pc, #168]	; (8001a58 <pwmThread1.lto_priv.17+0xf8>)
 80019ae:	492b      	ldr	r1, [pc, #172]	; (8001a5c <pwmThread1.lto_priv.17+0xfc>)
 80019b0:	0020      	movs	r0, r4
 80019b2:	f7ff fe95 	bl	80016e0 <pwmStart>
  pwmEnablePeriodicNotification(&PHASE_V);
 80019b6:	0020      	movs	r0, r4
 80019b8:	f7ff fe6a 	bl	8001690 <pwmEnablePeriodicNotification>
  palSetPadMode(GPIOB, 6, PAL_MODE_ALTERNATE(2));
 80019bc:	2281      	movs	r2, #129	; 0x81
 80019be:	2140      	movs	r1, #64	; 0x40
 80019c0:	0052      	lsls	r2, r2, #1
 80019c2:	4827      	ldr	r0, [pc, #156]	; (8001a60 <pwmThread1.lto_priv.17+0x100>)
 80019c4:	f7ff fd3c 	bl	8001440 <_pal_lld_setgroupmode>
  chThdSleepMilliseconds(2000);
 80019c8:	481f      	ldr	r0, [pc, #124]	; (8001a48 <pwmThread1.lto_priv.17+0xe8>)
 80019ca:	f7ff f9f9 	bl	8000dc0 <chThdSleep>
  pwmEnableChannel(&PHASE_V, 0, PWM_PERCENTAGE_TO_WIDTH(&PHASE_V, 5000));
 80019ce:	68a0      	ldr	r0, [r4, #8]
 80019d0:	491f      	ldr	r1, [pc, #124]	; (8001a50 <pwmThread1.lto_priv.17+0xf0>)
 80019d2:	4368      	muls	r0, r5
 80019d4:	f7fe fc78 	bl	80002c8 <__udivsi3>
 80019d8:	0001      	movs	r1, r0
 80019da:	0020      	movs	r0, r4
 80019dc:	f000 f890 	bl	8001b00 <pwmEnableChannel.constprop.3>
  pwmEnableChannelNotification(&PHASE_V, 0);
 80019e0:	0020      	movs	r0, r4
 80019e2:	f000 f8ad 	bl	8001b40 <pwmEnableChannelNotification.constprop.1>
  chThdSleepMilliseconds(5000);
 80019e6:	481b      	ldr	r0, [pc, #108]	; (8001a54 <pwmThread1.lto_priv.17+0xf4>)
 80019e8:	f7ff f9ea 	bl	8000dc0 <chThdSleep>
  pwmStart(&PHASE_W, &pwm3cfg);
 80019ec:	4c1d      	ldr	r4, [pc, #116]	; (8001a64 <pwmThread1.lto_priv.17+0x104>)
 80019ee:	491e      	ldr	r1, [pc, #120]	; (8001a68 <pwmThread1.lto_priv.17+0x108>)
 80019f0:	0020      	movs	r0, r4
 80019f2:	f7ff fe75 	bl	80016e0 <pwmStart>
  pwmEnablePeriodicNotification(&PHASE_W);
 80019f6:	0020      	movs	r0, r4
 80019f8:	f7ff fe4a 	bl	8001690 <pwmEnablePeriodicNotification>
  palSetPadMode(GPIOA, 0, PAL_MODE_ALTERNATE(2));
 80019fc:	2281      	movs	r2, #129	; 0x81
 80019fe:	2101      	movs	r1, #1
 8001a00:	0052      	lsls	r2, r2, #1
 8001a02:	4810      	ldr	r0, [pc, #64]	; (8001a44 <pwmThread1.lto_priv.17+0xe4>)
 8001a04:	f7ff fd1c 	bl	8001440 <_pal_lld_setgroupmode>
  chThdSleepMilliseconds(2000);
 8001a08:	480f      	ldr	r0, [pc, #60]	; (8001a48 <pwmThread1.lto_priv.17+0xe8>)
 8001a0a:	f7ff f9d9 	bl	8000dc0 <chThdSleep>
  pwmEnableChannel(&PHASE_W, 0, PWM_PERCENTAGE_TO_WIDTH(&PHASE_W, 5000));
 8001a0e:	68a0      	ldr	r0, [r4, #8]
 8001a10:	490f      	ldr	r1, [pc, #60]	; (8001a50 <pwmThread1.lto_priv.17+0xf0>)
 8001a12:	4368      	muls	r0, r5
 8001a14:	f7fe fc58 	bl	80002c8 <__udivsi3>
 8001a18:	0001      	movs	r1, r0
 8001a1a:	0020      	movs	r0, r4
 8001a1c:	f000 f870 	bl	8001b00 <pwmEnableChannel.constprop.3>
  pwmEnableChannelNotification(&PHASE_W, 0);
 8001a20:	0020      	movs	r0, r4
 8001a22:	f000 f88d 	bl	8001b40 <pwmEnableChannelNotification.constprop.1>
  chThdSleepMilliseconds(5000);
 8001a26:	480b      	ldr	r0, [pc, #44]	; (8001a54 <pwmThread1.lto_priv.17+0xf4>)
 8001a28:	f7ff f9ca 	bl	8000dc0 <chThdSleep>
  chRegSetThreadName("pwm");
	pwm1();
	pwm2();
	pwm3();
	while(true){
  	chThdSleepMilliseconds(500);
 8001a2c:	4807      	ldr	r0, [pc, #28]	; (8001a4c <pwmThread1.lto_priv.17+0xec>)
 8001a2e:	f7ff f9c7 	bl	8000dc0 <chThdSleep>
 8001a32:	e7fb      	b.n	8001a2c <pwmThread1.lto_priv.17+0xcc>
 8001a34:	20000544 	.word	0x20000544
 8001a38:	200004b8 	.word	0x200004b8
 8001a3c:	08002384 	.word	0x08002384
 8001a40:	20000400 	.word	0x20000400
 8001a44:	40020000 	.word	0x40020000
 8001a48:	00004e20 	.word	0x00004e20
 8001a4c:	00001388 	.word	0x00001388
 8001a50:	00002710 	.word	0x00002710
 8001a54:	0000c350 	.word	0x0000c350
 8001a58:	200004d4 	.word	0x200004d4
 8001a5c:	20000434 	.word	0x20000434
 8001a60:	40020400 	.word	0x40020400
 8001a64:	200004f0 	.word	0x200004f0
 8001a68:	20000468 	.word	0x20000468
 8001a6c:	00000000 	.word	0x00000000

08001a70 <chTMStartMeasurementX.constprop.10>:
 8001a70:	4b01      	ldr	r3, [pc, #4]	; (8001a78 <chTMStartMeasurementX.constprop.10+0x8>)
 8001a72:	685b      	ldr	r3, [r3, #4]
  tmp->last = chSysGetRealtimeCounterX();
 8001a74:	6083      	str	r3, [r0, #8]
}
 8001a76:	4770      	bx	lr
 8001a78:	e0001000 	.word	0xe0001000
 8001a7c:	00000000 	.word	0x00000000

08001a80 <chSchWakeupS.constprop.15>:
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8001a80:	b570      	push	{r4, r5, r6, lr}
  thread_t *otp = currp;
 8001a82:	4c1a      	ldr	r4, [pc, #104]	; (8001aec <chSchWakeupS.constprop.15+0x6c>)
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8001a84:	0005      	movs	r5, r0
  chDbgCheckClassS();
 8001a86:	f7fe fdb3 	bl	80005f0 <chDbgCheckClassS>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8001a8a:	6823      	ldr	r3, [r4, #0]
  thread_t *otp = currp;
 8001a8c:	69a6      	ldr	r6, [r4, #24]
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8001a8e:	42a3      	cmp	r3, r4
 8001a90:	d003      	beq.n	8001a9a <chSchWakeupS.constprop.15+0x1a>
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	68b2      	ldr	r2, [r6, #8]
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d321      	bcc.n	8001ade <chSchWakeupS.constprop.15+0x5e>
  ntp->u.rdymsg = msg;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	626b      	str	r3, [r5, #36]	; 0x24
  if (ntp->prio <= otp->prio) {
 8001a9e:	68b2      	ldr	r2, [r6, #8]
 8001aa0:	68ab      	ldr	r3, [r5, #8]
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d917      	bls.n	8001ad6 <chSchWakeupS.constprop.15+0x56>
    otp = chSchReadyI(otp);
 8001aa6:	0030      	movs	r0, r6
 8001aa8:	f7fe fe2a 	bl	8000700 <chSchReadyI>
    ntp->state = CH_STATE_CURRENT;
 8001aac:	2220      	movs	r2, #32
 8001aae:	2301      	movs	r3, #1
 8001ab0:	54ab      	strb	r3, [r5, r2]
 8001ab2:	8f22      	ldrh	r2, [r4, #56]	; 0x38
    otp = chSchReadyI(otp);
 8001ab4:	0006      	movs	r6, r0
    currp = ntp;
 8001ab6:	61a5      	str	r5, [r4, #24]
 8001ab8:	421a      	tst	r2, r3
 8001aba:	d101      	bne.n	8001ac0 <chSchWakeupS.constprop.15+0x40>
 8001abc:	f7fe fd20 	bl	8000500 <_trace_switch.part.0>
  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 8001ac0:	f3ef 8309 	mrs	r3, PSP
    chSysSwitch(ntp, otp);
 8001ac4:	69f2      	ldr	r2, [r6, #28]
 8001ac6:	3b24      	subs	r3, #36	; 0x24
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d80b      	bhi.n	8001ae4 <chSchWakeupS.constprop.15+0x64>
 8001acc:	0031      	movs	r1, r6
 8001ace:	0028      	movs	r0, r5
 8001ad0:	f7fe fbe0 	bl	8000294 <_port_switch>
}
 8001ad4:	bd70      	pop	{r4, r5, r6, pc}
    (void) chSchReadyI(ntp);
 8001ad6:	0028      	movs	r0, r5
 8001ad8:	f7fe fe12 	bl	8000700 <chSchReadyI>
 8001adc:	e7fa      	b.n	8001ad4 <chSchWakeupS.constprop.15+0x54>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8001ade:	4804      	ldr	r0, [pc, #16]	; (8001af0 <chSchWakeupS.constprop.15+0x70>)
 8001ae0:	f7fe fd6e 	bl	80005c0 <chSysHalt>
    chSysSwitch(ntp, otp);
 8001ae4:	4803      	ldr	r0, [pc, #12]	; (8001af4 <chSchWakeupS.constprop.15+0x74>)
 8001ae6:	f7fe fd6b 	bl	80005c0 <chSysHalt>
 8001aea:	46c0      	nop			; (mov r8, r8)
 8001aec:	20000544 	.word	0x20000544
 8001af0:	080023a8 	.word	0x080023a8
 8001af4:	08002228 	.word	0x08002228
	...

08001b00 <pwmEnableChannel.constprop.3>:
void pwmEnableChannel(PWMDriver *pwmp,
 8001b00:	b570      	push	{r4, r5, r6, lr}
 8001b02:	0004      	movs	r4, r0
 8001b04:	000d      	movs	r5, r1
  osalDbgCheck((pwmp != NULL) && (channel < pwmp->channels));
 8001b06:	2800      	cmp	r0, #0
 8001b08:	d002      	beq.n	8001b10 <pwmEnableChannel.constprop.3+0x10>
 8001b0a:	7c03      	ldrb	r3, [r0, #16]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d102      	bne.n	8001b16 <pwmEnableChannel.constprop.3+0x16>
 8001b10:	4809      	ldr	r0, [pc, #36]	; (8001b38 <pwmEnableChannel.constprop.3+0x38>)
 8001b12:	f7fe fd55 	bl	80005c0 <chSysHalt>
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8001b16:	2320      	movs	r3, #32
 8001b18:	f383 8811 	msr	BASEPRI, r3
 8001b1c:	f7fe fee0 	bl	80008e0 <_dbg_check_lock>
  osalDbgAssert(pwmp->state == PWM_READY, "not ready");
 8001b20:	7823      	ldrb	r3, [r4, #0]
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	d1f4      	bne.n	8001b10 <pwmEnableChannel.constprop.3+0x10>
  pwmEnableChannelI(pwmp, channel, width);
 8001b26:	68e2      	ldr	r2, [r4, #12]
 8001b28:	3b01      	subs	r3, #1
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	60e3      	str	r3, [r4, #12]
  pwmp->tim->CCR[channel] = width;
 8001b2e:	69a3      	ldr	r3, [r4, #24]
 8001b30:	635d      	str	r5, [r3, #52]	; 0x34
 8001b32:	f7ff fd95 	bl	8001660 <chSysUnlock.lto_priv.20>
}
 8001b36:	bd70      	pop	{r4, r5, r6, pc}
 8001b38:	080023b8 	.word	0x080023b8
 8001b3c:	00000000 	.word	0x00000000

08001b40 <pwmEnableChannelNotification.constprop.1>:
 * @param[in] pwmp      pointer to a @p PWMDriver object
 * @param[in] channel   PWM channel identifier (0...channels-1)
 *
 * @api
 */
void pwmEnableChannelNotification(PWMDriver *pwmp, pwmchannel_t channel) {
 8001b40:	b510      	push	{r4, lr}
 8001b42:	1e04      	subs	r4, r0, #0

  osalDbgCheck((pwmp != NULL) && (channel < pwmp->channels));
 8001b44:	d01d      	beq.n	8001b82 <pwmEnableChannelNotification.constprop.1+0x42>
 8001b46:	7c03      	ldrb	r3, [r0, #16]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d01a      	beq.n	8001b82 <pwmEnableChannelNotification.constprop.1+0x42>
 8001b4c:	2320      	movs	r3, #32
 8001b4e:	f383 8811 	msr	BASEPRI, r3
 8001b52:	f7fe fec5 	bl	80008e0 <_dbg_check_lock>

  osalSysLock();

  osalDbgAssert(pwmp->state == PWM_READY, "not ready");
 8001b56:	7823      	ldrb	r3, [r4, #0]
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	d112      	bne.n	8001b82 <pwmEnableChannelNotification.constprop.1+0x42>
  osalDbgAssert((pwmp->enabled & ((pwmchnmsk_t)1U << (pwmchnmsk_t)channel)) != 0U,
 8001b5c:	68e2      	ldr	r2, [r4, #12]
 8001b5e:	07d2      	lsls	r2, r2, #31
 8001b60:	d50f      	bpl.n	8001b82 <pwmEnableChannelNotification.constprop.1+0x42>
                "channel not enabled");
  osalDbgAssert(pwmp->config->channels[channel].callback != NULL,
 8001b62:	6862      	ldr	r2, [r4, #4]
 8001b64:	6912      	ldr	r2, [r2, #16]
 8001b66:	2a00      	cmp	r2, #0
 8001b68:	d00b      	beq.n	8001b82 <pwmEnableChannelNotification.constprop.1+0x42>
  uint32_t dier = pwmp->tim->DIER;
 8001b6a:	69a2      	ldr	r2, [r4, #24]
 8001b6c:	68d1      	ldr	r1, [r2, #12]
  if ((dier & (2 << channel)) == 0) {
 8001b6e:	4219      	tst	r1, r3
 8001b70:	d104      	bne.n	8001b7c <pwmEnableChannelNotification.constprop.1+0x3c>
    pwmp->tim->DIER = dier | (2 << channel);
 8001b72:	430b      	orrs	r3, r1
 8001b74:	60d3      	str	r3, [r2, #12]
    pwmp->tim->SR   = ~(2 << channel);
 8001b76:	2303      	movs	r3, #3
 8001b78:	425b      	negs	r3, r3
 8001b7a:	6113      	str	r3, [r2, #16]
 8001b7c:	f7ff fd70 	bl	8001660 <chSysUnlock.lto_priv.20>
                "undefined channel callback");

  pwmEnableChannelNotificationI(pwmp, channel);

  osalSysUnlock();
}
 8001b80:	bd10      	pop	{r4, pc}
  osalDbgCheck((pwmp != NULL) && (channel < pwmp->channels));
 8001b82:	4801      	ldr	r0, [pc, #4]	; (8001b88 <pwmEnableChannelNotification.constprop.1+0x48>)
 8001b84:	f7fe fd1c 	bl	80005c0 <chSysHalt>
 8001b88:	080023cc 	.word	0x080023cc
 8001b8c:	00000000 	.word	0x00000000

08001b90 <main>:
  rccResetAHB1(~0);
 8001b90:	4be0      	ldr	r3, [pc, #896]	; (8001f14 <main+0x384>)
 8001b92:	2101      	movs	r1, #1
 8001b94:	691a      	ldr	r2, [r3, #16]
	}
}

int main(void) {
 8001b96:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b98:	2200      	movs	r2, #0
 8001b9a:	46c6      	mov	lr, r8
 8001b9c:	4249      	negs	r1, r1
 8001b9e:	b500      	push	{lr}
 8001ba0:	6119      	str	r1, [r3, #16]
 8001ba2:	611a      	str	r2, [r3, #16]
  rccResetAHB2(~0);
 8001ba4:	6958      	ldr	r0, [r3, #20]
 8001ba6:	6159      	str	r1, [r3, #20]
 8001ba8:	615a      	str	r2, [r3, #20]
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 8001baa:	6a1c      	ldr	r4, [r3, #32]
 8001bac:	48da      	ldr	r0, [pc, #872]	; (8001f18 <main+0x388>)
 8001bae:	b086      	sub	sp, #24
 8001bb0:	4320      	orrs	r0, r4
 8001bb2:	6218      	str	r0, [r3, #32]
 8001bb4:	621a      	str	r2, [r3, #32]
  rccResetAPB2(~0);
 8001bb6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001bb8:	6259      	str	r1, [r3, #36]	; 0x24
  rccEnablePWRInterface(FALSE);
 8001bba:	2180      	movs	r1, #128	; 0x80
  rccResetAPB2(~0);
 8001bbc:	625a      	str	r2, [r3, #36]	; 0x24
  rccEnablePWRInterface(FALSE);
 8001bbe:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8001bc0:	0549      	lsls	r1, r1, #21
 8001bc2:	4301      	orrs	r1, r0
 8001bc4:	6419      	str	r1, [r3, #64]	; 0x40
  PWR->CR |= PWR_CR_DBP;
 8001bc6:	2180      	movs	r1, #128	; 0x80
 8001bc8:	48d4      	ldr	r0, [pc, #848]	; (8001f1c <main+0x38c>)
 8001bca:	0049      	lsls	r1, r1, #1
 8001bcc:	6804      	ldr	r4, [r0, #0]
 8001bce:	4321      	orrs	r1, r4
 8001bd0:	6001      	str	r1, [r0, #0]
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
 8001bd2:	20c0      	movs	r0, #192	; 0xc0
 8001bd4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8001bd6:	0080      	lsls	r0, r0, #2
 8001bd8:	4001      	ands	r1, r0
 8001bda:	3801      	subs	r0, #1
 8001bdc:	38ff      	subs	r0, #255	; 0xff
 8001bde:	4281      	cmp	r1, r0
 8001be0:	d003      	beq.n	8001bea <main+0x5a>
    RCC->BDCR = RCC_BDCR_BDRST;
 8001be2:	2180      	movs	r1, #128	; 0x80
 8001be4:	0249      	lsls	r1, r1, #9
 8001be6:	6719      	str	r1, [r3, #112]	; 0x70
    RCC->BDCR = 0;
 8001be8:	671a      	str	r2, [r3, #112]	; 0x70
  PWR->CSR &= ~PWR_CSR_BRE;
 8001bea:	4acc      	ldr	r2, [pc, #816]	; (8001f1c <main+0x38c>)
 8001bec:	49cc      	ldr	r1, [pc, #816]	; (8001f20 <main+0x390>)
 8001bee:	6853      	ldr	r3, [r2, #4]
  RCC->AHB1ENR   |= AHB1_EN_MASK;
 8001bf0:	4cc8      	ldr	r4, [pc, #800]	; (8001f14 <main+0x384>)
 8001bf2:	400b      	ands	r3, r1
 8001bf4:	21ff      	movs	r1, #255	; 0xff
 8001bf6:	6053      	str	r3, [r2, #4]
 8001bf8:	6b22      	ldr	r2, [r4, #48]	; 0x30
  gpiop->AFRH    = config->afrh;
 8001bfa:	2699      	movs	r6, #153	; 0x99
  RCC->AHB1ENR   |= AHB1_EN_MASK;
 8001bfc:	430a      	orrs	r2, r1
 8001bfe:	6322      	str	r2, [r4, #48]	; 0x30
  RCC->AHB1LPENR |= AHB1_LPEN_MASK;
 8001c00:	6d23      	ldr	r3, [r4, #80]	; 0x50
  gpiop->OTYPER  = config->otyper;
 8001c02:	4ac8      	ldr	r2, [pc, #800]	; (8001f24 <main+0x394>)
  RCC->AHB1LPENR |= AHB1_LPEN_MASK;
 8001c04:	430b      	orrs	r3, r1
 8001c06:	6523      	str	r3, [r4, #80]	; 0x50
  gpiop->OTYPER  = config->otyper;
 8001c08:	2300      	movs	r3, #0
  gpiop->OSPEEDR = config->ospeedr;
 8001c0a:	3951      	subs	r1, #81	; 0x51
 8001c0c:	39ff      	subs	r1, #255	; 0xff
  gpiop->OTYPER  = config->otyper;
 8001c0e:	6053      	str	r3, [r2, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8001c10:	6091      	str	r1, [r2, #8]
  gpiop->PUPDR   = config->pupdr;
 8001c12:	49c5      	ldr	r1, [pc, #788]	; (8001f28 <main+0x398>)
  gpiop->ODR     = config->odr;
 8001c14:	48c5      	ldr	r0, [pc, #788]	; (8001f2c <main+0x39c>)
  gpiop->PUPDR   = config->pupdr;
 8001c16:	60d1      	str	r1, [r2, #12]
  gpiop->ODR     = config->odr;
 8001c18:	49c5      	ldr	r1, [pc, #788]	; (8001f30 <main+0x3a0>)
  gpiop->PUPDR   = config->pupdr;
 8001c1a:	4dc6      	ldr	r5, [pc, #792]	; (8001f34 <main+0x3a4>)
  gpiop->ODR     = config->odr;
 8001c1c:	6151      	str	r1, [r2, #20]
  gpiop->AFRL    = config->afrl;
 8001c1e:	49c6      	ldr	r1, [pc, #792]	; (8001f38 <main+0x3a8>)
 8001c20:	6211      	str	r1, [r2, #32]
  gpiop->AFRH    = config->afrh;
 8001c22:	21aa      	movs	r1, #170	; 0xaa
 8001c24:	0309      	lsls	r1, r1, #12
 8001c26:	6251      	str	r1, [r2, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8001c28:	49c4      	ldr	r1, [pc, #784]	; (8001f3c <main+0x3ac>)
 8001c2a:	6011      	str	r1, [r2, #0]
  gpiop->OSPEEDR = config->ospeedr;
 8001c2c:	2101      	movs	r1, #1
  gpiop->OTYPER  = config->otyper;
 8001c2e:	4ac4      	ldr	r2, [pc, #784]	; (8001f40 <main+0x3b0>)
  gpiop->OSPEEDR = config->ospeedr;
 8001c30:	4249      	negs	r1, r1
  gpiop->OTYPER  = config->otyper;
 8001c32:	6053      	str	r3, [r2, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8001c34:	6091      	str	r1, [r2, #8]
  gpiop->PUPDR   = config->pupdr;
 8001c36:	60d5      	str	r5, [r2, #12]
  gpiop->ODR     = config->odr;
 8001c38:	6150      	str	r0, [r2, #20]
  gpiop->AFRL    = config->afrl;
 8001c3a:	6213      	str	r3, [r2, #32]
  gpiop->AFRH    = config->afrh;
 8001c3c:	6256      	str	r6, [r2, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8001c3e:	4ec1      	ldr	r6, [pc, #772]	; (8001f44 <main+0x3b4>)
 8001c40:	6016      	str	r6, [r2, #0]
  gpiop->OTYPER  = config->otyper;
 8001c42:	4ac1      	ldr	r2, [pc, #772]	; (8001f48 <main+0x3b8>)
  gpiop->PUPDR   = config->pupdr;
 8001c44:	4ec1      	ldr	r6, [pc, #772]	; (8001f4c <main+0x3bc>)
  gpiop->OTYPER  = config->otyper;
 8001c46:	6053      	str	r3, [r2, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8001c48:	6091      	str	r1, [r2, #8]
  gpiop->PUPDR   = config->pupdr;
 8001c4a:	60d6      	str	r6, [r2, #12]
  gpiop->ODR     = config->odr;
 8001c4c:	6150      	str	r0, [r2, #20]
  gpiop->AFRL    = config->afrl;
 8001c4e:	6213      	str	r3, [r2, #32]
  gpiop->AFRH    = config->afrh;
 8001c50:	6253      	str	r3, [r2, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8001c52:	6013      	str	r3, [r2, #0]
  gpiop->OTYPER  = config->otyper;
 8001c54:	4abe      	ldr	r2, [pc, #760]	; (8001f50 <main+0x3c0>)
  PWMD1.tim = STM32_TIM1;
 8001c56:	4ebf      	ldr	r6, [pc, #764]	; (8001f54 <main+0x3c4>)
 8001c58:	6053      	str	r3, [r2, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8001c5a:	6091      	str	r1, [r2, #8]
  gpiop->PUPDR   = config->pupdr;
 8001c5c:	60d5      	str	r5, [r2, #12]
  gpiop->ODR     = config->odr;
 8001c5e:	6150      	str	r0, [r2, #20]
  gpiop->AFRL    = config->afrl;
 8001c60:	6213      	str	r3, [r2, #32]
  gpiop->AFRH    = config->afrh;
 8001c62:	6253      	str	r3, [r2, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8001c64:	6013      	str	r3, [r2, #0]
  gpiop->OTYPER  = config->otyper;
 8001c66:	4abc      	ldr	r2, [pc, #752]	; (8001f58 <main+0x3c8>)
 8001c68:	6053      	str	r3, [r2, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8001c6a:	6091      	str	r1, [r2, #8]
  gpiop->PUPDR   = config->pupdr;
 8001c6c:	60d5      	str	r5, [r2, #12]
  gpiop->ODR     = config->odr;
 8001c6e:	6150      	str	r0, [r2, #20]
  gpiop->AFRL    = config->afrl;
 8001c70:	6213      	str	r3, [r2, #32]
  gpiop->AFRH    = config->afrh;
 8001c72:	6253      	str	r3, [r2, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8001c74:	6013      	str	r3, [r2, #0]
  gpiop->OTYPER  = config->otyper;
 8001c76:	4ab9      	ldr	r2, [pc, #740]	; (8001f5c <main+0x3cc>)
 8001c78:	6053      	str	r3, [r2, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8001c7a:	6091      	str	r1, [r2, #8]
  gpiop->PUPDR   = config->pupdr;
 8001c7c:	60d5      	str	r5, [r2, #12]
  gpiop->ODR     = config->odr;
 8001c7e:	6150      	str	r0, [r2, #20]
  gpiop->AFRL    = config->afrl;
 8001c80:	6213      	str	r3, [r2, #32]
  gpiop->AFRH    = config->afrh;
 8001c82:	6253      	str	r3, [r2, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8001c84:	6013      	str	r3, [r2, #0]
  gpiop->OTYPER  = config->otyper;
 8001c86:	4ab6      	ldr	r2, [pc, #728]	; (8001f60 <main+0x3d0>)
 8001c88:	6053      	str	r3, [r2, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8001c8a:	6091      	str	r1, [r2, #8]
  gpiop->PUPDR   = config->pupdr;
 8001c8c:	60d5      	str	r5, [r2, #12]
  gpiop->ODR     = config->odr;
 8001c8e:	6150      	str	r0, [r2, #20]
  gpiop->PUPDR   = config->pupdr;
 8001c90:	4db4      	ldr	r5, [pc, #720]	; (8001f64 <main+0x3d4>)
  gpiop->AFRL    = config->afrl;
 8001c92:	6213      	str	r3, [r2, #32]
  gpiop->AFRH    = config->afrh;
 8001c94:	6253      	str	r3, [r2, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8001c96:	6013      	str	r3, [r2, #0]
  gpiop->OTYPER  = config->otyper;
 8001c98:	4ab3      	ldr	r2, [pc, #716]	; (8001f68 <main+0x3d8>)
 8001c9a:	6053      	str	r3, [r2, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8001c9c:	6091      	str	r1, [r2, #8]
  gpiop->PUPDR   = config->pupdr;
 8001c9e:	60d5      	str	r5, [r2, #12]
  gpiop->ODR     = config->odr;
 8001ca0:	6150      	str	r0, [r2, #20]
  gpiop->AFRL    = config->afrl;
 8001ca2:	6213      	str	r3, [r2, #32]
  gpiop->AFRH    = config->afrh;
 8001ca4:	6253      	str	r3, [r2, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8001ca6:	6013      	str	r3, [r2, #0]
 *
 * @init
 */
void icuObjectInit(ICUDriver *icup) {

  icup->state  = ICU_STOP;
 8001ca8:	2201      	movs	r2, #1
 8001caa:	48b0      	ldr	r0, [pc, #704]	; (8001f6c <main+0x3dc>)
  ICUD3.tim = STM32_TIM3;
 8001cac:	4db0      	ldr	r5, [pc, #704]	; (8001f70 <main+0x3e0>)
 8001cae:	7002      	strb	r2, [r0, #0]
  icup->config = NULL;
 8001cb0:	6043      	str	r3, [r0, #4]
 8001cb2:	60c5      	str	r5, [r0, #12]
  PWMD1.channels = STM32_TIM1_CHANNELS;
 8001cb4:	2504      	movs	r5, #4
  pwmp->state    = PWM_STOP;
 8001cb6:	48af      	ldr	r0, [pc, #700]	; (8001f74 <main+0x3e4>)
 8001cb8:	7002      	strb	r2, [r0, #0]
  pwmp->enabled  = 0;
 8001cba:	60c3      	str	r3, [r0, #12]
 8001cbc:	7405      	strb	r5, [r0, #16]
  pwmp->config   = NULL;
 8001cbe:	6043      	str	r3, [r0, #4]
  PWMD1.tim = STM32_TIM1;
 8001cc0:	6186      	str	r6, [r0, #24]
  pwmp->state    = PWM_STOP;
 8001cc2:	48ad      	ldr	r0, [pc, #692]	; (8001f78 <main+0x3e8>)
  PWMD4.tim = STM32_TIM4;
 8001cc4:	4ead      	ldr	r6, [pc, #692]	; (8001f7c <main+0x3ec>)
 8001cc6:	7002      	strb	r2, [r0, #0]
  pwmp->enabled  = 0;
 8001cc8:	60c3      	str	r3, [r0, #12]
  PWMD4.channels = STM32_TIM4_CHANNELS;
 8001cca:	7405      	strb	r5, [r0, #16]
  pwmp->config   = NULL;
 8001ccc:	6043      	str	r3, [r0, #4]
  PWMD4.tim = STM32_TIM4;
 8001cce:	6186      	str	r6, [r0, #24]
  pwmp->state    = PWM_STOP;
 8001cd0:	48ab      	ldr	r0, [pc, #684]	; (8001f80 <main+0x3f0>)
  PWMD5.tim = STM32_TIM5;
 8001cd2:	4eac      	ldr	r6, [pc, #688]	; (8001f84 <main+0x3f4>)
 8001cd4:	7002      	strb	r2, [r0, #0]
  pwmp->enabled  = 0;
 8001cd6:	60c3      	str	r3, [r0, #12]
  PWMD5.channels = STM32_TIM5_CHANNELS;
 8001cd8:	7405      	strb	r5, [r0, #16]
  pwmp->config   = NULL;
 8001cda:	6043      	str	r3, [r0, #4]
  PWMD5.tim = STM32_TIM5;
 8001cdc:	6186      	str	r6, [r0, #24]
  pwmp->state    = PWM_STOP;
 8001cde:	48aa      	ldr	r0, [pc, #680]	; (8001f88 <main+0x3f8>)
  PWMD8.channels = STM32_TIM8_CHANNELS;
 8001ce0:	7405      	strb	r5, [r0, #16]
  PWMD8.tim = STM32_TIM8;
 8001ce2:	4daa      	ldr	r5, [pc, #680]	; (8001f8c <main+0x3fc>)
 8001ce4:	7002      	strb	r2, [r0, #0]
 8001ce6:	6185      	str	r5, [r0, #24]
  PWMD9.channels = STM32_TIM9_CHANNELS;
 8001ce8:	2502      	movs	r5, #2
  pwmp->enabled  = 0;
 8001cea:	60c3      	str	r3, [r0, #12]
  pwmp->config   = NULL;
 8001cec:	6043      	str	r3, [r0, #4]
  pwmp->state    = PWM_STOP;
 8001cee:	48a8      	ldr	r0, [pc, #672]	; (8001f90 <main+0x400>)
 8001cf0:	7405      	strb	r5, [r0, #16]
  PWMD9.tim = STM32_TIM9;
 8001cf2:	4da8      	ldr	r5, [pc, #672]	; (8001f94 <main+0x404>)
 8001cf4:	7002      	strb	r2, [r0, #0]
  pwmp->enabled  = 0;
 8001cf6:	60c3      	str	r3, [r0, #12]
  pwmp->config   = NULL;
 8001cf8:	6043      	str	r3, [r0, #4]
 8001cfa:	6185      	str	r5, [r0, #24]

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 8001cfc:	6c20      	ldr	r0, [r4, #64]	; 0x40
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001cfe:	25c0      	movs	r5, #192	; 0xc0
 8001d00:	4310      	orrs	r0, r2
 8001d02:	6420      	str	r0, [r4, #64]	; 0x40

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 8001d04:	4ca4      	ldr	r4, [pc, #656]	; (8001f98 <main+0x408>)
 8001d06:	006d      	lsls	r5, r5, #1
 8001d08:	68a0      	ldr	r0, [r4, #8]
 8001d0a:	4310      	orrs	r0, r2
 8001d0c:	60a0      	str	r0, [r4, #8]

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8001d0e:	2080      	movs	r0, #128	; 0x80
 8001d10:	4ca2      	ldr	r4, [pc, #648]	; (8001f9c <main+0x40c>)
 8001d12:	05c0      	lsls	r0, r0, #23
 8001d14:	6284      	str	r4, [r0, #40]	; 0x28
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001d16:	24c7      	movs	r4, #199	; 0xc7
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 8001d18:	62c1      	str	r1, [r0, #44]	; 0x2c
  STM32_ST_TIM->CCMR1  = 0;
 8001d1a:	6183      	str	r3, [r0, #24]
  STM32_ST_TIM->CCR[0] = 0;
 8001d1c:	6343      	str	r3, [r0, #52]	; 0x34
  STM32_ST_TIM->DIER   = 0;
 8001d1e:	60c3      	str	r3, [r0, #12]
  STM32_ST_TIM->CR2    = 0;
 8001d20:	6043      	str	r3, [r0, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 8001d22:	6142      	str	r2, [r0, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 8001d24:	6002      	str	r2, [r0, #0]
 8001d26:	2080      	movs	r0, #128	; 0x80
 8001d28:	4a9d      	ldr	r2, [pc, #628]	; (8001fa0 <main+0x410>)
 8001d2a:	00a4      	lsls	r4, r4, #2
 8001d2c:	5510      	strb	r0, [r2, r4]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001d2e:	2480      	movs	r4, #128	; 0x80
 8001d30:	0564      	lsls	r4, r4, #21
 8001d32:	5154      	str	r4, [r2, r5]
  tqp->next = (thread_t *)tqp;
 8001d34:	4d9b      	ldr	r5, [pc, #620]	; (8001fa4 <main+0x414>)
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001d36:	6014      	str	r4, [r2, #0]
  ch.rlist.prio = NOPRIO;
 8001d38:	60ab      	str	r3, [r5, #8]
  ch.vtlist.lasttime = (systime_t)0;
 8001d3a:	62ab      	str	r3, [r5, #40]	; 0x28
  ch.dbg.trace_buffer.suspended = (uint16_t)CH_DBG_TRACE_MASK;
 8001d3c:	330f      	adds	r3, #15
  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
 8001d3e:	002a      	movs	r2, r5
 8001d40:	872b      	strh	r3, [r5, #56]	; 0x38
  ch.dbg.trace_buffer.ptr       = &ch.dbg.trace_buffer.buffer[0];
 8001d42:	002b      	movs	r3, r5
  for (i = 0U; i < (unsigned)CH_DBG_TRACE_BUFFER_SIZE; i++) {
 8001d44:	2400      	movs	r4, #0
 8001d46:	321c      	adds	r2, #28
  ch.dbg.trace_buffer.ptr       = &ch.dbg.trace_buffer.buffer[0];
 8001d48:	3340      	adds	r3, #64	; 0x40
  ch.vtlist.delta = (systime_t)-1;
 8001d4a:	6269      	str	r1, [r5, #36]	; 0x24
 8001d4c:	602d      	str	r5, [r5, #0]
  tqp->prev = (thread_t *)tqp;
 8001d4e:	606d      	str	r5, [r5, #4]
  ch.rlist.newer = (thread_t *)&ch.rlist;
 8001d50:	612d      	str	r5, [r5, #16]
  ch.rlist.older = (thread_t *)&ch.rlist;
 8001d52:	616d      	str	r5, [r5, #20]
  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
 8001d54:	61ea      	str	r2, [r5, #28]
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
 8001d56:	622a      	str	r2, [r5, #32]
  ch.dbg.trace_buffer.size      = CH_DBG_TRACE_BUFFER_SIZE;
 8001d58:	8768      	strh	r0, [r5, #58]	; 0x3a
  ch.dbg.trace_buffer.ptr       = &ch.dbg.trace_buffer.buffer[0];
 8001d5a:	63eb      	str	r3, [r5, #60]	; 0x3c
    ch.dbg.trace_buffer.buffer[i].type = CH_TRACE_TYPE_UNUSED;
 8001d5c:	3108      	adds	r1, #8
 8001d5e:	3401      	adds	r4, #1
 8001d60:	0123      	lsls	r3, r4, #4
 8001d62:	18eb      	adds	r3, r5, r3
 8001d64:	3328      	adds	r3, #40	; 0x28
 8001d66:	7a1a      	ldrb	r2, [r3, #8]
 8001d68:	438a      	bics	r2, r1
 8001d6a:	721a      	strb	r2, [r3, #8]
  for (i = 0U; i < (unsigned)CH_DBG_TRACE_BUFFER_SIZE; i++) {
 8001d6c:	2c80      	cmp	r4, #128	; 0x80
 8001d6e:	d1f6      	bne.n	8001d5e <main+0x1ce>
  tmp->best       = (rtcnt_t)-1;
 8001d70:	2301      	movs	r3, #1
 8001d72:	425b      	negs	r3, r3
  ch.dbg.isr_cnt  = (cnt_t)0;
 8001d74:	2600      	movs	r6, #0
  tmp->cumulative = (rttime_t)0;
 8001d76:	2200      	movs	r2, #0
  tmp->best       = (rtcnt_t)-1;
 8001d78:	9300      	str	r3, [sp, #0]
  tmp->cumulative = (rttime_t)0;
 8001d7a:	2300      	movs	r3, #0
  ch.tm.offset = (rtcnt_t)0;
 8001d7c:	4f8a      	ldr	r7, [pc, #552]	; (8001fa8 <main+0x418>)
  chTMStartMeasurementX(&tm);
 8001d7e:	4668      	mov	r0, sp
  tmp->cumulative = (rttime_t)0;
 8001d80:	9204      	str	r2, [sp, #16]
 8001d82:	9305      	str	r3, [sp, #20]
 8001d84:	632e      	str	r6, [r5, #48]	; 0x30
  ch.dbg.lock_cnt = (cnt_t)0;
 8001d86:	636e      	str	r6, [r5, #52]	; 0x34
  ch.tm.offset = (rtcnt_t)0;
 8001d88:	51ee      	str	r6, [r5, r7]
  tmp->worst      = (rtcnt_t)0;
 8001d8a:	9601      	str	r6, [sp, #4]
  tmp->last       = (rtcnt_t)0;
 8001d8c:	9602      	str	r6, [sp, #8]
  tmp->n          = (ucnt_t)0;
 8001d8e:	9603      	str	r6, [sp, #12]
  chTMStartMeasurementX(&tm);
 8001d90:	f7ff fe6e 	bl	8001a70 <chTMStartMeasurementX.constprop.10>
  chTMStopMeasurementX(&tm);
 8001d94:	4668      	mov	r0, sp
 8001d96:	f7fe fb8b 	bl	80004b0 <chTMStopMeasurementX>
  ch.tm.offset = tm.last;
 8001d9a:	9b02      	ldr	r3, [sp, #8]
  nextmem = __heap_base__;
 8001d9c:	4a83      	ldr	r2, [pc, #524]	; (8001fac <main+0x41c>)
 8001d9e:	51eb      	str	r3, [r5, r7]
 8001da0:	4b83      	ldr	r3, [pc, #524]	; (8001fb0 <main+0x420>)
  tp->refs      = (trefs_t)1;
 8001da2:	2101      	movs	r1, #1
 8001da4:	601a      	str	r2, [r3, #0]
  endmem  = __heap_end__;
 8001da6:	4a83      	ldr	r2, [pc, #524]	; (8001fb4 <main+0x424>)
 8001da8:	4b83      	ldr	r3, [pc, #524]	; (8001fb8 <main+0x428>)
 8001daa:	601a      	str	r2, [r3, #0]
  default_heap.provider = chCoreAllocAligned;
 8001dac:	4b83      	ldr	r3, [pc, #524]	; (8001fbc <main+0x42c>)
 8001dae:	4a84      	ldr	r2, [pc, #528]	; (8001fc0 <main+0x430>)
  mp->owner = NULL;
 8001db0:	619e      	str	r6, [r3, #24]
 8001db2:	601a      	str	r2, [r3, #0]
  tqp->next = (thread_t *)tqp;
 8001db4:	001a      	movs	r2, r3
 8001db6:	3210      	adds	r2, #16
 8001db8:	611a      	str	r2, [r3, #16]
  tqp->prev = (thread_t *)tqp;
 8001dba:	615a      	str	r2, [r3, #20]
  H_NEXT(&default_heap.header) = NULL;
 8001dbc:	609e      	str	r6, [r3, #8]
  H_PAGES(&default_heap.header) = 0;
 8001dbe:	60de      	str	r6, [r3, #12]
  tp->prio      = prio;
 8001dc0:	4b80      	ldr	r3, [pc, #512]	; (8001fc4 <main+0x434>)
  tp->name      = name;
 8001dc2:	4a81      	ldr	r2, [pc, #516]	; (8001fc8 <main+0x438>)
  tp->prio      = prio;
 8001dc4:	50ec      	str	r4, [r5, r3]
  tp->flags     = CH_FLAG_MODE_STATIC;
 8001dc6:	4b81      	ldr	r3, [pc, #516]	; (8001fcc <main+0x43c>)
 8001dc8:	54ee      	strb	r6, [r5, r3]
  tp->realprio  = prio;
 8001dca:	4b81      	ldr	r3, [pc, #516]	; (8001fd0 <main+0x440>)
 8001dcc:	50ec      	str	r4, [r5, r3]
  tp->mtxlist   = NULL;
 8001dce:	4b81      	ldr	r3, [pc, #516]	; (8001fd4 <main+0x444>)
 8001dd0:	50ee      	str	r6, [r5, r3]
  tp->epending  = (eventmask_t)0;
 8001dd2:	4b81      	ldr	r3, [pc, #516]	; (8001fd8 <main+0x448>)
 8001dd4:	50ee      	str	r6, [r5, r3]
  tp->refs      = (trefs_t)1;
 8001dd6:	4b81      	ldr	r3, [pc, #516]	; (8001fdc <main+0x44c>)
 8001dd8:	54e9      	strb	r1, [r5, r3]
  tp->name      = name;
 8001dda:	4b81      	ldr	r3, [pc, #516]	; (8001fe0 <main+0x450>)
 8001ddc:	50ea      	str	r2, [r5, r3]
  REG_INSERT(tp);
 8001dde:	3b08      	subs	r3, #8
 8001de0:	696a      	ldr	r2, [r5, #20]
 8001de2:	50ed      	str	r5, [r5, r3]
 8001de4:	4b7f      	ldr	r3, [pc, #508]	; (8001fe4 <main+0x454>)
 8001de6:	50ea      	str	r2, [r5, r3]
 8001de8:	3b14      	subs	r3, #20
 8001dea:	18eb      	adds	r3, r5, r3
 8001dec:	6113      	str	r3, [r2, #16]
  tlp->next = (thread_t *)tlp;
 8001dee:	4a7e      	ldr	r2, [pc, #504]	; (8001fe8 <main+0x458>)
 8001df0:	616b      	str	r3, [r5, #20]
 8001df2:	18a8      	adds	r0, r5, r2
 8001df4:	50a8      	str	r0, [r5, r2]
  tqp->next = (thread_t *)tqp;
 8001df6:	4a7d      	ldr	r2, [pc, #500]	; (8001fec <main+0x45c>)
 8001df8:	487c      	ldr	r0, [pc, #496]	; (8001fec <main+0x45c>)
 8001dfa:	18aa      	adds	r2, r5, r2
 8001dfc:	502a      	str	r2, [r5, r0]
  tqp->prev = (thread_t *)tqp;
 8001dfe:	3004      	adds	r0, #4
 8001e00:	502a      	str	r2, [r5, r0]
  currp = _thread_init(&ch.mainthread, (const char *)&ch_debug, NORMALPRIO);
 8001e02:	61ab      	str	r3, [r5, #24]
    currp->wabase = &__main_thread_stack_base__;
 8001e04:	4a7a      	ldr	r2, [pc, #488]	; (8001ff0 <main+0x460>)
 8001e06:	4b7b      	ldr	r3, [pc, #492]	; (8001ff4 <main+0x464>)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e08:	487b      	ldr	r0, [pc, #492]	; (8001ff8 <main+0x468>)
 8001e0a:	50ea      	str	r2, [r5, r3]
  currp->state = CH_STATE_CURRENT;
 8001e0c:	3304      	adds	r3, #4
 8001e0e:	54e9      	strb	r1, [r5, r3]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e10:	4b7a      	ldr	r3, [pc, #488]	; (8001ffc <main+0x46c>)
 8001e12:	68da      	ldr	r2, [r3, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e14:	4010      	ands	r0, r2
  reg_value  =  (reg_value                                   |
 8001e16:	4a7a      	ldr	r2, [pc, #488]	; (8002000 <main+0x470>)
 8001e18:	4302      	orrs	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8001e1a:	60da      	str	r2, [r3, #12]
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001e1c:	2280      	movs	r2, #128	; 0x80
 8001e1e:	4879      	ldr	r0, [pc, #484]	; (8002004 <main+0x474>)
 8001e20:	0452      	lsls	r2, r2, #17
 8001e22:	68c4      	ldr	r4, [r0, #12]
 8001e24:	4322      	orrs	r2, r4
 8001e26:	60c2      	str	r2, [r0, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8001e28:	4877      	ldr	r0, [pc, #476]	; (8002008 <main+0x478>)
 8001e2a:	6802      	ldr	r2, [r0, #0]
 8001e2c:	430a      	orrs	r2, r1
 8001e2e:	6002      	str	r2, [r0, #0]
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e30:	2210      	movs	r2, #16
 8001e32:	311f      	adds	r1, #31
 8001e34:	77da      	strb	r2, [r3, #31]
 8001e36:	3212      	adds	r2, #18
 8001e38:	5499      	strb	r1, [r3, r2]
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8001e3a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d102      	bne.n	8001e46 <main+0x2b6>
 8001e40:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d002      	beq.n	8001e4c <main+0x2bc>
    chSysHalt("SV#3");
 8001e46:	4871      	ldr	r0, [pc, #452]	; (800200c <main+0x47c>)
 8001e48:	f7fe fbba 	bl	80005c0 <chSysHalt>
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("cpsie i" : : : "memory");
 8001e52:	b662      	cpsie	i
  chDbgAssert(chRegFindThreadByWorkingArea(tdp->wbase) == NULL,
 8001e54:	4c6e      	ldr	r4, [pc, #440]	; (8002010 <main+0x480>)
 8001e56:	0020      	movs	r0, r4
 8001e58:	f7fe fd9a 	bl	8000990 <chRegFindThreadByWorkingArea>
 8001e5c:	2800      	cmp	r0, #0
 8001e5e:	d002      	beq.n	8001e66 <main+0x2d6>
 8001e60:	486c      	ldr	r0, [pc, #432]	; (8002014 <main+0x484>)
 8001e62:	f7fe fbad 	bl	80005c0 <chSysHalt>
 8001e66:	0021      	movs	r1, r4
 8001e68:	0023      	movs	r3, r4
    *startp++ = v;
 8001e6a:	2255      	movs	r2, #85	; 0x55
 8001e6c:	31d8      	adds	r1, #216	; 0xd8
 8001e6e:	701a      	strb	r2, [r3, #0]
 8001e70:	3301      	adds	r3, #1
  while (startp < endp) {
 8001e72:	428b      	cmp	r3, r1
 8001e74:	d1fb      	bne.n	8001e6e <main+0x2de>
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8001e76:	2320      	movs	r3, #32
 8001e78:	4698      	mov	r8, r3
 8001e7a:	f383 8811 	msr	BASEPRI, r3
 8001e7e:	f7fe fd2f 	bl	80008e0 <_dbg_check_lock>
  chDbgCheckClassI();
 8001e82:	f7fe fbed 	bl	8000660 <chDbgCheckClassI>
  tp->wabase = tdp->wbase;
 8001e86:	23ac      	movs	r3, #172	; 0xac
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8001e88:	0022      	movs	r2, r4
  tp->wabase = tdp->wbase;
 8001e8a:	50e4      	str	r4, [r4, r3]
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8001e8c:	326c      	adds	r2, #108	; 0x6c
 8001e8e:	3b10      	subs	r3, #16
 8001e90:	50e2      	str	r2, [r4, r3]
 8001e92:	228c      	movs	r2, #140	; 0x8c
  tp->prio      = prio;
 8001e94:	2601      	movs	r6, #1
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8001e96:	4b60      	ldr	r3, [pc, #384]	; (8002018 <main+0x488>)
  tp->state     = CH_STATE_WTSTART;
 8001e98:	2102      	movs	r1, #2
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8001e9a:	66e3      	str	r3, [r4, #108]	; 0x6c
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	4f5f      	ldr	r7, [pc, #380]	; (800201c <main+0x48c>)
 8001ea0:	6723      	str	r3, [r4, #112]	; 0x70
 8001ea2:	50a7      	str	r7, [r4, r2]
  tp->prio      = prio;
 8001ea4:	320c      	adds	r2, #12
 8001ea6:	50a6      	str	r6, [r4, r2]
  tp->state     = CH_STATE_WTSTART;
 8001ea8:	3218      	adds	r2, #24
 8001eaa:	54a1      	strb	r1, [r4, r2]
  tp->flags     = CH_FLAG_MODE_STATIC;
 8001eac:	1992      	adds	r2, r2, r6
 8001eae:	54a3      	strb	r3, [r4, r2]
  tp->realprio  = prio;
 8001eb0:	321b      	adds	r2, #27
 8001eb2:	50a6      	str	r6, [r4, r2]
  tp->mtxlist   = NULL;
 8001eb4:	3a04      	subs	r2, #4
 8001eb6:	50a3      	str	r3, [r4, r2]
  tp->epending  = (eventmask_t)0;
 8001eb8:	3a04      	subs	r2, #4
 8001eba:	50a3      	str	r3, [r4, r2]
  tp->name      = name;
 8001ebc:	4a58      	ldr	r2, [pc, #352]	; (8002020 <main+0x490>)
  tp->refs      = (trefs_t)1;
 8001ebe:	33b2      	adds	r3, #178	; 0xb2
 8001ec0:	54e6      	strb	r6, [r4, r3]
  tp->name      = name;
 8001ec2:	3b0a      	subs	r3, #10
 8001ec4:	50e2      	str	r2, [r4, r3]
  REG_INSERT(tp);
 8001ec6:	0020      	movs	r0, r4
 8001ec8:	22a4      	movs	r2, #164	; 0xa4
 8001eca:	3b08      	subs	r3, #8
 8001ecc:	50e5      	str	r5, [r4, r3]
 8001ece:	696b      	ldr	r3, [r5, #20]
 8001ed0:	3090      	adds	r0, #144	; 0x90
 8001ed2:	50a3      	str	r3, [r4, r2]
  tlp->next = (thread_t *)tlp;
 8001ed4:	0022      	movs	r2, r4
 8001ed6:	6118      	str	r0, [r3, #16]
 8001ed8:	23b8      	movs	r3, #184	; 0xb8
 8001eda:	32b8      	adds	r2, #184	; 0xb8
 8001edc:	50e2      	str	r2, [r4, r3]
  tqp->next = (thread_t *)tqp;
 8001ede:	0023      	movs	r3, r4
 8001ee0:	22bc      	movs	r2, #188	; 0xbc
 8001ee2:	33bc      	adds	r3, #188	; 0xbc
 8001ee4:	50a3      	str	r3, [r4, r2]
  tqp->prev = (thread_t *)tqp;
 8001ee6:	3204      	adds	r2, #4
 8001ee8:	50a3      	str	r3, [r4, r2]
 8001eea:	6168      	str	r0, [r5, #20]
  chSchWakeupS(tp, MSG_OK);
 8001eec:	f7ff fdc8 	bl	8001a80 <chSchWakeupS.constprop.15>
  chSysUnlock();
 8001ef0:	f7fe fcde 	bl	80008b0 <chSysUnlock.lto_priv.19>
  halInit(); 
  chSysInit(); 
  palSetPadMode(GPIOA, GPIOA_LED_GREEN, PAL_MODE_OUTPUT_PUSHPULL);
 8001ef4:	480b      	ldr	r0, [pc, #44]	; (8001f24 <main+0x394>)
 8001ef6:	0032      	movs	r2, r6
 8001ef8:	4641      	mov	r1, r8
 8001efa:	f7ff faa1 	bl	8001440 <_pal_lld_setgroupmode>
  chDbgAssert(chRegFindThreadByWorkingArea(wsp) == NULL,
 8001efe:	4c49      	ldr	r4, [pc, #292]	; (8002024 <main+0x494>)
 8001f00:	0020      	movs	r0, r4
 8001f02:	f7fe fd45 	bl	8000990 <chRegFindThreadByWorkingArea>
 8001f06:	2800      	cmp	r0, #0
 8001f08:	d100      	bne.n	8001f0c <main+0x37c>
 8001f0a:	e08f      	b.n	800202c <main+0x49c>
 8001f0c:	4846      	ldr	r0, [pc, #280]	; (8002028 <main+0x498>)
 8001f0e:	f7fe fb57 	bl	80005c0 <chSysHalt>
 8001f12:	46c0      	nop			; (mov r8, r8)
 8001f14:	40023800 	.word	0x40023800
 8001f18:	efffffff 	.word	0xefffffff
 8001f1c:	40007000 	.word	0x40007000
 8001f20:	fffffdff 	.word	0xfffffdff
 8001f24:	40020000 	.word	0x40020000
 8001f28:	64155505 	.word	0x64155505
 8001f2c:	0000ffff 	.word	0x0000ffff
 8001f30:	0000fbff 	.word	0x0000fbff
 8001f34:	55555555 	.word	0x55555555
 8001f38:	55507700 	.word	0x55507700
 8001f3c:	2a91a9a0 	.word	0x2a91a9a0
 8001f40:	40020400 	.word	0x40020400
 8001f44:	000a0080 	.word	0x000a0080
 8001f48:	40020800 	.word	0x40020800
 8001f4c:	01555555 	.word	0x01555555
 8001f50:	40020c00 	.word	0x40020c00
 8001f54:	40010000 	.word	0x40010000
 8001f58:	40021000 	.word	0x40021000
 8001f5c:	40021400 	.word	0x40021400
 8001f60:	40021800 	.word	0x40021800
 8001f64:	55555550 	.word	0x55555550
 8001f68:	40021c00 	.word	0x40021c00
 8001f6c:	200004a0 	.word	0x200004a0
 8001f70:	40000400 	.word	0x40000400
 8001f74:	200004b8 	.word	0x200004b8
 8001f78:	200004d4 	.word	0x200004d4
 8001f7c:	40000800 	.word	0x40000800
 8001f80:	200004f0 	.word	0x200004f0
 8001f84:	40000c00 	.word	0x40000c00
 8001f88:	2000050c 	.word	0x2000050c
 8001f8c:	40010400 	.word	0x40010400
 8001f90:	20000528 	.word	0x20000528
 8001f94:	40014000 	.word	0x40014000
 8001f98:	e0042000 	.word	0xe0042000
 8001f9c:	000020cf 	.word	0x000020cf
 8001fa0:	e000e100 	.word	0xe000e100
 8001fa4:	20000544 	.word	0x20000544
 8001fa8:	00000884 	.word	0x00000884
 8001fac:	20001018 	.word	0x20001018
 8001fb0:	20000ecc 	.word	0x20000ecc
 8001fb4:	20020000 	.word	0x20020000
 8001fb8:	20000ec8 	.word	0x20000ec8
 8001fbc:	20000ea8 	.word	0x20000ea8
 8001fc0:	08000911 	.word	0x08000911
 8001fc4:	00000848 	.word	0x00000848
 8001fc8:	080023ec 	.word	0x080023ec
 8001fcc:	00000861 	.word	0x00000861
 8001fd0:	0000087c 	.word	0x0000087c
 8001fd4:	00000878 	.word	0x00000878
 8001fd8:	00000874 	.word	0x00000874
 8001fdc:	00000862 	.word	0x00000862
 8001fe0:	00000858 	.word	0x00000858
 8001fe4:	00000854 	.word	0x00000854
 8001fe8:	00000868 	.word	0x00000868
 8001fec:	0000086c 	.word	0x0000086c
 8001ff0:	20000200 	.word	0x20000200
 8001ff4:	0000085c 	.word	0x0000085c
 8001ff8:	0000f8ff 	.word	0x0000f8ff
 8001ffc:	e000ed00 	.word	0xe000ed00
 8002000:	05fa0300 	.word	0x05fa0300
 8002004:	e000edf0 	.word	0xe000edf0
 8002008:	e0001000 	.word	0xe0001000
 800200c:	08002404 	.word	0x08002404
 8002010:	20000dd0 	.word	0x20000dd0
 8002014:	08002388 	.word	0x08002388
 8002018:	08000441 	.word	0x08000441
 800201c:	080002a5 	.word	0x080002a5
 8002020:	0800240c 	.word	0x0800240c
 8002024:	20000ed0 	.word	0x20000ed0
 8002028:	08002394 	.word	0x08002394
  while (startp < endp) {
 800202c:	23a4      	movs	r3, #164	; 0xa4
    *startp++ = v;
 800202e:	2255      	movs	r2, #85	; 0x55
  while (startp < endp) {
 8002030:	005b      	lsls	r3, r3, #1
    *startp++ = v;
 8002032:	5422      	strb	r2, [r4, r0]
 8002034:	3001      	adds	r0, #1
  while (startp < endp) {
 8002036:	4298      	cmp	r0, r3
 8002038:	d1fb      	bne.n	8002032 <main+0x4a2>
 800203a:	2320      	movs	r3, #32
 800203c:	f383 8811 	msr	BASEPRI, r3
 8002040:	f7fe fc4e 	bl	80008e0 <_dbg_check_lock>
  tp->wabase = (stkalign_t *)wsp;
 8002044:	238e      	movs	r3, #142	; 0x8e
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8002046:	0022      	movs	r2, r4
  tp->wabase = (stkalign_t *)wsp;
 8002048:	005b      	lsls	r3, r3, #1
 800204a:	50e4      	str	r4, [r4, r3]
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 800204c:	32dc      	adds	r2, #220	; 0xdc
 800204e:	3b10      	subs	r3, #16
 8002050:	50e2      	str	r2, [r4, r3]
 8002052:	4a20      	ldr	r2, [pc, #128]	; (80020d4 <main+0x544>)
 8002054:	3b30      	subs	r3, #48	; 0x30
 8002056:	50e2      	str	r2, [r4, r3]
 8002058:	2300      	movs	r3, #0
 800205a:	22e0      	movs	r2, #224	; 0xe0
  tp->prio      = prio;
 800205c:	2184      	movs	r1, #132	; 0x84
  tp->state     = CH_STATE_WTSTART;
 800205e:	2002      	movs	r0, #2
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8002060:	50a3      	str	r3, [r4, r2]
 8002062:	321c      	adds	r2, #28
 8002064:	50a7      	str	r7, [r4, r2]
  tp->prio      = prio;
 8002066:	0049      	lsls	r1, r1, #1
 8002068:	3a7c      	subs	r2, #124	; 0x7c
 800206a:	5062      	str	r2, [r4, r1]
  tp->state     = CH_STATE_WTSTART;
 800206c:	3118      	adds	r1, #24
 800206e:	5460      	strb	r0, [r4, r1]
  tp->flags     = CH_FLAG_MODE_STATIC;
 8002070:	2122      	movs	r1, #34	; 0x22
 8002072:	31ff      	adds	r1, #255	; 0xff
 8002074:	5463      	strb	r3, [r4, r1]
  tp->realprio  = prio;
 8002076:	311b      	adds	r1, #27
 8002078:	5062      	str	r2, [r4, r1]
  tp->mtxlist   = NULL;
 800207a:	32b8      	adds	r2, #184	; 0xb8
 800207c:	50a3      	str	r3, [r4, r2]
  tp->epending  = (eventmask_t)0;
 800207e:	3a04      	subs	r2, #4
 8002080:	50a3      	str	r3, [r4, r2]
  tp->refs      = (trefs_t)1;
 8002082:	3a34      	subs	r2, #52	; 0x34
 8002084:	3323      	adds	r3, #35	; 0x23
 8002086:	3aff      	subs	r2, #255	; 0xff
 8002088:	33ff      	adds	r3, #255	; 0xff
 800208a:	54e2      	strb	r2, [r4, r3]
  tp->name      = name;
 800208c:	4a12      	ldr	r2, [pc, #72]	; (80020d8 <main+0x548>)
 800208e:	3b0a      	subs	r3, #10
 8002090:	50e2      	str	r2, [r4, r3]
  REG_INSERT(tp);
 8002092:	228a      	movs	r2, #138	; 0x8a
 8002094:	3b08      	subs	r3, #8
 8002096:	50e5      	str	r5, [r4, r3]
 8002098:	696b      	ldr	r3, [r5, #20]
 800209a:	0052      	lsls	r2, r2, #1
 800209c:	1c60      	adds	r0, r4, #1
 800209e:	50a3      	str	r3, [r4, r2]
 80020a0:	30ff      	adds	r0, #255	; 0xff
  tlp->next = (thread_t *)tlp;
 80020a2:	0022      	movs	r2, r4
 80020a4:	6118      	str	r0, [r3, #16]
 80020a6:	2394      	movs	r3, #148	; 0x94
 80020a8:	3229      	adds	r2, #41	; 0x29
 80020aa:	32ff      	adds	r2, #255	; 0xff
 80020ac:	005b      	lsls	r3, r3, #1
 80020ae:	50e2      	str	r2, [r4, r3]
  tqp->next = (thread_t *)tqp;
 80020b0:	0023      	movs	r3, r4
 80020b2:	2296      	movs	r2, #150	; 0x96
 80020b4:	332d      	adds	r3, #45	; 0x2d
 80020b6:	33ff      	adds	r3, #255	; 0xff
 80020b8:	0052      	lsls	r2, r2, #1
 80020ba:	50a3      	str	r3, [r4, r2]
  tqp->prev = (thread_t *)tqp;
 80020bc:	3204      	adds	r2, #4
 80020be:	50a3      	str	r3, [r4, r2]
 80020c0:	6168      	str	r0, [r5, #20]
  chSchWakeupS(tp, MSG_OK);
 80020c2:	f7ff fcdd 	bl	8001a80 <chSchWakeupS.constprop.15>
  chSysUnlock();
 80020c6:	f7fe fbf3 	bl	80008b0 <chSysUnlock.lto_priv.19>
  
	chThdCreateStatic(pwmThread1_wa, sizeof(pwmThread1_wa), NORMALPRIO, pwmThread1, NULL);
  
	while (true) {
    chThdSleepMilliseconds(500);
 80020ca:	4804      	ldr	r0, [pc, #16]	; (80020dc <main+0x54c>)
 80020cc:	f7fe fe78 	bl	8000dc0 <chThdSleep>
 80020d0:	e7fb      	b.n	80020ca <main+0x53a>
 80020d2:	46c0      	nop			; (mov r8, r8)
 80020d4:	08001961 	.word	0x08001961
 80020d8:	08002414 	.word	0x08002414
 80020dc:	00001388 	.word	0x00001388

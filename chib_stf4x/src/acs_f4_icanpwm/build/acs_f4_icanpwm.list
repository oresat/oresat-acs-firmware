
build/acs_f4_icanpwm.elf:     file format elf32-littlearm


Disassembly of section .text:

080001c0 <Reset_Handler>:
 80001c0:	b672      	cpsid	i
 80001c2:	4826      	ldr	r0, [pc, #152]	; (800025c <endfiniloop+0x6>)
 80001c4:	f380 8809 	msr	PSP, r0
 80001c8:	4825      	ldr	r0, [pc, #148]	; (8000260 <endfiniloop+0xa>)
 80001ca:	f64e 5108 	movw	r1, #60680	; 0xed08
 80001ce:	f2ce 0100 	movt	r1, #57344	; 0xe000
 80001d2:	6008      	str	r0, [r1, #0]
 80001d4:	2002      	movs	r0, #2
 80001d6:	f380 8814 	msr	CONTROL, r0
 80001da:	f3bf 8f6f 	isb	sy
 80001de:	f001 ffef 	bl	80021c0 <__core_init>
 80001e2:	f000 fe35 	bl	8000e50 <__early_init>
 80001e6:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
 80001ea:	491e      	ldr	r1, [pc, #120]	; (8000264 <endfiniloop+0xe>)
 80001ec:	4a1e      	ldr	r2, [pc, #120]	; (8000268 <endfiniloop+0x12>)

080001ee <msloop>:
 80001ee:	4291      	cmp	r1, r2
 80001f0:	bf3c      	itt	cc
 80001f2:	f841 0b04 	strcc.w	r0, [r1], #4
 80001f6:	e7fa      	bcc.n	80001ee <msloop>
 80001f8:	491c      	ldr	r1, [pc, #112]	; (800026c <endfiniloop+0x16>)
 80001fa:	4a18      	ldr	r2, [pc, #96]	; (800025c <endfiniloop+0x6>)

080001fc <psloop>:
 80001fc:	4291      	cmp	r1, r2
 80001fe:	bf3c      	itt	cc
 8000200:	f841 0b04 	strcc.w	r0, [r1], #4
 8000204:	e7fa      	bcc.n	80001fc <psloop>
 8000206:	491a      	ldr	r1, [pc, #104]	; (8000270 <endfiniloop+0x1a>)
 8000208:	4a1a      	ldr	r2, [pc, #104]	; (8000274 <endfiniloop+0x1e>)
 800020a:	4b1b      	ldr	r3, [pc, #108]	; (8000278 <endfiniloop+0x22>)

0800020c <dloop>:
 800020c:	429a      	cmp	r2, r3
 800020e:	bf3e      	ittt	cc
 8000210:	f851 0b04 	ldrcc.w	r0, [r1], #4
 8000214:	f842 0b04 	strcc.w	r0, [r2], #4
 8000218:	e7f8      	bcc.n	800020c <dloop>
 800021a:	2000      	movs	r0, #0
 800021c:	4917      	ldr	r1, [pc, #92]	; (800027c <endfiniloop+0x26>)
 800021e:	4a18      	ldr	r2, [pc, #96]	; (8000280 <endfiniloop+0x2a>)

08000220 <bloop>:
 8000220:	4291      	cmp	r1, r2
 8000222:	bf3c      	itt	cc
 8000224:	f841 0b04 	strcc.w	r0, [r1], #4
 8000228:	e7fa      	bcc.n	8000220 <bloop>
 800022a:	f001 ff89 	bl	8002140 <__init_ram_areas>
 800022e:	f001 ffbf 	bl	80021b0 <__late_init>
 8000232:	4c14      	ldr	r4, [pc, #80]	; (8000284 <endfiniloop+0x2e>)
 8000234:	4d14      	ldr	r5, [pc, #80]	; (8000288 <endfiniloop+0x32>)

08000236 <initloop>:
 8000236:	42ac      	cmp	r4, r5
 8000238:	da03      	bge.n	8000242 <endinitloop>
 800023a:	f854 1b04 	ldr.w	r1, [r4], #4
 800023e:	4788      	blx	r1
 8000240:	e7f9      	b.n	8000236 <initloop>

08000242 <endinitloop>:
 8000242:	f000 ff8d 	bl	8001160 <main>
 8000246:	4c11      	ldr	r4, [pc, #68]	; (800028c <endfiniloop+0x36>)
 8000248:	4d11      	ldr	r5, [pc, #68]	; (8000290 <endfiniloop+0x3a>)

0800024a <finiloop>:
 800024a:	42ac      	cmp	r4, r5
 800024c:	da03      	bge.n	8000256 <endfiniloop>
 800024e:	f854 1b04 	ldr.w	r1, [r4], #4
 8000252:	4788      	blx	r1
 8000254:	e7f9      	b.n	800024a <finiloop>

08000256 <endfiniloop>:
 8000256:	f001 bfa3 	b.w	80021a0 <__default_exit>
 800025a:	0000      	.short	0x0000
 800025c:	20000400 	.word	0x20000400
 8000260:	08000000 	.word	0x08000000
 8000264:	20000000 	.word	0x20000000
 8000268:	20000200 	.word	0x20000200
 800026c:	20000200 	.word	0x20000200
 8000270:	08002a0c 	.word	0x08002a0c
 8000274:	20000400 	.word	0x20000400
 8000278:	2000040c 	.word	0x2000040c
 800027c:	20000410 	.word	0x20000410
 8000280:	20000ae4 	.word	0x20000ae4
 8000284:	080001c0 	.word	0x080001c0
 8000288:	080001c0 	.word	0x080001c0
 800028c:	080001c0 	.word	0x080001c0
 8000290:	080001c0 	.word	0x080001c0

08000294 <_port_switch>:
 8000294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000298:	f8c1 d00c 	str.w	sp, [r1, #12]
 800029c:	68c3      	ldr	r3, [r0, #12]
 800029e:	469d      	mov	sp, r3
 80002a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080002a4 <_port_thread_start>:
 80002a4:	2300      	movs	r3, #0
 80002a6:	f383 8811 	msr	BASEPRI, r3
 80002aa:	4628      	mov	r0, r5
 80002ac:	47a0      	blx	r4
 80002ae:	2000      	movs	r0, #0
 80002b0:	f001 ff16 	bl	80020e0 <chThdExit>

080002b4 <_port_switch_from_isr>:
 80002b4:	f001 fbbc 	bl	8001a30 <chSchDoReschedule>

080002b8 <_port_exit_from_isr>:
 80002b8:	df00      	svc	0
 80002ba:	e7fe      	b.n	80002ba <_port_exit_from_isr+0x2>

080002bc <__aeabi_uidiv>:
 80002bc:	2200      	movs	r2, #0
 80002be:	0843      	lsrs	r3, r0, #1
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d374      	bcc.n	80003ae <__aeabi_uidiv+0xf2>
 80002c4:	0903      	lsrs	r3, r0, #4
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d35f      	bcc.n	800038a <__aeabi_uidiv+0xce>
 80002ca:	0a03      	lsrs	r3, r0, #8
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d344      	bcc.n	800035a <__aeabi_uidiv+0x9e>
 80002d0:	0b03      	lsrs	r3, r0, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d328      	bcc.n	8000328 <__aeabi_uidiv+0x6c>
 80002d6:	0c03      	lsrs	r3, r0, #16
 80002d8:	428b      	cmp	r3, r1
 80002da:	d30d      	bcc.n	80002f8 <__aeabi_uidiv+0x3c>
 80002dc:	22ff      	movs	r2, #255	; 0xff
 80002de:	0209      	lsls	r1, r1, #8
 80002e0:	ba12      	rev	r2, r2
 80002e2:	0c03      	lsrs	r3, r0, #16
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d302      	bcc.n	80002ee <__aeabi_uidiv+0x32>
 80002e8:	1212      	asrs	r2, r2, #8
 80002ea:	0209      	lsls	r1, r1, #8
 80002ec:	d065      	beq.n	80003ba <__aeabi_uidiv+0xfe>
 80002ee:	0b03      	lsrs	r3, r0, #12
 80002f0:	428b      	cmp	r3, r1
 80002f2:	d319      	bcc.n	8000328 <__aeabi_uidiv+0x6c>
 80002f4:	e000      	b.n	80002f8 <__aeabi_uidiv+0x3c>
 80002f6:	0a09      	lsrs	r1, r1, #8
 80002f8:	0bc3      	lsrs	r3, r0, #15
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__aeabi_uidiv+0x46>
 80002fe:	03cb      	lsls	r3, r1, #15
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0b83      	lsrs	r3, r0, #14
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__aeabi_uidiv+0x52>
 800030a:	038b      	lsls	r3, r1, #14
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0b43      	lsrs	r3, r0, #13
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__aeabi_uidiv+0x5e>
 8000316:	034b      	lsls	r3, r1, #13
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0b03      	lsrs	r3, r0, #12
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__aeabi_uidiv+0x6a>
 8000322:	030b      	lsls	r3, r1, #12
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0ac3      	lsrs	r3, r0, #11
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__aeabi_uidiv+0x76>
 800032e:	02cb      	lsls	r3, r1, #11
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0a83      	lsrs	r3, r0, #10
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__aeabi_uidiv+0x82>
 800033a:	028b      	lsls	r3, r1, #10
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0a43      	lsrs	r3, r0, #9
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__aeabi_uidiv+0x8e>
 8000346:	024b      	lsls	r3, r1, #9
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	0a03      	lsrs	r3, r0, #8
 800034e:	428b      	cmp	r3, r1
 8000350:	d301      	bcc.n	8000356 <__aeabi_uidiv+0x9a>
 8000352:	020b      	lsls	r3, r1, #8
 8000354:	1ac0      	subs	r0, r0, r3
 8000356:	4152      	adcs	r2, r2
 8000358:	d2cd      	bcs.n	80002f6 <__aeabi_uidiv+0x3a>
 800035a:	09c3      	lsrs	r3, r0, #7
 800035c:	428b      	cmp	r3, r1
 800035e:	d301      	bcc.n	8000364 <__aeabi_uidiv+0xa8>
 8000360:	01cb      	lsls	r3, r1, #7
 8000362:	1ac0      	subs	r0, r0, r3
 8000364:	4152      	adcs	r2, r2
 8000366:	0983      	lsrs	r3, r0, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__aeabi_uidiv+0xb4>
 800036c:	018b      	lsls	r3, r1, #6
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0943      	lsrs	r3, r0, #5
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__aeabi_uidiv+0xc0>
 8000378:	014b      	lsls	r3, r1, #5
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0903      	lsrs	r3, r0, #4
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__aeabi_uidiv+0xcc>
 8000384:	010b      	lsls	r3, r1, #4
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	08c3      	lsrs	r3, r0, #3
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__aeabi_uidiv+0xd8>
 8000390:	00cb      	lsls	r3, r1, #3
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0883      	lsrs	r3, r0, #2
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__aeabi_uidiv+0xe4>
 800039c:	008b      	lsls	r3, r1, #2
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0843      	lsrs	r3, r0, #1
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__aeabi_uidiv+0xf0>
 80003a8:	004b      	lsls	r3, r1, #1
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	1a41      	subs	r1, r0, r1
 80003b0:	d200      	bcs.n	80003b4 <__aeabi_uidiv+0xf8>
 80003b2:	4601      	mov	r1, r0
 80003b4:	4152      	adcs	r2, r2
 80003b6:	4610      	mov	r0, r2
 80003b8:	4770      	bx	lr
 80003ba:	e7ff      	b.n	80003bc <__aeabi_uidiv+0x100>
 80003bc:	b501      	push	{r0, lr}
 80003be:	2000      	movs	r0, #0
 80003c0:	f000 f806 	bl	80003d0 <__aeabi_idiv0>
 80003c4:	bd02      	pop	{r1, pc}
 80003c6:	46c0      	nop			; (mov r8, r8)

080003c8 <__aeabi_uidivmod>:
 80003c8:	2900      	cmp	r1, #0
 80003ca:	d0f7      	beq.n	80003bc <__aeabi_uidiv+0x100>
 80003cc:	e776      	b.n	80002bc <__aeabi_uidiv>
 80003ce:	4770      	bx	lr

080003d0 <__aeabi_idiv0>:
 80003d0:	4770      	bx	lr
 80003d2:	46c0      	nop			; (mov r8, r8)

080003d4 <strncpy>:
 80003d4:	000b      	movs	r3, r1
 80003d6:	4303      	orrs	r3, r0
 80003d8:	b570      	push	{r4, r5, r6, lr}
 80003da:	0005      	movs	r5, r0
 80003dc:	079b      	lsls	r3, r3, #30
 80003de:	d101      	bne.n	80003e4 <strncpy+0x10>
 80003e0:	2a03      	cmp	r2, #3
 80003e2:	d815      	bhi.n	8000410 <strncpy+0x3c>
 80003e4:	2a00      	cmp	r2, #0
 80003e6:	d012      	beq.n	800040e <strncpy+0x3a>
 80003e8:	1c4c      	adds	r4, r1, #1
 80003ea:	7809      	ldrb	r1, [r1, #0]
 80003ec:	3a01      	subs	r2, #1
 80003ee:	1c6b      	adds	r3, r5, #1
 80003f0:	7029      	strb	r1, [r5, #0]
 80003f2:	2900      	cmp	r1, #0
 80003f4:	d01b      	beq.n	800042e <strncpy+0x5a>
 80003f6:	0021      	movs	r1, r4
 80003f8:	e007      	b.n	800040a <strncpy+0x36>
 80003fa:	780c      	ldrb	r4, [r1, #0]
 80003fc:	3301      	adds	r3, #1
 80003fe:	1e5d      	subs	r5, r3, #1
 8000400:	3a01      	subs	r2, #1
 8000402:	702c      	strb	r4, [r5, #0]
 8000404:	3101      	adds	r1, #1
 8000406:	2c00      	cmp	r4, #0
 8000408:	d011      	beq.n	800042e <strncpy+0x5a>
 800040a:	2a00      	cmp	r2, #0
 800040c:	d1f5      	bne.n	80003fa <strncpy+0x26>
 800040e:	bd70      	pop	{r4, r5, r6, pc}
 8000410:	4e0b      	ldr	r6, [pc, #44]	; (8000440 <strncpy+0x6c>)
 8000412:	680c      	ldr	r4, [r1, #0]
 8000414:	4b0b      	ldr	r3, [pc, #44]	; (8000444 <strncpy+0x70>)
 8000416:	18e3      	adds	r3, r4, r3
 8000418:	43a3      	bics	r3, r4
 800041a:	4233      	tst	r3, r6
 800041c:	d1e4      	bne.n	80003e8 <strncpy+0x14>
 800041e:	3504      	adds	r5, #4
 8000420:	1f2b      	subs	r3, r5, #4
 8000422:	3a04      	subs	r2, #4
 8000424:	3104      	adds	r1, #4
 8000426:	601c      	str	r4, [r3, #0]
 8000428:	2a03      	cmp	r2, #3
 800042a:	d8f2      	bhi.n	8000412 <strncpy+0x3e>
 800042c:	e7da      	b.n	80003e4 <strncpy+0x10>
 800042e:	189c      	adds	r4, r3, r2
 8000430:	2100      	movs	r1, #0
 8000432:	2a00      	cmp	r2, #0
 8000434:	d0eb      	beq.n	800040e <strncpy+0x3a>
 8000436:	7019      	strb	r1, [r3, #0]
 8000438:	3301      	adds	r3, #1
 800043a:	42a3      	cmp	r3, r4
 800043c:	d1fb      	bne.n	8000436 <strncpy+0x62>
 800043e:	e7e6      	b.n	800040e <strncpy+0x3a>
 8000440:	80808080 	.word	0x80808080
 8000444:	fefefeff 	.word	0xfefefeff
	...

08000450 <notify2.lto_priv.52>:

#if STM32_SERIAL_USE_USART2 || defined(__DOXYGEN__)
static void notify2(io_queue_t *qp) {

  (void)qp;
  USART2->CR1 |= USART_CR1_TXEIE;
 8000450:	2380      	movs	r3, #128	; 0x80
 8000452:	4a02      	ldr	r2, [pc, #8]	; (800045c <notify2.lto_priv.52+0xc>)
 8000454:	68d1      	ldr	r1, [r2, #12]
 8000456:	430b      	orrs	r3, r1
 8000458:	60d3      	str	r3, [r2, #12]
}
 800045a:	4770      	bx	lr
 800045c:	40004400 	.word	0x40004400

08000460 <can_rx.lto_priv.51>:
/*
 * Receiver thread.
 */
static THD_WORKING_AREA(can_rx_wa, 256);
static THD_FUNCTION(can_rx, p)
{
 8000460:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000462:	4644      	mov	r4, r8
 8000464:	465f      	mov	r7, fp
 8000466:	4656      	mov	r6, sl
 8000468:	464d      	mov	r5, r9
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.current->name = name;
 800046a:	4b70      	ldr	r3, [pc, #448]	; (800062c <can_rx.lto_priv.51+0x1cc>)
 800046c:	4a70      	ldr	r2, [pc, #448]	; (8000630 <can_rx.lto_priv.51+0x1d0>)
 800046e:	699b      	ldr	r3, [r3, #24]
 8000470:	b4f0      	push	{r4, r5, r6, r7}
 8000472:	619a      	str	r2, [r3, #24]
      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 8000474:	2303      	movs	r3, #3
 8000476:	4698      	mov	r8, r3
      else {
        /* If going into a non-alternate mode then the mode is switched
           before setting the alternate mode in order to avoid glitches.*/
        port->MODER   = (port->MODER & ~m2) | moder;
        if (bit < 8)
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 8000478:	330c      	adds	r3, #12
  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 800047a:	2601      	movs	r6, #1
  uint32_t bit     = 0;
 800047c:	2000      	movs	r0, #0
 800047e:	2420      	movs	r4, #32
    if ((mask & 1) != 0) {
 8000480:	2701      	movs	r7, #1
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 8000482:	469c      	mov	ip, r3
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 8000484:	496b      	ldr	r1, [pc, #428]	; (8000634 <can_rx.lto_priv.51+0x1d4>)
 8000486:	b087      	sub	sp, #28
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
      }
    }
    mask >>= 1;
 8000488:	0864      	lsrs	r4, r4, #1
    if (!mask)
 800048a:	2805      	cmp	r0, #5
 800048c:	d01f      	beq.n	80004ce <can_rx.lto_priv.51+0x6e>
      return;
    otyper <<= 1;
    ospeedr <<= 2;
    pupdr <<= 2;
    moder <<= 2;
 800048e:	00b6      	lsls	r6, r6, #2
    bit++;
 8000490:	3001      	adds	r0, #1
    if ((mask & 1) != 0) {
 8000492:	4227      	tst	r7, r4
 8000494:	d0f8      	beq.n	8000488 <can_rx.lto_priv.51+0x28>
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 8000496:	003a      	movs	r2, r7
 8000498:	4082      	lsls	r2, r0
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 800049a:	4645      	mov	r5, r8
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 800049c:	684b      	ldr	r3, [r1, #4]
    mask >>= 1;
 800049e:	0864      	lsrs	r4, r4, #1
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 80004a0:	4393      	bics	r3, r2
 80004a2:	604b      	str	r3, [r1, #4]
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 80004a4:	0043      	lsls	r3, r0, #1
 80004a6:	409d      	lsls	r5, r3
 80004a8:	43eb      	mvns	r3, r5
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 80004aa:	4665      	mov	r5, ip
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 80004ac:	688a      	ldr	r2, [r1, #8]
 80004ae:	401a      	ands	r2, r3
 80004b0:	608a      	str	r2, [r1, #8]
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 80004b2:	68ca      	ldr	r2, [r1, #12]
 80004b4:	401a      	ands	r2, r3
 80004b6:	60ca      	str	r2, [r1, #12]
        port->MODER   = (port->MODER & ~m2) | moder;
 80004b8:	680a      	ldr	r2, [r1, #0]
 80004ba:	4013      	ands	r3, r2
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 80004bc:	0082      	lsls	r2, r0, #2
 80004be:	4095      	lsls	r5, r2
        port->MODER   = (port->MODER & ~m2) | moder;
 80004c0:	4333      	orrs	r3, r6
 80004c2:	600b      	str	r3, [r1, #0]
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 80004c4:	6a0b      	ldr	r3, [r1, #32]
 80004c6:	43ab      	bics	r3, r5
 80004c8:	620b      	str	r3, [r1, #32]
    if (!mask)
 80004ca:	2805      	cmp	r0, #5
 80004cc:	d1df      	bne.n	800048e <can_rx.lto_priv.51+0x2e>
    (void)p;
    chRegSetThreadName("receiver");

    // Configure Status LED (Green)
    palSetLineMode(LINE_LED_GREEN, PAL_MODE_OUTPUT_PUSHPULL);
    palClearLine(LINE_LED_GREEN);
 80004ce:	2320      	movs	r3, #32
 80004d0:	4a58      	ldr	r2, [pc, #352]	; (8000634 <can_rx.lto_priv.51+0x1d4>)
 80004d2:	8353      	strh	r3, [r2, #26]
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80004d4:	f383 8811 	msr	BASEPRI, r3
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->next     = esp->next;
 80004d8:	ab01      	add	r3, sp, #4
 80004da:	469b      	mov	fp, r3
 80004dc:	4c56      	ldr	r4, [pc, #344]	; (8000638 <can_rx.lto_priv.51+0x1d8>)
  esp->next     = elp;
  elp->listener = currp;
 80004de:	4a53      	ldr	r2, [pc, #332]	; (800062c <can_rx.lto_priv.51+0x1cc>)
  elp->next     = esp->next;
 80004e0:	69a3      	ldr	r3, [r4, #24]
  elp->listener = currp;
 80004e2:	6992      	ldr	r2, [r2, #24]
  elp->next     = esp->next;
 80004e4:	9301      	str	r3, [sp, #4]
  esp->next     = elp;
 80004e6:	465b      	mov	r3, fp
  elp->listener = currp;
 80004e8:	605a      	str	r2, [r3, #4]
  esp->next     = elp;
 80004ea:	61a3      	str	r3, [r4, #24]
  elp->events   = events;
 80004ec:	465a      	mov	r2, fp
 80004ee:	2301      	movs	r3, #1
 80004f0:	6093      	str	r3, [r2, #8]
  elp->flags    = (eventflags_t)0;
 80004f2:	2300      	movs	r3, #0
 80004f4:	60d3      	str	r3, [r2, #12]
  elp->wflags   = wflags;
 80004f6:	2201      	movs	r2, #1
 80004f8:	4659      	mov	r1, fp
 80004fa:	4252      	negs	r2, r2
 80004fc:	610a      	str	r2, [r1, #16]
 80004fe:	f383 8811 	msr	BASEPRI, r3

    // Register RX event
    chEvtRegister(&CAND1.rxfull_event, &el, 0);

    // Start RX Loop
    while(!chThdShouldTerminateX())
 8000502:	3304      	adds	r3, #4
 8000504:	469a      	mov	sl, r3
 8000506:	2720      	movs	r7, #32
 8000508:	4652      	mov	r2, sl
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.current;
 800050a:	4b48      	ldr	r3, [pc, #288]	; (800062c <can_rx.lto_priv.51+0x1cc>)
 800050c:	699e      	ldr	r6, [r3, #24]
 800050e:	7f73      	ldrb	r3, [r6, #29]
 8000510:	421a      	tst	r2, r3
 8000512:	d16d      	bne.n	80005f0 <can_rx.lto_priv.51+0x190>
 8000514:	f387 8811 	msr	BASEPRI, r7
eventmask_t chEvtWaitAnyTimeout(eventmask_t events, systime_t time) {
  thread_t *ctp = currp;
  eventmask_t m;

  chSysLock();
  m = ctp->epending & events;
 8000518:	6b33      	ldr	r3, [r6, #48]	; 0x30
  if (m == (eventmask_t)0) {
 800051a:	2b00      	cmp	r3, #0
 800051c:	d10a      	bne.n	8000534 <can_rx.lto_priv.51+0xd4>
    if (TIME_IMMEDIATE == time) {
      chSysUnlock();
      return (eventmask_t)0;
    }
    ctp->u.ewmask = events;
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, time) < MSG_OK) {
 800051e:	21fa      	movs	r1, #250	; 0xfa
    ctp->u.ewmask = events;
 8000520:	3b01      	subs	r3, #1
 8000522:	6233      	str	r3, [r6, #32]
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, time) < MSG_OK) {
 8000524:	0089      	lsls	r1, r1, #2
 8000526:	200a      	movs	r0, #10
 8000528:	f001 faa2 	bl	8001a70 <chSchGoSleepTimeoutS>
 800052c:	2800      	cmp	r0, #0
 800052e:	da00      	bge.n	8000532 <can_rx.lto_priv.51+0xd2>
 8000530:	e074      	b.n	800061c <can_rx.lto_priv.51+0x1bc>
      chSysUnlock();
      return (eventmask_t)0;
    }
    m = ctp->epending & events;
 8000532:	6b33      	ldr	r3, [r6, #48]	; 0x30
  }
  ctp->epending &= ~m;
 8000534:	2200      	movs	r2, #0
 8000536:	6332      	str	r2, [r6, #48]	; 0x30
 8000538:	f382 8811 	msr	BASEPRI, r2
    {
        if (chEvtWaitAnyTimeout(ALL_EVENTS, MS2ST(100)) == 0)
 800053c:	2b00      	cmp	r3, #0
 800053e:	d0e3      	beq.n	8000508 <can_rx.lto_priv.51+0xa8>
        {
            continue;
        }
        chprintf(DEBUG_CHP, "r");
 8000540:	493e      	ldr	r1, [pc, #248]	; (800063c <can_rx.lto_priv.51+0x1dc>)
 8000542:	483f      	ldr	r0, [pc, #252]	; (8000640 <can_rx.lto_priv.51+0x1e0>)
 8000544:	f001 febc 	bl	80022c0 <chprintf.constprop.2>
 8000548:	2320      	movs	r3, #32
 800054a:	f383 8811 	msr	BASEPRI, r3
  osalSysLock();
  osalDbgAssert((canp->state == CAN_READY) || (canp->state == CAN_SLEEP),
                "invalid state");

  /*lint -save -e9007 [13.5] Right side is supposed to be pure.*/
  while ((canp->state == CAN_SLEEP) || !can_lld_is_rx_nonempty(canp, mailbox)) {
 800054e:	7823      	ldrb	r3, [r4, #0]
 8000550:	2b04      	cmp	r3, #4
 8000552:	d013      	beq.n	800057c <can_rx.lto_priv.51+0x11c>
    }
  }
  switch (mailbox) {
  case 1:
    /* Fetches the message.*/
    rir  = canp->can->sFIFOMailBox[0].RIR;
 8000554:	23d8      	movs	r3, #216	; 0xd8
 8000556:	005b      	lsls	r3, r3, #1
 8000558:	4699      	mov	r9, r3
    rdtr = canp->can->sFIFOMailBox[0].RDTR;
 800055a:	3304      	adds	r3, #4
 800055c:	4698      	mov	r8, r3
    crfp->data32[0] = canp->can->sFIFOMailBox[0].RDLR;
    crfp->data32[1] = canp->can->sFIFOMailBox[0].RDHR;
 800055e:	27de      	movs	r7, #222	; 0xde
    crfp->data32[0] = canp->can->sFIFOMailBox[0].RDLR;
 8000560:	3304      	adds	r3, #4
    if ((canp->can->RF0R & CAN_RF0R_FMP0) == 0)
      canp->can->IER |= CAN_IER_FMPIE0;
    break;
  case 2:
    /* Fetches the message.*/
    rir  = canp->can->sFIFOMailBox[1].RIR;
 8000562:	26e0      	movs	r6, #224	; 0xe0
    return ((canp->can->RF0R & CAN_RF0R_FMP0) != 0 ||
 8000564:	2103      	movs	r1, #3
    crfp->data32[0] = canp->can->sFIFOMailBox[0].RDLR;
 8000566:	469c      	mov	ip, r3
    canp->can->RF0R = CAN_RF0R_RFOM0;
 8000568:	2220      	movs	r2, #32
    crfp->data32[1] = canp->can->sFIFOMailBox[0].RDHR;
 800056a:	007f      	lsls	r7, r7, #1
    rir  = canp->can->sFIFOMailBox[1].RIR;
 800056c:	0076      	lsls	r6, r6, #1
    return ((canp->can->RF0R & CAN_RF0R_FMP0) != 0 ||
 800056e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8000570:	68c3      	ldr	r3, [r0, #12]
 8000572:	4219      	tst	r1, r3
 8000574:	d106      	bne.n	8000584 <can_rx.lto_priv.51+0x124>
            (canp->can->RF1R & CAN_RF1R_FMP1) != 0);
 8000576:	6903      	ldr	r3, [r0, #16]
    return ((canp->can->RF0R & CAN_RF0R_FMP0) != 0 ||
 8000578:	4219      	tst	r1, r3
 800057a:	d103      	bne.n	8000584 <can_rx.lto_priv.51+0x124>
 800057c:	2300      	movs	r3, #0
 800057e:	f383 8811 	msr	BASEPRI, r3
 8000582:	e7c0      	b.n	8000506 <can_rx.lto_priv.51+0xa6>
    if ((canp->can->RF0R & CAN_RF0R_FMP0) != 0)
 8000584:	68c3      	ldr	r3, [r0, #12]
 8000586:	4219      	tst	r1, r3
 8000588:	d01b      	beq.n	80005c2 <can_rx.lto_priv.51+0x162>
    rir  = canp->can->sFIFOMailBox[0].RIR;
 800058a:	464b      	mov	r3, r9
 800058c:	58c3      	ldr	r3, [r0, r3]
    rdtr = canp->can->sFIFOMailBox[0].RDTR;
 800058e:	4643      	mov	r3, r8
 8000590:	58c3      	ldr	r3, [r0, r3]
    crfp->data32[0] = canp->can->sFIFOMailBox[0].RDLR;
 8000592:	4663      	mov	r3, ip
 8000594:	58c3      	ldr	r3, [r0, r3]
    crfp->data32[1] = canp->can->sFIFOMailBox[0].RDHR;
 8000596:	59c3      	ldr	r3, [r0, r7]
    canp->can->RF0R = CAN_RF0R_RFOM0;
 8000598:	60c2      	str	r2, [r0, #12]
    if ((canp->can->RF0R & CAN_RF0R_FMP0) == 0)
 800059a:	68c3      	ldr	r3, [r0, #12]
 800059c:	4219      	tst	r1, r3
 800059e:	d103      	bne.n	80005a8 <can_rx.lto_priv.51+0x148>
      canp->can->IER |= CAN_IER_FMPIE0;
 80005a0:	2502      	movs	r5, #2
 80005a2:	6943      	ldr	r3, [r0, #20]
 80005a4:	432b      	orrs	r3, r5
 80005a6:	6143      	str	r3, [r0, #20]
 80005a8:	2300      	movs	r3, #0
 80005aa:	f383 8811 	msr	BASEPRI, r3
        while (canReceive(&CAND1, CAN_ANY_MAILBOX, &rxmsg, TIME_IMMEDIATE) == MSG_OK)
        {
            /* Process message.*/
            palToggleLine(LINE_LED_GREEN);
 80005ae:	4821      	ldr	r0, [pc, #132]	; (8000634 <can_rx.lto_priv.51+0x1d4>)
 80005b0:	6943      	ldr	r3, [r0, #20]
 80005b2:	4053      	eors	r3, r2
 80005b4:	6143      	str	r3, [r0, #20]
 80005b6:	f382 8811 	msr	BASEPRI, r2
 80005ba:	7823      	ldrb	r3, [r4, #0]
 80005bc:	2b04      	cmp	r3, #4
 80005be:	d1d6      	bne.n	800056e <can_rx.lto_priv.51+0x10e>
 80005c0:	e7dc      	b.n	800057c <can_rx.lto_priv.51+0x11c>
    else if ((canp->can->RF1R & CAN_RF1R_FMP1) != 0)
 80005c2:	6903      	ldr	r3, [r0, #16]
 80005c4:	4219      	tst	r1, r3
 80005c6:	d0ef      	beq.n	80005a8 <can_rx.lto_priv.51+0x148>
    rir  = canp->can->sFIFOMailBox[1].RIR;
 80005c8:	5983      	ldr	r3, [r0, r6]
    rdtr = canp->can->sFIFOMailBox[1].RDTR;
 80005ca:	23e2      	movs	r3, #226	; 0xe2
 80005cc:	005b      	lsls	r3, r3, #1
 80005ce:	58c3      	ldr	r3, [r0, r3]
    crfp->data32[0] = canp->can->sFIFOMailBox[1].RDLR;
 80005d0:	23e4      	movs	r3, #228	; 0xe4
 80005d2:	005b      	lsls	r3, r3, #1
 80005d4:	58c3      	ldr	r3, [r0, r3]
    crfp->data32[1] = canp->can->sFIFOMailBox[1].RDHR;
 80005d6:	23e6      	movs	r3, #230	; 0xe6
 80005d8:	005b      	lsls	r3, r3, #1
 80005da:	58c3      	ldr	r3, [r0, r3]

    /* Releases the mailbox.*/
    canp->can->RF1R = CAN_RF1R_RFOM1;
 80005dc:	6102      	str	r2, [r0, #16]

    /* If the queue is empty re-enables the interrupt in order to generate
       events again.*/
    if ((canp->can->RF1R & CAN_RF1R_FMP1) == 0)
 80005de:	6903      	ldr	r3, [r0, #16]
 80005e0:	4219      	tst	r1, r3
 80005e2:	d1e1      	bne.n	80005a8 <can_rx.lto_priv.51+0x148>
      canp->can->IER |= CAN_IER_FMPIE1;
 80005e4:	6943      	ldr	r3, [r0, #20]
 80005e6:	001d      	movs	r5, r3
 80005e8:	2310      	movs	r3, #16
 80005ea:	432b      	orrs	r3, r5
 80005ec:	6143      	str	r3, [r0, #20]
 80005ee:	e7db      	b.n	80005a8 <can_rx.lto_priv.51+0x148>
 80005f0:	2320      	movs	r3, #32
 80005f2:	f383 8811 	msr	BASEPRI, r3
  p = (event_listener_t *)esp;
 80005f6:	4913      	ldr	r1, [pc, #76]	; (8000644 <can_rx.lto_priv.51+0x1e4>)
 80005f8:	000a      	movs	r2, r1
 80005fa:	e002      	b.n	8000602 <can_rx.lto_priv.51+0x1a2>
    if (p->next == elp) {
 80005fc:	455b      	cmp	r3, fp
 80005fe:	d011      	beq.n	8000624 <can_rx.lto_priv.51+0x1c4>
 8000600:	001a      	movs	r2, r3
  while (p->next != (event_listener_t *)esp) {
 8000602:	6813      	ldr	r3, [r2, #0]
 8000604:	428b      	cmp	r3, r1
 8000606:	d1f9      	bne.n	80005fc <can_rx.lto_priv.51+0x19c>
 8000608:	2300      	movs	r3, #0
 800060a:	f383 8811 	msr	BASEPRI, r3
        }
    }

    //Unregister RX event before terminating thread
    chEvtUnregister(&CAND1.rxfull_event, &el);
}
 800060e:	b007      	add	sp, #28
 8000610:	bc3c      	pop	{r2, r3, r4, r5}
 8000612:	4690      	mov	r8, r2
 8000614:	4699      	mov	r9, r3
 8000616:	46a2      	mov	sl, r4
 8000618:	46ab      	mov	fp, r5
 800061a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800061c:	2300      	movs	r3, #0
 800061e:	f383 8811 	msr	BASEPRI, r3
 8000622:	e771      	b.n	8000508 <can_rx.lto_priv.51+0xa8>
      p->next = elp->next;
 8000624:	465b      	mov	r3, fp
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	6013      	str	r3, [r2, #0]
 800062a:	e7ed      	b.n	8000608 <can_rx.lto_priv.51+0x1a8>
 800062c:	20000a78 	.word	0x20000a78
 8000630:	080025b4 	.word	0x080025b4
 8000634:	40020000 	.word	0x40020000
 8000638:	20000610 	.word	0x20000610
 800063c:	080025c0 	.word	0x080025c0
 8000640:	200009fc 	.word	0x200009fc
 8000644:	20000628 	.word	0x20000628
	...

08000650 <VectorA4>:
 *          pointer is not equal to @p NULL in order to not perform an extra
 *          check in a potentially critical interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM1_UP_HANDLER) {
 8000650:	b570      	push	{r4, r5, r6, lr}
 * @notapi
 */
void pwm_lld_serve_interrupt(PWMDriver *pwmp) {
  uint32_t sr;

  sr  = pwmp->tim->SR;
 8000652:	4d1a      	ldr	r5, [pc, #104]	; (80006bc <VectorA4+0x6c>)
 8000654:	69aa      	ldr	r2, [r5, #24]
 8000656:	6913      	ldr	r3, [r2, #16]
  sr &= pwmp->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
 8000658:	68d4      	ldr	r4, [r2, #12]
 800065a:	401c      	ands	r4, r3
  pwmp->tim->SR = ~sr;
 800065c:	23ff      	movs	r3, #255	; 0xff
 800065e:	4023      	ands	r3, r4
 8000660:	43db      	mvns	r3, r3
 8000662:	6113      	str	r3, [r2, #16]
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
 8000664:	07a3      	lsls	r3, r4, #30
 8000666:	d505      	bpl.n	8000674 <VectorA4+0x24>
      (pwmp->config->channels[0].callback != NULL))
 8000668:	686b      	ldr	r3, [r5, #4]
 800066a:	691b      	ldr	r3, [r3, #16]
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <VectorA4+0x24>
    pwmp->config->channels[0].callback(pwmp);
 8000670:	0028      	movs	r0, r5
 8000672:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
 8000674:	0763      	lsls	r3, r4, #29
 8000676:	d505      	bpl.n	8000684 <VectorA4+0x34>
      (pwmp->config->channels[1].callback != NULL))
 8000678:	686b      	ldr	r3, [r5, #4]
 800067a:	699b      	ldr	r3, [r3, #24]
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <VectorA4+0x34>
    pwmp->config->channels[1].callback(pwmp);
 8000680:	0028      	movs	r0, r5
 8000682:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
 8000684:	0723      	lsls	r3, r4, #28
 8000686:	d505      	bpl.n	8000694 <VectorA4+0x44>
      (pwmp->config->channels[2].callback != NULL))
 8000688:	686b      	ldr	r3, [r5, #4]
 800068a:	6a1b      	ldr	r3, [r3, #32]
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <VectorA4+0x44>
    pwmp->config->channels[2].callback(pwmp);
 8000690:	0028      	movs	r0, r5
 8000692:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC4IF) != 0) &&
 8000694:	06e3      	lsls	r3, r4, #27
 8000696:	d505      	bpl.n	80006a4 <VectorA4+0x54>
      (pwmp->config->channels[3].callback != NULL))
 8000698:	686b      	ldr	r3, [r5, #4]
 800069a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((sr & STM32_TIM_SR_CC4IF) != 0) &&
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <VectorA4+0x54>
    pwmp->config->channels[3].callback(pwmp);
 80006a0:	0028      	movs	r0, r5
 80006a2:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_UIF) != 0) && (pwmp->config->callback != NULL))
 80006a4:	07e3      	lsls	r3, r4, #31
 80006a6:	d505      	bpl.n	80006b4 <VectorA4+0x64>
 80006a8:	686b      	ldr	r3, [r5, #4]
 80006aa:	689b      	ldr	r3, [r3, #8]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <VectorA4+0x64>
    pwmp->config->callback(pwmp);
 80006b0:	0028      	movs	r0, r5
 80006b2:	4798      	blx	r3
  OSAL_IRQ_EPILOGUE();
 80006b4:	f001 f964 	bl	8001980 <_port_irq_epilogue>
}
 80006b8:	bd70      	pop	{r4, r5, r6, pc}
 80006ba:	46c0      	nop			; (mov r8, r8)
 80006bc:	200009a8 	.word	0x200009a8

080006c0 <VectorAC>:
 80006c0:	b510      	push	{r4, lr}
 80006c2:	f7ff ffc5 	bl	8000650 <VectorA4>
 80006c6:	bd10      	pop	{r4, pc}
	...

080006d0 <VectorB0>:
 * @brief   TIM2 interrupt handler.
 * @details This interrupt is used for system tick in free running mode.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(ST_HANDLER) {
 80006d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006d2:	4647      	mov	r7, r8
 80006d4:	b480      	push	{r7}
  OSAL_IRQ_PROLOGUE();

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
 80006d6:	2780      	movs	r7, #128	; 0x80
 80006d8:	05ff      	lsls	r7, r7, #23
 80006da:	693b      	ldr	r3, [r7, #16]
 80006dc:	079b      	lsls	r3, r3, #30
 80006de:	d404      	bmi.n	80006ea <VectorB0+0x1a>
    osalSysLockFromISR();
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
 80006e0:	f001 f94e 	bl	8001980 <_port_irq_epilogue>
}
 80006e4:	bc04      	pop	{r2}
 80006e6:	4690      	mov	r8, r2
 80006e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    STM32_ST_TIM->SR = 0U;
 80006ea:	2300      	movs	r3, #0
 80006ec:	613b      	str	r3, [r7, #16]
 80006ee:	3320      	adds	r3, #32
 80006f0:	f383 8811 	msr	BASEPRI, r3
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  virtual_timer_t *vtp;
  systime_t now, delta;

  /* First timer to be processed.*/
  vtp = ch.vtlist.next;
 80006f4:	4c1b      	ldr	r4, [pc, #108]	; (8000764 <VectorB0+0x94>)
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 80006f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80006f8:	69e3      	ldr	r3, [r4, #28]

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->delta <= (systime_t)(now - ch.vtlist.lasttime)) {
 80006fa:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80006fc:	689a      	ldr	r2, [r3, #8]
 80006fe:	1a45      	subs	r5, r0, r1
 8000700:	4295      	cmp	r5, r2
 8000702:	d31b      	bcc.n	800073c <VectorB0+0x6c>
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.lasttime += vtp->delta;

    vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 8000704:	0026      	movs	r6, r4
    ch.vtlist.next = vtp->next;
    fn = vtp->func;
    vtp->func = NULL;
 8000706:	2500      	movs	r5, #0
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
 8000708:	46b8      	mov	r8, r7
    vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 800070a:	361c      	adds	r6, #28
    ch.vtlist.lasttime += vtp->delta;
 800070c:	188a      	adds	r2, r1, r2
 800070e:	62a2      	str	r2, [r4, #40]	; 0x28
    vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 8000710:	681a      	ldr	r2, [r3, #0]
    fn = vtp->func;
 8000712:	68d9      	ldr	r1, [r3, #12]
    vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 8000714:	6056      	str	r6, [r2, #4]
    ch.vtlist.next = vtp->next;
 8000716:	61e2      	str	r2, [r4, #28]
    vtp->func = NULL;
 8000718:	60dd      	str	r5, [r3, #12]

    /* if the list becomes empty then the timer is stopped.*/
    if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 800071a:	42b2      	cmp	r2, r6
 800071c:	d01d      	beq.n	800075a <VectorB0+0x8a>
 800071e:	f385 8811 	msr	BASEPRI, r5
       and in order to give a preemption chance to higher priority
       interrupts.*/
    chSysUnlockFromISR();

    /* The callback is invoked outside the kernel critical zone.*/
    fn(vtp->par);
 8000722:	6918      	ldr	r0, [r3, #16]
 8000724:	4788      	blx	r1
 8000726:	2320      	movs	r3, #32
 8000728:	f383 8811 	msr	BASEPRI, r3
  return (systime_t)STM32_ST_TIM->CNT;
 800072c:	4642      	mov	r2, r8
       of the list.*/
    chSysLockFromISR();

    /* Next element in the list, the current time could have advanced so
       recalculating the time window.*/
    vtp = ch.vtlist.next;
 800072e:	69e3      	ldr	r3, [r4, #28]
 8000730:	6a50      	ldr	r0, [r2, #36]	; 0x24
  while (vtp->delta <= (systime_t)(now - ch.vtlist.lasttime)) {
 8000732:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000734:	689a      	ldr	r2, [r3, #8]
 8000736:	1a47      	subs	r7, r0, r1
 8000738:	42ba      	cmp	r2, r7
 800073a:	d9e7      	bls.n	800070c <VectorB0+0x3c>
    now = chVTGetSystemTimeX();
  }

  /* if the list is empty, nothing else to do.*/
  if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 800073c:	4c0a      	ldr	r4, [pc, #40]	; (8000768 <VectorB0+0x98>)
 800073e:	42a3      	cmp	r3, r4
 8000740:	d007      	beq.n	8000752 <VectorB0+0x82>
    return;
  }

  /* Recalculating the next alarm time.*/
  delta = ch.vtlist.lasttime + vtp->delta - now;
 8000742:	1852      	adds	r2, r2, r1
 8000744:	1a12      	subs	r2, r2, r0
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
 8000746:	2a01      	cmp	r2, #1
 8000748:	d90a      	bls.n	8000760 <VectorB0+0x90>
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 800074a:	2380      	movs	r3, #128	; 0x80
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
  }
  port_timer_set_alarm(now + delta);
 800074c:	1812      	adds	r2, r2, r0
 800074e:	05db      	lsls	r3, r3, #23
 8000750:	635a      	str	r2, [r3, #52]	; 0x34
 8000752:	2300      	movs	r3, #0
 8000754:	f383 8811 	msr	BASEPRI, r3
 8000758:	e7c2      	b.n	80006e0 <VectorB0+0x10>
  STM32_ST_TIM->DIER = 0;
 800075a:	4642      	mov	r2, r8
 800075c:	60d5      	str	r5, [r2, #12]
 800075e:	e7de      	b.n	800071e <VectorB0+0x4e>
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
 8000760:	2202      	movs	r2, #2
 8000762:	e7f2      	b.n	800074a <VectorB0+0x7a>
 8000764:	20000a78 	.word	0x20000a78
 8000768:	20000a94 	.word	0x20000a94
 800076c:	00000000 	.word	0x00000000

08000770 <Vector158>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH7_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8000770:	223d      	movs	r2, #61	; 0x3d
 8000772:	4b08      	ldr	r3, [pc, #32]	; (8000794 <Vector158+0x24>)
OSAL_IRQ_HANDLER(STM32_DMA2_CH7_HANDLER) {
 8000774:	b510      	push	{r4, lr}
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8000776:	6859      	ldr	r1, [r3, #4]
 8000778:	0d89      	lsrs	r1, r1, #22
 800077a:	4011      	ands	r1, r2
  DMA2->HIFCR = flags << 22U;
 800077c:	058a      	lsls	r2, r1, #22
 800077e:	60da      	str	r2, [r3, #12]
  if (dma_isr_redir[15].dma_func)
 8000780:	4a05      	ldr	r2, [pc, #20]	; (8000798 <Vector158+0x28>)
 8000782:	6f93      	ldr	r3, [r2, #120]	; 0x78
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <Vector158+0x1c>
    dma_isr_redir[15].dma_func(dma_isr_redir[15].dma_param, flags);
 8000788:	6fd0      	ldr	r0, [r2, #124]	; 0x7c
 800078a:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 800078c:	f001 f8f8 	bl	8001980 <_port_irq_epilogue>
}
 8000790:	bd10      	pop	{r4, pc}
 8000792:	46c0      	nop			; (mov r8, r8)
 8000794:	40026400 	.word	0x40026400
 8000798:	20000928 	.word	0x20000928
 800079c:	00000000 	.word	0x00000000

080007a0 <Vector154>:
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 80007a0:	223d      	movs	r2, #61	; 0x3d
 80007a2:	4b08      	ldr	r3, [pc, #32]	; (80007c4 <Vector154+0x24>)
OSAL_IRQ_HANDLER(STM32_DMA2_CH6_HANDLER) {
 80007a4:	b510      	push	{r4, lr}
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 80007a6:	6859      	ldr	r1, [r3, #4]
 80007a8:	0c09      	lsrs	r1, r1, #16
 80007aa:	4011      	ands	r1, r2
  DMA2->HIFCR = flags << 16U;
 80007ac:	040a      	lsls	r2, r1, #16
 80007ae:	60da      	str	r2, [r3, #12]
  if (dma_isr_redir[14].dma_func)
 80007b0:	4a05      	ldr	r2, [pc, #20]	; (80007c8 <Vector154+0x28>)
 80007b2:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <Vector154+0x1c>
    dma_isr_redir[14].dma_func(dma_isr_redir[14].dma_param, flags);
 80007b8:	6f50      	ldr	r0, [r2, #116]	; 0x74
 80007ba:	4798      	blx	r3
  OSAL_IRQ_EPILOGUE();
 80007bc:	f001 f8e0 	bl	8001980 <_port_irq_epilogue>
}
 80007c0:	bd10      	pop	{r4, pc}
 80007c2:	46c0      	nop			; (mov r8, r8)
 80007c4:	40026400 	.word	0x40026400
 80007c8:	20000928 	.word	0x20000928
 80007cc:	00000000 	.word	0x00000000

080007d0 <Vector150>:
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 80007d0:	223d      	movs	r2, #61	; 0x3d
 80007d2:	4b08      	ldr	r3, [pc, #32]	; (80007f4 <Vector150+0x24>)
OSAL_IRQ_HANDLER(STM32_DMA2_CH5_HANDLER) {
 80007d4:	b510      	push	{r4, lr}
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 80007d6:	6859      	ldr	r1, [r3, #4]
 80007d8:	0989      	lsrs	r1, r1, #6
 80007da:	4011      	ands	r1, r2
  DMA2->HIFCR = flags << 6U;
 80007dc:	018a      	lsls	r2, r1, #6
 80007de:	60da      	str	r2, [r3, #12]
  if (dma_isr_redir[13].dma_func)
 80007e0:	4a05      	ldr	r2, [pc, #20]	; (80007f8 <Vector150+0x28>)
 80007e2:	6e93      	ldr	r3, [r2, #104]	; 0x68
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <Vector150+0x1c>
    dma_isr_redir[13].dma_func(dma_isr_redir[13].dma_param, flags);
 80007e8:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 80007ea:	4798      	blx	r3
  OSAL_IRQ_EPILOGUE();
 80007ec:	f001 f8c8 	bl	8001980 <_port_irq_epilogue>
}
 80007f0:	bd10      	pop	{r4, pc}
 80007f2:	46c0      	nop			; (mov r8, r8)
 80007f4:	40026400 	.word	0x40026400
 80007f8:	20000928 	.word	0x20000928
 80007fc:	00000000 	.word	0x00000000

08000800 <Vector130>:
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8000800:	213d      	movs	r1, #61	; 0x3d
 8000802:	4a07      	ldr	r2, [pc, #28]	; (8000820 <Vector130+0x20>)
OSAL_IRQ_HANDLER(STM32_DMA2_CH4_HANDLER) {
 8000804:	b510      	push	{r4, lr}
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8000806:	6853      	ldr	r3, [r2, #4]
 8000808:	4019      	ands	r1, r3
  DMA2->HIFCR = flags << 0U;
 800080a:	60d1      	str	r1, [r2, #12]
  if (dma_isr_redir[12].dma_func)
 800080c:	4a05      	ldr	r2, [pc, #20]	; (8000824 <Vector130+0x24>)
 800080e:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <Vector130+0x18>
    dma_isr_redir[12].dma_func(dma_isr_redir[12].dma_param, flags);
 8000814:	6e50      	ldr	r0, [r2, #100]	; 0x64
 8000816:	4798      	blx	r3
  OSAL_IRQ_EPILOGUE();
 8000818:	f001 f8b2 	bl	8001980 <_port_irq_epilogue>
}
 800081c:	bd10      	pop	{r4, pc}
 800081e:	46c0      	nop			; (mov r8, r8)
 8000820:	40026400 	.word	0x40026400
 8000824:	20000928 	.word	0x20000928
	...

08000830 <Vector12C>:
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8000830:	223d      	movs	r2, #61	; 0x3d
 8000832:	4b08      	ldr	r3, [pc, #32]	; (8000854 <Vector12C+0x24>)
OSAL_IRQ_HANDLER(STM32_DMA2_CH3_HANDLER) {
 8000834:	b510      	push	{r4, lr}
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8000836:	6819      	ldr	r1, [r3, #0]
 8000838:	0d89      	lsrs	r1, r1, #22
 800083a:	4011      	ands	r1, r2
  DMA2->LIFCR = flags << 22U;
 800083c:	058a      	lsls	r2, r1, #22
 800083e:	609a      	str	r2, [r3, #8]
  if (dma_isr_redir[11].dma_func)
 8000840:	4a05      	ldr	r2, [pc, #20]	; (8000858 <Vector12C+0x28>)
 8000842:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <Vector12C+0x1c>
    dma_isr_redir[11].dma_func(dma_isr_redir[11].dma_param, flags);
 8000848:	6dd0      	ldr	r0, [r2, #92]	; 0x5c
 800084a:	4798      	blx	r3
  OSAL_IRQ_EPILOGUE();
 800084c:	f001 f898 	bl	8001980 <_port_irq_epilogue>
}
 8000850:	bd10      	pop	{r4, pc}
 8000852:	46c0      	nop			; (mov r8, r8)
 8000854:	40026400 	.word	0x40026400
 8000858:	20000928 	.word	0x20000928
 800085c:	00000000 	.word	0x00000000

08000860 <Vector128>:
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8000860:	223d      	movs	r2, #61	; 0x3d
 8000862:	4b08      	ldr	r3, [pc, #32]	; (8000884 <Vector128+0x24>)
OSAL_IRQ_HANDLER(STM32_DMA2_CH2_HANDLER) {
 8000864:	b510      	push	{r4, lr}
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8000866:	6819      	ldr	r1, [r3, #0]
 8000868:	0c09      	lsrs	r1, r1, #16
 800086a:	4011      	ands	r1, r2
  DMA2->LIFCR = flags << 16U;
 800086c:	040a      	lsls	r2, r1, #16
 800086e:	609a      	str	r2, [r3, #8]
  if (dma_isr_redir[10].dma_func)
 8000870:	4a05      	ldr	r2, [pc, #20]	; (8000888 <Vector128+0x28>)
 8000872:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <Vector128+0x1c>
    dma_isr_redir[10].dma_func(dma_isr_redir[10].dma_param, flags);
 8000878:	6d50      	ldr	r0, [r2, #84]	; 0x54
 800087a:	4798      	blx	r3
  OSAL_IRQ_EPILOGUE();
 800087c:	f001 f880 	bl	8001980 <_port_irq_epilogue>
}
 8000880:	bd10      	pop	{r4, pc}
 8000882:	46c0      	nop			; (mov r8, r8)
 8000884:	40026400 	.word	0x40026400
 8000888:	20000928 	.word	0x20000928
 800088c:	00000000 	.word	0x00000000

08000890 <Vector124>:
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8000890:	223d      	movs	r2, #61	; 0x3d
 8000892:	4b08      	ldr	r3, [pc, #32]	; (80008b4 <Vector124+0x24>)
OSAL_IRQ_HANDLER(STM32_DMA2_CH1_HANDLER) {
 8000894:	b510      	push	{r4, lr}
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8000896:	6819      	ldr	r1, [r3, #0]
 8000898:	0989      	lsrs	r1, r1, #6
 800089a:	4011      	ands	r1, r2
  DMA2->LIFCR = flags << 6U;
 800089c:	018a      	lsls	r2, r1, #6
 800089e:	609a      	str	r2, [r3, #8]
  if (dma_isr_redir[9].dma_func)
 80008a0:	4a05      	ldr	r2, [pc, #20]	; (80008b8 <Vector124+0x28>)
 80008a2:	6c93      	ldr	r3, [r2, #72]	; 0x48
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <Vector124+0x1c>
    dma_isr_redir[9].dma_func(dma_isr_redir[9].dma_param, flags);
 80008a8:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 80008aa:	4798      	blx	r3
  OSAL_IRQ_EPILOGUE();
 80008ac:	f001 f868 	bl	8001980 <_port_irq_epilogue>
}
 80008b0:	bd10      	pop	{r4, pc}
 80008b2:	46c0      	nop			; (mov r8, r8)
 80008b4:	40026400 	.word	0x40026400
 80008b8:	20000928 	.word	0x20000928
 80008bc:	00000000 	.word	0x00000000

080008c0 <Vector120>:
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 80008c0:	213d      	movs	r1, #61	; 0x3d
 80008c2:	4a07      	ldr	r2, [pc, #28]	; (80008e0 <Vector120+0x20>)
OSAL_IRQ_HANDLER(STM32_DMA2_CH0_HANDLER) {
 80008c4:	b510      	push	{r4, lr}
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 80008c6:	6813      	ldr	r3, [r2, #0]
 80008c8:	4019      	ands	r1, r3
  DMA2->LIFCR = flags << 0U;
 80008ca:	6091      	str	r1, [r2, #8]
  if (dma_isr_redir[8].dma_func)
 80008cc:	4a05      	ldr	r2, [pc, #20]	; (80008e4 <Vector120+0x24>)
 80008ce:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <Vector120+0x18>
    dma_isr_redir[8].dma_func(dma_isr_redir[8].dma_param, flags);
 80008d4:	6c50      	ldr	r0, [r2, #68]	; 0x44
 80008d6:	4798      	blx	r3
  OSAL_IRQ_EPILOGUE();
 80008d8:	f001 f852 	bl	8001980 <_port_irq_epilogue>
}
 80008dc:	bd10      	pop	{r4, pc}
 80008de:	46c0      	nop			; (mov r8, r8)
 80008e0:	40026400 	.word	0x40026400
 80008e4:	20000928 	.word	0x20000928
	...

080008f0 <VectorFC>:
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 80008f0:	223d      	movs	r2, #61	; 0x3d
 80008f2:	4b08      	ldr	r3, [pc, #32]	; (8000914 <VectorFC+0x24>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
 80008f4:	b510      	push	{r4, lr}
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 80008f6:	6859      	ldr	r1, [r3, #4]
 80008f8:	0d89      	lsrs	r1, r1, #22
 80008fa:	4011      	ands	r1, r2
  DMA1->HIFCR = flags << 22U;
 80008fc:	058a      	lsls	r2, r1, #22
 80008fe:	60da      	str	r2, [r3, #12]
  if (dma_isr_redir[7].dma_func)
 8000900:	4a05      	ldr	r2, [pc, #20]	; (8000918 <VectorFC+0x28>)
 8000902:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <VectorFC+0x1c>
    dma_isr_redir[7].dma_func(dma_isr_redir[7].dma_param, flags);
 8000908:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
 800090a:	4798      	blx	r3
  OSAL_IRQ_EPILOGUE();
 800090c:	f001 f838 	bl	8001980 <_port_irq_epilogue>
}
 8000910:	bd10      	pop	{r4, pc}
 8000912:	46c0      	nop			; (mov r8, r8)
 8000914:	40026000 	.word	0x40026000
 8000918:	20000928 	.word	0x20000928
 800091c:	00000000 	.word	0x00000000

08000920 <Vector84>:
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8000920:	223d      	movs	r2, #61	; 0x3d
 8000922:	4b08      	ldr	r3, [pc, #32]	; (8000944 <Vector84+0x24>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
 8000924:	b510      	push	{r4, lr}
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8000926:	6859      	ldr	r1, [r3, #4]
 8000928:	0c09      	lsrs	r1, r1, #16
 800092a:	4011      	ands	r1, r2
  DMA1->HIFCR = flags << 16U;
 800092c:	040a      	lsls	r2, r1, #16
 800092e:	60da      	str	r2, [r3, #12]
  if (dma_isr_redir[6].dma_func)
 8000930:	4a05      	ldr	r2, [pc, #20]	; (8000948 <Vector84+0x28>)
 8000932:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <Vector84+0x1c>
    dma_isr_redir[6].dma_func(dma_isr_redir[6].dma_param, flags);
 8000938:	6b50      	ldr	r0, [r2, #52]	; 0x34
 800093a:	4798      	blx	r3
  OSAL_IRQ_EPILOGUE();
 800093c:	f001 f820 	bl	8001980 <_port_irq_epilogue>
}
 8000940:	bd10      	pop	{r4, pc}
 8000942:	46c0      	nop			; (mov r8, r8)
 8000944:	40026000 	.word	0x40026000
 8000948:	20000928 	.word	0x20000928
 800094c:	00000000 	.word	0x00000000

08000950 <Vector80>:
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8000950:	223d      	movs	r2, #61	; 0x3d
 8000952:	4b08      	ldr	r3, [pc, #32]	; (8000974 <Vector80+0x24>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
 8000954:	b510      	push	{r4, lr}
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8000956:	6859      	ldr	r1, [r3, #4]
 8000958:	0989      	lsrs	r1, r1, #6
 800095a:	4011      	ands	r1, r2
  DMA1->HIFCR = flags << 6U;
 800095c:	018a      	lsls	r2, r1, #6
 800095e:	60da      	str	r2, [r3, #12]
  if (dma_isr_redir[5].dma_func)
 8000960:	4a05      	ldr	r2, [pc, #20]	; (8000978 <Vector80+0x28>)
 8000962:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <Vector80+0x1c>
    dma_isr_redir[5].dma_func(dma_isr_redir[5].dma_param, flags);
 8000968:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 800096a:	4798      	blx	r3
  OSAL_IRQ_EPILOGUE();
 800096c:	f001 f808 	bl	8001980 <_port_irq_epilogue>
}
 8000970:	bd10      	pop	{r4, pc}
 8000972:	46c0      	nop			; (mov r8, r8)
 8000974:	40026000 	.word	0x40026000
 8000978:	20000928 	.word	0x20000928
 800097c:	00000000 	.word	0x00000000

08000980 <Vector7C>:
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8000980:	213d      	movs	r1, #61	; 0x3d
 8000982:	4a07      	ldr	r2, [pc, #28]	; (80009a0 <Vector7C+0x20>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
 8000984:	b510      	push	{r4, lr}
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8000986:	6853      	ldr	r3, [r2, #4]
 8000988:	4019      	ands	r1, r3
  DMA1->HIFCR = flags << 0U;
 800098a:	60d1      	str	r1, [r2, #12]
  if (dma_isr_redir[4].dma_func)
 800098c:	4a05      	ldr	r2, [pc, #20]	; (80009a4 <Vector7C+0x24>)
 800098e:	6a13      	ldr	r3, [r2, #32]
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <Vector7C+0x18>
    dma_isr_redir[4].dma_func(dma_isr_redir[4].dma_param, flags);
 8000994:	6a50      	ldr	r0, [r2, #36]	; 0x24
 8000996:	4798      	blx	r3
  OSAL_IRQ_EPILOGUE();
 8000998:	f000 fff2 	bl	8001980 <_port_irq_epilogue>
}
 800099c:	bd10      	pop	{r4, pc}
 800099e:	46c0      	nop			; (mov r8, r8)
 80009a0:	40026000 	.word	0x40026000
 80009a4:	20000928 	.word	0x20000928
	...

080009b0 <Vector78>:
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 80009b0:	223d      	movs	r2, #61	; 0x3d
 80009b2:	4b08      	ldr	r3, [pc, #32]	; (80009d4 <Vector78+0x24>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
 80009b4:	b510      	push	{r4, lr}
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 80009b6:	6819      	ldr	r1, [r3, #0]
 80009b8:	0d89      	lsrs	r1, r1, #22
 80009ba:	4011      	ands	r1, r2
  DMA1->LIFCR = flags << 22U;
 80009bc:	058a      	lsls	r2, r1, #22
 80009be:	609a      	str	r2, [r3, #8]
  if (dma_isr_redir[3].dma_func)
 80009c0:	4a05      	ldr	r2, [pc, #20]	; (80009d8 <Vector78+0x28>)
 80009c2:	6993      	ldr	r3, [r2, #24]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <Vector78+0x1c>
    dma_isr_redir[3].dma_func(dma_isr_redir[3].dma_param, flags);
 80009c8:	69d0      	ldr	r0, [r2, #28]
 80009ca:	4798      	blx	r3
  OSAL_IRQ_EPILOGUE();
 80009cc:	f000 ffd8 	bl	8001980 <_port_irq_epilogue>
}
 80009d0:	bd10      	pop	{r4, pc}
 80009d2:	46c0      	nop			; (mov r8, r8)
 80009d4:	40026000 	.word	0x40026000
 80009d8:	20000928 	.word	0x20000928
 80009dc:	00000000 	.word	0x00000000

080009e0 <Vector74>:
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 80009e0:	223d      	movs	r2, #61	; 0x3d
 80009e2:	4b08      	ldr	r3, [pc, #32]	; (8000a04 <Vector74+0x24>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
 80009e4:	b510      	push	{r4, lr}
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 80009e6:	6819      	ldr	r1, [r3, #0]
 80009e8:	0c09      	lsrs	r1, r1, #16
 80009ea:	4011      	ands	r1, r2
  DMA1->LIFCR = flags << 16U;
 80009ec:	040a      	lsls	r2, r1, #16
 80009ee:	609a      	str	r2, [r3, #8]
  if (dma_isr_redir[2].dma_func)
 80009f0:	4a05      	ldr	r2, [pc, #20]	; (8000a08 <Vector74+0x28>)
 80009f2:	6913      	ldr	r3, [r2, #16]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <Vector74+0x1c>
    dma_isr_redir[2].dma_func(dma_isr_redir[2].dma_param, flags);
 80009f8:	6950      	ldr	r0, [r2, #20]
 80009fa:	4798      	blx	r3
  OSAL_IRQ_EPILOGUE();
 80009fc:	f000 ffc0 	bl	8001980 <_port_irq_epilogue>
}
 8000a00:	bd10      	pop	{r4, pc}
 8000a02:	46c0      	nop			; (mov r8, r8)
 8000a04:	40026000 	.word	0x40026000
 8000a08:	20000928 	.word	0x20000928
 8000a0c:	00000000 	.word	0x00000000

08000a10 <VectorD8>:
/**
 * @brief   USART2 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART2_HANDLER) {
 8000a10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a12:	4645      	mov	r5, r8
 8000a14:	464e      	mov	r6, r9
 8000a16:	4657      	mov	r7, sl
 8000a18:	b4e0      	push	{r5, r6, r7}
  USART_TypeDef *u = sdp->usart;
 8000a1a:	4d6b      	ldr	r5, [pc, #428]	; (8000bc8 <VectorD8+0x1b8>)
 8000a1c:	6f6e      	ldr	r6, [r5, #116]	; 0x74
  uint16_t cr1 = u->CR1;
 8000a1e:	68f3      	ldr	r3, [r6, #12]
 8000a20:	4698      	mov	r8, r3
  uint16_t sr = u->SR;
 8000a22:	6833      	ldr	r3, [r6, #0]
 8000a24:	b29c      	uxth	r4, r3
  if (sr & USART_SR_LBD) {
 8000a26:	05db      	lsls	r3, r3, #23
 8000a28:	d500      	bpl.n	8000a2c <VectorD8+0x1c>
 8000a2a:	e086      	b.n	8000b3a <VectorD8+0x12a>
 8000a2c:	2320      	movs	r3, #32
 8000a2e:	f383 8811 	msr	BASEPRI, r3
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8000a32:	330f      	adds	r3, #15
 8000a34:	4223      	tst	r3, r4
 8000a36:	d04c      	beq.n	8000ad2 <VectorD8+0xc2>
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 8000a38:	4b64      	ldr	r3, [pc, #400]	; (8000bcc <VectorD8+0x1bc>)
    sts |= SD_PARITY_ERROR;
 8000a3a:	2720      	movs	r7, #32
 8000a3c:	4699      	mov	r9, r3
 8000a3e:	e008      	b.n	8000a52 <VectorD8+0x42>
    b = (uint8_t)u->DR & sdp->rxmask;
 8000a40:	6873      	ldr	r3, [r6, #4]
 8000a42:	469a      	mov	sl, r3
    if (sr & USART_SR_RXNE)
 8000a44:	4227      	tst	r7, r4
 8000a46:	d11c      	bne.n	8000a82 <VectorD8+0x72>
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8000a48:	232f      	movs	r3, #47	; 0x2f
    sr = u->SR;
 8000a4a:	6834      	ldr	r4, [r6, #0]
 8000a4c:	b2a4      	uxth	r4, r4
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8000a4e:	4223      	tst	r3, r4
 8000a50:	d03f      	beq.n	8000ad2 <VectorD8+0xc2>
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
 8000a52:	0723      	lsls	r3, r4, #28
 8000a54:	d0f4      	beq.n	8000a40 <VectorD8+0x30>
  if (sr & USART_SR_ORE)
 8000a56:	0721      	lsls	r1, r4, #28
    sts |= SD_OVERRUN_ERROR;
 8000a58:	0fc9      	lsrs	r1, r1, #31
 8000a5a:	01c9      	lsls	r1, r1, #7
  if (sr & USART_SR_PE)
 8000a5c:	07e3      	lsls	r3, r4, #31
 8000a5e:	d500      	bpl.n	8000a62 <VectorD8+0x52>
    sts |= SD_PARITY_ERROR;
 8000a60:	4339      	orrs	r1, r7
  if (sr & USART_SR_FE)
 8000a62:	07a3      	lsls	r3, r4, #30
 8000a64:	d501      	bpl.n	8000a6a <VectorD8+0x5a>
    sts |= SD_FRAMING_ERROR;
 8000a66:	2340      	movs	r3, #64	; 0x40
 8000a68:	4319      	orrs	r1, r3
  if (sr & USART_SR_NE)
 8000a6a:	0763      	lsls	r3, r4, #29
 8000a6c:	d502      	bpl.n	8000a74 <VectorD8+0x64>
    sts |= SD_NOISE_ERROR;
 8000a6e:	2380      	movs	r3, #128	; 0x80
 8000a70:	005b      	lsls	r3, r3, #1
 8000a72:	4319      	orrs	r1, r3
 8000a74:	4648      	mov	r0, r9
 8000a76:	f001 fa33 	bl	8001ee0 <chEvtBroadcastFlagsI>
    b = (uint8_t)u->DR & sdp->rxmask;
 8000a7a:	6873      	ldr	r3, [r6, #4]
 8000a7c:	469a      	mov	sl, r3
    if (sr & USART_SR_RXNE)
 8000a7e:	4227      	tst	r7, r4
 8000a80:	d0e2      	beq.n	8000a48 <VectorD8+0x38>
    b = (uint8_t)u->DR & sdp->rxmask;
 8000a82:	2378      	movs	r3, #120	; 0x78
 8000a84:	5cec      	ldrb	r4, [r5, r3]
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
 8000a86:	696b      	ldr	r3, [r5, #20]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d045      	beq.n	8000b18 <VectorD8+0x108>
 */
msg_t iqPutI(input_queue_t *iqp, uint8_t b) {

  osalDbgCheckClassI();

  if (iqIsFullI(iqp)) {
 8000a8c:	6a2b      	ldr	r3, [r5, #32]
 8000a8e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8000a90:	4293      	cmp	r3, r2
 8000a92:	d049      	beq.n	8000b28 <VectorD8+0x118>
    return MSG_TIMEOUT;
  }

  iqp->q_counter++;
 8000a94:	696a      	ldr	r2, [r5, #20]
 8000a96:	3201      	adds	r2, #1
 8000a98:	616a      	str	r2, [r5, #20]
  *iqp->q_wrptr++ = b;
 8000a9a:	1c5a      	adds	r2, r3, #1
 8000a9c:	622a      	str	r2, [r5, #32]
 8000a9e:	4652      	mov	r2, sl
 8000aa0:	4022      	ands	r2, r4
 8000aa2:	701a      	strb	r2, [r3, #0]
  if (iqp->q_wrptr >= iqp->q_top) {
 8000aa4:	6a2b      	ldr	r3, [r5, #32]
 8000aa6:	69ea      	ldr	r2, [r5, #28]
 8000aa8:	4293      	cmp	r3, r2
 8000aaa:	d301      	bcc.n	8000ab0 <VectorD8+0xa0>
    iqp->q_wrptr = iqp->q_buffer;
 8000aac:	69ab      	ldr	r3, [r5, #24]
 8000aae:	622b      	str	r3, [r5, #32]
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (queue_notempty(tqp)) {
 8000ab0:	002b      	movs	r3, r5
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->next != (const thread_t *)tqp);
 8000ab2:	68e8      	ldr	r0, [r5, #12]
 8000ab4:	330c      	adds	r3, #12
 8000ab6:	4298      	cmp	r0, r3
 8000ab8:	d0c6      	beq.n	8000a48 <VectorD8+0x38>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;

  tqp->next             = tp->queue.next;
 8000aba:	6802      	ldr	r2, [r0, #0]
 8000abc:	60ea      	str	r2, [r5, #12]
  tqp->next->queue.prev = (thread_t *)tqp;
 8000abe:	6053      	str	r3, [r2, #4]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	6203      	str	r3, [r0, #32]
  (void) chSchReadyI(tp);
 8000ac4:	f001 f9fc 	bl	8001ec0 <chSchReadyI>
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8000ac8:	232f      	movs	r3, #47	; 0x2f
    sr = u->SR;
 8000aca:	6834      	ldr	r4, [r6, #0]
 8000acc:	b2a4      	uxth	r4, r4
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8000ace:	4223      	tst	r3, r4
 8000ad0:	d1bf      	bne.n	8000a52 <VectorD8+0x42>
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	f383 8811 	msr	BASEPRI, r3
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
 8000ad8:	4642      	mov	r2, r8
 8000ada:	3380      	adds	r3, #128	; 0x80
 8000adc:	4213      	tst	r3, r2
 8000ade:	d001      	beq.n	8000ae4 <VectorD8+0xd4>
 8000ae0:	4223      	tst	r3, r4
 8000ae2:	d138      	bne.n	8000b56 <VectorD8+0x146>
  if (sr & USART_SR_TC) {
 8000ae4:	0663      	lsls	r3, r4, #25
 8000ae6:	d510      	bpl.n	8000b0a <VectorD8+0xfa>
 8000ae8:	2320      	movs	r3, #32
 8000aea:	f383 8811 	msr	BASEPRI, r3
    if (oqIsEmptyI(&sdp->oqueue))
 8000aee:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8000af0:	6caa      	ldr	r2, [r5, #72]	; 0x48
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d052      	beq.n	8000b9c <VectorD8+0x18c>
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 8000af6:	4642      	mov	r2, r8
 8000af8:	4b35      	ldr	r3, [pc, #212]	; (8000bd0 <VectorD8+0x1c0>)
 8000afa:	401a      	ands	r2, r3
    u->SR = ~USART_SR_TC;
 8000afc:	2341      	movs	r3, #65	; 0x41
 8000afe:	425b      	negs	r3, r3
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 8000b00:	60f2      	str	r2, [r6, #12]
    u->SR = ~USART_SR_TC;
 8000b02:	6033      	str	r3, [r6, #0]
 8000b04:	2300      	movs	r3, #0
 8000b06:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD2);

  OSAL_IRQ_EPILOGUE();
 8000b0a:	f000 ff39 	bl	8001980 <_port_irq_epilogue>
}
 8000b0e:	bc1c      	pop	{r2, r3, r4}
 8000b10:	4690      	mov	r8, r2
 8000b12:	4699      	mov	r9, r3
 8000b14:	46a2      	mov	sl, r4
 8000b16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b18:	1d28      	adds	r0, r5, #4
 8000b1a:	2104      	movs	r1, #4
 8000b1c:	f001 f9e0 	bl	8001ee0 <chEvtBroadcastFlagsI>
  if (iqIsFullI(iqp)) {
 8000b20:	6a2b      	ldr	r3, [r5, #32]
 8000b22:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8000b24:	4293      	cmp	r3, r2
 8000b26:	d1b5      	bne.n	8000a94 <VectorD8+0x84>
 8000b28:	696a      	ldr	r2, [r5, #20]
 8000b2a:	2a00      	cmp	r2, #0
 8000b2c:	d0b2      	beq.n	8000a94 <VectorD8+0x84>
 8000b2e:	2180      	movs	r1, #128	; 0x80
 8000b30:	1d28      	adds	r0, r5, #4
 8000b32:	00c9      	lsls	r1, r1, #3
 8000b34:	f001 f9d4 	bl	8001ee0 <chEvtBroadcastFlagsI>
 8000b38:	e786      	b.n	8000a48 <VectorD8+0x38>
 8000b3a:	2320      	movs	r3, #32
 8000b3c:	f383 8811 	msr	BASEPRI, r3
 8000b40:	2180      	movs	r1, #128	; 0x80
 8000b42:	1d28      	adds	r0, r5, #4
 8000b44:	0089      	lsls	r1, r1, #2
 8000b46:	f001 f9cb 	bl	8001ee0 <chEvtBroadcastFlagsI>
    u->SR = ~USART_SR_LBD;
 8000b4a:	4b22      	ldr	r3, [pc, #136]	; (8000bd4 <VectorD8+0x1c4>)
 8000b4c:	6033      	str	r3, [r6, #0]
 8000b4e:	2300      	movs	r3, #0
 8000b50:	f383 8811 	msr	BASEPRI, r3
 8000b54:	e76a      	b.n	8000a2c <VectorD8+0x1c>
 8000b56:	3b60      	subs	r3, #96	; 0x60
 8000b58:	f383 8811 	msr	BASEPRI, r3
msg_t oqGetI(output_queue_t *oqp) {
  uint8_t b;

  osalDbgCheckClassI();

  if (oqIsEmptyI(oqp)) {
 8000b5c:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8000b5e:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 8000b60:	429a      	cmp	r2, r3
 8000b62:	d023      	beq.n	8000bac <VectorD8+0x19c>
    return MSG_TIMEOUT;
  }

  oqp->q_counter++;
 8000b64:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8000b66:	3201      	adds	r2, #1
 8000b68:	63aa      	str	r2, [r5, #56]	; 0x38
  b = *oqp->q_rdptr++;
 8000b6a:	1c5a      	adds	r2, r3, #1
 8000b6c:	64aa      	str	r2, [r5, #72]	; 0x48
 8000b6e:	781f      	ldrb	r7, [r3, #0]
  if (oqp->q_rdptr >= oqp->q_top) {
 8000b70:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8000b72:	429a      	cmp	r2, r3
 8000b74:	d301      	bcc.n	8000b7a <VectorD8+0x16a>
    oqp->q_rdptr = oqp->q_buffer;
 8000b76:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8000b78:	64ab      	str	r3, [r5, #72]	; 0x48
 8000b7a:	002b      	movs	r3, r5
  return (bool)(tqp->next != (const thread_t *)tqp);
 8000b7c:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8000b7e:	3330      	adds	r3, #48	; 0x30
 8000b80:	4298      	cmp	r0, r3
 8000b82:	d006      	beq.n	8000b92 <VectorD8+0x182>
  tqp->next             = tp->queue.next;
 8000b84:	6802      	ldr	r2, [r0, #0]
 8000b86:	632a      	str	r2, [r5, #48]	; 0x30
  tqp->next->queue.prev = (thread_t *)tqp;
 8000b88:	6053      	str	r3, [r2, #4]
  tp->u.rdymsg = msg;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	6203      	str	r3, [r0, #32]
  (void) chSchReadyI(tp);
 8000b8e:	f001 f997 	bl	8001ec0 <chSchReadyI>
      u->DR = b;
 8000b92:	6077      	str	r7, [r6, #4]
 8000b94:	2300      	movs	r3, #0
 8000b96:	f383 8811 	msr	BASEPRI, r3
 8000b9a:	e7a3      	b.n	8000ae4 <VectorD8+0xd4>
    if (oqIsEmptyI(&sdp->oqueue))
 8000b9c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d0a9      	beq.n	8000af6 <VectorD8+0xe6>
 8000ba2:	1d28      	adds	r0, r5, #4
 8000ba4:	2110      	movs	r1, #16
 8000ba6:	f001 f99b 	bl	8001ee0 <chEvtBroadcastFlagsI>
 8000baa:	e7a4      	b.n	8000af6 <VectorD8+0xe6>
  if (oqIsEmptyI(oqp)) {
 8000bac:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8000bae:	2a00      	cmp	r2, #0
 8000bb0:	d0d8      	beq.n	8000b64 <VectorD8+0x154>
 8000bb2:	1d28      	adds	r0, r5, #4
 8000bb4:	2108      	movs	r1, #8
 8000bb6:	f001 f993 	bl	8001ee0 <chEvtBroadcastFlagsI>
      u->CR1 = (cr1 & ~USART_CR1_TXEIE) | USART_CR1_TCIE;
 8000bba:	4642      	mov	r2, r8
 8000bbc:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <VectorD8+0x1c8>)
 8000bbe:	401a      	ands	r2, r3
 8000bc0:	2340      	movs	r3, #64	; 0x40
 8000bc2:	4313      	orrs	r3, r2
 8000bc4:	60f3      	str	r3, [r6, #12]
 8000bc6:	e7e5      	b.n	8000b94 <VectorD8+0x184>
 8000bc8:	200009fc 	.word	0x200009fc
 8000bcc:	20000a00 	.word	0x20000a00
 8000bd0:	0000ffbf 	.word	0x0000ffbf
 8000bd4:	fffffeff 	.word	0xfffffeff
 8000bd8:	0000ff3f 	.word	0x0000ff3f
 8000bdc:	00000000 	.word	0x00000000

08000be0 <VectorBC>:
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @notapi
 */
static void i2c_lld_serve_event_interrupt(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;
 8000be0:	4a3d      	ldr	r2, [pc, #244]	; (8000cd8 <VectorBC+0xf8>)
/**
 * @brief   I2C1 event interrupt handler.
 *
 * @notapi
 */
OSAL_IRQ_HANDLER(STM32_I2C1_EVENT_HANDLER) {
 8000be2:	b570      	push	{r4, r5, r6, lr}
  I2C_TypeDef *dp = i2cp->i2c;
 8000be4:	6b54      	ldr	r4, [r2, #52]	; 0x34
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 8000be6:	493d      	ldr	r1, [pc, #244]	; (8000cdc <VectorBC+0xfc>)
  uint32_t regSR2 = dp->SR2;
 8000be8:	69a3      	ldr	r3, [r4, #24]
  uint32_t event = dp->SR1;
 8000bea:	6965      	ldr	r5, [r4, #20]
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 8000bec:	041b      	lsls	r3, r3, #16
 8000bee:	432b      	orrs	r3, r5
 8000bf0:	021b      	lsls	r3, r3, #8
 8000bf2:	0a1b      	lsrs	r3, r3, #8
 8000bf4:	428b      	cmp	r3, r1
 8000bf6:	d04c      	beq.n	8000c92 <VectorBC+0xb2>
 8000bf8:	d81e      	bhi.n	8000c38 <VectorBC+0x58>
 8000bfa:	4939      	ldr	r1, [pc, #228]	; (8000ce0 <VectorBC+0x100>)
 8000bfc:	428b      	cmp	r3, r1
 8000bfe:	d03b      	beq.n	8000c78 <VectorBC+0x98>
 8000c00:	4938      	ldr	r1, [pc, #224]	; (8000ce4 <VectorBC+0x104>)
 8000c02:	428b      	cmp	r3, r1
 8000c04:	d111      	bne.n	8000c2a <VectorBC+0x4a>
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8000c06:	6861      	ldr	r1, [r4, #4]
 8000c08:	4b37      	ldr	r3, [pc, #220]	; (8000ce8 <VectorBC+0x108>)
 8000c0a:	400b      	ands	r3, r1
 8000c0c:	6063      	str	r3, [r4, #4]
    dmaStreamEnable(i2cp->dmarx);
 8000c0e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8000c10:	2201      	movs	r2, #1
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	6819      	ldr	r1, [r3, #0]
 8000c16:	430a      	orrs	r2, r1
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
 8000c18:	2180      	movs	r1, #128	; 0x80
    dmaStreamEnable(i2cp->dmarx);
 8000c1a:	601a      	str	r2, [r3, #0]
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
 8000c1c:	6862      	ldr	r2, [r4, #4]
 8000c1e:	0149      	lsls	r1, r1, #5
 8000c20:	430a      	orrs	r2, r1
 8000c22:	6062      	str	r2, [r4, #4]
    if (dmaStreamGetTransactionSize(i2cp->dmarx) < 2)
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	2b01      	cmp	r3, #1
 8000c28:	d951      	bls.n	8000cce <VectorBC+0xee>
  if (event & (I2C_SR1_ADDR | I2C_SR1_ADD10))
 8000c2a:	230a      	movs	r3, #10
 8000c2c:	422b      	tst	r3, r5
 8000c2e:	d000      	beq.n	8000c32 <VectorBC+0x52>
    (void)dp->SR2;
 8000c30:	69a3      	ldr	r3, [r4, #24]

  OSAL_IRQ_PROLOGUE();

  i2c_lld_serve_event_interrupt(&I2CD1);

  OSAL_IRQ_EPILOGUE();
 8000c32:	f000 fea5 	bl	8001980 <_port_irq_epilogue>
}
 8000c36:	bd70      	pop	{r4, r5, r6, pc}
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 8000c38:	492c      	ldr	r1, [pc, #176]	; (8000cec <VectorBC+0x10c>)
 8000c3a:	428b      	cmp	r3, r1
 8000c3c:	d011      	beq.n	8000c62 <VectorBC+0x82>
 8000c3e:	492c      	ldr	r1, [pc, #176]	; (8000cf0 <VectorBC+0x110>)
 8000c40:	428b      	cmp	r3, r1
 8000c42:	d1f2      	bne.n	8000c2a <VectorBC+0x4a>
    if (dmaStreamGetTransactionSize(i2cp->dmarx) > 0) {
 8000c44:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d028      	beq.n	8000ca0 <VectorBC+0xc0>
      i2cp->addr |= 0x01;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	8c11      	ldrh	r1, [r2, #32]
 8000c52:	430b      	orrs	r3, r1
 8000c54:	8413      	strh	r3, [r2, #32]
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 8000c56:	22a0      	movs	r2, #160	; 0xa0
 8000c58:	6823      	ldr	r3, [r4, #0]
 8000c5a:	00d2      	lsls	r2, r2, #3
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	6023      	str	r3, [r4, #0]
 8000c60:	e7e7      	b.n	8000c32 <VectorBC+0x52>
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8000c62:	6861      	ldr	r1, [r4, #4]
 8000c64:	4b20      	ldr	r3, [pc, #128]	; (8000ce8 <VectorBC+0x108>)
 8000c66:	400b      	ands	r3, r1
 8000c68:	6063      	str	r3, [r4, #4]
    dmaStreamEnable(i2cp->dmatx);
 8000c6a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000c6c:	681a      	ldr	r2, [r3, #0]
 8000c6e:	2301      	movs	r3, #1
 8000c70:	6811      	ldr	r1, [r2, #0]
 8000c72:	430b      	orrs	r3, r1
 8000c74:	6013      	str	r3, [r2, #0]
 8000c76:	e7d8      	b.n	8000c2a <VectorBC+0x4a>
    if ((i2cp->addr >> 8) > 0) { 
 8000c78:	8c12      	ldrh	r2, [r2, #32]
 8000c7a:	0a13      	lsrs	r3, r2, #8
 8000c7c:	d00e      	beq.n	8000c9c <VectorBC+0xbc>
      dp->DR = 0xF0 | (0x6 & (i2cp->addr >> 8)) | (0x1 & i2cp->addr);
 8000c7e:	2101      	movs	r1, #1
 8000c80:	400a      	ands	r2, r1
 8000c82:	21f0      	movs	r1, #240	; 0xf0
 8000c84:	430a      	orrs	r2, r1
 8000c86:	2106      	movs	r1, #6
 8000c88:	400b      	ands	r3, r1
 8000c8a:	4313      	orrs	r3, r2
 8000c8c:	b29b      	uxth	r3, r3
 8000c8e:	6123      	str	r3, [r4, #16]
 8000c90:	e7cb      	b.n	8000c2a <VectorBC+0x4a>
    dp->DR = (0xFF & (i2cp->addr >> 1));
 8000c92:	8c13      	ldrh	r3, [r2, #32]
 8000c94:	05db      	lsls	r3, r3, #23
 8000c96:	0e1b      	lsrs	r3, r3, #24
 8000c98:	6123      	str	r3, [r4, #16]
 8000c9a:	e7c6      	b.n	8000c2a <VectorBC+0x4a>
      dp->DR = i2cp->addr;
 8000c9c:	6122      	str	r2, [r4, #16]
 8000c9e:	e7c4      	b.n	8000c2a <VectorBC+0x4a>
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8000ca0:	6860      	ldr	r0, [r4, #4]
 8000ca2:	4911      	ldr	r1, [pc, #68]	; (8000ce8 <VectorBC+0x108>)
 8000ca4:	4001      	ands	r1, r0
    dp->CR1 |= I2C_CR1_STOP;
 8000ca6:	2080      	movs	r0, #128	; 0x80
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8000ca8:	6061      	str	r1, [r4, #4]
    dp->CR1 |= I2C_CR1_STOP;
 8000caa:	6821      	ldr	r1, [r4, #0]
 8000cac:	0080      	lsls	r0, r0, #2
 8000cae:	4301      	orrs	r1, r0
 8000cb0:	6021      	str	r1, [r4, #0]
 8000cb2:	2120      	movs	r1, #32
 8000cb4:	f381 8811 	msr	BASEPRI, r1
  if (*trp != NULL) {
 8000cb8:	69d0      	ldr	r0, [r2, #28]
 8000cba:	2800      	cmp	r0, #0
 8000cbc:	d003      	beq.n	8000cc6 <VectorBC+0xe6>
    *trp = NULL;
 8000cbe:	61d3      	str	r3, [r2, #28]
    tp->u.rdymsg = msg;
 8000cc0:	6203      	str	r3, [r0, #32]
    (void) chSchReadyI(tp);
 8000cc2:	f001 f8fd 	bl	8001ec0 <chSchReadyI>
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	f383 8811 	msr	BASEPRI, r3
 8000ccc:	e7ad      	b.n	8000c2a <VectorBC+0x4a>
      dp->CR1 &= ~I2C_CR1_ACK;
 8000cce:	6822      	ldr	r2, [r4, #0]
 8000cd0:	4b08      	ldr	r3, [pc, #32]	; (8000cf4 <VectorBC+0x114>)
 8000cd2:	4013      	ands	r3, r2
 8000cd4:	6023      	str	r3, [r4, #0]
 8000cd6:	e7a8      	b.n	8000c2a <VectorBC+0x4a>
 8000cd8:	200009c4 	.word	0x200009c4
 8000cdc:	00030008 	.word	0x00030008
 8000ce0:	00030001 	.word	0x00030001
 8000ce4:	00030002 	.word	0x00030002
 8000ce8:	fffffdff 	.word	0xfffffdff
 8000cec:	00070082 	.word	0x00070082
 8000cf0:	00070084 	.word	0x00070084
 8000cf4:	fffffbff 	.word	0xfffffbff
	...

08000d00 <VectorC0>:

/**
 * @brief   I2C1 error interrupt handler.
 */
OSAL_IRQ_HANDLER(STM32_I2C1_ERROR_HANDLER) {
 8000d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint16_t sr = I2CD1.i2c->SR1;

  OSAL_IRQ_PROLOGUE();

  I2CD1.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
 8000d02:	23df      	movs	r3, #223	; 0xdf
  uint16_t sr = I2CD1.i2c->SR1;
 8000d04:	4c34      	ldr	r4, [pc, #208]	; (8000dd8 <VectorC0+0xd8>)
  I2CD1.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
 8000d06:	021b      	lsls	r3, r3, #8
  uint16_t sr = I2CD1.i2c->SR1;
 8000d08:	6b65      	ldr	r5, [r4, #52]	; 0x34
  dmaStreamDisable(i2cp->dmatx);
 8000d0a:	211f      	movs	r1, #31
  uint16_t sr = I2CD1.i2c->SR1;
 8000d0c:	696e      	ldr	r6, [r5, #20]
  dmaStreamDisable(i2cp->dmatx);
 8000d0e:	6b27      	ldr	r7, [r4, #48]	; 0x30
  I2CD1.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
 8000d10:	4033      	ands	r3, r6
 8000d12:	43db      	mvns	r3, r3
  dmaStreamDisable(i2cp->dmatx);
 8000d14:	683a      	ldr	r2, [r7, #0]
  I2CD1.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
 8000d16:	616b      	str	r3, [r5, #20]
  dmaStreamDisable(i2cp->dmatx);
 8000d18:	6813      	ldr	r3, [r2, #0]
  uint16_t sr = I2CD1.i2c->SR1;
 8000d1a:	b2b0      	uxth	r0, r6
  dmaStreamDisable(i2cp->dmatx);
 8000d1c:	438b      	bics	r3, r1
 8000d1e:	6013      	str	r3, [r2, #0]
 8000d20:	391e      	subs	r1, #30
 8000d22:	6813      	ldr	r3, [r2, #0]
 8000d24:	4219      	tst	r1, r3
 8000d26:	d1fc      	bne.n	8000d22 <VectorC0+0x22>
 8000d28:	233d      	movs	r3, #61	; 0x3d
 8000d2a:	7a39      	ldrb	r1, [r7, #8]
 8000d2c:	687a      	ldr	r2, [r7, #4]
 8000d2e:	408b      	lsls	r3, r1
  dmaStreamDisable(i2cp->dmarx);
 8000d30:	211f      	movs	r1, #31
 8000d32:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
  dmaStreamDisable(i2cp->dmatx);
 8000d34:	6013      	str	r3, [r2, #0]
  dmaStreamDisable(i2cp->dmarx);
 8000d36:	683a      	ldr	r2, [r7, #0]
 8000d38:	6813      	ldr	r3, [r2, #0]
 8000d3a:	438b      	bics	r3, r1
 8000d3c:	6013      	str	r3, [r2, #0]
 8000d3e:	391e      	subs	r1, #30
 8000d40:	6813      	ldr	r3, [r2, #0]
 8000d42:	400b      	ands	r3, r1
 8000d44:	d1fc      	bne.n	8000d40 <VectorC0+0x40>
 8000d46:	223d      	movs	r2, #61	; 0x3d
 8000d48:	6879      	ldr	r1, [r7, #4]
 8000d4a:	7a3f      	ldrb	r7, [r7, #8]
 8000d4c:	40ba      	lsls	r2, r7
 8000d4e:	600a      	str	r2, [r1, #0]
  if (sr & I2C_SR1_BERR)                            /* Bus error.           */
 8000d50:	05c2      	lsls	r2, r0, #23
 8000d52:	d500      	bpl.n	8000d56 <VectorC0+0x56>
    i2cp->errors |= I2C_BUS_ERROR;
 8000d54:	2301      	movs	r3, #1
 8000d56:	60a3      	str	r3, [r4, #8]
  if (sr & I2C_SR1_ARLO)                            /* Arbitration lost.    */
 8000d58:	0582      	lsls	r2, r0, #22
 8000d5a:	d502      	bpl.n	8000d62 <VectorC0+0x62>
    i2cp->errors |= I2C_ARBITRATION_LOST;
 8000d5c:	2202      	movs	r2, #2
 8000d5e:	4313      	orrs	r3, r2
 8000d60:	60a3      	str	r3, [r4, #8]
  if (sr & I2C_SR1_AF) {                            /* Acknowledge fail.    */
 8000d62:	0542      	lsls	r2, r0, #21
 8000d64:	d50b      	bpl.n	8000d7e <VectorC0+0x7e>
    i2cp->i2c->CR2 &= ~I2C_CR2_ITEVTEN;
 8000d66:	6869      	ldr	r1, [r5, #4]
 8000d68:	4a1c      	ldr	r2, [pc, #112]	; (8000ddc <VectorC0+0xdc>)
 8000d6a:	400a      	ands	r2, r1
    i2cp->i2c->CR1 |= I2C_CR1_STOP;                 /* Setting stop bit.    */
 8000d6c:	2180      	movs	r1, #128	; 0x80
    i2cp->i2c->CR2 &= ~I2C_CR2_ITEVTEN;
 8000d6e:	606a      	str	r2, [r5, #4]
    i2cp->i2c->CR1 |= I2C_CR1_STOP;                 /* Setting stop bit.    */
 8000d70:	682a      	ldr	r2, [r5, #0]
 8000d72:	0089      	lsls	r1, r1, #2
 8000d74:	430a      	orrs	r2, r1
 8000d76:	602a      	str	r2, [r5, #0]
    i2cp->errors |= I2C_ACK_FAILURE;
 8000d78:	2204      	movs	r2, #4
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	60a3      	str	r3, [r4, #8]
  if (sr & I2C_SR1_OVR)                             /* Overrun.             */
 8000d7e:	0502      	lsls	r2, r0, #20
 8000d80:	d502      	bpl.n	8000d88 <VectorC0+0x88>
    i2cp->errors |= I2C_OVERRUN;
 8000d82:	2208      	movs	r2, #8
 8000d84:	4313      	orrs	r3, r2
 8000d86:	60a3      	str	r3, [r4, #8]
  if (sr & I2C_SR1_TIMEOUT)                         /* SMBus Timeout.       */
 8000d88:	0442      	lsls	r2, r0, #17
 8000d8a:	d502      	bpl.n	8000d92 <VectorC0+0x92>
    i2cp->errors |= I2C_TIMEOUT;
 8000d8c:	2220      	movs	r2, #32
 8000d8e:	4313      	orrs	r3, r2
 8000d90:	60a3      	str	r3, [r4, #8]
  if (sr & I2C_SR1_PECERR)                          /* PEC error.           */
 8000d92:	04c2      	lsls	r2, r0, #19
 8000d94:	d516      	bpl.n	8000dc4 <VectorC0+0xc4>
    i2cp->errors |= I2C_PEC_ERROR;
 8000d96:	2210      	movs	r2, #16
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	60a3      	str	r3, [r4, #8]
  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 8000d9c:	0432      	lsls	r2, r6, #16
 8000d9e:	d416      	bmi.n	8000dce <VectorC0+0xce>
 8000da0:	2320      	movs	r3, #32
 8000da2:	f383 8811 	msr	BASEPRI, r3
  if (*trp != NULL) {
 8000da6:	69e0      	ldr	r0, [r4, #28]
 8000da8:	2800      	cmp	r0, #0
 8000daa:	d005      	beq.n	8000db8 <VectorC0+0xb8>
    *trp = NULL;
 8000dac:	2300      	movs	r3, #0
 8000dae:	61e3      	str	r3, [r4, #28]
    tp->u.rdymsg = msg;
 8000db0:	3b02      	subs	r3, #2
 8000db2:	6203      	str	r3, [r0, #32]
    (void) chSchReadyI(tp);
 8000db4:	f001 f884 	bl	8001ec0 <chSchReadyI>
 8000db8:	2300      	movs	r3, #0
 8000dba:	f383 8811 	msr	BASEPRI, r3
  i2c_lld_serve_error_interrupt(&I2CD1, sr);

  OSAL_IRQ_EPILOGUE();
 8000dbe:	f000 fddf 	bl	8001980 <_port_irq_epilogue>
}
 8000dc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 8000dc4:	0432      	lsls	r2, r6, #16
 8000dc6:	d402      	bmi.n	8000dce <VectorC0+0xce>
  if (i2cp->errors != I2C_NO_ERROR)
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d0f8      	beq.n	8000dbe <VectorC0+0xbe>
 8000dcc:	e7e8      	b.n	8000da0 <VectorC0+0xa0>
    i2cp->errors |= I2C_SMB_ALERT;
 8000dce:	2240      	movs	r2, #64	; 0x40
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	60a3      	str	r3, [r4, #8]
 8000dd4:	e7e4      	b.n	8000da0 <VectorC0+0xa0>
 8000dd6:	46c0      	nop			; (mov r8, r8)
 8000dd8:	200009c4 	.word	0x200009c4
 8000ddc:	fffffdff 	.word	0xfffffdff

08000de0 <ch_ltoa.lto_priv.50>:
  while (--i);

  return p;
}

static char *ch_ltoa(char *p, long num, unsigned radix) {
 8000de0:	b5f0      	push	{r4, r5, r6, r7, lr}
  q = p + MAX_FILLER;
 8000de2:	230b      	movs	r3, #11
static char *ch_ltoa(char *p, long num, unsigned radix) {
 8000de4:	4645      	mov	r5, r8
 8000de6:	4680      	mov	r8, r0
 8000de8:	4657      	mov	r7, sl
 8000dea:	464e      	mov	r6, r9
  q = p + MAX_FILLER;
 8000dec:	4443      	add	r3, r8
static char *ch_ltoa(char *p, long num, unsigned radix) {
 8000dee:	b4e0      	push	{r5, r6, r7}
 8000df0:	4692      	mov	sl, r2
 8000df2:	000f      	movs	r7, r1
  q = p + MAX_FILLER;
 8000df4:	4699      	mov	r9, r3
 8000df6:	000e      	movs	r6, r1
 8000df8:	001d      	movs	r5, r3
    i = (int)(l % radix);
 8000dfa:	4651      	mov	r1, sl
 8000dfc:	0038      	movs	r0, r7
 8000dfe:	f7ff fae3 	bl	80003c8 <__aeabi_uidivmod>
    i += '0';
 8000e02:	000c      	movs	r4, r1
 8000e04:	3430      	adds	r4, #48	; 0x30
    if (i > '9')
 8000e06:	2c39      	cmp	r4, #57	; 0x39
 8000e08:	dd01      	ble.n	8000e0e <ch_ltoa.lto_priv.50+0x2e>
      i += 'A' - '0' - 10;
 8000e0a:	3137      	adds	r1, #55	; 0x37
 8000e0c:	000c      	movs	r4, r1
    *--q = i;
 8000e0e:	3d01      	subs	r5, #1
 8000e10:	b2e4      	uxtb	r4, r4
    l /= radix;
 8000e12:	4651      	mov	r1, sl
 8000e14:	0038      	movs	r0, r7
    *--q = i;
 8000e16:	702c      	strb	r4, [r5, #0]
    l /= radix;
 8000e18:	f7ff fa50 	bl	80002bc <__aeabi_uidiv>
  } while ((ll /= radix) != 0);
 8000e1c:	4651      	mov	r1, sl
    l /= radix;
 8000e1e:	0007      	movs	r7, r0
  } while ((ll /= radix) != 0);
 8000e20:	0030      	movs	r0, r6
 8000e22:	f7ff fa4b 	bl	80002bc <__aeabi_uidiv>
 8000e26:	1e06      	subs	r6, r0, #0
 8000e28:	d1e7      	bne.n	8000dfa <ch_ltoa.lto_priv.50+0x1a>
 8000e2a:	464a      	mov	r2, r9
 8000e2c:	4643      	mov	r3, r8
 8000e2e:	1b50      	subs	r0, r2, r5
 8000e30:	1818      	adds	r0, r3, r0
 8000e32:	e000      	b.n	8000e36 <ch_ltoa.lto_priv.50+0x56>
 8000e34:	782c      	ldrb	r4, [r5, #0]
    *p++ = *q++;
 8000e36:	701c      	strb	r4, [r3, #0]
 8000e38:	3301      	adds	r3, #1
 8000e3a:	3501      	adds	r5, #1
  while (--i);
 8000e3c:	4298      	cmp	r0, r3
 8000e3e:	d1f9      	bne.n	8000e34 <ch_ltoa.lto_priv.50+0x54>

  return long_to_string_with_divisor(p, num, radix, 0);
}
 8000e40:	bc1c      	pop	{r2, r3, r4}
 8000e42:	4690      	mov	r8, r2
 8000e44:	4699      	mov	r9, r3
 8000e46:	46a2      	mov	sl, r4
 8000e48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e4a:	46c0      	nop			; (mov r8, r8)
 8000e4c:	0000      	movs	r0, r0
	...

08000e50 <__early_init>:
#if !STM32_NO_INIT
  /* PWR clock enable.*/
#if defined(HAL_USE_RTC) && defined(RCC_APB1ENR_RTCAPBEN)
  RCC->APB1ENR = RCC_APB1ENR_PWREN | RCC_APB1ENR_RTCAPBEN;
#else
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8000e50:	2380      	movs	r3, #128	; 0x80
#endif

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 8000e52:	22c0      	movs	r2, #192	; 0xc0
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8000e54:	4953      	ldr	r1, [pc, #332]	; (8000fa4 <__early_init+0x154>)
 8000e56:	055b      	lsls	r3, r3, #21
 8000e58:	640b      	str	r3, [r1, #64]	; 0x40
  PWR->CR = STM32_VOS;
 8000e5a:	4b53      	ldr	r3, [pc, #332]	; (8000fa8 <__early_init+0x158>)
 8000e5c:	0212      	lsls	r2, r2, #8
 8000e5e:	601a      	str	r2, [r3, #0]
  PWR->CR = 0;
#endif

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8000e60:	2301      	movs	r3, #1
  while (!(RCC->CR & RCC_CR_HSIRDY))
 8000e62:	2002      	movs	r0, #2
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8000e64:	680a      	ldr	r2, [r1, #0]
 8000e66:	4313      	orrs	r3, r2
 8000e68:	600b      	str	r3, [r1, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 8000e6a:	680a      	ldr	r2, [r1, #0]
 8000e6c:	4b4d      	ldr	r3, [pc, #308]	; (8000fa4 <__early_init+0x154>)
 8000e6e:	4210      	tst	r0, r2
 8000e70:	d0fb      	beq.n	8000e6a <__early_init+0x1a>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
 8000e72:	2103      	movs	r1, #3
 8000e74:	689a      	ldr	r2, [r3, #8]
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8000e76:	200c      	movs	r0, #12
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
 8000e78:	438a      	bics	r2, r1
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8000e7a:	0019      	movs	r1, r3
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
 8000e7c:	609a      	str	r2, [r3, #8]
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
 8000e7e:	689a      	ldr	r2, [r3, #8]
 8000e80:	609a      	str	r2, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8000e82:	688b      	ldr	r3, [r1, #8]
 8000e84:	4a47      	ldr	r2, [pc, #284]	; (8000fa4 <__early_init+0x154>)
 8000e86:	4003      	ands	r3, r0
 8000e88:	d1fb      	bne.n	8000e82 <__early_init+0x32>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8000e8a:	20f9      	movs	r0, #249	; 0xf9
 8000e8c:	6811      	ldr	r1, [r2, #0]
 8000e8e:	4001      	ands	r1, r0
 8000e90:	6011      	str	r1, [r2, #0]
  
#if STM32_HSE_ENABLED
  /* HSE activation.*/
#if defined(STM32_HSE_BYPASS)
  /* HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
 8000e92:	21a0      	movs	r1, #160	; 0xa0
#else
  /* No HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON;
#endif
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 8000e94:	2080      	movs	r0, #128	; 0x80
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 8000e96:	6093      	str	r3, [r2, #8]
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
 8000e98:	6813      	ldr	r3, [r2, #0]
 8000e9a:	02c9      	lsls	r1, r1, #11
 8000e9c:	430b      	orrs	r3, r1
 8000e9e:	6013      	str	r3, [r2, #0]
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 8000ea0:	0280      	lsls	r0, r0, #10
 8000ea2:	6811      	ldr	r1, [r2, #0]
 8000ea4:	4b3f      	ldr	r3, [pc, #252]	; (8000fa4 <__early_init+0x154>)
 8000ea6:	4201      	tst	r1, r0
 8000ea8:	d0fb      	beq.n	8000ea2 <__early_init+0x52>
    ;                           /* Waits until HSE is stable.               */
#endif

#if STM32_LSI_ENABLED
  /* LSI activation.*/
  RCC->CSR |= RCC_CSR_LSION;
 8000eaa:	2201      	movs	r2, #1
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 8000eac:	2002      	movs	r0, #2
  RCC->CSR |= RCC_CSR_LSION;
 8000eae:	6f59      	ldr	r1, [r3, #116]	; 0x74
 8000eb0:	430a      	orrs	r2, r1
 8000eb2:	675a      	str	r2, [r3, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 8000eb4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8000eb6:	493b      	ldr	r1, [pc, #236]	; (8000fa4 <__early_init+0x154>)
 8000eb8:	4210      	tst	r0, r2
 8000eba:	d0fb      	beq.n	8000eb4 <__early_init+0x64>

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 8000ebc:	2280      	movs	r2, #128	; 0x80
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
 8000ebe:	4b3b      	ldr	r3, [pc, #236]	; (8000fac <__early_init+0x15c>)
  RCC->CR |= RCC_CR_PLLON;
 8000ec0:	0452      	lsls	r2, r2, #17
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
 8000ec2:	604b      	str	r3, [r1, #4]
  RCC->CR |= RCC_CR_PLLON;
 8000ec4:	680b      	ldr	r3, [r1, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 8000ec6:	4838      	ldr	r0, [pc, #224]	; (8000fa8 <__early_init+0x158>)
  RCC->CR |= RCC_CR_PLLON;
 8000ec8:	4313      	orrs	r3, r2
 8000eca:	600b      	str	r3, [r1, #0]
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 8000ecc:	2180      	movs	r1, #128	; 0x80
 8000ece:	01c9      	lsls	r1, r1, #7
 8000ed0:	6842      	ldr	r2, [r0, #4]
 8000ed2:	4b35      	ldr	r3, [pc, #212]	; (8000fa8 <__early_init+0x158>)
 8000ed4:	420a      	tst	r2, r1
 8000ed6:	d0fb      	beq.n	8000ed0 <__early_init+0x80>
    ;                           /* Waits until power regulator is stable.   */

#if STM32_OVERDRIVE_REQUIRED
  /* Overdrive activation performed after activating the PLL in order to save
     time as recommended in RM in "Entering Over-drive mode" paragraph.*/
  PWR->CR |= PWR_CR_ODEN;
 8000ed8:	2080      	movs	r0, #128	; 0x80
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	0240      	lsls	r0, r0, #9
 8000ede:	4302      	orrs	r2, r0
 8000ee0:	601a      	str	r2, [r3, #0]
  while (!(PWR->CSR & PWR_CSR_ODRDY))
 8000ee2:	001a      	movs	r2, r3
 8000ee4:	6851      	ldr	r1, [r2, #4]
 8000ee6:	4b30      	ldr	r3, [pc, #192]	; (8000fa8 <__early_init+0x158>)
 8000ee8:	4201      	tst	r1, r0
 8000eea:	d0fb      	beq.n	8000ee4 <__early_init+0x94>
      ;
  PWR->CR |= PWR_CR_ODSWEN;
 8000eec:	2180      	movs	r1, #128	; 0x80
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	0289      	lsls	r1, r1, #10
 8000ef2:	430a      	orrs	r2, r1
 8000ef4:	601a      	str	r2, [r3, #0]
  while (!(PWR->CSR & PWR_CSR_ODSWRDY))
 8000ef6:	685a      	ldr	r2, [r3, #4]
 8000ef8:	420a      	tst	r2, r1
 8000efa:	d0fc      	beq.n	8000ef6 <__early_init+0xa6>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */
#endif /* defined(STM32F4XX) */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
 8000efc:	2180      	movs	r1, #128	; 0x80
 8000efe:	4829      	ldr	r0, [pc, #164]	; (8000fa4 <__early_init+0x154>)
 8000f00:	0489      	lsls	r1, r1, #18
 8000f02:	6802      	ldr	r2, [r0, #0]
 8000f04:	4b27      	ldr	r3, [pc, #156]	; (8000fa4 <__early_init+0x154>)
 8000f06:	420a      	tst	r2, r1
 8000f08:	d0fb      	beq.n	8000f02 <__early_init+0xb2>
    ;
#endif /* STM32_ACTIVATE_PLL */

#if STM32_ACTIVATE_PLLI2S
  /* PLLI2S activation.*/
  RCC->PLLI2SCFGR = STM32_PLLI2SR | STM32_PLLI2SN | STM32_PLLI2SP |
 8000f0a:	2284      	movs	r2, #132	; 0x84
 8000f0c:	4928      	ldr	r1, [pc, #160]	; (8000fb0 <__early_init+0x160>)
                    STM32_PLLI2SQ | STM32_PLLI2SM;
  RCC->CR |= RCC_CR_PLLI2SON;

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLI2SRDY))
 8000f0e:	2080      	movs	r0, #128	; 0x80
  RCC->PLLI2SCFGR = STM32_PLLI2SR | STM32_PLLI2SN | STM32_PLLI2SP |
 8000f10:	5099      	str	r1, [r3, r2]
  RCC->CR |= RCC_CR_PLLI2SON;
 8000f12:	2180      	movs	r1, #128	; 0x80
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	04c9      	lsls	r1, r1, #19
 8000f18:	430a      	orrs	r2, r1
 8000f1a:	601a      	str	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_PLLI2SRDY))
 8000f1c:	001a      	movs	r2, r3
 8000f1e:	0500      	lsls	r0, r0, #20
 8000f20:	6811      	ldr	r1, [r2, #0]
 8000f22:	4b20      	ldr	r3, [pc, #128]	; (8000fa4 <__early_init+0x154>)
 8000f24:	4201      	tst	r1, r0
 8000f26:	d0fb      	beq.n	8000f20 <__early_init+0xd0>
    ;
#endif /* STM32_ACTIVATE_PLLI2S */

#if STM32_ACTIVATE_PLLSAI
  /* PLLSAI activation.*/
  RCC->PLLSAICFGR = STM32_PLLSAIR | STM32_PLLSAIN | STM32_PLLSAIP |
 8000f28:	2288      	movs	r2, #136	; 0x88
 8000f2a:	4922      	ldr	r1, [pc, #136]	; (8000fb4 <__early_init+0x164>)
                    STM32_PLLSAIQ | STM32_PLLSAIM;
  RCC->CR |= RCC_CR_PLLSAION;

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLSAIRDY))
 8000f2c:	2080      	movs	r0, #128	; 0x80
  RCC->PLLSAICFGR = STM32_PLLSAIR | STM32_PLLSAIN | STM32_PLLSAIP |
 8000f2e:	5099      	str	r1, [r3, r2]
  RCC->CR |= RCC_CR_PLLSAION;
 8000f30:	2180      	movs	r1, #128	; 0x80
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	0549      	lsls	r1, r1, #21
 8000f36:	430a      	orrs	r2, r1
 8000f38:	601a      	str	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_PLLSAIRDY))
 8000f3a:	0580      	lsls	r0, r0, #22
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	4919      	ldr	r1, [pc, #100]	; (8000fa4 <__early_init+0x154>)
 8000f40:	4202      	tst	r2, r0
 8000f42:	d0fb      	beq.n	8000f3c <__early_init+0xec>
    ;
#endif /* STM32_ACTIVATE_PLLSAI */

  /* Other clock-related settings (dividers, MCO etc).*/
  RCC->CFGR = STM32_MCO2PRE | STM32_MCO2SEL | STM32_MCO1PRE | STM32_MCO1SEL |
 8000f44:	4b1c      	ldr	r3, [pc, #112]	; (8000fb8 <__early_init+0x168>)
    dckcfgr |= STM32_SAI1SEL;
#endif
#if STM32_PLLSAIDIVR != STM32_PLLSAIDIVR_OFF
    dckcfgr |= STM32_PLLSAIDIVR;
#endif
    RCC->DCKCFGR = dckcfgr | STM32_PLLI2SDIVQ | STM32_PLLSAIDIVQ;
 8000f46:	2280      	movs	r2, #128	; 0x80
  RCC->CFGR = STM32_MCO2PRE | STM32_MCO2SEL | STM32_MCO1PRE | STM32_MCO1SEL |
 8000f48:	608b      	str	r3, [r1, #8]
    RCC->DCKCFGR = dckcfgr | STM32_PLLI2SDIVQ | STM32_PLLSAIDIVQ;
 8000f4a:	238c      	movs	r3, #140	; 0x8c
 8000f4c:	0412      	lsls	r2, r2, #16
 8000f4e:	50ca      	str	r2, [r1, r3]
  }
  RCC->DCKCFGR2 = STM32_CK48MSEL;
 8000f50:	2280      	movs	r2, #128	; 0x80
 8000f52:	3308      	adds	r3, #8
 8000f54:	0512      	lsls	r2, r2, #20
 8000f56:	50ca      	str	r2, [r1, r3]

  /* Flash setup.*/
#if !defined(STM32_REMOVE_REVISION_A_FIX)
  /* Some old revisions of F4x MCUs randomly crashes with compiler
     optimizations enabled AND flash caches enabled. */
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 8000f58:	4b18      	ldr	r3, [pc, #96]	; (8000fbc <__early_init+0x16c>)
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	4b18      	ldr	r3, [pc, #96]	; (8000fc0 <__early_init+0x170>)
 8000f5e:	429a      	cmp	r2, r3
 8000f60:	d016      	beq.n	8000f90 <__early_init+0x140>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 8000f62:	4a18      	ldr	r2, [pc, #96]	; (8000fc4 <__early_init+0x174>)
 8000f64:	4b18      	ldr	r3, [pc, #96]	; (8000fc8 <__early_init+0x178>)
 8000f66:	601a      	str	r2, [r3, #0]
               FLASH_ACR_DCEN | STM32_FLASHBITS;
#endif

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
 8000f68:	2302      	movs	r3, #2
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8000f6a:	200c      	movs	r0, #12
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
 8000f6c:	4a0d      	ldr	r2, [pc, #52]	; (8000fa4 <__early_init+0x154>)
 8000f6e:	6891      	ldr	r1, [r2, #8]
 8000f70:	430b      	orrs	r3, r1
 8000f72:	6093      	str	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8000f74:	6893      	ldr	r3, [r2, #8]
 8000f76:	490b      	ldr	r1, [pc, #44]	; (8000fa4 <__early_init+0x154>)
 8000f78:	4003      	ands	r3, r0
 8000f7a:	2b08      	cmp	r3, #8
 8000f7c:	d1fa      	bne.n	8000f74 <__early_init+0x124>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, TRUE);
 8000f7e:	2080      	movs	r0, #128	; 0x80
 8000f80:	6c4a      	ldr	r2, [r1, #68]	; 0x44
 8000f82:	01c0      	lsls	r0, r0, #7
 8000f84:	4302      	orrs	r2, r0
 8000f86:	644a      	str	r2, [r1, #68]	; 0x44
 8000f88:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8000f8a:	4303      	orrs	r3, r0
 8000f8c:	664b      	str	r3, [r1, #100]	; 0x64
 *          and before any other initialization.
 */
void __early_init(void) {

  stm32_clock_init();
}
 8000f8e:	4770      	bx	lr
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 8000f90:	4b0e      	ldr	r3, [pc, #56]	; (8000fcc <__early_init+0x17c>)
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	4b0e      	ldr	r3, [pc, #56]	; (8000fd0 <__early_init+0x180>)
 8000f96:	429a      	cmp	r2, r3
 8000f98:	d1e3      	bne.n	8000f62 <__early_init+0x112>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
 8000f9a:	2206      	movs	r2, #6
 8000f9c:	4b0a      	ldr	r3, [pc, #40]	; (8000fc8 <__early_init+0x178>)
 8000f9e:	32ff      	adds	r2, #255	; 0xff
 8000fa0:	601a      	str	r2, [r3, #0]
 8000fa2:	e7e1      	b.n	8000f68 <__early_init+0x118>
 8000fa4:	40023800 	.word	0x40023800
 8000fa8:	40007000 	.word	0x40007000
 8000fac:	07405a08 	.word	0x07405a08
 8000fb0:	44013004 	.word	0x44013004
 8000fb4:	44033004 	.word	0x44033004
 8000fb8:	40089400 	.word	0x40089400
 8000fbc:	e0042000 	.word	0xe0042000
 8000fc0:	20006411 	.word	0x20006411
 8000fc4:	00000705 	.word	0x00000705
 8000fc8:	40023c00 	.word	0x40023c00
 8000fcc:	e000ed00 	.word	0xe000ed00
 8000fd0:	410fc241 	.word	0x410fc241
	...

08000fe0 <can_tx>:
/*
 * Transmitter thread.
 */
static THD_WORKING_AREA(can_tx_wa, 256);
static THD_FUNCTION(can_tx, p)
{
 8000fe0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fe2:	464d      	mov	r5, r9
 8000fe4:	465f      	mov	r7, fp
 8000fe6:	4656      	mov	r6, sl
 8000fe8:	4644      	mov	r4, r8
    msg_t msg;

    (void)p;
    chRegSetThreadName("transmitter");
    txmsg.IDE = CAN_IDE_EXT;
    txmsg.EID = 0x31;
 8000fea:	2231      	movs	r2, #49	; 0x31
{
 8000fec:	b4f0      	push	{r4, r5, r6, r7}
 8000fee:	4b50      	ldr	r3, [pc, #320]	; (8001130 <can_tx+0x150>)
 8000ff0:	b087      	sub	sp, #28
 8000ff2:	6999      	ldr	r1, [r3, #24]
 8000ff4:	4699      	mov	r9, r3
 8000ff6:	4b4f      	ldr	r3, [pc, #316]	; (8001134 <can_tx+0x154>)
    txmsg.data8[0] = 0x00;
    txmsg.data8[1] = 0x01;
    txmsg.data8[2] = 0x02;
    txmsg.data8[3] = 0x03;
    txmsg.data8[4] = 0x04;
    txmsg.data8[5] = 0x05;
 8000ff8:	a802      	add	r0, sp, #8
 8000ffa:	618b      	str	r3, [r1, #24]
    txmsg.EID = 0x31;
 8000ffc:	9b03      	ldr	r3, [sp, #12]
 8000ffe:	9301      	str	r3, [sp, #4]
 8001000:	0f5b      	lsrs	r3, r3, #29
 8001002:	075b      	lsls	r3, r3, #29
 8001004:	4313      	orrs	r3, r2
 8001006:	9303      	str	r3, [sp, #12]
    txmsg.data8[0] = 0x00;
 8001008:	2300      	movs	r3, #0
 800100a:	aa02      	add	r2, sp, #8
 800100c:	7213      	strb	r3, [r2, #8]
    txmsg.data8[1] = 0x01;
 800100e:	3301      	adds	r3, #1
 8001010:	7253      	strb	r3, [r2, #9]
    txmsg.data8[2] = 0x02;
 8001012:	3301      	adds	r3, #1
 8001014:	7293      	strb	r3, [r2, #10]
    txmsg.data8[3] = 0x03;
 8001016:	3301      	adds	r3, #1
 8001018:	72d3      	strb	r3, [r2, #11]
    txmsg.data8[4] = 0x04;
 800101a:	3301      	adds	r3, #1
 800101c:	7313      	strb	r3, [r2, #12]
    txmsg.data8[5] = 0x05;
 800101e:	2205      	movs	r2, #5
 8001020:	7342      	strb	r2, [r0, #13]
    txmsg.data8[6] = 0x06;
 8001022:	3201      	adds	r2, #1
 8001024:	7382      	strb	r2, [r0, #14]
    txmsg.data8[7] = 0x07;
 8001026:	3201      	adds	r2, #1
 8001028:	73c2      	strb	r2, [r0, #15]

    // Start TX Loop
    while (!chThdShouldTerminateX())
 800102a:	7f4a      	ldrb	r2, [r1, #29]
 800102c:	4213      	tst	r3, r2
 800102e:	d140      	bne.n	80010b2 <can_tx+0xd2>
 8001030:	4b41      	ldr	r3, [pc, #260]	; (8001138 <can_tx+0x158>)
 8001032:	4f42      	ldr	r7, [pc, #264]	; (800113c <can_tx+0x15c>)
 8001034:	469b      	mov	fp, r3
 8001036:	4b42      	ldr	r3, [pc, #264]	; (8001140 <can_tx+0x160>)
 8001038:	4c42      	ldr	r4, [pc, #264]	; (8001144 <can_tx+0x164>)
 800103a:	469a      	mov	sl, r3
    tir = ((uint32_t)ctfp->EID << 3) | ((uint32_t)ctfp->RTR << 1) |
 800103c:	2304      	movs	r3, #4
 800103e:	4698      	mov	r8, r3
    {
        //Process TSR and ESR
        chprintf(DEBUG_CHP, "\n\rStatus:\n\r");
 8001040:	4659      	mov	r1, fp
 8001042:	0038      	movs	r0, r7
 8001044:	f001 f93c 	bl	80022c0 <chprintf.constprop.2>
    uint32_t tsrval = canp->can->TSR;
 8001048:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    chprintf(DEBUG_CHP, "TSR:0x%x\r\n", tsrval);
 800104a:	493f      	ldr	r1, [pc, #252]	; (8001148 <can_tx+0x168>)
    uint32_t tsrval = canp->can->TSR;
 800104c:	689a      	ldr	r2, [r3, #8]
    chprintf(DEBUG_CHP, "TSR:0x%x\r\n", tsrval);
 800104e:	0038      	movs	r0, r7
 8001050:	f001 f936 	bl	80022c0 <chprintf.constprop.2>
        CAN_TSR_break(&CAND1);
        chThdSleepMilliseconds(250);
 8001054:	483d      	ldr	r0, [pc, #244]	; (800114c <can_tx+0x16c>)
 8001056:	f000 ff23 	bl	8001ea0 <chThdSleep>
    uint32_t esrval = canp->can->ESR;
 800105a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    chprintf(DEBUG_CHP, "ESR:0x%x\r\n", esrval);
 800105c:	493c      	ldr	r1, [pc, #240]	; (8001150 <can_tx+0x170>)
    uint32_t esrval = canp->can->ESR;
 800105e:	699a      	ldr	r2, [r3, #24]
    chprintf(DEBUG_CHP, "ESR:0x%x\r\n", esrval);
 8001060:	0038      	movs	r0, r7
 8001062:	f001 f92d 	bl	80022c0 <chprintf.constprop.2>
        CAN_ESR_break(&CAND1);
        chThdSleepMilliseconds(750);
 8001066:	483b      	ldr	r0, [pc, #236]	; (8001154 <can_tx+0x174>)
 8001068:	f000 ff1a 	bl	8001ea0 <chThdSleep>
 800106c:	2320      	movs	r3, #32
 800106e:	f383 8811 	msr	BASEPRI, r3
  while ((canp->state == CAN_SLEEP) || !can_lld_is_tx_empty(canp, mailbox)) {
 8001072:	26e0      	movs	r6, #224	; 0xe0
  return chThdEnqueueTimeoutS(tqp, time);
 8001074:	0025      	movs	r5, r4
 8001076:	0576      	lsls	r6, r6, #21
 8001078:	3508      	adds	r5, #8
 800107a:	7823      	ldrb	r3, [r4, #0]
 800107c:	2b04      	cmp	r3, #4
 800107e:	d003      	beq.n	8001088 <can_tx+0xa8>
    return (canp->can->TSR & CAN_TSR_TME) != 0;
 8001080:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001082:	689a      	ldr	r2, [r3, #8]
 8001084:	4232      	tst	r2, r6
 8001086:	d11b      	bne.n	80010c0 <can_tx+0xe0>
 8001088:	21fa      	movs	r1, #250	; 0xfa
 800108a:	0028      	movs	r0, r5
 800108c:	0089      	lsls	r1, r1, #2
 800108e:	f000 fd7f 	bl	8001b90 <chThdEnqueueTimeoutS>
    if (msg != MSG_OK) {
 8001092:	2800      	cmp	r0, #0
 8001094:	d0f1      	beq.n	800107a <can_tx+0x9a>
 8001096:	2300      	movs	r3, #0
 8001098:	f383 8811 	msr	BASEPRI, r3

        //Transmit message
        msg = canTransmit(&CAND1, CAN_ANY_MAILBOX, &txmsg, MS2ST(100));
        chprintf(DEBUG_CHP, "TX msg: %d\n\r", msg);
 800109c:	0002      	movs	r2, r0
 800109e:	4651      	mov	r1, sl
 80010a0:	0038      	movs	r0, r7
 80010a2:	f001 f90d 	bl	80022c0 <chprintf.constprop.2>
    while (!chThdShouldTerminateX())
 80010a6:	464b      	mov	r3, r9
 80010a8:	4642      	mov	r2, r8
 80010aa:	699b      	ldr	r3, [r3, #24]
 80010ac:	7f5b      	ldrb	r3, [r3, #29]
 80010ae:	421a      	tst	r2, r3
 80010b0:	d0c6      	beq.n	8001040 <can_tx+0x60>
    }
}
 80010b2:	b007      	add	sp, #28
 80010b4:	bc3c      	pop	{r2, r3, r4, r5}
 80010b6:	4690      	mov	r8, r2
 80010b8:	4699      	mov	r9, r3
 80010ba:	46a2      	mov	sl, r4
 80010bc:	46ab      	mov	fp, r5
 80010be:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (ctfp->IDE)
 80010c0:	200f      	movs	r0, #15
 80010c2:	a902      	add	r1, sp, #8
 80010c4:	7809      	ldrb	r1, [r1, #0]
    tmbp = &canp->can->sTxMailBox[(canp->can->TSR & CAN_TSR_CODE) >> 24];
 80010c6:	689a      	ldr	r2, [r3, #8]
  if (ctfp->IDE)
 80010c8:	4381      	bics	r1, r0
 80010ca:	2008      	movs	r0, #8
 80010cc:	4301      	orrs	r1, r0
 80010ce:	20ef      	movs	r0, #239	; 0xef
 80010d0:	4001      	ands	r1, r0
 80010d2:	2020      	movs	r0, #32
    tmbp = &canp->can->sTxMailBox[(canp->can->TSR & CAN_TSR_CODE) >> 24];
 80010d4:	0192      	lsls	r2, r2, #6
  if (ctfp->IDE)
 80010d6:	4301      	orrs	r1, r0
 80010d8:	a802      	add	r0, sp, #8
    tmbp = &canp->can->sTxMailBox[(canp->can->TSR & CAN_TSR_CODE) >> 24];
 80010da:	0f92      	lsrs	r2, r2, #30
  if (ctfp->IDE)
 80010dc:	7001      	strb	r1, [r0, #0]
 80010de:	0689      	lsls	r1, r1, #26
 80010e0:	d522      	bpl.n	8001128 <can_tx+0x148>
    tir = ((uint32_t)ctfp->EID << 3) | ((uint32_t)ctfp->RTR << 1) |
 80010e2:	4640      	mov	r0, r8
 80010e4:	9903      	ldr	r1, [sp, #12]
 80010e6:	9101      	str	r1, [sp, #4]
 80010e8:	00c9      	lsls	r1, r1, #3
 80010ea:	4301      	orrs	r1, r0
 80010ec:	0112      	lsls	r2, r2, #4
 80010ee:	189b      	adds	r3, r3, r2
  tmbp->TDTR = ctfp->DLC;
 80010f0:	22c2      	movs	r2, #194	; 0xc2
 80010f2:	2008      	movs	r0, #8
 80010f4:	0052      	lsls	r2, r2, #1
 80010f6:	5098      	str	r0, [r3, r2]
  tmbp->TDLR = ctfp->data32[0];
 80010f8:	9a04      	ldr	r2, [sp, #16]
 80010fa:	9201      	str	r2, [sp, #4]
 80010fc:	001a      	movs	r2, r3
 80010fe:	9801      	ldr	r0, [sp, #4]
 8001100:	3289      	adds	r2, #137	; 0x89
 8001102:	32ff      	adds	r2, #255	; 0xff
 8001104:	6010      	str	r0, [r2, #0]
  tmbp->TDHR = ctfp->data32[1];
 8001106:	9a05      	ldr	r2, [sp, #20]
 8001108:	9201      	str	r2, [sp, #4]
 800110a:	001a      	movs	r2, r3
 800110c:	9801      	ldr	r0, [sp, #4]
 800110e:	328d      	adds	r2, #141	; 0x8d
 8001110:	32ff      	adds	r2, #255	; 0xff
 8001112:	6010      	str	r0, [r2, #0]
  tmbp->TIR  = tir | CAN_TI0R_TXRQ;
 8001114:	2201      	movs	r2, #1
 8001116:	4311      	orrs	r1, r2
 8001118:	3280      	adds	r2, #128	; 0x80
 800111a:	32ff      	adds	r2, #255	; 0xff
 800111c:	5099      	str	r1, [r3, r2]
 800111e:	2300      	movs	r3, #0
 8001120:	f383 8811 	msr	BASEPRI, r3
  return MSG_OK;
 8001124:	2000      	movs	r0, #0
 8001126:	e7b9      	b.n	800109c <can_tx+0xbc>
    tir = ((uint32_t)ctfp->SID << 21) | ((uint32_t)ctfp->RTR << 1);
 8001128:	a902      	add	r1, sp, #8
 800112a:	8889      	ldrh	r1, [r1, #4]
 800112c:	0549      	lsls	r1, r1, #21
 800112e:	e7dd      	b.n	80010ec <can_tx+0x10c>
 8001130:	20000a78 	.word	0x20000a78
 8001134:	080025dc 	.word	0x080025dc
 8001138:	080025e8 	.word	0x080025e8
 800113c:	200009fc 	.word	0x200009fc
 8001140:	0800260c 	.word	0x0800260c
 8001144:	20000610 	.word	0x20000610
 8001148:	080025f4 	.word	0x080025f4
 800114c:	000009c4 	.word	0x000009c4
 8001150:	08002600 	.word	0x08002600
 8001154:	00001d4c 	.word	0x00001d4c
	...

08001160 <main>:
  rccResetAHB1(~0);
 8001160:	4b1e      	ldr	r3, [pc, #120]	; (80011dc <main+0x7c>)
 8001162:	2101      	movs	r1, #1
 8001164:	691a      	ldr	r2, [r3, #16]
        chThdSleepMilliseconds(1000);
    }
}

int main(void)
{
 8001166:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001168:	2200      	movs	r2, #0
 800116a:	4644      	mov	r4, r8
 800116c:	465f      	mov	r7, fp
 800116e:	4656      	mov	r6, sl
 8001170:	464d      	mov	r5, r9
 8001172:	4249      	negs	r1, r1
 8001174:	b4f0      	push	{r4, r5, r6, r7}
 8001176:	6119      	str	r1, [r3, #16]
 8001178:	611a      	str	r2, [r3, #16]
  rccResetAHB2(~0);
 800117a:	6958      	ldr	r0, [r3, #20]
 800117c:	6159      	str	r1, [r3, #20]
 800117e:	615a      	str	r2, [r3, #20]
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 8001180:	6a18      	ldr	r0, [r3, #32]
 8001182:	4c17      	ldr	r4, [pc, #92]	; (80011e0 <main+0x80>)
 8001184:	b083      	sub	sp, #12
 8001186:	4320      	orrs	r0, r4
 8001188:	6218      	str	r0, [r3, #32]
 800118a:	621a      	str	r2, [r3, #32]
  rccResetAPB2(~0);
 800118c:	6a58      	ldr	r0, [r3, #36]	; 0x24
  rccEnablePWRInterface(FALSE);
 800118e:	2080      	movs	r0, #128	; 0x80
  PWR->CR |= PWR_CR_DBP;
 8001190:	2480      	movs	r4, #128	; 0x80
  rccResetAPB2(~0);
 8001192:	6259      	str	r1, [r3, #36]	; 0x24
 8001194:	625a      	str	r2, [r3, #36]	; 0x24
  rccEnablePWRInterface(FALSE);
 8001196:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001198:	0540      	lsls	r0, r0, #21
 800119a:	4301      	orrs	r1, r0
  PWR->CR |= PWR_CR_DBP;
 800119c:	4811      	ldr	r0, [pc, #68]	; (80011e4 <main+0x84>)
  rccEnablePWRInterface(FALSE);
 800119e:	6419      	str	r1, [r3, #64]	; 0x40
  PWR->CR |= PWR_CR_DBP;
 80011a0:	6801      	ldr	r1, [r0, #0]
 80011a2:	0064      	lsls	r4, r4, #1
 80011a4:	4321      	orrs	r1, r4
 80011a6:	6001      	str	r1, [r0, #0]
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
 80011a8:	21c0      	movs	r1, #192	; 0xc0
 80011aa:	6f18      	ldr	r0, [r3, #112]	; 0x70
 80011ac:	0089      	lsls	r1, r1, #2
 80011ae:	4001      	ands	r1, r0
 80011b0:	2080      	movs	r0, #128	; 0x80
 80011b2:	0080      	lsls	r0, r0, #2
 80011b4:	4281      	cmp	r1, r0
 80011b6:	d003      	beq.n	80011c0 <main+0x60>
    RCC->BDCR = RCC_BDCR_BDRST;
 80011b8:	2180      	movs	r1, #128	; 0x80
 80011ba:	0249      	lsls	r1, r1, #9
 80011bc:	6719      	str	r1, [r3, #112]	; 0x70
    RCC->BDCR = 0;
 80011be:	671a      	str	r2, [r3, #112]	; 0x70
 80011c0:	4f09      	ldr	r7, [pc, #36]	; (80011e8 <main+0x88>)
  PWR->CSR &= ~PWR_CSR_BRE;
 80011c2:	4a08      	ldr	r2, [pc, #32]	; (80011e4 <main+0x84>)
 80011c4:	003d      	movs	r5, r7
 80011c6:	6851      	ldr	r1, [r2, #4]
 80011c8:	4b08      	ldr	r3, [pc, #32]	; (80011ec <main+0x8c>)
 80011ca:	35c0      	adds	r5, #192	; 0xc0
 80011cc:	400b      	ands	r3, r1
 80011ce:	6053      	str	r3, [r2, #4]
 80011d0:	4907      	ldr	r1, [pc, #28]	; (80011f0 <main+0x90>)
 80011d2:	003a      	movs	r2, r7
 80011d4:	4c07      	ldr	r4, [pc, #28]	; (80011f4 <main+0x94>)
void dmaInit(void) {
  unsigned i;

  dma_streams_mask = 0U;
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].stream->CR = 0U;
 80011d6:	2000      	movs	r0, #0
 80011d8:	e00f      	b.n	80011fa <main+0x9a>
 80011da:	46c0      	nop			; (mov r8, r8)
 80011dc:	40023800 	.word	0x40023800
 80011e0:	efffffff 	.word	0xefffffff
 80011e4:	40007000 	.word	0x40007000
 80011e8:	080026f4 	.word	0x080026f4
 80011ec:	fffffdff 	.word	0xfffffdff
 80011f0:	20000928 	.word	0x20000928
 80011f4:	40026010 	.word	0x40026010
 80011f8:	6814      	ldr	r4, [r2, #0]
 80011fa:	320c      	adds	r2, #12
 80011fc:	6020      	str	r0, [r4, #0]
 80011fe:	2300      	movs	r3, #0
    dma_isr_redir[i].dma_func = NULL;
 8001200:	6008      	str	r0, [r1, #0]
 8001202:	3108      	adds	r1, #8
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
 8001204:	42aa      	cmp	r2, r5
 8001206:	d1f7      	bne.n	80011f8 <main+0x98>
  }
  DMA1->LIFCR = 0xFFFFFFFFU;
 8001208:	2101      	movs	r1, #1
 800120a:	4afa      	ldr	r2, [pc, #1000]	; (80015f4 <main+0x494>)
 800120c:	4249      	negs	r1, r1
 800120e:	6091      	str	r1, [r2, #8]
  DMA1->HIFCR = 0xFFFFFFFFU;
 8001210:	60d1      	str	r1, [r2, #12]
  DMA2->LIFCR = 0xFFFFFFFFU;
 8001212:	4af9      	ldr	r2, [pc, #996]	; (80015f8 <main+0x498>)
  gpiop->AFRH    = config->afrh;
 8001214:	2599      	movs	r5, #153	; 0x99
 8001216:	6091      	str	r1, [r2, #8]
  DMA2->HIFCR = 0xFFFFFFFFU;
 8001218:	60d1      	str	r1, [r2, #12]
  RCC->AHB1ENR   |= AHB1_EN_MASK;
 800121a:	4af8      	ldr	r2, [pc, #992]	; (80015fc <main+0x49c>)
    rccEnableCAN1(FALSE);
 800121c:	2680      	movs	r6, #128	; 0x80
 800121e:	4693      	mov	fp, r2
 8001220:	6b10      	ldr	r0, [r2, #48]	; 0x30
 8001222:	22ff      	movs	r2, #255	; 0xff
 8001224:	465c      	mov	r4, fp
 8001226:	4310      	orrs	r0, r2
 8001228:	6320      	str	r0, [r4, #48]	; 0x30
  RCC->AHB1LPENR |= AHB1_LPEN_MASK;
 800122a:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800122c:	04b6      	lsls	r6, r6, #18
 800122e:	4302      	orrs	r2, r0
  gpiop->OSPEEDR = config->ospeedr;
 8001230:	2051      	movs	r0, #81	; 0x51
  RCC->AHB1LPENR |= AHB1_LPEN_MASK;
 8001232:	6522      	str	r2, [r4, #80]	; 0x50
  gpiop->OTYPER  = config->otyper;
 8001234:	4af2      	ldr	r2, [pc, #968]	; (8001600 <main+0x4a0>)
  gpiop->OSPEEDR = config->ospeedr;
 8001236:	4240      	negs	r0, r0
  gpiop->OTYPER  = config->otyper;
 8001238:	6053      	str	r3, [r2, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800123a:	6090      	str	r0, [r2, #8]
  gpiop->PUPDR   = config->pupdr;
 800123c:	48f1      	ldr	r0, [pc, #964]	; (8001604 <main+0x4a4>)
 800123e:	4cf2      	ldr	r4, [pc, #968]	; (8001608 <main+0x4a8>)
 8001240:	60d0      	str	r0, [r2, #12]
  gpiop->ODR     = config->odr;
 8001242:	48f2      	ldr	r0, [pc, #968]	; (800160c <main+0x4ac>)
 8001244:	6150      	str	r0, [r2, #20]
  gpiop->AFRL    = config->afrl;
 8001246:	48f2      	ldr	r0, [pc, #968]	; (8001610 <main+0x4b0>)
 8001248:	6210      	str	r0, [r2, #32]
  gpiop->AFRH    = config->afrh;
 800124a:	20aa      	movs	r0, #170	; 0xaa
 800124c:	0300      	lsls	r0, r0, #12
 800124e:	6250      	str	r0, [r2, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8001250:	48f0      	ldr	r0, [pc, #960]	; (8001614 <main+0x4b4>)
 8001252:	6010      	str	r0, [r2, #0]
  gpiop->OTYPER  = config->otyper;
 8001254:	4af0      	ldr	r2, [pc, #960]	; (8001618 <main+0x4b8>)
  gpiop->ODR     = config->odr;
 8001256:	48f1      	ldr	r0, [pc, #964]	; (800161c <main+0x4bc>)
  gpiop->OTYPER  = config->otyper;
 8001258:	6053      	str	r3, [r2, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800125a:	6091      	str	r1, [r2, #8]
  gpiop->PUPDR   = config->pupdr;
 800125c:	60d4      	str	r4, [r2, #12]
  gpiop->ODR     = config->odr;
 800125e:	6150      	str	r0, [r2, #20]
  gpiop->AFRL    = config->afrl;
 8001260:	6213      	str	r3, [r2, #32]
  gpiop->AFRH    = config->afrh;
 8001262:	6255      	str	r5, [r2, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8001264:	4dee      	ldr	r5, [pc, #952]	; (8001620 <main+0x4c0>)
 8001266:	6015      	str	r5, [r2, #0]
  gpiop->OTYPER  = config->otyper;
 8001268:	4aee      	ldr	r2, [pc, #952]	; (8001624 <main+0x4c4>)
  gpiop->PUPDR   = config->pupdr;
 800126a:	4def      	ldr	r5, [pc, #956]	; (8001628 <main+0x4c8>)
  gpiop->OTYPER  = config->otyper;
 800126c:	6053      	str	r3, [r2, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800126e:	6091      	str	r1, [r2, #8]
  gpiop->PUPDR   = config->pupdr;
 8001270:	60d5      	str	r5, [r2, #12]
  gpiop->ODR     = config->odr;
 8001272:	6150      	str	r0, [r2, #20]
  gpiop->AFRL    = config->afrl;
 8001274:	6213      	str	r3, [r2, #32]
  gpiop->AFRH    = config->afrh;
 8001276:	6253      	str	r3, [r2, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8001278:	6013      	str	r3, [r2, #0]
  gpiop->OTYPER  = config->otyper;
 800127a:	4aec      	ldr	r2, [pc, #944]	; (800162c <main+0x4cc>)
 800127c:	6053      	str	r3, [r2, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800127e:	6091      	str	r1, [r2, #8]
  gpiop->PUPDR   = config->pupdr;
 8001280:	60d4      	str	r4, [r2, #12]
  gpiop->ODR     = config->odr;
 8001282:	6150      	str	r0, [r2, #20]
  gpiop->AFRL    = config->afrl;
 8001284:	6213      	str	r3, [r2, #32]
  gpiop->AFRH    = config->afrh;
 8001286:	6253      	str	r3, [r2, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8001288:	6013      	str	r3, [r2, #0]
  gpiop->OTYPER  = config->otyper;
 800128a:	4ae9      	ldr	r2, [pc, #932]	; (8001630 <main+0x4d0>)
  canp->state    = CAN_STOP;
 800128c:	4de9      	ldr	r5, [pc, #932]	; (8001634 <main+0x4d4>)
 800128e:	6053      	str	r3, [r2, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8001290:	6091      	str	r1, [r2, #8]
  gpiop->PUPDR   = config->pupdr;
 8001292:	60d4      	str	r4, [r2, #12]
  gpiop->ODR     = config->odr;
 8001294:	6150      	str	r0, [r2, #20]
  gpiop->AFRL    = config->afrl;
 8001296:	6213      	str	r3, [r2, #32]
  gpiop->AFRH    = config->afrh;
 8001298:	6253      	str	r3, [r2, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800129a:	6013      	str	r3, [r2, #0]
  gpiop->OTYPER  = config->otyper;
 800129c:	4ae6      	ldr	r2, [pc, #920]	; (8001638 <main+0x4d8>)
 800129e:	6053      	str	r3, [r2, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80012a0:	6091      	str	r1, [r2, #8]
  gpiop->PUPDR   = config->pupdr;
 80012a2:	60d4      	str	r4, [r2, #12]
  gpiop->ODR     = config->odr;
 80012a4:	6150      	str	r0, [r2, #20]
  gpiop->AFRL    = config->afrl;
 80012a6:	6213      	str	r3, [r2, #32]
  gpiop->AFRH    = config->afrh;
 80012a8:	6253      	str	r3, [r2, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80012aa:	6013      	str	r3, [r2, #0]
  gpiop->OTYPER  = config->otyper;
 80012ac:	4ae3      	ldr	r2, [pc, #908]	; (800163c <main+0x4dc>)
 80012ae:	6053      	str	r3, [r2, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80012b0:	6091      	str	r1, [r2, #8]
  gpiop->PUPDR   = config->pupdr;
 80012b2:	60d4      	str	r4, [r2, #12]
  gpiop->ODR     = config->odr;
 80012b4:	6150      	str	r0, [r2, #20]
  gpiop->PUPDR   = config->pupdr;
 80012b6:	4ce2      	ldr	r4, [pc, #904]	; (8001640 <main+0x4e0>)
  gpiop->AFRL    = config->afrl;
 80012b8:	6213      	str	r3, [r2, #32]
  gpiop->AFRH    = config->afrh;
 80012ba:	6253      	str	r3, [r2, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80012bc:	6013      	str	r3, [r2, #0]
  gpiop->OTYPER  = config->otyper;
 80012be:	4ae1      	ldr	r2, [pc, #900]	; (8001644 <main+0x4e4>)
 80012c0:	6053      	str	r3, [r2, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80012c2:	6091      	str	r1, [r2, #8]
  gpiop->PUPDR   = config->pupdr;
 80012c4:	60d4      	str	r4, [r2, #12]
  gpiop->ODR     = config->odr;
 80012c6:	6150      	str	r0, [r2, #20]
  gpiop->AFRL    = config->afrl;
 80012c8:	6213      	str	r3, [r2, #32]
  gpiop->AFRH    = config->afrh;
 80012ca:	6253      	str	r3, [r2, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80012cc:	6013      	str	r3, [r2, #0]
  tqp->next = (thread_t *)tqp;
 80012ce:	002a      	movs	r2, r5
 80012d0:	2001      	movs	r0, #1
 80012d2:	3208      	adds	r2, #8
 80012d4:	7028      	strb	r0, [r5, #0]
 80012d6:	60aa      	str	r2, [r5, #8]
  tqp->prev = (thread_t *)tqp;
 80012d8:	60ea      	str	r2, [r5, #12]
  tqp->next = (thread_t *)tqp;
 80012da:	002a      	movs	r2, r5
 80012dc:	3210      	adds	r2, #16
 80012de:	612a      	str	r2, [r5, #16]
  tqp->prev = (thread_t *)tqp;
 80012e0:	616a      	str	r2, [r5, #20]
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->next = (event_listener_t *)esp;
 80012e2:	002a      	movs	r2, r5
 80012e4:	3218      	adds	r2, #24
 80012e6:	61aa      	str	r2, [r5, #24]
 80012e8:	002a      	movs	r2, r5
 80012ea:	321c      	adds	r2, #28
 80012ec:	61ea      	str	r2, [r5, #28]
 80012ee:	002a      	movs	r2, r5
 80012f0:	3220      	adds	r2, #32
 80012f2:	622a      	str	r2, [r5, #32]
 80012f4:	002a      	movs	r2, r5
 80012f6:	465c      	mov	r4, fp
 80012f8:	3224      	adds	r2, #36	; 0x24
 80012fa:	626a      	str	r2, [r5, #36]	; 0x24
 80012fc:	002a      	movs	r2, r5
 80012fe:	6c24      	ldr	r4, [r4, #64]	; 0x40
 8001300:	3228      	adds	r2, #40	; 0x28
 8001302:	4334      	orrs	r4, r6
 8001304:	465e      	mov	r6, fp
 8001306:	62aa      	str	r2, [r5, #40]	; 0x28
  CAND1.can = CAN1;
 8001308:	4acf      	ldr	r2, [pc, #828]	; (8001648 <main+0x4e8>)
  canp->config   = NULL;
 800130a:	606b      	str	r3, [r5, #4]
 800130c:	62ea      	str	r2, [r5, #44]	; 0x2c
    rccEnableCAN1(FALSE);
 800130e:	6434      	str	r4, [r6, #64]	; 0x40
    canp->can->FMR = (canp->can->FMR & 0xFFFF0000) | CAN_FMR_FINIT;
 8001310:	2480      	movs	r4, #128	; 0x80
 8001312:	00a4      	lsls	r4, r4, #2
 8001314:	46a4      	mov	ip, r4
 8001316:	4666      	mov	r6, ip
 8001318:	5914      	ldr	r4, [r2, r4]
 800131a:	0c24      	lsrs	r4, r4, #16
 800131c:	0424      	lsls	r4, r4, #16
 800131e:	4304      	orrs	r4, r0
 8001320:	5194      	str	r4, [r2, r6]
    canp->can->FMR = (canp->can->FMR & 0xFFFF0000) | (can2sb << 8) | CAN_FMR_FINIT;
 8001322:	5994      	ldr	r4, [r2, r6]
 8001324:	4ec9      	ldr	r6, [pc, #804]	; (800164c <main+0x4ec>)
 8001326:	0c24      	lsrs	r4, r4, #16
 8001328:	0424      	lsls	r4, r4, #16
 800132a:	4334      	orrs	r4, r6
 800132c:	4666      	mov	r6, ip
 800132e:	5194      	str	r4, [r2, r6]
    canp->can->sFilterRegister[0].FR1 = 0;
 8001330:	2490      	movs	r4, #144	; 0x90
 8001332:	00a4      	lsls	r4, r4, #2
 8001334:	5113      	str	r3, [r2, r4]
    canp->can->sFilterRegister[0].FR2 = 0;
 8001336:	3404      	adds	r4, #4
 8001338:	5113      	str	r3, [r2, r4]
    canp->can->FM1R = 0;
 800133a:	3c40      	subs	r4, #64	; 0x40
 800133c:	5113      	str	r3, [r2, r4]
    canp->can->FFA1R = 0;
 800133e:	3410      	adds	r4, #16
 8001340:	5113      	str	r3, [r2, r4]
    canp->can->FS1R = 1;
 8001342:	3c08      	subs	r4, #8
 8001344:	5110      	str	r0, [r2, r4]
    canp->can->FA1R = 1;
 8001346:	3410      	adds	r4, #16
 8001348:	5110      	str	r0, [r2, r4]
  canp->can->FMR &= ~CAN_FMR_FINIT;
 800134a:	5994      	ldr	r4, [r2, r6]
 800134c:	4384      	bics	r4, r0
 800134e:	5194      	str	r4, [r2, r6]
    rccDisableCAN1(FALSE);
 8001350:	465a      	mov	r2, fp
 8001352:	6c14      	ldr	r4, [r2, #64]	; 0x40
 8001354:	4abe      	ldr	r2, [pc, #760]	; (8001650 <main+0x4f0>)
 8001356:	4022      	ands	r2, r4
 8001358:	465c      	mov	r4, fp
 800135a:	6422      	str	r2, [r4, #64]	; 0x40
 *
 * @init
 */
void i2cObjectInit(I2CDriver *i2cp) {

  i2cp->state  = I2C_STOP;
 800135c:	4abd      	ldr	r2, [pc, #756]	; (8001654 <main+0x4f4>)
  tqp->next = (thread_t *)tqp;
 800135e:	0014      	movs	r4, r2
 8001360:	340c      	adds	r4, #12
 8001362:	60d4      	str	r4, [r2, #12]
  tqp->prev = (thread_t *)tqp;
 8001364:	6114      	str	r4, [r2, #16]
void i2c_lld_init(void) {

#if STM32_I2C_USE_I2C1
  i2cObjectInit(&I2CD1);
  I2CD1.thread = NULL;
  I2CD1.i2c    = I2C1;
 8001366:	4cbc      	ldr	r4, [pc, #752]	; (8001658 <main+0x4f8>)
 8001368:	7010      	strb	r0, [r2, #0]
  i2cp->config = NULL;
 800136a:	6053      	str	r3, [r2, #4]
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->queue);
  mp->owner = NULL;
 800136c:	6153      	str	r3, [r2, #20]
 800136e:	6354      	str	r4, [r2, #52]	; 0x34
  I2CD1.dmarx  = STM32_DMA_STREAM(STM32_I2C_I2C1_RX_DMA_STREAM);
  I2CD1.dmatx  = STM32_DMA_STREAM(STM32_I2C_I2C1_TX_DMA_STREAM);
 8001370:	003c      	movs	r4, r7
 8001372:	3448      	adds	r4, #72	; 0x48
 8001374:	6314      	str	r4, [r2, #48]	; 0x30
  PWMD1.channels = STM32_TIM1_CHANNELS;
 8001376:	2404      	movs	r4, #4
  I2CD1.thread = NULL;
 8001378:	61d3      	str	r3, [r2, #28]
  I2CD1.dmarx  = STM32_DMA_STREAM(STM32_I2C_I2C1_RX_DMA_STREAM);
 800137a:	62d7      	str	r7, [r2, #44]	; 0x2c
 *
 * @init
 */
void pwmObjectInit(PWMDriver *pwmp) {

  pwmp->state    = PWM_STOP;
 800137c:	4ab7      	ldr	r2, [pc, #732]	; (800165c <main+0x4fc>)
  sdp->vmt = &vmt;
 800137e:	4eb8      	ldr	r6, [pc, #736]	; (8001660 <main+0x500>)
 8001380:	7414      	strb	r4, [r2, #16]
  PWMD1.tim = STM32_TIM1;
 8001382:	4cb8      	ldr	r4, [pc, #736]	; (8001664 <main+0x504>)
 8001384:	7010      	strb	r0, [r2, #0]
 8001386:	6194      	str	r4, [r2, #24]
 8001388:	4cb7      	ldr	r4, [pc, #732]	; (8001668 <main+0x508>)
  pwmp->config   = NULL;
 800138a:	6053      	str	r3, [r2, #4]
  pwmp->enabled  = 0;
 800138c:	60d3      	str	r3, [r2, #12]
 800138e:	0022      	movs	r2, r4
 8001390:	c240      	stmia	r2!, {r6}
  tqp->next = (thread_t *)tqp;
 8001392:	2630      	movs	r6, #48	; 0x30
 8001394:	6062      	str	r2, [r4, #4]
 8001396:	0022      	movs	r2, r4
 8001398:	46b4      	mov	ip, r6
 800139a:	320c      	adds	r2, #12
 800139c:	60e2      	str	r2, [r4, #12]
  tqp->prev = (thread_t *)tqp;
 800139e:	6122      	str	r2, [r4, #16]
  iqp->q_buffer  = bp;
 80013a0:	0022      	movs	r2, r4
  tqp->next = (thread_t *)tqp;
 80013a2:	44a4      	add	ip, r4
 80013a4:	4666      	mov	r6, ip
 80013a6:	3254      	adds	r2, #84	; 0x54
 80013a8:	61a2      	str	r2, [r4, #24]
  iqp->q_rdptr   = bp;
 80013aa:	6262      	str	r2, [r4, #36]	; 0x24
  iqp->q_wrptr   = bp;
 80013ac:	6222      	str	r2, [r4, #32]
  iqp->q_top     = bp + size;
 80013ae:	0022      	movs	r2, r4
 80013b0:	6326      	str	r6, [r4, #48]	; 0x30
  tqp->prev = (thread_t *)tqp;
 80013b2:	6366      	str	r6, [r4, #52]	; 0x34
  oqp->q_counter = size;
 80013b4:	2610      	movs	r6, #16
  iqp->q_top     = bp + size;
 80013b6:	3264      	adds	r2, #100	; 0x64
 80013b8:	61e2      	str	r2, [r4, #28]
  oqp->q_buffer  = bp;
 80013ba:	63e2      	str	r2, [r4, #60]	; 0x3c
  oqp->q_rdptr   = bp;
 80013bc:	64a2      	str	r2, [r4, #72]	; 0x48
  oqp->q_wrptr   = bp;
 80013be:	6462      	str	r2, [r4, #68]	; 0x44
  oqp->q_top     = bp + size;
 80013c0:	0022      	movs	r2, r4
  iqp->q_counter = 0;
 80013c2:	6163      	str	r3, [r4, #20]
  oqp->q_counter = size;
 80013c4:	46b4      	mov	ip, r6
 80013c6:	63a6      	str	r6, [r4, #56]	; 0x38
  tqp->next = (thread_t *)tqp;
 80013c8:	3e04      	subs	r6, #4
 80013ca:	46b0      	mov	r8, r6
  oqp->q_top     = bp + size;
 80013cc:	3274      	adds	r2, #116	; 0x74
 80013ce:	6422      	str	r2, [r4, #64]	; 0x40
  oqp->q_notify  = onfy;
 80013d0:	4aa6      	ldr	r2, [pc, #664]	; (800166c <main+0x50c>)
  sdp->state = SD_STOP;
 80013d2:	7220      	strb	r0, [r4, #8]
  iqp->q_notify  = infy;
 80013d4:	62a3      	str	r3, [r4, #40]	; 0x28
  iqp->q_link    = link;
 80013d6:	62e4      	str	r4, [r4, #44]	; 0x2c
  oqp->q_notify  = onfy;
 80013d8:	64e2      	str	r2, [r4, #76]	; 0x4c
  SD1.usart = USART1;
#endif

#if STM32_SERIAL_USE_USART2
  sdObjectInit(&SD2, NULL, notify2);
  SD2.usart = USART2;
 80013da:	4aa5      	ldr	r2, [pc, #660]	; (8001670 <main+0x510>)
  oqp->q_link    = link;
 80013dc:	6524      	str	r4, [r4, #80]	; 0x50
 80013de:	6762      	str	r2, [r4, #116]	; 0x74
 *
 * @init
 */
void spiObjectInit(SPIDriver *spip) {

  spip->state = SPI_STOP;
 80013e0:	4aa4      	ldr	r2, [pc, #656]	; (8001674 <main+0x514>)
 80013e2:	4490      	add	r8, r2
 80013e4:	4646      	mov	r6, r8
 80013e6:	60d6      	str	r6, [r2, #12]
  tqp->prev = (thread_t *)tqp;
 80013e8:	6116      	str	r6, [r2, #16]
 */
void spi_lld_init(void) {

#if STM32_SPI_USE_SPI1
  spiObjectInit(&SPID1);
  SPID1.spi       = SPI1;
 80013ea:	4ea3      	ldr	r6, [pc, #652]	; (8001678 <main+0x518>)
 80013ec:	7010      	strb	r0, [r2, #0]
 80013ee:	61d6      	str	r6, [r2, #28]
  SPID1.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI1_RX_DMA_STREAM);
 80013f0:	2660      	movs	r6, #96	; 0x60
 80013f2:	46b0      	mov	r8, r6
 80013f4:	44b8      	add	r8, r7
 80013f6:	4646      	mov	r6, r8
  SPID1.dmatx     = STM32_DMA_STREAM(STM32_SPI_SPI1_TX_DMA_STREAM);
 80013f8:	3784      	adds	r7, #132	; 0x84
 80013fa:	6257      	str	r7, [r2, #36]	; 0x24
  SPID1.rxdmamode = STM32_DMA_CR_CHSEL(SPI1_RX_DMA_CHANNEL) |
 80013fc:	4f9f      	ldr	r7, [pc, #636]	; (800167c <main+0x51c>)
  spip->config = NULL;
 80013fe:	6053      	str	r3, [r2, #4]
 8001400:	6297      	str	r7, [r2, #40]	; 0x28
                    STM32_DMA_CR_PL(STM32_SPI_SPI1_DMA_PRIORITY) |
                    STM32_DMA_CR_DIR_P2M |
                    STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE;
  SPID1.txdmamode = STM32_DMA_CR_CHSEL(SPI1_TX_DMA_CHANNEL) |
 8001402:	4f9f      	ldr	r7, [pc, #636]	; (8001680 <main+0x520>)
 8001404:	6153      	str	r3, [r2, #20]
 8001406:	62d7      	str	r7, [r2, #44]	; 0x2c
#if SPI_USE_WAIT == TRUE
  spip->thread = NULL;
 8001408:	6093      	str	r3, [r2, #8]
  SPID1.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI1_RX_DMA_STREAM);
 800140a:	6216      	str	r6, [r2, #32]

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 800140c:	465a      	mov	r2, fp
 800140e:	465e      	mov	r6, fp
 8001410:	6c12      	ldr	r2, [r2, #64]	; 0x40

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 8001412:	4f9c      	ldr	r7, [pc, #624]	; (8001684 <main+0x524>)
  ST_ENABLE_CLOCK();
 8001414:	4302      	orrs	r2, r0
 8001416:	6432      	str	r2, [r6, #64]	; 0x40
  ST_ENABLE_STOP();
 8001418:	68ba      	ldr	r2, [r7, #8]
 800141a:	4302      	orrs	r2, r0
 800141c:	60ba      	str	r2, [r7, #8]

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 800141e:	2280      	movs	r2, #128	; 0x80
 8001420:	4f99      	ldr	r7, [pc, #612]	; (8001688 <main+0x528>)
 8001422:	05d2      	lsls	r2, r2, #23
 8001424:	6297      	str	r7, [r2, #40]	; 0x28
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 8001426:	62d1      	str	r1, [r2, #44]	; 0x2c
  STM32_ST_TIM->CCMR1  = 0;
 8001428:	6193      	str	r3, [r2, #24]
  STM32_ST_TIM->CCR[0] = 0;
 800142a:	6353      	str	r3, [r2, #52]	; 0x34
  STM32_ST_TIM->DIER   = 0;
 800142c:	60d3      	str	r3, [r2, #12]
  STM32_ST_TIM->CR2    = 0;
 800142e:	6053      	str	r3, [r2, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 8001430:	6150      	str	r0, [r2, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 8001432:	6010      	str	r0, [r2, #0]

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001434:	2280      	movs	r2, #128	; 0x80
 8001436:	4690      	mov	r8, r2
 8001438:	22c7      	movs	r2, #199	; 0xc7
 800143a:	4646      	mov	r6, r8
 800143c:	4f93      	ldr	r7, [pc, #588]	; (800168c <main+0x52c>)
 800143e:	0092      	lsls	r2, r2, #2
 8001440:	54be      	strb	r6, [r7, r2]
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001442:	2280      	movs	r2, #128	; 0x80
 8001444:	26c0      	movs	r6, #192	; 0xc0
 8001446:	0552      	lsls	r2, r2, #21
 8001448:	0076      	lsls	r6, r6, #1
 800144a:	51ba      	str	r2, [r7, r6]
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
 800144c:	261c      	movs	r6, #28
 800144e:	46b1      	mov	r9, r6
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001450:	603a      	str	r2, [r7, #0]
  tqp->next = (thread_t *)tqp;
 8001452:	4a8f      	ldr	r2, [pc, #572]	; (8001690 <main+0x530>)
 8001454:	6012      	str	r2, [r2, #0]
  tqp->prev = (thread_t *)tqp;
 8001456:	6052      	str	r2, [r2, #4]
 * @notapi
 */
void _scheduler_init(void) {

  queue_init(&ch.rlist.queue);
  ch.rlist.prio = NOPRIO;
 8001458:	6093      	str	r3, [r2, #8]
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.delta = (systime_t)-1;
 800145a:	6251      	str	r1, [r2, #36]	; 0x24
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = __heap_base__;
 800145c:	498d      	ldr	r1, [pc, #564]	; (8001694 <main+0x534>)
  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
 800145e:	4491      	add	r9, r2
 8001460:	464e      	mov	r6, r9
 8001462:	4689      	mov	r9, r1
 8001464:	61d6      	str	r6, [r2, #28]
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
 8001466:	6216      	str	r6, [r2, #32]
 8001468:	464e      	mov	r6, r9
 800146a:	498b      	ldr	r1, [pc, #556]	; (8001698 <main+0x538>)
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.systime = (systime_t)0;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  ch.vtlist.lasttime = (systime_t)0;
 800146c:	6293      	str	r3, [r2, #40]	; 0x28
 800146e:	600e      	str	r6, [r1, #0]
  endmem  = __heap_end__;
 8001470:	498a      	ldr	r1, [pc, #552]	; (800169c <main+0x53c>)
  tp->mtxlist   = NULL;
 8001472:	6653      	str	r3, [r2, #100]	; 0x64
 8001474:	4689      	mov	r9, r1
 8001476:	464e      	mov	r6, r9
 8001478:	4989      	ldr	r1, [pc, #548]	; (80016a0 <main+0x540>)
  tp->epending  = (eventmask_t)0;
 800147a:	6613      	str	r3, [r2, #96]	; 0x60
 800147c:	600e      	str	r6, [r1, #0]
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.provider = chCoreAllocAligned;
 800147e:	4989      	ldr	r1, [pc, #548]	; (80016a4 <main+0x544>)
 8001480:	4e89      	ldr	r6, [pc, #548]	; (80016a8 <main+0x548>)
  H_NEXT(&default_heap.header) = NULL;
 8001482:	608b      	str	r3, [r1, #8]
  default_heap.provider = chCoreAllocAligned;
 8001484:	600e      	str	r6, [r1, #0]
  tqp->next = (thread_t *)tqp;
 8001486:	2610      	movs	r6, #16
 8001488:	46b1      	mov	r9, r6
 800148a:	4489      	add	r9, r1
 800148c:	464e      	mov	r6, r9
  H_PAGES(&default_heap.header) = 0;
 800148e:	60cb      	str	r3, [r1, #12]
 8001490:	610e      	str	r6, [r1, #16]
  tqp->prev = (thread_t *)tqp;
 8001492:	614e      	str	r6, [r1, #20]
 8001494:	618b      	str	r3, [r1, #24]
  tp->prio      = prio;
 8001496:	4641      	mov	r1, r8
  tlp->next = (thread_t *)tlp;
 8001498:	2654      	movs	r6, #84	; 0x54
 800149a:	6391      	str	r1, [r2, #56]	; 0x38
  tp->flags     = CH_FLAG_MODE_STATIC;
 800149c:	3933      	subs	r1, #51	; 0x33
 800149e:	5453      	strb	r3, [r2, r1]
  tp->realprio  = prio;
 80014a0:	4641      	mov	r1, r8
 80014a2:	46b0      	mov	r8, r6
 80014a4:	4490      	add	r8, r2
 80014a6:	4646      	mov	r6, r8
 80014a8:	6556      	str	r6, [r2, #84]	; 0x54
  tqp->next = (thread_t *)tqp;
 80014aa:	2658      	movs	r6, #88	; 0x58
 80014ac:	46b0      	mov	r8, r6
 80014ae:	6691      	str	r1, [r2, #104]	; 0x68
  tp->refs      = (trefs_t)1;
 80014b0:	3932      	subs	r1, #50	; 0x32
 80014b2:	5450      	strb	r0, [r2, r1]
  tp->name      = name;
 80014b4:	497d      	ldr	r1, [pc, #500]	; (80016ac <main+0x54c>)
 80014b6:	4490      	add	r8, r2
 80014b8:	6491      	str	r1, [r2, #72]	; 0x48
  REG_INSERT(tp);
 80014ba:	0011      	movs	r1, r2
 80014bc:	4646      	mov	r6, r8
 80014be:	3130      	adds	r1, #48	; 0x30
 80014c0:	6111      	str	r1, [r2, #16]
 80014c2:	6151      	str	r1, [r2, #20]
 80014c4:	6596      	str	r6, [r2, #88]	; 0x58
 80014c6:	6412      	str	r2, [r2, #64]	; 0x40
 80014c8:	6452      	str	r2, [r2, #68]	; 0x44
  tqp->prev = (thread_t *)tqp;
 80014ca:	65d6      	str	r6, [r2, #92]	; 0x5c
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
#if CH_CFG_USE_REGISTRY == TRUE
  currp = _thread_init(&ch.mainthread, (const char *)&ch_debug, NORMALPRIO);
 80014cc:	6191      	str	r1, [r2, #24]
#elif CH_CFG_USE_DYNAMIC == TRUE
  currp->wabase = NULL;
#endif

  /* Setting up the caller as current thread.*/
  currp->state = CH_STATE_CURRENT;
 80014ce:	214c      	movs	r1, #76	; 0x4c
 80014d0:	5450      	strb	r0, [r2, r1]
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014d2:	4977      	ldr	r1, [pc, #476]	; (80016b0 <main+0x550>)
 80014d4:	4689      	mov	r9, r1
 80014d6:	68c9      	ldr	r1, [r1, #12]
 80014d8:	4688      	mov	r8, r1
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014da:	4646      	mov	r6, r8
 80014dc:	4975      	ldr	r1, [pc, #468]	; (80016b4 <main+0x554>)
 80014de:	4031      	ands	r1, r6
  reg_value  =  (reg_value                                   |
 80014e0:	4e75      	ldr	r6, [pc, #468]	; (80016b8 <main+0x558>)
 80014e2:	4331      	orrs	r1, r6
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 80014e4:	464e      	mov	r6, r9
 80014e6:	60f1      	str	r1, [r6, #12]

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable, note, the M7 requires DWT unlocking.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80014e8:	4974      	ldr	r1, [pc, #464]	; (80016bc <main+0x55c>)
 80014ea:	2680      	movs	r6, #128	; 0x80
 80014ec:	4688      	mov	r8, r1
 80014ee:	68c9      	ldr	r1, [r1, #12]
 80014f0:	0476      	lsls	r6, r6, #17
 80014f2:	4331      	orrs	r1, r6
 80014f4:	4646      	mov	r6, r8
 80014f6:	60f1      	str	r1, [r6, #12]
#if CORTEX_MODEL == 7
  DWT->LAR = 0xC5ACCE55U;
#endif
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80014f8:	4971      	ldr	r1, [pc, #452]	; (80016c0 <main+0x560>)
 80014fa:	4688      	mov	r8, r1
 80014fc:	4646      	mov	r6, r8
 80014fe:	6809      	ldr	r1, [r1, #0]
 8001500:	4301      	orrs	r1, r0
 8001502:	6031      	str	r1, [r6, #0]
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001504:	4649      	mov	r1, r9
 8001506:	4666      	mov	r6, ip
 8001508:	77ce      	strb	r6, [r1, #31]
 800150a:	2120      	movs	r1, #32
 800150c:	4688      	mov	r8, r1
 800150e:	464e      	mov	r6, r9
 8001510:	4647      	mov	r7, r8
 8001512:	3102      	adds	r1, #2
 8001514:	5477      	strb	r7, [r6, r1]
 8001516:	2100      	movs	r1, #0
 8001518:	468a      	mov	sl, r1
 800151a:	f381 8811 	msr	BASEPRI, r1
  __ASM volatile ("cpsie i" : : : "memory");
 800151e:	b662      	cpsie	i
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8001520:	f388 8811 	msr	BASEPRI, r8
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8001524:	266c      	movs	r6, #108	; 0x6c
 8001526:	46b1      	mov	r9, r6
 8001528:	4966      	ldr	r1, [pc, #408]	; (80016c4 <main+0x564>)
 800152a:	3630      	adds	r6, #48	; 0x30
 800152c:	4489      	add	r9, r1
 800152e:	464f      	mov	r7, r9
 8001530:	518f      	str	r7, [r1, r6]
 8001532:	4e65      	ldr	r6, [pc, #404]	; (80016c8 <main+0x568>)
 8001534:	670b      	str	r3, [r1, #112]	; 0x70
 8001536:	66ce      	str	r6, [r1, #108]	; 0x6c
 8001538:	4e64      	ldr	r6, [pc, #400]	; (80016cc <main+0x56c>)
 800153a:	46b1      	mov	r9, r6
 800153c:	268c      	movs	r6, #140	; 0x8c
 800153e:	464f      	mov	r7, r9
 8001540:	518f      	str	r7, [r1, r6]
  tp->prio      = prio;
 8001542:	360c      	adds	r6, #12
 8001544:	5188      	str	r0, [r1, r6]
  tp->state     = CH_STATE_WTSTART;
 8001546:	3e96      	subs	r6, #150	; 0x96
 8001548:	46b1      	mov	r9, r6
 800154a:	464f      	mov	r7, r9
 800154c:	36aa      	adds	r6, #170	; 0xaa
 800154e:	558f      	strb	r7, [r1, r6]
  tp->flags     = CH_FLAG_MODE_STATIC;
 8001550:	3601      	adds	r6, #1
 8001552:	558b      	strb	r3, [r1, r6]
  tp->realprio  = prio;
 8001554:	361b      	adds	r6, #27
 8001556:	5188      	str	r0, [r1, r6]
  tp->mtxlist   = NULL;
 8001558:	3e04      	subs	r6, #4
 800155a:	518b      	str	r3, [r1, r6]
  tp->epending  = (eventmask_t)0;
 800155c:	3e04      	subs	r6, #4
 800155e:	518b      	str	r3, [r1, r6]
  tp->refs      = (trefs_t)1;
 8001560:	23ae      	movs	r3, #174	; 0xae
 8001562:	54c8      	strb	r0, [r1, r3]
  tp->name      = name;
 8001564:	485a      	ldr	r0, [pc, #360]	; (80016d0 <main+0x570>)
 8001566:	3b06      	subs	r3, #6
 8001568:	50c8      	str	r0, [r1, r3]
  REG_INSERT(tp);
 800156a:	20a4      	movs	r0, #164	; 0xa4
 800156c:	3b08      	subs	r3, #8
 800156e:	50ca      	str	r2, [r1, r3]
 8001570:	6953      	ldr	r3, [r2, #20]
 8001572:	500b      	str	r3, [r1, r0]
 8001574:	0008      	movs	r0, r1
 8001576:	3090      	adds	r0, #144	; 0x90
 8001578:	6118      	str	r0, [r3, #16]
 800157a:	6150      	str	r0, [r2, #20]
  tlp->next = (thread_t *)tlp;
 800157c:	000a      	movs	r2, r1
 800157e:	23b4      	movs	r3, #180	; 0xb4
 8001580:	32b4      	adds	r2, #180	; 0xb4
 8001582:	50ca      	str	r2, [r1, r3]
  tqp->next = (thread_t *)tqp;
 8001584:	000b      	movs	r3, r1
 8001586:	22b8      	movs	r2, #184	; 0xb8
 8001588:	33b8      	adds	r3, #184	; 0xb8
 800158a:	508b      	str	r3, [r1, r2]
  tqp->prev = (thread_t *)tqp;
 800158c:	3204      	adds	r2, #4
 800158e:	508b      	str	r3, [r1, r2]
  chSchWakeupS(tp, MSG_OK);
 8001590:	f000 fe1e 	bl	80021d0 <chSchWakeupS.constprop.49>
 8001594:	f38a 8811 	msr	BASEPRI, sl
 8001598:	f388 8811 	msr	BASEPRI, r8
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    config = &default_config;

  if (sdp->state == SD_STOP) {
 800159c:	7a23      	ldrb	r3, [r4, #8]
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d100      	bne.n	80015a4 <main+0x444>
 80015a2:	e130      	b.n	8001806 <main+0x6a6>
    u->BRR = STM32_PCLK2 / config->speed;
 80015a4:	4f4b      	ldr	r7, [pc, #300]	; (80016d4 <main+0x574>)
  USART_TypeDef *u = sdp->usart;
 80015a6:	6f66      	ldr	r6, [r4, #116]	; 0x74
  if ((sdp->usart == USART1) || (sdp->usart == USART6))
 80015a8:	4b4b      	ldr	r3, [pc, #300]	; (80016d8 <main+0x578>)
    u->BRR = STM32_PCLK2 / config->speed;
 80015aa:	6839      	ldr	r1, [r7, #0]
  if ((sdp->usart == USART1) || (sdp->usart == USART6))
 80015ac:	429e      	cmp	r6, r3
 80015ae:	d100      	bne.n	80015b2 <main+0x452>
 80015b0:	e124      	b.n	80017fc <main+0x69c>
 80015b2:	4b4a      	ldr	r3, [pc, #296]	; (80016dc <main+0x57c>)
 80015b4:	429e      	cmp	r6, r3
 80015b6:	d100      	bne.n	80015ba <main+0x45a>
 80015b8:	e120      	b.n	80017fc <main+0x69c>
    u->BRR = STM32_PCLK1 / config->speed;
 80015ba:	4849      	ldr	r0, [pc, #292]	; (80016e0 <main+0x580>)
 80015bc:	f7fe fe7e 	bl	80002bc <__aeabi_uidiv>
 80015c0:	60b0      	str	r0, [r6, #8]
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 80015c2:	2340      	movs	r3, #64	; 0x40
 80015c4:	88fa      	ldrh	r2, [r7, #6]
 80015c6:	4313      	orrs	r3, r2
 80015c8:	6133      	str	r3, [r6, #16]
  u->CR3 = config->cr3 | USART_CR3_EIE;
 80015ca:	2301      	movs	r3, #1
 80015cc:	893a      	ldrh	r2, [r7, #8]
 80015ce:	4313      	orrs	r3, r2
 80015d0:	6173      	str	r3, [r6, #20]
  u->SR = 0;
 80015d2:	2300      	movs	r3, #0
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 80015d4:	88b9      	ldrh	r1, [r7, #4]
 80015d6:	4a43      	ldr	r2, [pc, #268]	; (80016e4 <main+0x584>)
 80015d8:	430a      	orrs	r2, r1
 80015da:	60f2      	str	r2, [r6, #12]
  u->SR = 0;
 80015dc:	6033      	str	r3, [r6, #0]
  (void)u->SR;  /* SR reset step 1.*/
 80015de:	6833      	ldr	r3, [r6, #0]
  (void)u->DR;  /* SR reset step 2.*/
 80015e0:	6873      	ldr	r3, [r6, #4]
  if ((config->cr1 & (USART_CR1_M | USART_CR1_PCE)) == USART_CR1_PCE) {
 80015e2:	23a0      	movs	r3, #160	; 0xa0
 80015e4:	2280      	movs	r2, #128	; 0x80
 80015e6:	015b      	lsls	r3, r3, #5
 80015e8:	00d2      	lsls	r2, r2, #3
 80015ea:	400b      	ands	r3, r1
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d100      	bne.n	80015f2 <main+0x492>
 80015f0:	e100      	b.n	80017f4 <main+0x694>
 80015f2:	e079      	b.n	80016e8 <main+0x588>
 80015f4:	40026000 	.word	0x40026000
 80015f8:	40026400 	.word	0x40026400
 80015fc:	40023800 	.word	0x40023800
 8001600:	40020000 	.word	0x40020000
 8001604:	64155505 	.word	0x64155505
 8001608:	55555555 	.word	0x55555555
 800160c:	0000fbff 	.word	0x0000fbff
 8001610:	55507700 	.word	0x55507700
 8001614:	2a91a9a0 	.word	0x2a91a9a0
 8001618:	40020400 	.word	0x40020400
 800161c:	0000ffff 	.word	0x0000ffff
 8001620:	000a0080 	.word	0x000a0080
 8001624:	40020800 	.word	0x40020800
 8001628:	01555555 	.word	0x01555555
 800162c:	40020c00 	.word	0x40020c00
 8001630:	40021000 	.word	0x40021000
 8001634:	20000610 	.word	0x20000610
 8001638:	40021400 	.word	0x40021400
 800163c:	40021800 	.word	0x40021800
 8001640:	55555550 	.word	0x55555550
 8001644:	40021c00 	.word	0x40021c00
 8001648:	40006400 	.word	0x40006400
 800164c:	00000e01 	.word	0x00000e01
 8001650:	fdffffff 	.word	0xfdffffff
 8001654:	200009c4 	.word	0x200009c4
 8001658:	40005400 	.word	0x40005400
 800165c:	200009a8 	.word	0x200009a8
 8001660:	080026d4 	.word	0x080026d4
 8001664:	40010000 	.word	0x40010000
 8001668:	200009fc 	.word	0x200009fc
 800166c:	08000451 	.word	0x08000451
 8001670:	40004400 	.word	0x40004400
 8001674:	20000640 	.word	0x20000640
 8001678:	40013000 	.word	0x40013000
 800167c:	06010016 	.word	0x06010016
 8001680:	06010046 	.word	0x06010046
 8001684:	e0042000 	.word	0xe0042000
 8001688:	00002327 	.word	0x00002327
 800168c:	e000e100 	.word	0xe000e100
 8001690:	20000a78 	.word	0x20000a78
 8001694:	20000ae8 	.word	0x20000ae8
 8001698:	20000850 	.word	0x20000850
 800169c:	20020000 	.word	0x20020000
 80016a0:	20000854 	.word	0x20000854
 80016a4:	20000830 	.word	0x20000830
 80016a8:	080018b1 	.word	0x080018b1
 80016ac:	080025c4 	.word	0x080025c4
 80016b0:	e000ed00 	.word	0xe000ed00
 80016b4:	0000f8ff 	.word	0x0000f8ff
 80016b8:	05fa0300 	.word	0x05fa0300
 80016bc:	e000edf0 	.word	0xe000edf0
 80016c0:	e0001000 	.word	0xe0001000
 80016c4:	20000858 	.word	0x20000858
 80016c8:	08001951 	.word	0x08001951
 80016cc:	080002a5 	.word	0x080002a5
 80016d0:	0800261c 	.word	0x0800261c
 80016d4:	20000400 	.word	0x20000400
 80016d8:	40011000 	.word	0x40011000
 80016dc:	40011400 	.word	0x40011400
 80016e0:	02aea540 	.word	0x02aea540
 80016e4:	0000212c 	.word	0x0000212c
    sdp->rxmask = 0xFF;
 80016e8:	22ff      	movs	r2, #255	; 0xff
 80016ea:	2378      	movs	r3, #120	; 0x78
 80016ec:	54e2      	strb	r2, [r4, r3]
  sdp->state = SD_READY;
 80016ee:	2702      	movs	r7, #2
 80016f0:	2300      	movs	r3, #0
 80016f2:	7227      	strb	r7, [r4, #8]
 80016f4:	f383 8811 	msr	BASEPRI, r3
void set_util_fwversion(VERSIONData * ver_data)
{
#ifndef GIT_COMMIT_VERSION
#define GIT_COMMIT_VERSION "Unknown"
#endif
    strncpy(ver_data->firmware, GIT_COMMIT_VERSION, MAX_FW_VERSION_LENGTH);
 80016f8:	4e4b      	ldr	r6, [pc, #300]	; (8001828 <main+0x6c8>)
 80016fa:	2232      	movs	r2, #50	; 0x32
 80016fc:	494b      	ldr	r1, [pc, #300]	; (800182c <main+0x6cc>)
 80016fe:	0030      	movs	r0, r6
 8001700:	f7fe fe68 	bl	80003d4 <strncpy>
 * 4 32 bit registers: base address: 0x1FFF 7A10
 * ST Ref. STM32f40x Page 1399 section 34 'Device Electronic Signature'
 */
void set_util_hwversion(VERSIONData * ver_data)
{
        ver_data->hardware.id_low    = *STM32F4_UNIQUE_ID_LOW;
 8001704:	4b4a      	ldr	r3, [pc, #296]	; (8001830 <main+0x6d0>)
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, time);
 8001706:	494b      	ldr	r1, [pc, #300]	; (8001834 <main+0x6d4>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	2008      	movs	r0, #8
 800170c:	63f3      	str	r3, [r6, #60]	; 0x3c
        ver_data->hardware.id_center = *STM32F4_UNIQUE_ID_CENTER;
 800170e:	4b4a      	ldr	r3, [pc, #296]	; (8001838 <main+0x6d8>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	63b3      	str	r3, [r6, #56]	; 0x38
        ver_data->hardware.id_high   = *STM32F4_UNIQUE_ID_HIGH;
 8001714:	4b49      	ldr	r3, [pc, #292]	; (800183c <main+0x6dc>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	6373      	str	r3, [r6, #52]	; 0x34
 800171a:	f000 f9a9 	bl	8001a70 <chSchGoSleepTimeoutS>
    chprintf(DEBUG_CHP, "\r\nFirmware Info\r\n");
 800171e:	4948      	ldr	r1, [pc, #288]	; (8001840 <main+0x6e0>)
 8001720:	0020      	movs	r0, r4
 8001722:	f000 fdcd 	bl	80022c0 <chprintf.constprop.2>
    chprintf(DEBUG_CHP, "FW HASH: %s\r\n", version_info.firmware);
 8001726:	0032      	movs	r2, r6
 8001728:	4946      	ldr	r1, [pc, #280]	; (8001844 <main+0x6e4>)
 800172a:	0020      	movs	r0, r4
 800172c:	f000 fdc8 	bl	80022c0 <chprintf.constprop.2>
    chprintf(DEBUG_CHP, "STF0x UNIQUE HW ID (H,C,L):\r\n0x%x\t0x%x\t0x%x\r\n"
 8001730:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
 8001732:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8001734:	6b72      	ldr	r2, [r6, #52]	; 0x34
 8001736:	0020      	movs	r0, r4
 8001738:	9100      	str	r1, [sp, #0]
 800173a:	4943      	ldr	r1, [pc, #268]	; (8001848 <main+0x6e8>)
 800173c:	f000 fdc0 	bl	80022c0 <chprintf.constprop.2>
    chprintf(DEBUG_CHP, "\r\nStarting CAN driver...\r\n");
 8001740:	4942      	ldr	r1, [pc, #264]	; (800184c <main+0x6ec>)
 8001742:	0020      	movs	r0, r4
 8001744:	f000 fdbc 	bl	80022c0 <chprintf.constprop.2>
 8001748:	2320      	movs	r3, #32
 800174a:	f383 8811 	msr	BASEPRI, r3
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800174e:	21b0      	movs	r1, #176	; 0xb0
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001750:	2080      	movs	r0, #128	; 0x80
  canp->config = config;
 8001752:	4b3f      	ldr	r3, [pc, #252]	; (8001850 <main+0x6f0>)
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001754:	4a3f      	ldr	r2, [pc, #252]	; (8001854 <main+0x6f4>)
 8001756:	606b      	str	r3, [r5, #4]
 8001758:	4b3f      	ldr	r3, [pc, #252]	; (8001858 <main+0x6f8>)
  canp->state = CAN_STARTING;
 800175a:	702f      	strb	r7, [r5, #0]
 800175c:	5499      	strb	r1, [r3, r2]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800175e:	3a94      	subs	r2, #148	; 0x94
 8001760:	3aff      	subs	r2, #255	; 0xff
 8001762:	0300      	lsls	r0, r0, #12
 8001764:	5098      	str	r0, [r3, r2]
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001766:	6018      	str	r0, [r3, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001768:	20c5      	movs	r0, #197	; 0xc5
 800176a:	0080      	lsls	r0, r0, #2
 800176c:	5419      	strb	r1, [r3, r0]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800176e:	2080      	movs	r0, #128	; 0x80
 8001770:	0340      	lsls	r0, r0, #13
 8001772:	5098      	str	r0, [r3, r2]
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001774:	6018      	str	r0, [r3, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001776:	4839      	ldr	r0, [pc, #228]	; (800185c <main+0x6fc>)
 8001778:	5419      	strb	r1, [r3, r0]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800177a:	2080      	movs	r0, #128	; 0x80
 800177c:	0380      	lsls	r0, r0, #14
 800177e:	5098      	str	r0, [r3, r2]
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001780:	6018      	str	r0, [r3, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001782:	4837      	ldr	r0, [pc, #220]	; (8001860 <main+0x700>)
 8001784:	5419      	strb	r1, [r3, r0]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001786:	2180      	movs	r1, #128	; 0x80
 8001788:	03c9      	lsls	r1, r1, #15
 800178a:	5099      	str	r1, [r3, r2]
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800178c:	6019      	str	r1, [r3, #0]
    rccEnableCAN1(FALSE);
 800178e:	2180      	movs	r1, #128	; 0x80
 8001790:	4a34      	ldr	r2, [pc, #208]	; (8001864 <main+0x704>)
 8001792:	0489      	lsls	r1, r1, #18
 8001794:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001796:	430b      	orrs	r3, r1
 8001798:	6413      	str	r3, [r2, #64]	; 0x40
  canp->can->MCR = CAN_MCR_INRQ;
 800179a:	2201      	movs	r2, #1
 800179c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800179e:	601a      	str	r2, [r3, #0]
  while ((canp->can->MSR & CAN_MSR_INAK) == 0)
 80017a0:	6859      	ldr	r1, [r3, #4]
 80017a2:	420a      	tst	r2, r1
 80017a4:	d123      	bne.n	80017ee <main+0x68e>
 80017a6:	2101      	movs	r1, #1
 80017a8:	2008      	movs	r0, #8
 80017aa:	f000 f961 	bl	8001a70 <chSchGoSleepTimeoutS>
 80017ae:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80017b0:	685a      	ldr	r2, [r3, #4]
 80017b2:	07d2      	lsls	r2, r2, #31
 80017b4:	d5f7      	bpl.n	80017a6 <main+0x646>
 80017b6:	686a      	ldr	r2, [r5, #4]
 80017b8:	6851      	ldr	r1, [r2, #4]
 80017ba:	6812      	ldr	r2, [r2, #0]
  canp->can->BTR = canp->config->btr;
 80017bc:	61d9      	str	r1, [r3, #28]
  canp->can->MCR = canp->config->mcr;
 80017be:	601a      	str	r2, [r3, #0]
  canp->can->IER = CAN_IER_TMEIE  | CAN_IER_FMPIE0 | CAN_IER_FMPIE1 |
 80017c0:	4a29      	ldr	r2, [pc, #164]	; (8001868 <main+0x708>)
 80017c2:	615a      	str	r2, [r3, #20]
  canp->state = CAN_READY;
 80017c4:	2303      	movs	r3, #3
 80017c6:	702b      	strb	r3, [r5, #0]
 80017c8:	2300      	movs	r3, #0
 80017ca:	f383 8811 	msr	BASEPRI, r3
    chprintf(DEBUG_CHP, "\r\nStarting RX/TX threads...\r\n");
 80017ce:	4927      	ldr	r1, [pc, #156]	; (800186c <main+0x70c>)
 80017d0:	0020      	movs	r0, r4
 80017d2:	f000 fd75 	bl	80022c0 <chprintf.constprop.2>
    chThdCreateStatic(can_rx_wa, sizeof(can_rx_wa), NORMALPRIO + 7, can_rx, NULL);
 80017d6:	4926      	ldr	r1, [pc, #152]	; (8001870 <main+0x710>)
 80017d8:	4826      	ldr	r0, [pc, #152]	; (8001874 <main+0x714>)
 80017da:	f000 fd21 	bl	8002220 <chThdCreateStatic.constprop.44>
    chThdCreateStatic(can_tx_wa, sizeof(can_tx_wa), NORMALPRIO + 7, can_tx, NULL);
 80017de:	4926      	ldr	r1, [pc, #152]	; (8001878 <main+0x718>)
 80017e0:	4826      	ldr	r0, [pc, #152]	; (800187c <main+0x71c>)
 80017e2:	f000 fd1d 	bl	8002220 <chThdCreateStatic.constprop.44>
        chThdSleepMilliseconds(1000);
 80017e6:	4813      	ldr	r0, [pc, #76]	; (8001834 <main+0x6d4>)
 80017e8:	f000 fb5a 	bl	8001ea0 <chThdSleep>
 80017ec:	e7fb      	b.n	80017e6 <main+0x686>
  while ((canp->can->MSR & CAN_MSR_INAK) == 0)
 80017ee:	2264      	movs	r2, #100	; 0x64
 80017f0:	4923      	ldr	r1, [pc, #140]	; (8001880 <main+0x720>)
 80017f2:	e7e3      	b.n	80017bc <main+0x65c>
    sdp->rxmask = 0x7F;
 80017f4:	227f      	movs	r2, #127	; 0x7f
 80017f6:	2378      	movs	r3, #120	; 0x78
 80017f8:	54e2      	strb	r2, [r4, r3]
 80017fa:	e778      	b.n	80016ee <main+0x58e>
    u->BRR = STM32_PCLK2 / config->speed;
 80017fc:	4821      	ldr	r0, [pc, #132]	; (8001884 <main+0x724>)
 80017fe:	f7fe fd5d 	bl	80002bc <__aeabi_uidiv>
 8001802:	60b0      	str	r0, [r6, #8]
 8001804:	e6dd      	b.n	80015c2 <main+0x462>
      nvicEnableVector(STM32_USART1_NUMBER, STM32_SERIAL_USART1_PRIORITY);
    }
#endif
#if STM32_SERIAL_USE_USART2
    if (&SD2 == sdp) {
      rccEnableUSART2(FALSE);
 8001806:	465b      	mov	r3, fp
 8001808:	2280      	movs	r2, #128	; 0x80
 800180a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180c:	0292      	lsls	r2, r2, #10
 800180e:	4313      	orrs	r3, r2
 8001810:	465a      	mov	r2, fp
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001812:	4911      	ldr	r1, [pc, #68]	; (8001858 <main+0x6f8>)
 8001814:	6413      	str	r3, [r2, #64]	; 0x40
 8001816:	4b1c      	ldr	r3, [pc, #112]	; (8001888 <main+0x728>)
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001818:	22c2      	movs	r2, #194	; 0xc2
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800181a:	54ce      	strb	r6, [r1, r3]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800181c:	2340      	movs	r3, #64	; 0x40
 800181e:	0052      	lsls	r2, r2, #1
 8001820:	508b      	str	r3, [r1, r2]
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001822:	604b      	str	r3, [r1, #4]
 8001824:	e6be      	b.n	80015a4 <main+0x444>
 8001826:	46c0      	nop			; (mov r8, r8)
 8001828:	20000410 	.word	0x20000410
 800182c:	08002624 	.word	0x08002624
 8001830:	1fff7a10 	.word	0x1fff7a10
 8001834:	00002710 	.word	0x00002710
 8001838:	1fff7a14 	.word	0x1fff7a14
 800183c:	1fff7a18 	.word	0x1fff7a18
 8001840:	0800263c 	.word	0x0800263c
 8001844:	08002650 	.word	0x08002650
 8001848:	08002660 	.word	0x08002660
 800184c:	08002690 	.word	0x08002690
 8001850:	080026cc 	.word	0x080026cc
 8001854:	00000313 	.word	0x00000313
 8001858:	e000e100 	.word	0xe000e100
 800185c:	00000315 	.word	0x00000315
 8001860:	00000316 	.word	0x00000316
 8001864:	40023800 	.word	0x40023800
 8001868:	0001875b 	.word	0x0001875b
 800186c:	080026ac 	.word	0x080026ac
 8001870:	08000461 	.word	0x08000461
 8001874:	20000450 	.word	0x20000450
 8001878:	08000fe1 	.word	0x08000fe1
 800187c:	20000670 	.word	0x20000670
 8001880:	001c0005 	.word	0x001c0005
 8001884:	055d4a80 	.word	0x055d4a80
 8001888:	00000326 	.word	0x00000326
 800188c:	00000000 	.word	0x00000000

08001890 <SVC_Handler>:
  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 8001890:	f3ef 8309 	mrs	r3, PSP
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 8001894:	3320      	adds	r3, #32
 8001896:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800189a:	2300      	movs	r3, #0
 800189c:	f383 8811 	msr	BASEPRI, r3
  /* Restoring real position of the original stack frame.*/
  __set_PSP((uint32_t)ctxp);

  /* Restoring the normal interrupts status.*/
  port_unlock_from_isr();
}
 80018a0:	4770      	bx	lr
 80018a2:	46c0      	nop			; (mov r8, r8)
	...

080018b0 <chCoreAllocAligned>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAllocAligned(size_t size, unsigned align) {
 80018b0:	b510      	push	{r4, lr}
 80018b2:	2320      	movs	r3, #32
 80018b4:	f383 8811 	msr	BASEPRI, r3
  size = MEM_ALIGN_NEXT(size, align);
 80018b8:	1e4b      	subs	r3, r1, #1
 80018ba:	181b      	adds	r3, r3, r0
  p = (uint8_t *)MEM_ALIGN_NEXT(nextmem, align);
 80018bc:	480a      	ldr	r0, [pc, #40]	; (80018e8 <chCoreAllocAligned+0x38>)
  size = MEM_ALIGN_NEXT(size, align);
 80018be:	424c      	negs	r4, r1
  p = (uint8_t *)MEM_ALIGN_NEXT(nextmem, align);
 80018c0:	6802      	ldr	r2, [r0, #0]
  size = MEM_ALIGN_NEXT(size, align);
 80018c2:	4023      	ands	r3, r4
  p = (uint8_t *)MEM_ALIGN_NEXT(nextmem, align);
 80018c4:	3a01      	subs	r2, #1
 80018c6:	1851      	adds	r1, r2, r1
  if (((size_t)endmem - (size_t)p) < size) {
 80018c8:	4a08      	ldr	r2, [pc, #32]	; (80018ec <chCoreAllocAligned+0x3c>)
  p = (uint8_t *)MEM_ALIGN_NEXT(nextmem, align);
 80018ca:	4021      	ands	r1, r4
  if (((size_t)endmem - (size_t)p) < size) {
 80018cc:	6812      	ldr	r2, [r2, #0]
 80018ce:	1a52      	subs	r2, r2, r1
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d806      	bhi.n	80018e2 <chCoreAllocAligned+0x32>
  nextmem = p + size;
 80018d4:	18cb      	adds	r3, r1, r3
 80018d6:	6003      	str	r3, [r0, #0]
  return p;
 80018d8:	0008      	movs	r0, r1
 80018da:	2300      	movs	r3, #0
 80018dc:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocAlignedI(size, align);
  chSysUnlock();

  return p;
}
 80018e0:	bd10      	pop	{r4, pc}
    return NULL;
 80018e2:	2000      	movs	r0, #0
 80018e4:	e7f9      	b.n	80018da <chCoreAllocAligned+0x2a>
 80018e6:	46c0      	nop			; (mov r8, r8)
 80018e8:	20000850 	.word	0x20000850
 80018ec:	20000854 	.word	0x20000854

080018f0 <wakeup>:
 80018f0:	2320      	movs	r3, #32
 80018f2:	f383 8811 	msr	BASEPRI, r3
 */
static void wakeup(void *p) {
  thread_t *tp = (thread_t *)p;

  chSysLockFromISR();
  switch (tp->state) {
 80018f6:	7f03      	ldrb	r3, [r0, #28]
 80018f8:	2b07      	cmp	r3, #7
 80018fa:	d80c      	bhi.n	8001916 <wakeup+0x26>
 80018fc:	4a12      	ldr	r2, [pc, #72]	; (8001948 <wakeup+0x58>)
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	58d3      	ldr	r3, [r2, r3]
 8001902:	469f      	mov	pc, r3
  case CH_STATE_SUSPENDED:
    *tp->u.wttrp = NULL;
    break;
#if CH_CFG_USE_SEMAPHORES == TRUE
  case CH_STATE_WTSEM:
    chSemFastSignalI(tp->u.wtsemp);
 8001904:	6a02      	ldr	r2, [r0, #32]
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->cnt++;
 8001906:	6893      	ldr	r3, [r2, #8]
 8001908:	3301      	adds	r3, #1
 800190a:	6093      	str	r3, [r2, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->queue.prev->queue.next = tp->queue.next;
 800190c:	6802      	ldr	r2, [r0, #0]
 800190e:	6843      	ldr	r3, [r0, #4]
 8001910:	601a      	str	r2, [r3, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 8001912:	6802      	ldr	r2, [r0, #0]
 8001914:	6053      	str	r3, [r2, #4]
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->u.rdymsg = MSG_TIMEOUT;
 8001916:	2301      	movs	r3, #1
 8001918:	425b      	negs	r3, r3
 800191a:	6203      	str	r3, [r0, #32]
  tp->state = CH_STATE_READY;
 800191c:	2300      	movs	r3, #0
 800191e:	6882      	ldr	r2, [r0, #8]
 8001920:	7703      	strb	r3, [r0, #28]
  cp = (thread_t *)&ch.rlist.queue;
 8001922:	4b0a      	ldr	r3, [pc, #40]	; (800194c <wakeup+0x5c>)
    cp = cp->queue.next;
 8001924:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8001926:	6899      	ldr	r1, [r3, #8]
 8001928:	4291      	cmp	r1, r2
 800192a:	d2fb      	bcs.n	8001924 <wakeup+0x34>
  tp->queue.prev             = cp->queue.prev;
 800192c:	685a      	ldr	r2, [r3, #4]
  tp->queue.next             = cp;
 800192e:	6003      	str	r3, [r0, #0]
  tp->queue.prev             = cp->queue.prev;
 8001930:	6042      	str	r2, [r0, #4]
  tp->queue.prev->queue.next = tp;
 8001932:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 8001934:	6058      	str	r0, [r3, #4]
 8001936:	2300      	movs	r3, #0
 8001938:	f383 8811 	msr	BASEPRI, r3
  (void) chSchReadyI(tp);
  chSysUnlockFromISR();
}
 800193c:	4770      	bx	lr
    *tp->u.wttrp = NULL;
 800193e:	2200      	movs	r2, #0
 8001940:	6a03      	ldr	r3, [r0, #32]
 8001942:	601a      	str	r2, [r3, #0]
 8001944:	e7e7      	b.n	8001916 <wakeup+0x26>
 8001946:	46c0      	nop			; (mov r8, r8)
 8001948:	080027b4 	.word	0x080027b4
 800194c:	20000a78 	.word	0x20000a78

08001950 <_idle_thread.lto_priv.53>:
static void _idle_thread(void *p) {
 8001950:	e7fe      	b.n	8001950 <_idle_thread.lto_priv.53>
 8001952:	46c0      	nop			; (mov r8, r8)
	...

08001960 <chSchGoSleepS>:
  thread_t *otp = currp;
 8001960:	4b06      	ldr	r3, [pc, #24]	; (800197c <chSchGoSleepS+0x1c>)
void chSchGoSleepS(tstate_t newstate) {
 8001962:	b510      	push	{r4, lr}
  thread_t *otp = currp;
 8001964:	6999      	ldr	r1, [r3, #24]
  otp->state = newstate;
 8001966:	7708      	strb	r0, [r1, #28]
  thread_t *tp = tqp->next;
 8001968:	6818      	ldr	r0, [r3, #0]
  tqp->next             = tp->queue.next;
 800196a:	6802      	ldr	r2, [r0, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 800196c:	6053      	str	r3, [r2, #4]
  tqp->next             = tp->queue.next;
 800196e:	601a      	str	r2, [r3, #0]
  currp = queue_fifo_remove(&ch.rlist.queue);
 8001970:	6198      	str	r0, [r3, #24]
  currp->state = CH_STATE_CURRENT;
 8001972:	2301      	movs	r3, #1
 8001974:	7703      	strb	r3, [r0, #28]
  chSysSwitch(currp, otp);
 8001976:	f7fe fc8d 	bl	8000294 <_port_switch>
}
 800197a:	bd10      	pop	{r4, pc}
 800197c:	20000a78 	.word	0x20000a78

08001980 <_port_irq_epilogue>:
 8001980:	2320      	movs	r3, #32
 8001982:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8001986:	4b0e      	ldr	r3, [pc, #56]	; (80019c0 <_port_irq_epilogue+0x40>)
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	051b      	lsls	r3, r3, #20
 800198c:	d403      	bmi.n	8001996 <_port_irq_epilogue+0x16>
 800198e:	2300      	movs	r3, #0
 8001990:	f383 8811 	msr	BASEPRI, r3
    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
    return;
  }
  port_unlock_from_isr();
}
 8001994:	4770      	bx	lr
  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 8001996:	f3ef 8309 	mrs	r3, PSP
    ctxp->xpsr = (regarm_t)0x01000000;
 800199a:	2280      	movs	r2, #128	; 0x80
 800199c:	3b20      	subs	r3, #32
 800199e:	0452      	lsls	r2, r2, #17
 80019a0:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 80019a2:	f383 8809 	msr	PSP, r3
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.queue);
 80019a6:	4a07      	ldr	r2, [pc, #28]	; (80019c4 <_port_irq_epilogue+0x44>)
 80019a8:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->prio;
 80019aa:	6992      	ldr	r2, [r2, #24]
    if (chSchIsPreemptionRequired()) {
 80019ac:	6889      	ldr	r1, [r1, #8]
 80019ae:	6892      	ldr	r2, [r2, #8]
 80019b0:	4291      	cmp	r1, r2
 80019b2:	d902      	bls.n	80019ba <_port_irq_epilogue+0x3a>
      ctxp->pc = (regarm_t)_port_switch_from_isr;
 80019b4:	4a04      	ldr	r2, [pc, #16]	; (80019c8 <_port_irq_epilogue+0x48>)
 80019b6:	619a      	str	r2, [r3, #24]
 80019b8:	e7ec      	b.n	8001994 <_port_irq_epilogue+0x14>
      ctxp->pc = (regarm_t)_port_exit_from_isr;
 80019ba:	4a04      	ldr	r2, [pc, #16]	; (80019cc <_port_irq_epilogue+0x4c>)
 80019bc:	619a      	str	r2, [r3, #24]
 80019be:	e7e9      	b.n	8001994 <_port_irq_epilogue+0x14>
 80019c0:	e000ed00 	.word	0xe000ed00
 80019c4:	20000a78 	.word	0x20000a78
 80019c8:	080002b5 	.word	0x080002b5
 80019cc:	080002b8 	.word	0x080002b8

080019d0 <Vector70>:
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 80019d0:	223d      	movs	r2, #61	; 0x3d
 80019d2:	4b08      	ldr	r3, [pc, #32]	; (80019f4 <Vector70+0x24>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
 80019d4:	b510      	push	{r4, lr}
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 80019d6:	6819      	ldr	r1, [r3, #0]
 80019d8:	0989      	lsrs	r1, r1, #6
 80019da:	4011      	ands	r1, r2
  DMA1->LIFCR = flags << 6U;
 80019dc:	018a      	lsls	r2, r1, #6
 80019de:	609a      	str	r2, [r3, #8]
  if (dma_isr_redir[1].dma_func)
 80019e0:	4a05      	ldr	r2, [pc, #20]	; (80019f8 <Vector70+0x28>)
 80019e2:	6893      	ldr	r3, [r2, #8]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <Vector70+0x1c>
    dma_isr_redir[1].dma_func(dma_isr_redir[1].dma_param, flags);
 80019e8:	68d0      	ldr	r0, [r2, #12]
 80019ea:	4798      	blx	r3
  OSAL_IRQ_EPILOGUE();
 80019ec:	f7ff ffc8 	bl	8001980 <_port_irq_epilogue>
}
 80019f0:	bd10      	pop	{r4, pc}
 80019f2:	46c0      	nop			; (mov r8, r8)
 80019f4:	40026000 	.word	0x40026000
 80019f8:	20000928 	.word	0x20000928
 80019fc:	00000000 	.word	0x00000000

08001a00 <Vector6C>:
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8001a00:	213d      	movs	r1, #61	; 0x3d
 8001a02:	4a07      	ldr	r2, [pc, #28]	; (8001a20 <Vector6C+0x20>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH0_HANDLER) {
 8001a04:	b510      	push	{r4, lr}
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8001a06:	6813      	ldr	r3, [r2, #0]
 8001a08:	4019      	ands	r1, r3
  DMA1->LIFCR = flags << 0U;
 8001a0a:	6091      	str	r1, [r2, #8]
  if (dma_isr_redir[0].dma_func)
 8001a0c:	4a05      	ldr	r2, [pc, #20]	; (8001a24 <Vector6C+0x24>)
 8001a0e:	6813      	ldr	r3, [r2, #0]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <Vector6C+0x18>
    dma_isr_redir[0].dma_func(dma_isr_redir[0].dma_param, flags);
 8001a14:	6850      	ldr	r0, [r2, #4]
 8001a16:	4798      	blx	r3
  OSAL_IRQ_EPILOGUE();
 8001a18:	f7ff ffb2 	bl	8001980 <_port_irq_epilogue>
}
 8001a1c:	bd10      	pop	{r4, pc}
 8001a1e:	46c0      	nop			; (mov r8, r8)
 8001a20:	40026000 	.word	0x40026000
 8001a24:	20000928 	.word	0x20000928
	...

08001a30 <chSchDoReschedule>:
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoReschedule(void) {
  thread_t *otp = currp;
 8001a30:	4a0c      	ldr	r2, [pc, #48]	; (8001a64 <chSchDoReschedule+0x34>)
void chSchDoReschedule(void) {
 8001a32:	b510      	push	{r4, lr}
  thread_t *tp = tqp->next;
 8001a34:	6810      	ldr	r0, [r2, #0]
  thread_t *otp = currp;
 8001a36:	6991      	ldr	r1, [r2, #24]
  tqp->next             = tp->queue.next;
 8001a38:	6803      	ldr	r3, [r0, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8001a3a:	605a      	str	r2, [r3, #4]
  tqp->next             = tp->queue.next;
 8001a3c:	6013      	str	r3, [r2, #0]

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
 8001a3e:	6190      	str	r0, [r2, #24]
  currp->state = CH_STATE_CURRENT;
 8001a40:	2201      	movs	r2, #1
 8001a42:	7702      	strb	r2, [r0, #28]
  tp->state = CH_STATE_READY;
 8001a44:	2200      	movs	r2, #0
 8001a46:	770a      	strb	r2, [r1, #28]
 8001a48:	688a      	ldr	r2, [r1, #8]
 8001a4a:	e000      	b.n	8001a4e <chSchDoReschedule+0x1e>
 8001a4c:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio > tp->prio);
 8001a4e:	689c      	ldr	r4, [r3, #8]
 8001a50:	4294      	cmp	r4, r2
 8001a52:	d8fb      	bhi.n	8001a4c <chSchDoReschedule+0x1c>
  tp->queue.prev             = cp->queue.prev;
 8001a54:	685a      	ldr	r2, [r3, #4]
  tp->queue.next             = cp;
 8001a56:	600b      	str	r3, [r1, #0]
  tp->queue.prev             = cp->queue.prev;
 8001a58:	604a      	str	r2, [r1, #4]
  tp->queue.prev->queue.next = tp;
 8001a5a:	6011      	str	r1, [r2, #0]
  cp->queue.prev             = tp;
 8001a5c:	6059      	str	r1, [r3, #4]
     ahead of its peers.*/
  otp = chSchReadyAheadI(otp);
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 8001a5e:	f7fe fc19 	bl	8000294 <_port_switch>
}
 8001a62:	bd10      	pop	{r4, pc}
 8001a64:	20000a78 	.word	0x20000a78
	...

08001a70 <chSchGoSleepTimeoutS>:
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 8001a70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a72:	b087      	sub	sp, #28
  if (TIME_INFINITE != time) {
 8001a74:	1c4b      	adds	r3, r1, #1
 8001a76:	d04a      	beq.n	8001b0e <chSchGoSleepTimeoutS+0x9e>
    chVTDoSetI(&vt, time, wakeup, currp);
 8001a78:	4d43      	ldr	r5, [pc, #268]	; (8001b88 <chSchGoSleepTimeoutS+0x118>)
  systime_t delta;

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->par = par;
 8001a7a:	ac01      	add	r4, sp, #4
 8001a7c:	69ab      	ldr	r3, [r5, #24]
 8001a7e:	6123      	str	r3, [r4, #16]
  vtp->func = vtfunc;
 8001a80:	4b42      	ldr	r3, [pc, #264]	; (8001b8c <chSchGoSleepTimeoutS+0x11c>)
 8001a82:	60e3      	str	r3, [r4, #12]
  return (systime_t)STM32_ST_TIM->CNT;
 8001a84:	2380      	movs	r3, #128	; 0x80
 8001a86:	05db      	lsls	r3, r3, #23
 8001a88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  {
    systime_t now = chVTGetSystemTimeX();

    /* If the requested delay is lower than the minimum safe delta then it
       is raised to the minimum safe value.*/
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
 8001a8a:	2901      	cmp	r1, #1
 8001a8c:	d943      	bls.n	8001b16 <chSchGoSleepTimeoutS+0xa6>
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8001a8e:	002e      	movs	r6, r5
 8001a90:	69eb      	ldr	r3, [r5, #28]
 8001a92:	361c      	adds	r6, #28
 8001a94:	42b3      	cmp	r3, r6
 8001a96:	d064      	beq.n	8001b62 <chSchGoSleepTimeoutS+0xf2>
    /* Pointer to the first element in the delta list, which is non-empty.*/
    p = ch.vtlist.next;

    /* Delay as delta from 'lasttime'. Note, it can overflow and the value
       becomes lower than 'now'.*/
    delta = now - ch.vtlist.lasttime + delay;
 8001a98:	6aae      	ldr	r6, [r5, #40]	; 0x28
 8001a9a:	1b92      	subs	r2, r2, r6
 8001a9c:	1889      	adds	r1, r1, r2

    if (delta < now - ch.vtlist.lasttime) {
 8001a9e:	428a      	cmp	r2, r1
 8001aa0:	d830      	bhi.n	8001b04 <chSchGoSleepTimeoutS+0x94>
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->delta;
      p = p->next;
    }
    else if (delta < p->delta) {
 8001aa2:	689a      	ldr	r2, [r3, #8]
 8001aa4:	4291      	cmp	r1, r2
 8001aa6:	d203      	bcs.n	8001ab0 <chSchGoSleepTimeoutS+0x40>
 8001aa8:	e037      	b.n	8001b1a <chSchGoSleepTimeoutS+0xaa>

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->delta < delta) {
    delta -= p->delta;
    p = p->next;
 8001aaa:	681b      	ldr	r3, [r3, #0]
    delta -= p->delta;
 8001aac:	1a89      	subs	r1, r1, r2
  while (p->delta < delta) {
 8001aae:	689a      	ldr	r2, [r3, #8]
 8001ab0:	428a      	cmp	r2, r1
 8001ab2:	d3fa      	bcc.n	8001aaa <chSchGoSleepTimeoutS+0x3a>
  }

  /* The timer is inserted in the delta list.*/
  vtp->next = p;
  vtp->prev = vtp->next->prev;
 8001ab4:	685a      	ldr	r2, [r3, #4]
  vtp->next = p;
 8001ab6:	9301      	str	r3, [sp, #4]
  vtp->prev = vtp->next->prev;
 8001ab8:	6062      	str	r2, [r4, #4]
  vtp->prev->next = vtp;
 8001aba:	6014      	str	r4, [r2, #0]
  p->prev = vtp;
 8001abc:	605c      	str	r4, [r3, #4]
  vtp->delta = delta
 8001abe:	60a1      	str	r1, [r4, #8]

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->delta -= delta;
 8001ac0:	689a      	ldr	r2, [r3, #8]
 8001ac2:	1a51      	subs	r1, r2, r1
 8001ac4:	6099      	str	r1, [r3, #8]
  ch.vtlist.delta = (systime_t)-1;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	425b      	negs	r3, r3
 8001aca:	626b      	str	r3, [r5, #36]	; 0x24
    chSchGoSleepS(newstate);
 8001acc:	f7ff ff48 	bl	8001960 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 8001ad0:	9b04      	ldr	r3, [sp, #16]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d012      	beq.n	8001afc <chSchGoSleepTimeoutS+0x8c>
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  systime_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.next != vtp) {
 8001ad6:	69eb      	ldr	r3, [r5, #28]
 8001ad8:	42a3      	cmp	r3, r4
 8001ada:	d023      	beq.n	8001b24 <chSchGoSleepTimeoutS+0xb4>
    /* Removing the element from the delta list.*/
    vtp->prev->next = vtp->next;
 8001adc:	6862      	ldr	r2, [r4, #4]
 8001ade:	9b01      	ldr	r3, [sp, #4]
 8001ae0:	6013      	str	r3, [r2, #0]
    vtp->next->prev = vtp->prev;
 8001ae2:	9b01      	ldr	r3, [sp, #4]
 8001ae4:	605a      	str	r2, [r3, #4]
    vtp->func = NULL;
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	60e2      	str	r2, [r4, #12]

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 8001aea:	002a      	movs	r2, r5
 8001aec:	321c      	adds	r2, #28
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d004      	beq.n	8001afc <chSchGoSleepTimeoutS+0x8c>
      vtp->next->delta += vtp->delta;
 8001af2:	6899      	ldr	r1, [r3, #8]
 8001af4:	68a2      	ldr	r2, [r4, #8]
 8001af6:	468c      	mov	ip, r1
 8001af8:	4462      	add	r2, ip
 8001afa:	609a      	str	r2, [r3, #8]
  return currp->u.rdymsg;
 8001afc:	69ab      	ldr	r3, [r5, #24]
 8001afe:	6a18      	ldr	r0, [r3, #32]
}
 8001b00:	b007      	add	sp, #28
 8001b02:	bdf0      	pop	{r4, r5, r6, r7, pc}
      delta -= p->delta;
 8001b04:	689a      	ldr	r2, [r3, #8]
      p = p->next;
 8001b06:	681b      	ldr	r3, [r3, #0]
      delta -= p->delta;
 8001b08:	1a89      	subs	r1, r1, r2
 8001b0a:	689a      	ldr	r2, [r3, #8]
 8001b0c:	e7d0      	b.n	8001ab0 <chSchGoSleepTimeoutS+0x40>
    chSchGoSleepS(newstate);
 8001b0e:	f7ff ff27 	bl	8001960 <chSchGoSleepS>
 8001b12:	4d1d      	ldr	r5, [pc, #116]	; (8001b88 <chSchGoSleepTimeoutS+0x118>)
 8001b14:	e7f2      	b.n	8001afc <chSchGoSleepTimeoutS+0x8c>
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
 8001b16:	2102      	movs	r1, #2
 8001b18:	e7b9      	b.n	8001a8e <chSchGoSleepTimeoutS+0x1e>
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8001b1a:	2780      	movs	r7, #128	; 0x80
      port_timer_set_alarm(ch.vtlist.lasttime + delta);
 8001b1c:	1876      	adds	r6, r6, r1
 8001b1e:	05ff      	lsls	r7, r7, #23
 8001b20:	637e      	str	r6, [r7, #52]	; 0x34
 8001b22:	e7c5      	b.n	8001ab0 <chSchGoSleepTimeoutS+0x40>
    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.next = vtp->next;
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
 8001b24:	002b      	movs	r3, r5
  vtp->func = NULL;
 8001b26:	2100      	movs	r1, #0
  ch.vtlist.next = vtp->next;
 8001b28:	6822      	ldr	r2, [r4, #0]
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
 8001b2a:	331c      	adds	r3, #28
  ch.vtlist.next = vtp->next;
 8001b2c:	61ea      	str	r2, [r5, #28]
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
 8001b2e:	6053      	str	r3, [r2, #4]
  vtp->func = NULL;
 8001b30:	60e1      	str	r1, [r4, #12]

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d024      	beq.n	8001b80 <chSchGoSleepTimeoutS+0x110>

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.next->delta += vtp->delta;
 8001b36:	6891      	ldr	r1, [r2, #8]
 8001b38:	68a3      	ldr	r3, [r4, #8]
 8001b3a:	468c      	mov	ip, r1
 8001b3c:	4463      	add	r3, ip
 8001b3e:	6093      	str	r3, [r2, #8]
  return (systime_t)STM32_ST_TIM->CNT;
 8001b40:	2280      	movs	r2, #128	; 0x80
 8001b42:	05d2      	lsls	r2, r2, #23
 8001b44:	6a51      	ldr	r1, [r2, #36]	; 0x24
/*  if (ch.vtlist.next->delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.lasttime;
 8001b46:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8001b48:	1a8a      	subs	r2, r1, r2

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= ch.vtlist.next->delta) {
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d9d6      	bls.n	8001afc <chSchGoSleepTimeoutS+0x8c>
    return;
  }

  /* Distance from the next scheduled event and now.*/
  delta = ch.vtlist.next->delta - nowdelta;
 8001b4e:	1a9b      	subs	r3, r3, r2

  /* Making sure to not schedule an event closer than CH_CFG_ST_TIMEDELTA
     ticks from now.*/
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d904      	bls.n	8001b5e <chSchGoSleepTimeoutS+0xee>
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8001b54:	2280      	movs	r2, #128	; 0x80
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
  }

  port_timer_set_alarm(ch.vtlist.lasttime + nowdelta + delta);
 8001b56:	18cb      	adds	r3, r1, r3
 8001b58:	05d2      	lsls	r2, r2, #23
 8001b5a:	6353      	str	r3, [r2, #52]	; 0x34
 8001b5c:	e7ce      	b.n	8001afc <chSchGoSleepTimeoutS+0x8c>
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
 8001b5e:	2302      	movs	r3, #2
 8001b60:	e7f8      	b.n	8001b54 <chSchGoSleepTimeoutS+0xe4>
      vtp->next = (virtual_timer_t *)&ch.vtlist;
 8001b62:	9301      	str	r3, [sp, #4]
      vtp->prev = (virtual_timer_t *)&ch.vtlist;
 8001b64:	6063      	str	r3, [r4, #4]
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8001b66:	2380      	movs	r3, #128	; 0x80
      ch.vtlist.lasttime = now;
 8001b68:	62aa      	str	r2, [r5, #40]	; 0x28
      vtp->delta = delay;
 8001b6a:	60a1      	str	r1, [r4, #8]
      port_timer_start_alarm(ch.vtlist.lasttime + delay);
 8001b6c:	1851      	adds	r1, r2, r1
  STM32_ST_TIM->SR     = 0;
 8001b6e:	2200      	movs	r2, #0
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8001b70:	05db      	lsls	r3, r3, #23
      ch.vtlist.next = vtp;
 8001b72:	61ec      	str	r4, [r5, #28]
      ch.vtlist.prev = vtp;
 8001b74:	622c      	str	r4, [r5, #32]
 8001b76:	6359      	str	r1, [r3, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 8001b78:	611a      	str	r2, [r3, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8001b7a:	3202      	adds	r2, #2
 8001b7c:	60da      	str	r2, [r3, #12]
 8001b7e:	e7a5      	b.n	8001acc <chSchGoSleepTimeoutS+0x5c>
  STM32_ST_TIM->DIER = 0;
 8001b80:	2380      	movs	r3, #128	; 0x80
 8001b82:	05db      	lsls	r3, r3, #23
 8001b84:	60d9      	str	r1, [r3, #12]
 8001b86:	e7b9      	b.n	8001afc <chSchGoSleepTimeoutS+0x8c>
 8001b88:	20000a78 	.word	0x20000a78
 8001b8c:	080018f1 	.word	0x080018f1

08001b90 <chThdEnqueueTimeoutS>:
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {
 8001b90:	b510      	push	{r4, lr}
  if (TIME_IMMEDIATE == timeout) {
 8001b92:	2900      	cmp	r1, #0
 8001b94:	d00a      	beq.n	8001bac <chThdEnqueueTimeoutS+0x1c>
  queue_insert(currp, tqp);
 8001b96:	4b07      	ldr	r3, [pc, #28]	; (8001bb4 <chThdEnqueueTimeoutS+0x24>)
  tp->queue.prev             = tqp->prev;
 8001b98:	6842      	ldr	r2, [r0, #4]
 8001b9a:	699b      	ldr	r3, [r3, #24]
  tp->queue.next             = (thread_t *)tqp;
 8001b9c:	6018      	str	r0, [r3, #0]
  tp->queue.prev             = tqp->prev;
 8001b9e:	605a      	str	r2, [r3, #4]
  tp->queue.prev->queue.next = tp;
 8001ba0:	6013      	str	r3, [r2, #0]
  tqp->prev                  = tp;
 8001ba2:	6043      	str	r3, [r0, #4]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8001ba4:	2004      	movs	r0, #4
 8001ba6:	f7ff ff63 	bl	8001a70 <chSchGoSleepTimeoutS>
}
 8001baa:	bd10      	pop	{r4, pc}
    return MSG_TIMEOUT;
 8001bac:	2001      	movs	r0, #1
 8001bae:	4240      	negs	r0, r0
 8001bb0:	e7fb      	b.n	8001baa <chThdEnqueueTimeoutS+0x1a>
 8001bb2:	46c0      	nop			; (mov r8, r8)
 8001bb4:	20000a78 	.word	0x20000a78
	...

08001bc0 <oqWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, systime_t timeout) {
 8001bc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bc2:	4656      	mov	r6, sl
 8001bc4:	464d      	mov	r5, r9
 8001bc6:	4644      	mov	r4, r8
 8001bc8:	465f      	mov	r7, fp
 8001bca:	b4f0      	push	{r4, r5, r6, r7}
 8001bcc:	000e      	movs	r6, r1
  systime_t deadline;
  qnotify_t nfy = oqp->q_notify;
 8001bce:	69c1      	ldr	r1, [r0, #28]
                      size_t n, systime_t timeout) {
 8001bd0:	b085      	sub	sp, #20
 8001bd2:	0015      	movs	r5, r2
 8001bd4:	9301      	str	r3, [sp, #4]
 8001bd6:	001a      	movs	r2, r3
 8001bd8:	0004      	movs	r4, r0
  qnotify_t nfy = oqp->q_notify;
 8001bda:	4689      	mov	r9, r1
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8001bdc:	2320      	movs	r3, #32
 8001bde:	f383 8811 	msr	BASEPRI, r3
  return (systime_t)STM32_ST_TIM->CNT;
 8001be2:	2380      	movs	r3, #128	; 0x80
  osalSysLock();

  /* Time deadline for the whole operation, note the result is invalid
     when timeout is TIME_INFINITE or TIME_IMMEDIATE but in that case
     the deadline is not used.*/
  deadline = osalOsGetSystemTimeX() + timeout;
 8001be4:	4694      	mov	ip, r2
 8001be6:	05db      	lsls	r3, r3, #23
 8001be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  size_t w = 0;
 8001bea:	2700      	movs	r7, #0
  deadline = osalOsGetSystemTimeX() + timeout;
 8001bec:	4463      	add	r3, ip
 8001bee:	9303      	str	r3, [sp, #12]
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	469a      	mov	sl, r3
 8001bf4:	3320      	adds	r3, #32
 8001bf6:	469b      	mov	fp, r3
    msg_t msg;

    while (oqIsFullI(oqp)) {
      /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
         deadline.*/
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 8001bf8:	1e53      	subs	r3, r2, #1
 8001bfa:	9302      	str	r3, [sp, #8]
    while (oqIsFullI(oqp)) {
 8001bfc:	68a3      	ldr	r3, [r4, #8]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d020      	beq.n	8001c44 <oqWriteTimeout+0x84>
        return w;
      }
    }

    /* Putting the character into the queue.*/
    oqp->q_counter--;
 8001c02:	68a3      	ldr	r3, [r4, #8]
 8001c04:	3b01      	subs	r3, #1
 8001c06:	60a3      	str	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 8001c08:	6963      	ldr	r3, [r4, #20]
 8001c0a:	1c5a      	adds	r2, r3, #1
 8001c0c:	6162      	str	r2, [r4, #20]
 8001c0e:	1c72      	adds	r2, r6, #1
 8001c10:	4690      	mov	r8, r2
 8001c12:	7832      	ldrb	r2, [r6, #0]
 8001c14:	701a      	strb	r2, [r3, #0]
    if (oqp->q_wrptr >= oqp->q_top) {
 8001c16:	6963      	ldr	r3, [r4, #20]
 8001c18:	6922      	ldr	r2, [r4, #16]
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d301      	bcc.n	8001c22 <oqWriteTimeout+0x62>
      oqp->q_wrptr = oqp->q_buffer;
 8001c1e:	68e3      	ldr	r3, [r4, #12]
 8001c20:	6163      	str	r3, [r4, #20]
    }

    /* Inform the low side that the queue has at least one character available.*/
    if (nfy != NULL) {
 8001c22:	464b      	mov	r3, r9
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <oqWriteTimeout+0x6c>
      nfy(oqp);
 8001c28:	0020      	movs	r0, r4
 8001c2a:	47c8      	blx	r9
 8001c2c:	f38a 8811 	msr	BASEPRI, sl

    /* Giving a preemption chance in a controlled point.*/
    osalSysUnlock();

    w++;
    if (--n == 0U) {
 8001c30:	3d01      	subs	r5, #1
    w++;
 8001c32:	3701      	adds	r7, #1
    if (--n == 0U) {
 8001c34:	2d00      	cmp	r5, #0
 8001c36:	d018      	beq.n	8001c6a <oqWriteTimeout+0xaa>
 8001c38:	f38b 8811 	msr	BASEPRI, fp
    while (oqIsFullI(oqp)) {
 8001c3c:	68a3      	ldr	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 8001c3e:	4646      	mov	r6, r8
    while (oqIsFullI(oqp)) {
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d1de      	bne.n	8001c02 <oqWriteTimeout+0x42>
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 8001c44:	9b02      	ldr	r3, [sp, #8]
 8001c46:	3303      	adds	r3, #3
 8001c48:	d817      	bhi.n	8001c7a <oqWriteTimeout+0xba>
 8001c4a:	2380      	movs	r3, #128	; 0x80
 8001c4c:	05db      	lsls	r3, r3, #23
 8001c4e:	6a59      	ldr	r1, [r3, #36]	; 0x24
        systime_t next_timeout = deadline - osalOsGetSystemTimeX();
 8001c50:	9b03      	ldr	r3, [sp, #12]
 8001c52:	1a59      	subs	r1, r3, r1
        if (next_timeout > timeout) {
 8001c54:	9b01      	ldr	r3, [sp, #4]
 8001c56:	428b      	cmp	r3, r1
 8001c58:	d304      	bcc.n	8001c64 <oqWriteTimeout+0xa4>
 8001c5a:	0020      	movs	r0, r4
 8001c5c:	f7ff ff98 	bl	8001b90 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
 8001c60:	2800      	cmp	r0, #0
 8001c62:	d0cb      	beq.n	8001bfc <oqWriteTimeout+0x3c>
 8001c64:	2300      	movs	r3, #0
 8001c66:	f383 8811 	msr	BASEPRI, r3
      return w;
    }

    osalSysLock();
  }
}
 8001c6a:	0038      	movs	r0, r7
 8001c6c:	b005      	add	sp, #20
 8001c6e:	bc3c      	pop	{r2, r3, r4, r5}
 8001c70:	4690      	mov	r8, r2
 8001c72:	4699      	mov	r9, r3
 8001c74:	46a2      	mov	sl, r4
 8001c76:	46ab      	mov	fp, r5
 8001c78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c7a:	9901      	ldr	r1, [sp, #4]
 8001c7c:	0020      	movs	r0, r4
 8001c7e:	f7ff ff87 	bl	8001b90 <chThdEnqueueTimeoutS>
 8001c82:	e7ed      	b.n	8001c60 <oqWriteTimeout+0xa0>
	...

08001c90 <_writet.lto_priv.60>:
static size_t _writet(void *ip, const uint8_t *bp, size_t n, systime_t timeout) {
 8001c90:	b510      	push	{r4, lr}
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 8001c92:	3030      	adds	r0, #48	; 0x30
 8001c94:	f7ff ff94 	bl	8001bc0 <oqWriteTimeout>
}
 8001c98:	bd10      	pop	{r4, pc}
 8001c9a:	46c0      	nop			; (mov r8, r8)
 8001c9c:	0000      	movs	r0, r0
	...

08001ca0 <_write.lto_priv.54>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 8001ca0:	2301      	movs	r3, #1
static size_t _write(void *ip, const uint8_t *bp, size_t n) {
 8001ca2:	b510      	push	{r4, lr}
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 8001ca4:	3030      	adds	r0, #48	; 0x30
 8001ca6:	425b      	negs	r3, r3
 8001ca8:	f7ff ff8a 	bl	8001bc0 <oqWriteTimeout>
}
 8001cac:	bd10      	pop	{r4, pc}
 8001cae:	46c0      	nop			; (mov r8, r8)

08001cb0 <oqPutTimeout>:
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {
 8001cb0:	b570      	push	{r4, r5, r6, lr}
 8001cb2:	2320      	movs	r3, #32
 8001cb4:	0004      	movs	r4, r0
 8001cb6:	000e      	movs	r6, r1
 8001cb8:	0015      	movs	r5, r2
 8001cba:	f383 8811 	msr	BASEPRI, r3
 8001cbe:	e005      	b.n	8001ccc <oqPutTimeout+0x1c>
 8001cc0:	0029      	movs	r1, r5
 8001cc2:	0020      	movs	r0, r4
 8001cc4:	f7ff ff64 	bl	8001b90 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
 8001cc8:	2800      	cmp	r0, #0
 8001cca:	db19      	blt.n	8001d00 <oqPutTimeout+0x50>
  while (oqIsFullI(oqp)) {
 8001ccc:	68a3      	ldr	r3, [r4, #8]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d0f6      	beq.n	8001cc0 <oqPutTimeout+0x10>
  oqp->q_counter--;
 8001cd2:	68a3      	ldr	r3, [r4, #8]
 8001cd4:	3b01      	subs	r3, #1
 8001cd6:	60a3      	str	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 8001cd8:	6963      	ldr	r3, [r4, #20]
 8001cda:	1c5a      	adds	r2, r3, #1
 8001cdc:	6162      	str	r2, [r4, #20]
 8001cde:	701e      	strb	r6, [r3, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 8001ce0:	6963      	ldr	r3, [r4, #20]
 8001ce2:	6922      	ldr	r2, [r4, #16]
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d301      	bcc.n	8001cec <oqPutTimeout+0x3c>
    oqp->q_wrptr = oqp->q_buffer;
 8001ce8:	68e3      	ldr	r3, [r4, #12]
 8001cea:	6163      	str	r3, [r4, #20]
  if (oqp->q_notify != NULL) {
 8001cec:	69e3      	ldr	r3, [r4, #28]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <oqPutTimeout+0x46>
    oqp->q_notify(oqp);
 8001cf2:	0020      	movs	r0, r4
 8001cf4:	4798      	blx	r3
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	f383 8811 	msr	BASEPRI, r3
 8001cfc:	2000      	movs	r0, #0
}
 8001cfe:	bd70      	pop	{r4, r5, r6, pc}
 8001d00:	2300      	movs	r3, #0
 8001d02:	f383 8811 	msr	BASEPRI, r3
 8001d06:	e7fa      	b.n	8001cfe <oqPutTimeout+0x4e>
	...

08001d10 <_putt.lto_priv.58>:
static msg_t _putt(void *ip, uint8_t b, systime_t timeout) {
 8001d10:	b510      	push	{r4, lr}
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 8001d12:	3030      	adds	r0, #48	; 0x30
 8001d14:	f7ff ffcc 	bl	8001cb0 <oqPutTimeout>
}
 8001d18:	bd10      	pop	{r4, pc}
 8001d1a:	46c0      	nop			; (mov r8, r8)
 8001d1c:	0000      	movs	r0, r0
	...

08001d20 <_put.lto_priv.56>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 8001d20:	2201      	movs	r2, #1
static msg_t _put(void *ip, uint8_t b) {
 8001d22:	b510      	push	{r4, lr}
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 8001d24:	3030      	adds	r0, #48	; 0x30
 8001d26:	4252      	negs	r2, r2
 8001d28:	f7ff ffc2 	bl	8001cb0 <oqPutTimeout>
}
 8001d2c:	bd10      	pop	{r4, pc}
 8001d2e:	46c0      	nop			; (mov r8, r8)

08001d30 <iqReadTimeout>:
                     size_t n, systime_t timeout) {
 8001d30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d32:	4656      	mov	r6, sl
 8001d34:	464d      	mov	r5, r9
 8001d36:	4644      	mov	r4, r8
 8001d38:	465f      	mov	r7, fp
 8001d3a:	b4f0      	push	{r4, r5, r6, r7}
 8001d3c:	000e      	movs	r6, r1
  qnotify_t nfy = iqp->q_notify;
 8001d3e:	69c1      	ldr	r1, [r0, #28]
                     size_t n, systime_t timeout) {
 8001d40:	b085      	sub	sp, #20
 8001d42:	0015      	movs	r5, r2
 8001d44:	9301      	str	r3, [sp, #4]
 8001d46:	001a      	movs	r2, r3
 8001d48:	0004      	movs	r4, r0
  qnotify_t nfy = iqp->q_notify;
 8001d4a:	4689      	mov	r9, r1
 8001d4c:	2320      	movs	r3, #32
 8001d4e:	f383 8811 	msr	BASEPRI, r3
 8001d52:	2380      	movs	r3, #128	; 0x80
  deadline = osalOsGetSystemTimeX() + timeout;
 8001d54:	4694      	mov	ip, r2
 8001d56:	05db      	lsls	r3, r3, #23
 8001d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  size_t r = 0;
 8001d5a:	2700      	movs	r7, #0
  deadline = osalOsGetSystemTimeX() + timeout;
 8001d5c:	4463      	add	r3, ip
 8001d5e:	9303      	str	r3, [sp, #12]
 8001d60:	2300      	movs	r3, #0
 8001d62:	469a      	mov	sl, r3
 8001d64:	3320      	adds	r3, #32
 8001d66:	469b      	mov	fp, r3
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 8001d68:	1e53      	subs	r3, r2, #1
 8001d6a:	9302      	str	r3, [sp, #8]
    while (iqIsEmptyI(iqp)) {
 8001d6c:	68a3      	ldr	r3, [r4, #8]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d020      	beq.n	8001db4 <iqReadTimeout+0x84>
    iqp->q_counter--;
 8001d72:	68a3      	ldr	r3, [r4, #8]
 8001d74:	3b01      	subs	r3, #1
 8001d76:	60a3      	str	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
 8001d78:	1c73      	adds	r3, r6, #1
 8001d7a:	4698      	mov	r8, r3
 8001d7c:	69a3      	ldr	r3, [r4, #24]
 8001d7e:	1c5a      	adds	r2, r3, #1
 8001d80:	61a2      	str	r2, [r4, #24]
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	7033      	strb	r3, [r6, #0]
    if (iqp->q_rdptr >= iqp->q_top) {
 8001d86:	69a3      	ldr	r3, [r4, #24]
 8001d88:	6922      	ldr	r2, [r4, #16]
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d301      	bcc.n	8001d92 <iqReadTimeout+0x62>
      iqp->q_rdptr = iqp->q_buffer;
 8001d8e:	68e3      	ldr	r3, [r4, #12]
 8001d90:	61a3      	str	r3, [r4, #24]
    if (nfy != NULL) {
 8001d92:	464b      	mov	r3, r9
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d001      	beq.n	8001d9c <iqReadTimeout+0x6c>
      nfy(iqp);
 8001d98:	0020      	movs	r0, r4
 8001d9a:	47c8      	blx	r9
 8001d9c:	f38a 8811 	msr	BASEPRI, sl
    if (--n == 0U) {
 8001da0:	3d01      	subs	r5, #1
    r++;
 8001da2:	3701      	adds	r7, #1
    if (--n == 0U) {
 8001da4:	2d00      	cmp	r5, #0
 8001da6:	d018      	beq.n	8001dda <iqReadTimeout+0xaa>
 8001da8:	f38b 8811 	msr	BASEPRI, fp
    while (iqIsEmptyI(iqp)) {
 8001dac:	68a3      	ldr	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
 8001dae:	4646      	mov	r6, r8
    while (iqIsEmptyI(iqp)) {
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d1de      	bne.n	8001d72 <iqReadTimeout+0x42>
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 8001db4:	9b02      	ldr	r3, [sp, #8]
 8001db6:	3303      	adds	r3, #3
 8001db8:	d817      	bhi.n	8001dea <iqReadTimeout+0xba>
 8001dba:	2380      	movs	r3, #128	; 0x80
 8001dbc:	05db      	lsls	r3, r3, #23
 8001dbe:	6a59      	ldr	r1, [r3, #36]	; 0x24
        systime_t next_timeout = deadline - osalOsGetSystemTimeX();
 8001dc0:	9b03      	ldr	r3, [sp, #12]
 8001dc2:	1a59      	subs	r1, r3, r1
        if (next_timeout > timeout) {
 8001dc4:	9b01      	ldr	r3, [sp, #4]
 8001dc6:	428b      	cmp	r3, r1
 8001dc8:	d304      	bcc.n	8001dd4 <iqReadTimeout+0xa4>
 8001dca:	0020      	movs	r0, r4
 8001dcc:	f7ff fee0 	bl	8001b90 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
 8001dd0:	2800      	cmp	r0, #0
 8001dd2:	d0cb      	beq.n	8001d6c <iqReadTimeout+0x3c>
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	f383 8811 	msr	BASEPRI, r3
}
 8001dda:	0038      	movs	r0, r7
 8001ddc:	b005      	add	sp, #20
 8001dde:	bc3c      	pop	{r2, r3, r4, r5}
 8001de0:	4690      	mov	r8, r2
 8001de2:	4699      	mov	r9, r3
 8001de4:	46a2      	mov	sl, r4
 8001de6:	46ab      	mov	fp, r5
 8001de8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001dea:	9901      	ldr	r1, [sp, #4]
 8001dec:	0020      	movs	r0, r4
 8001dee:	f7ff fecf 	bl	8001b90 <chThdEnqueueTimeoutS>
 8001df2:	e7ed      	b.n	8001dd0 <iqReadTimeout+0xa0>
	...

08001e00 <_readt.lto_priv.61>:
static size_t _readt(void *ip, uint8_t *bp, size_t n, systime_t timeout) {
 8001e00:	b510      	push	{r4, lr}
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 8001e02:	300c      	adds	r0, #12
 8001e04:	f7ff ff94 	bl	8001d30 <iqReadTimeout>
}
 8001e08:	bd10      	pop	{r4, pc}
 8001e0a:	46c0      	nop			; (mov r8, r8)
 8001e0c:	0000      	movs	r0, r0
	...

08001e10 <_read.lto_priv.55>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 8001e10:	2301      	movs	r3, #1
static size_t _read(void *ip, uint8_t *bp, size_t n) {
 8001e12:	b510      	push	{r4, lr}
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 8001e14:	300c      	adds	r0, #12
 8001e16:	425b      	negs	r3, r3
 8001e18:	f7ff ff8a 	bl	8001d30 <iqReadTimeout>
}
 8001e1c:	bd10      	pop	{r4, pc}
 8001e1e:	46c0      	nop			; (mov r8, r8)

08001e20 <iqGetTimeout>:
msg_t iqGetTimeout(input_queue_t *iqp, systime_t timeout) {
 8001e20:	b570      	push	{r4, r5, r6, lr}
 8001e22:	2320      	movs	r3, #32
 8001e24:	0004      	movs	r4, r0
 8001e26:	000d      	movs	r5, r1
 8001e28:	f383 8811 	msr	BASEPRI, r3
 8001e2c:	e005      	b.n	8001e3a <iqGetTimeout+0x1a>
 8001e2e:	0029      	movs	r1, r5
 8001e30:	0020      	movs	r0, r4
 8001e32:	f7ff fead 	bl	8001b90 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
 8001e36:	2800      	cmp	r0, #0
 8001e38:	db18      	blt.n	8001e6c <iqGetTimeout+0x4c>
  while (iqIsEmptyI(iqp)) {
 8001e3a:	68a3      	ldr	r3, [r4, #8]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d0f6      	beq.n	8001e2e <iqGetTimeout+0xe>
  iqp->q_counter--;
 8001e40:	68a3      	ldr	r3, [r4, #8]
  b = *iqp->q_rdptr++;
 8001e42:	69a2      	ldr	r2, [r4, #24]
  iqp->q_counter--;
 8001e44:	3b01      	subs	r3, #1
 8001e46:	60a3      	str	r3, [r4, #8]
  b = *iqp->q_rdptr++;
 8001e48:	1c53      	adds	r3, r2, #1
 8001e4a:	61a3      	str	r3, [r4, #24]
 8001e4c:	7815      	ldrb	r5, [r2, #0]
  if (iqp->q_rdptr >= iqp->q_top) {
 8001e4e:	6922      	ldr	r2, [r4, #16]
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d301      	bcc.n	8001e58 <iqGetTimeout+0x38>
    iqp->q_rdptr = iqp->q_buffer;
 8001e54:	68e3      	ldr	r3, [r4, #12]
 8001e56:	61a3      	str	r3, [r4, #24]
  if (iqp->q_notify != NULL) {
 8001e58:	69e3      	ldr	r3, [r4, #28]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <iqGetTimeout+0x42>
    iqp->q_notify(iqp);
 8001e5e:	0020      	movs	r0, r4
 8001e60:	4798      	blx	r3
 8001e62:	2300      	movs	r3, #0
 8001e64:	f383 8811 	msr	BASEPRI, r3
  return (msg_t)b;
 8001e68:	0028      	movs	r0, r5
}
 8001e6a:	bd70      	pop	{r4, r5, r6, pc}
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	f383 8811 	msr	BASEPRI, r3
 8001e72:	e7fa      	b.n	8001e6a <iqGetTimeout+0x4a>
	...

08001e80 <_gett.lto_priv.59>:
static msg_t _gett(void *ip, systime_t timeout) {
 8001e80:	b510      	push	{r4, lr}
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 8001e82:	300c      	adds	r0, #12
 8001e84:	f7ff ffcc 	bl	8001e20 <iqGetTimeout>
}
 8001e88:	bd10      	pop	{r4, pc}
 8001e8a:	46c0      	nop			; (mov r8, r8)
 8001e8c:	0000      	movs	r0, r0
	...

08001e90 <_get.lto_priv.57>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 8001e90:	2101      	movs	r1, #1
static msg_t _get(void *ip) {
 8001e92:	b510      	push	{r4, lr}
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 8001e94:	300c      	adds	r0, #12
 8001e96:	4249      	negs	r1, r1
 8001e98:	f7ff ffc2 	bl	8001e20 <iqGetTimeout>
}
 8001e9c:	bd10      	pop	{r4, pc}
 8001e9e:	46c0      	nop			; (mov r8, r8)

08001ea0 <chThdSleep>:
void chThdSleep(systime_t time) {
 8001ea0:	b510      	push	{r4, lr}
 8001ea2:	0001      	movs	r1, r0
 8001ea4:	2320      	movs	r3, #32
 8001ea6:	f383 8811 	msr	BASEPRI, r3
 8001eaa:	2008      	movs	r0, #8
 8001eac:	f7ff fde0 	bl	8001a70 <chSchGoSleepTimeoutS>
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	f383 8811 	msr	BASEPRI, r3
}
 8001eb6:	bd10      	pop	{r4, pc}
	...

08001ec0 <chSchReadyI>:
  tp->state = CH_STATE_READY;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	6882      	ldr	r2, [r0, #8]
 8001ec4:	7703      	strb	r3, [r0, #28]
  cp = (thread_t *)&ch.rlist.queue;
 8001ec6:	4b05      	ldr	r3, [pc, #20]	; (8001edc <chSchReadyI+0x1c>)
    cp = cp->queue.next;
 8001ec8:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8001eca:	6899      	ldr	r1, [r3, #8]
 8001ecc:	4291      	cmp	r1, r2
 8001ece:	d2fb      	bcs.n	8001ec8 <chSchReadyI+0x8>
  tp->queue.prev             = cp->queue.prev;
 8001ed0:	685a      	ldr	r2, [r3, #4]
  tp->queue.next             = cp;
 8001ed2:	6003      	str	r3, [r0, #0]
  tp->queue.prev             = cp->queue.prev;
 8001ed4:	6042      	str	r2, [r0, #4]
  tp->queue.prev->queue.next = tp;
 8001ed6:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 8001ed8:	6058      	str	r0, [r3, #4]
}
 8001eda:	4770      	bx	lr
 8001edc:	20000a78 	.word	0x20000a78

08001ee0 <chEvtBroadcastFlagsI>:
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8001ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  elp = esp->next;
 8001ee2:	6804      	ldr	r4, [r0, #0]
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8001ee4:	0006      	movs	r6, r0
 8001ee6:	000d      	movs	r5, r1
    tp->u.rdymsg = MSG_OK;
 8001ee8:	2700      	movs	r7, #0
  while (elp != (event_listener_t *)esp) {
 8001eea:	42a0      	cmp	r0, r4
 8001eec:	d103      	bne.n	8001ef6 <chEvtBroadcastFlagsI+0x16>
 8001eee:	e01e      	b.n	8001f2e <chEvtBroadcastFlagsI+0x4e>
    elp = elp->next;
 8001ef0:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 8001ef2:	42a6      	cmp	r6, r4
 8001ef4:	d01b      	beq.n	8001f2e <chEvtBroadcastFlagsI+0x4e>
    elp->flags |= flags;
 8001ef6:	68e3      	ldr	r3, [r4, #12]
 8001ef8:	432b      	orrs	r3, r5
 8001efa:	60e3      	str	r3, [r4, #12]
    if ((flags == (eventflags_t)0) ||
 8001efc:	2d00      	cmp	r5, #0
 8001efe:	d002      	beq.n	8001f06 <chEvtBroadcastFlagsI+0x26>
 8001f00:	6922      	ldr	r2, [r4, #16]
 8001f02:	421a      	tst	r2, r3
 8001f04:	d0f4      	beq.n	8001ef0 <chEvtBroadcastFlagsI+0x10>
      chEvtSignalI(elp->listener, elp->events);
 8001f06:	6860      	ldr	r0, [r4, #4]
  tp->epending |= events;
 8001f08:	68a3      	ldr	r3, [r4, #8]
 8001f0a:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8001f0c:	4313      	orrs	r3, r2
  if (((tp->state == CH_STATE_WTOREVT) &&
 8001f0e:	7f02      	ldrb	r2, [r0, #28]
  tp->epending |= events;
 8001f10:	6303      	str	r3, [r0, #48]	; 0x30
  if (((tp->state == CH_STATE_WTOREVT) &&
 8001f12:	2a0a      	cmp	r2, #10
 8001f14:	d00c      	beq.n	8001f30 <chEvtBroadcastFlagsI+0x50>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 8001f16:	2a0b      	cmp	r2, #11
 8001f18:	d1ea      	bne.n	8001ef0 <chEvtBroadcastFlagsI+0x10>
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
 8001f1a:	6a02      	ldr	r2, [r0, #32]
      ((tp->state == CH_STATE_WTANDEVT) &&
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d1e6      	bne.n	8001ef0 <chEvtBroadcastFlagsI+0x10>
    tp->u.rdymsg = MSG_OK;
 8001f22:	6207      	str	r7, [r0, #32]
    (void) chSchReadyI(tp);
 8001f24:	f7ff ffcc 	bl	8001ec0 <chSchReadyI>
    elp = elp->next;
 8001f28:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 8001f2a:	42a6      	cmp	r6, r4
 8001f2c:	d1e3      	bne.n	8001ef6 <chEvtBroadcastFlagsI+0x16>
}
 8001f2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (((tp->state == CH_STATE_WTOREVT) &&
 8001f30:	6a02      	ldr	r2, [r0, #32]
 8001f32:	421a      	tst	r2, r3
 8001f34:	d0dc      	beq.n	8001ef0 <chEvtBroadcastFlagsI+0x10>
    tp->u.rdymsg = MSG_OK;
 8001f36:	6207      	str	r7, [r0, #32]
    (void) chSchReadyI(tp);
 8001f38:	f7ff ffc2 	bl	8001ec0 <chSchReadyI>
 8001f3c:	e7f4      	b.n	8001f28 <chEvtBroadcastFlagsI+0x48>
 8001f3e:	46c0      	nop			; (mov r8, r8)

08001f40 <Vector98>:
OSAL_IRQ_HANDLER(STM32_CAN1_SCE_HANDLER) {
 8001f40:	b570      	push	{r4, r5, r6, lr}
  msr = canp->can->MSR;
 8001f42:	4c15      	ldr	r4, [pc, #84]	; (8001f98 <Vector98+0x58>)
 8001f44:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001f46:	685d      	ldr	r5, [r3, #4]
  canp->can->MSR = msr;
 8001f48:	605d      	str	r5, [r3, #4]
  if (msr & CAN_MSR_WKUI) {
 8001f4a:	072a      	lsls	r2, r5, #28
 8001f4c:	d411      	bmi.n	8001f72 <Vector98+0x32>
  if (msr & CAN_MSR_ERRI) {
 8001f4e:	076b      	lsls	r3, r5, #29
 8001f50:	d50c      	bpl.n	8001f6c <Vector98+0x2c>
    uint32_t esr = canp->can->ESR;
 8001f52:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001f54:	6999      	ldr	r1, [r3, #24]
 8001f56:	2320      	movs	r3, #32
 8001f58:	f383 8811 	msr	BASEPRI, r3
  chEvtBroadcastFlagsI(esp, flags);
 8001f5c:	0020      	movs	r0, r4
 8001f5e:	0409      	lsls	r1, r1, #16
 8001f60:	3020      	adds	r0, #32
 8001f62:	f7ff ffbd 	bl	8001ee0 <chEvtBroadcastFlagsI>
 8001f66:	2300      	movs	r3, #0
 8001f68:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_EPILOGUE();
 8001f6c:	f7ff fd08 	bl	8001980 <_port_irq_epilogue>
}
 8001f70:	bd70      	pop	{r4, r5, r6, pc}
    canp->state = CAN_READY;
 8001f72:	2203      	movs	r2, #3
    canp->can->MCR &= ~CAN_MCR_SLEEP;
 8001f74:	2102      	movs	r1, #2
    canp->state = CAN_READY;
 8001f76:	7022      	strb	r2, [r4, #0]
    canp->can->MCR &= ~CAN_MCR_SLEEP;
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	438a      	bics	r2, r1
 8001f7c:	601a      	str	r2, [r3, #0]
 8001f7e:	2320      	movs	r3, #32
 8001f80:	f383 8811 	msr	BASEPRI, r3
 8001f84:	0020      	movs	r0, r4
 8001f86:	2100      	movs	r1, #0
 8001f88:	3028      	adds	r0, #40	; 0x28
 8001f8a:	f7ff ffa9 	bl	8001ee0 <chEvtBroadcastFlagsI>
 8001f8e:	2300      	movs	r3, #0
 8001f90:	f383 8811 	msr	BASEPRI, r3
 8001f94:	e7db      	b.n	8001f4e <Vector98+0xe>
 8001f96:	46c0      	nop			; (mov r8, r8)
 8001f98:	20000610 	.word	0x20000610
 8001f9c:	00000000 	.word	0x00000000

08001fa0 <Vector94>:
OSAL_IRQ_HANDLER(STM32_CAN1_RX1_HANDLER) {
 8001fa0:	b570      	push	{r4, r5, r6, lr}
  rf1r = canp->can->RF1R;
 8001fa2:	4c16      	ldr	r4, [pc, #88]	; (8001ffc <Vector94+0x5c>)
 8001fa4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001fa6:	691d      	ldr	r5, [r3, #16]
  if ((rf1r & CAN_RF1R_FMP1) > 0) {
 8001fa8:	07aa      	lsls	r2, r5, #30
 8001faa:	d112      	bne.n	8001fd2 <Vector94+0x32>
  if ((rf1r & CAN_RF1R_FOVR1) > 0) {
 8001fac:	2310      	movs	r3, #16
 8001fae:	422b      	tst	r3, r5
 8001fb0:	d00c      	beq.n	8001fcc <Vector94+0x2c>
    canp->can->RF1R = CAN_RF1R_FOVR1;
 8001fb2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001fb4:	6113      	str	r3, [r2, #16]
 8001fb6:	3310      	adds	r3, #16
 8001fb8:	f383 8811 	msr	BASEPRI, r3
 8001fbc:	0020      	movs	r0, r4
 8001fbe:	2110      	movs	r1, #16
 8001fc0:	3020      	adds	r0, #32
 8001fc2:	f7ff ff8d 	bl	8001ee0 <chEvtBroadcastFlagsI>
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_EPILOGUE();
 8001fcc:	f7ff fcd8 	bl	8001980 <_port_irq_epilogue>
}
 8001fd0:	bd70      	pop	{r4, r5, r6, pc}
    canp->can->IER &= ~CAN_IER_FMPIE1;
 8001fd2:	2110      	movs	r1, #16
 8001fd4:	695a      	ldr	r2, [r3, #20]
 8001fd6:	438a      	bics	r2, r1
 8001fd8:	615a      	str	r2, [r3, #20]
 8001fda:	2320      	movs	r3, #32
 8001fdc:	f383 8811 	msr	BASEPRI, r3
  chThdDequeueAllI(tqp, msg);
 8001fe0:	0020      	movs	r0, r4
 8001fe2:	3010      	adds	r0, #16
 8001fe4:	f000 f95c 	bl	80022a0 <chThdDequeueAllI.constprop.42>
  chEvtBroadcastFlagsI(esp, flags);
 8001fe8:	0020      	movs	r0, r4
 8001fea:	2102      	movs	r1, #2
 8001fec:	3018      	adds	r0, #24
 8001fee:	f7ff ff77 	bl	8001ee0 <chEvtBroadcastFlagsI>
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	f383 8811 	msr	BASEPRI, r3
 8001ff8:	e7d8      	b.n	8001fac <Vector94+0xc>
 8001ffa:	46c0      	nop			; (mov r8, r8)
 8001ffc:	20000610 	.word	0x20000610

08002000 <Vector90>:
OSAL_IRQ_HANDLER(STM32_CAN1_RX0_HANDLER) {
 8002000:	b570      	push	{r4, r5, r6, lr}
  rf0r = canp->can->RF0R;
 8002002:	4c16      	ldr	r4, [pc, #88]	; (800205c <Vector90+0x5c>)
 8002004:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002006:	68dd      	ldr	r5, [r3, #12]
  if ((rf0r & CAN_RF0R_FMP0) > 0) {
 8002008:	07aa      	lsls	r2, r5, #30
 800200a:	d112      	bne.n	8002032 <Vector90+0x32>
  if ((rf0r & CAN_RF0R_FOVR0) > 0) {
 800200c:	2310      	movs	r3, #16
 800200e:	422b      	tst	r3, r5
 8002010:	d00c      	beq.n	800202c <Vector90+0x2c>
    canp->can->RF0R = CAN_RF0R_FOVR0;
 8002012:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002014:	60d3      	str	r3, [r2, #12]
 8002016:	3310      	adds	r3, #16
 8002018:	f383 8811 	msr	BASEPRI, r3
 800201c:	0020      	movs	r0, r4
 800201e:	2110      	movs	r1, #16
 8002020:	3020      	adds	r0, #32
 8002022:	f7ff ff5d 	bl	8001ee0 <chEvtBroadcastFlagsI>
 8002026:	2300      	movs	r3, #0
 8002028:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_EPILOGUE();
 800202c:	f7ff fca8 	bl	8001980 <_port_irq_epilogue>
}
 8002030:	bd70      	pop	{r4, r5, r6, pc}
    canp->can->IER &= ~CAN_IER_FMPIE0;
 8002032:	2102      	movs	r1, #2
 8002034:	695a      	ldr	r2, [r3, #20]
 8002036:	438a      	bics	r2, r1
 8002038:	615a      	str	r2, [r3, #20]
 800203a:	2320      	movs	r3, #32
 800203c:	f383 8811 	msr	BASEPRI, r3
  chThdDequeueAllI(tqp, msg);
 8002040:	0020      	movs	r0, r4
 8002042:	3010      	adds	r0, #16
 8002044:	f000 f92c 	bl	80022a0 <chThdDequeueAllI.constprop.42>
  chEvtBroadcastFlagsI(esp, flags);
 8002048:	0020      	movs	r0, r4
 800204a:	2101      	movs	r1, #1
 800204c:	3018      	adds	r0, #24
 800204e:	f7ff ff47 	bl	8001ee0 <chEvtBroadcastFlagsI>
 8002052:	2300      	movs	r3, #0
 8002054:	f383 8811 	msr	BASEPRI, r3
 8002058:	e7d8      	b.n	800200c <Vector90+0xc>
 800205a:	46c0      	nop			; (mov r8, r8)
 800205c:	20000610 	.word	0x20000610

08002060 <Vector8C>:
  tsr = canp->can->TSR;
 8002060:	4b1c      	ldr	r3, [pc, #112]	; (80020d4 <Vector8C+0x74>)
OSAL_IRQ_HANDLER(STM32_CAN1_TX_HANDLER) {
 8002062:	b570      	push	{r4, r5, r6, lr}
  tsr = canp->can->TSR;
 8002064:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  flags = 0U;
 8002066:	2500      	movs	r5, #0
  tsr = canp->can->TSR;
 8002068:	6893      	ldr	r3, [r2, #8]
  canp->can->TSR = tsr;
 800206a:	6093      	str	r3, [r2, #8]
  if ((tsr & CAN_TSR_RQCP0) != 0U) {
 800206c:	07da      	lsls	r2, r3, #31
 800206e:	d503      	bpl.n	8002078 <Vector8C+0x18>
    if ((tsr & (CAN_TSR_ALST0 | CAN_TSR_TERR0)) != 0U) {
 8002070:	220c      	movs	r2, #12
      flags |= CAN_MAILBOX_TO_MASK(1U);
 8002072:	3501      	adds	r5, #1
    if ((tsr & (CAN_TSR_ALST0 | CAN_TSR_TERR0)) != 0U) {
 8002074:	421a      	tst	r2, r3
 8002076:	d125      	bne.n	80020c4 <Vector8C+0x64>
  if ((tsr & CAN_TSR_RQCP1) != 0U) {
 8002078:	05da      	lsls	r2, r3, #23
 800207a:	d506      	bpl.n	800208a <Vector8C+0x2a>
    if ((tsr & (CAN_TSR_ALST1 | CAN_TSR_TERR1)) != 0U) {
 800207c:	22c0      	movs	r2, #192	; 0xc0
 800207e:	0112      	lsls	r2, r2, #4
 8002080:	4213      	tst	r3, r2
 8002082:	d01c      	beq.n	80020be <Vector8C+0x5e>
      flags |= CAN_MAILBOX_TO_MASK(2U) << 16U;
 8002084:	2280      	movs	r2, #128	; 0x80
 8002086:	0292      	lsls	r2, r2, #10
 8002088:	4315      	orrs	r5, r2
  if ((tsr & CAN_TSR_RQCP2) != 0U) {
 800208a:	03da      	lsls	r2, r3, #15
 800208c:	d505      	bpl.n	800209a <Vector8C+0x3a>
    if ((tsr & (CAN_TSR_ALST2 | CAN_TSR_TERR2)) != 0U) {
 800208e:	22c0      	movs	r2, #192	; 0xc0
 8002090:	0312      	lsls	r2, r2, #12
 8002092:	4213      	tst	r3, r2
 8002094:	d119      	bne.n	80020ca <Vector8C+0x6a>
      flags |= CAN_MAILBOX_TO_MASK(3U);
 8002096:	2304      	movs	r3, #4
 8002098:	431d      	orrs	r5, r3
 800209a:	2320      	movs	r3, #32
 800209c:	f383 8811 	msr	BASEPRI, r3
  chThdDequeueAllI(tqp, msg);
 80020a0:	4c0d      	ldr	r4, [pc, #52]	; (80020d8 <Vector8C+0x78>)
 80020a2:	0020      	movs	r0, r4
 80020a4:	f000 f8fc 	bl	80022a0 <chThdDequeueAllI.constprop.42>
  chEvtBroadcastFlagsI(esp, flags);
 80020a8:	0020      	movs	r0, r4
 80020aa:	0029      	movs	r1, r5
 80020ac:	3014      	adds	r0, #20
 80020ae:	f7ff ff17 	bl	8001ee0 <chEvtBroadcastFlagsI>
 80020b2:	2300      	movs	r3, #0
 80020b4:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_EPILOGUE();
 80020b8:	f7ff fc62 	bl	8001980 <_port_irq_epilogue>
}
 80020bc:	bd70      	pop	{r4, r5, r6, pc}
      flags |= CAN_MAILBOX_TO_MASK(2U);
 80020be:	2202      	movs	r2, #2
 80020c0:	4315      	orrs	r5, r2
 80020c2:	e7e2      	b.n	800208a <Vector8C+0x2a>
      flags |= CAN_MAILBOX_TO_MASK(1U) << 16U;
 80020c4:	2580      	movs	r5, #128	; 0x80
 80020c6:	026d      	lsls	r5, r5, #9
 80020c8:	e7d6      	b.n	8002078 <Vector8C+0x18>
      flags |= CAN_MAILBOX_TO_MASK(3U) << 16U;
 80020ca:	2380      	movs	r3, #128	; 0x80
 80020cc:	02db      	lsls	r3, r3, #11
 80020ce:	431d      	orrs	r5, r3
 80020d0:	e7e3      	b.n	800209a <Vector8C+0x3a>
 80020d2:	46c0      	nop			; (mov r8, r8)
 80020d4:	20000610 	.word	0x20000610
 80020d8:	20000618 	.word	0x20000618
 80020dc:	00000000 	.word	0x00000000

080020e0 <chThdExit>:
void chThdExit(msg_t msg) {
 80020e0:	b570      	push	{r4, r5, r6, lr}
 80020e2:	2320      	movs	r3, #32
 80020e4:	f383 8811 	msr	BASEPRI, r3
  thread_t *tp = currp;
 80020e8:	4b0d      	ldr	r3, [pc, #52]	; (8002120 <chThdExit+0x40>)
 80020ea:	699c      	ldr	r4, [r3, #24]
  while (list_notempty(&tp->waiting)) {
 80020ec:	0025      	movs	r5, r4
  tp->u.exitcode = msg;
 80020ee:	6220      	str	r0, [r4, #32]
  return (bool)(tlp->next != (thread_t *)tlp);
 80020f0:	6a60      	ldr	r0, [r4, #36]	; 0x24
  while (list_notempty(&tp->waiting)) {
 80020f2:	3524      	adds	r5, #36	; 0x24
 80020f4:	4285      	cmp	r5, r0
 80020f6:	d006      	beq.n	8002106 <chThdExit+0x26>
  tlp->next = tp->queue.next;
 80020f8:	6803      	ldr	r3, [r0, #0]
 80020fa:	6263      	str	r3, [r4, #36]	; 0x24
    (void) chSchReadyI(list_remove(&tp->waiting));
 80020fc:	f7ff fee0 	bl	8001ec0 <chSchReadyI>
  return (bool)(tlp->next != (thread_t *)tlp);
 8002100:	6a60      	ldr	r0, [r4, #36]	; 0x24
  while (list_notempty(&tp->waiting)) {
 8002102:	42a8      	cmp	r0, r5
 8002104:	d1f8      	bne.n	80020f8 <chThdExit+0x18>
  if (tp->refs == (trefs_t)0) {
 8002106:	7fa3      	ldrb	r3, [r4, #30]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d104      	bne.n	8002116 <chThdExit+0x36>
    REG_REMOVE(tp);
 800210c:	6922      	ldr	r2, [r4, #16]
 800210e:	6963      	ldr	r3, [r4, #20]
 8002110:	611a      	str	r2, [r3, #16]
 8002112:	6922      	ldr	r2, [r4, #16]
 8002114:	6153      	str	r3, [r2, #20]
  chSchGoSleepS(CH_STATE_FINAL);
 8002116:	200f      	movs	r0, #15
 8002118:	f7ff fc22 	bl	8001960 <chSchGoSleepS>
}
 800211c:	bd70      	pop	{r4, r5, r6, pc}
 800211e:	46c0      	nop			; (mov r8, r8)
 8002120:	20000a78 	.word	0x20000a78
	...

08002130 <BusFault_Handler>:
 *
 * @notapi
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
__attribute__((weak))
void _unhandled_exception(void) {
 8002130:	e7fe      	b.n	8002130 <BusFault_Handler>
 8002132:	46c0      	nop			; (mov r8, r8)
	...

08002140 <__init_ram_areas>:
      *p = 0;
      p++;
    }
    rap++;
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 8002140:	2280      	movs	r2, #128	; 0x80
 8002142:	4694      	mov	ip, r2
void __init_ram_areas(void) {
 8002144:	b5f0      	push	{r4, r5, r6, r7, lr}
      *p = 0;
 8002146:	2600      	movs	r6, #0
  const ram_init_area_t *rap = ram_areas;
 8002148:	4f10      	ldr	r7, [pc, #64]	; (800218c <__init_ram_areas+0x4c>)
void __init_ram_areas(void) {
 800214a:	4d11      	ldr	r5, [pc, #68]	; (8002190 <__init_ram_areas+0x50>)
 800214c:	4c11      	ldr	r4, [pc, #68]	; (8002194 <__init_ram_areas+0x54>)
 800214e:	4b12      	ldr	r3, [pc, #72]	; (8002198 <__init_ram_areas+0x58>)
 8002150:	4912      	ldr	r1, [pc, #72]	; (800219c <__init_ram_areas+0x5c>)
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 8002152:	44bc      	add	ip, r7
    while (p < rap->clear_area) {
 8002154:	429c      	cmp	r4, r3
 8002156:	d90d      	bls.n	8002174 <__init_ram_areas+0x34>
 8002158:	001a      	movs	r2, r3
      *p = *tp;
 800215a:	c901      	ldmia	r1!, {r0}
 800215c:	c201      	stmia	r2!, {r0}
    while (p < rap->clear_area) {
 800215e:	4294      	cmp	r4, r2
 8002160:	d8fb      	bhi.n	800215a <__init_ram_areas+0x1a>
 8002162:	43da      	mvns	r2, r3
 8002164:	1914      	adds	r4, r2, r4
 8002166:	08a4      	lsrs	r4, r4, #2
 8002168:	3401      	adds	r4, #1
 800216a:	00a4      	lsls	r4, r4, #2
 800216c:	191b      	adds	r3, r3, r4
    while (p < rap->no_init_area) {
 800216e:	429d      	cmp	r5, r3
 8002170:	d902      	bls.n	8002178 <__init_ram_areas+0x38>
      *p = 0;
 8002172:	c340      	stmia	r3!, {r6}
    while (p < rap->no_init_area) {
 8002174:	429d      	cmp	r5, r3
 8002176:	d8fc      	bhi.n	8002172 <__init_ram_areas+0x32>
    rap++;
 8002178:	3710      	adds	r7, #16
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 800217a:	4567      	cmp	r7, ip
 800217c:	d004      	beq.n	8002188 <__init_ram_areas+0x48>
 800217e:	68bc      	ldr	r4, [r7, #8]
 8002180:	68fd      	ldr	r5, [r7, #12]
 8002182:	6839      	ldr	r1, [r7, #0]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	e7e5      	b.n	8002154 <__init_ram_areas+0x14>
#endif
}
 8002188:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800218a:	46c0      	nop			; (mov r8, r8)
 800218c:	080027d4 	.word	0x080027d4
 8002190:	20000ae4 	.word	0x20000ae4
 8002194:	20000ae4 	.word	0x20000ae4
 8002198:	20000ae4 	.word	0x20000ae4
 800219c:	08002a18 	.word	0x08002a18

080021a0 <__default_exit>:
void __default_exit(void) {
 80021a0:	e7fe      	b.n	80021a0 <__default_exit>
 80021a2:	46c0      	nop			; (mov r8, r8)
	...

080021b0 <__late_init>:
 80021b0:	4770      	bx	lr
 80021b2:	46c0      	nop			; (mov r8, r8)
	...

080021c0 <__core_init>:
}
 80021c0:	4770      	bx	lr
 80021c2:	46c0      	nop			; (mov r8, r8)
	...

080021d0 <chSchWakeupS.constprop.49>:
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 80021d0:	b570      	push	{r4, r5, r6, lr}
  ntp->u.rdymsg = msg;
 80021d2:	2500      	movs	r5, #0
  thread_t *otp = currp;
 80021d4:	4b11      	ldr	r3, [pc, #68]	; (800221c <chSchWakeupS.constprop.49+0x4c>)
  ntp->u.rdymsg = msg;
 80021d6:	6205      	str	r5, [r0, #32]
  thread_t *otp = currp;
 80021d8:	6999      	ldr	r1, [r3, #24]
  if (ntp->prio <= otp->prio) {
 80021da:	6882      	ldr	r2, [r0, #8]
 80021dc:	688c      	ldr	r4, [r1, #8]
 80021de:	42a2      	cmp	r2, r4
 80021e0:	d80a      	bhi.n	80021f8 <chSchWakeupS.constprop.49+0x28>
  tp->state = CH_STATE_READY;
 80021e2:	7705      	strb	r5, [r0, #28]
    cp = cp->queue.next;
 80021e4:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 80021e6:	6899      	ldr	r1, [r3, #8]
 80021e8:	428a      	cmp	r2, r1
 80021ea:	d9fb      	bls.n	80021e4 <chSchWakeupS.constprop.49+0x14>
  tp->queue.prev             = cp->queue.prev;
 80021ec:	685a      	ldr	r2, [r3, #4]
  tp->queue.next             = cp;
 80021ee:	6003      	str	r3, [r0, #0]
  tp->queue.prev             = cp->queue.prev;
 80021f0:	6042      	str	r2, [r0, #4]
  tp->queue.prev->queue.next = tp;
 80021f2:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 80021f4:	6058      	str	r0, [r3, #4]
}
 80021f6:	bd70      	pop	{r4, r5, r6, pc}
  cp = (thread_t *)&ch.rlist.queue;
 80021f8:	001a      	movs	r2, r3
  tp->state = CH_STATE_READY;
 80021fa:	770d      	strb	r5, [r1, #28]
    cp = cp->queue.next;
 80021fc:	6812      	ldr	r2, [r2, #0]
  } while (cp->prio >= tp->prio);
 80021fe:	6895      	ldr	r5, [r2, #8]
 8002200:	42ac      	cmp	r4, r5
 8002202:	d9fb      	bls.n	80021fc <chSchWakeupS.constprop.49+0x2c>
  tp->queue.prev             = cp->queue.prev;
 8002204:	6854      	ldr	r4, [r2, #4]
  tp->queue.next             = cp;
 8002206:	600a      	str	r2, [r1, #0]
  tp->queue.prev             = cp->queue.prev;
 8002208:	604c      	str	r4, [r1, #4]
  tp->queue.prev->queue.next = tp;
 800220a:	6021      	str	r1, [r4, #0]
  cp->queue.prev             = tp;
 800220c:	6051      	str	r1, [r2, #4]
    currp = ntp;
 800220e:	6198      	str	r0, [r3, #24]
    ntp->state = CH_STATE_CURRENT;
 8002210:	2301      	movs	r3, #1
 8002212:	7703      	strb	r3, [r0, #28]
    chSysSwitch(ntp, otp);
 8002214:	f7fe f83e 	bl	8000294 <_port_switch>
 8002218:	e7ed      	b.n	80021f6 <chSchWakeupS.constprop.49+0x26>
 800221a:	46c0      	nop			; (mov r8, r8)
 800221c:	20000a78 	.word	0x20000a78

08002220 <chThdCreateStatic.constprop.44>:
thread_t *chThdCreateStatic(void *wsp, size_t size,
 8002220:	b510      	push	{r4, lr}
 8002222:	2320      	movs	r3, #32
 8002224:	f383 8811 	msr	BASEPRI, r3
  tp = (thread_t *)((uint8_t *)wsp + size -
 8002228:	0004      	movs	r4, r0
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 800222a:	0002      	movs	r2, r0
  tp = (thread_t *)((uint8_t *)wsp + size -
 800222c:	3481      	adds	r4, #129	; 0x81
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 800222e:	325d      	adds	r2, #93	; 0x5d
 8002230:	333d      	adds	r3, #61	; 0x3d
  tp = (thread_t *)((uint8_t *)wsp + size -
 8002232:	34ff      	adds	r4, #255	; 0xff
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8002234:	32ff      	adds	r2, #255	; 0xff
 8002236:	33ff      	adds	r3, #255	; 0xff
 8002238:	60e2      	str	r2, [r4, #12]
 800223a:	50c1      	str	r1, [r0, r3]
 800223c:	2300      	movs	r3, #0
 800223e:	4915      	ldr	r1, [pc, #84]	; (8002294 <chThdCreateStatic.constprop.44+0x74>)
 8002240:	6053      	str	r3, [r2, #4]
 8002242:	6211      	str	r1, [r2, #32]
  tp->prio      = prio;
 8002244:	2287      	movs	r2, #135	; 0x87
  tp->state     = CH_STATE_WTSTART;
 8002246:	2102      	movs	r1, #2
  tp->flags     = CH_FLAG_MODE_STATIC;
 8002248:	7763      	strb	r3, [r4, #29]
  tp->mtxlist   = NULL;
 800224a:	6363      	str	r3, [r4, #52]	; 0x34
  tp->epending  = (eventmask_t)0;
 800224c:	6323      	str	r3, [r4, #48]	; 0x30
  tp->refs      = (trefs_t)1;
 800224e:	3301      	adds	r3, #1
 8002250:	77a3      	strb	r3, [r4, #30]
  tp->name      = name;
 8002252:	4b11      	ldr	r3, [pc, #68]	; (8002298 <chThdCreateStatic.constprop.44+0x78>)
  tp->prio      = prio;
 8002254:	60a2      	str	r2, [r4, #8]
  tp->name      = name;
 8002256:	61a3      	str	r3, [r4, #24]
  REG_INSERT(tp);
 8002258:	4b10      	ldr	r3, [pc, #64]	; (800229c <chThdCreateStatic.constprop.44+0x7c>)
  tp->realprio  = prio;
 800225a:	63a2      	str	r2, [r4, #56]	; 0x38
  REG_INSERT(tp);
 800225c:	695a      	ldr	r2, [r3, #20]
 800225e:	6123      	str	r3, [r4, #16]
 8002260:	6162      	str	r2, [r4, #20]
  tp->state     = CH_STATE_WTSTART;
 8002262:	7721      	strb	r1, [r4, #28]
  REG_INSERT(tp);
 8002264:	6114      	str	r4, [r2, #16]
  list_init(&tp->waiting);
 8002266:	0002      	movs	r2, r0
  REG_INSERT(tp);
 8002268:	615c      	str	r4, [r3, #20]
  tlp->next = (thread_t *)tlp;
 800226a:	23d2      	movs	r3, #210	; 0xd2
  list_init(&tp->waiting);
 800226c:	32a5      	adds	r2, #165	; 0xa5
 800226e:	32ff      	adds	r2, #255	; 0xff
 8002270:	005b      	lsls	r3, r3, #1
 8002272:	50c2      	str	r2, [r0, r3]
  queue_init(&tp->msgqueue);
 8002274:	0003      	movs	r3, r0
  tqp->next = (thread_t *)tqp;
 8002276:	22d4      	movs	r2, #212	; 0xd4
 8002278:	33a9      	adds	r3, #169	; 0xa9
 800227a:	33ff      	adds	r3, #255	; 0xff
 800227c:	0052      	lsls	r2, r2, #1
 800227e:	5083      	str	r3, [r0, r2]
  tqp->prev = (thread_t *)tqp;
 8002280:	605b      	str	r3, [r3, #4]
  chSchWakeupS(tp, MSG_OK);
 8002282:	0020      	movs	r0, r4
 8002284:	f7ff ffa4 	bl	80021d0 <chSchWakeupS.constprop.49>
 8002288:	2300      	movs	r3, #0
 800228a:	f383 8811 	msr	BASEPRI, r3
}
 800228e:	0020      	movs	r0, r4
 8002290:	bd10      	pop	{r4, pc}
 8002292:	46c0      	nop			; (mov r8, r8)
 8002294:	080002a5 	.word	0x080002a5
 8002298:	080029fc 	.word	0x080029fc
 800229c:	20000a78 	.word	0x20000a78

080022a0 <chThdDequeueAllI.constprop.42>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 80022a0:	b570      	push	{r4, r5, r6, lr}
 80022a2:	0004      	movs	r4, r0
  return (bool)(tqp->next != (const thread_t *)tqp);
 80022a4:	6800      	ldr	r0, [r0, #0]
  tp->u.rdymsg = msg;
 80022a6:	2500      	movs	r5, #0

  while (queue_notempty(tqp)) {
 80022a8:	4284      	cmp	r4, r0
 80022aa:	d008      	beq.n	80022be <chThdDequeueAllI.constprop.42+0x1e>
  tqp->next             = tp->queue.next;
 80022ac:	6803      	ldr	r3, [r0, #0]
 80022ae:	6023      	str	r3, [r4, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 80022b0:	605c      	str	r4, [r3, #4]
 80022b2:	6205      	str	r5, [r0, #32]
  (void) chSchReadyI(tp);
 80022b4:	f7ff fe04 	bl	8001ec0 <chSchReadyI>
  return (bool)(tqp->next != (const thread_t *)tqp);
 80022b8:	6820      	ldr	r0, [r4, #0]
 80022ba:	42a0      	cmp	r0, r4
 80022bc:	d1f6      	bne.n	80022ac <chThdDequeueAllI.constprop.42+0xc>
    chThdDoDequeueNextI(tqp, msg);
  }
}
 80022be:	bd70      	pop	{r4, r5, r6, pc}

080022c0 <chprintf.constprop.2>:
 * @param[in] chp       pointer to a @p BaseSequentialStream implementing object
 * @param[in] fmt       formatting string
 *
 * @api
 */
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 80022c0:	b40e      	push	{r1, r2, r3}
 80022c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022c4:	4656      	mov	r6, sl
 80022c6:	464d      	mov	r5, r9
 80022c8:	465f      	mov	r7, fp
 80022ca:	4644      	mov	r4, r8
 80022cc:	b4f0      	push	{r4, r5, r6, r7}
 80022ce:	b088      	sub	sp, #32
 80022d0:	ae11      	add	r6, sp, #68	; 0x44
 80022d2:	ce08      	ldmia	r6!, {r3}
 80022d4:	aa05      	add	r2, sp, #20
 80022d6:	469a      	mov	sl, r3
  int n = 0;
 80022d8:	2300      	movs	r3, #0
 80022da:	4699      	mov	r9, r3
 80022dc:	ab04      	add	r3, sp, #16
 80022de:	3305      	adds	r3, #5
 80022e0:	1a9b      	subs	r3, r3, r2
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 80022e2:	9604      	str	r6, [sp, #16]
 80022e4:	9303      	str	r3, [sp, #12]
    c = *fmt++;
 80022e6:	4653      	mov	r3, sl
 80022e8:	7819      	ldrb	r1, [r3, #0]
 80022ea:	1c5d      	adds	r5, r3, #1
    if (c == 0)
 80022ec:	2900      	cmp	r1, #0
 80022ee:	d00f      	beq.n	8002310 <chprintf.constprop.2+0x50>
    if (c != '%') {
 80022f0:	2925      	cmp	r1, #37	; 0x25
 80022f2:	d018      	beq.n	8002326 <chprintf.constprop.2+0x66>
      streamPut(chp, (uint8_t)c);
 80022f4:	4faa      	ldr	r7, [pc, #680]	; (80025a0 <chprintf.constprop.2+0x2e0>)
    c = *fmt++;
 80022f6:	46aa      	mov	sl, r5
      streamPut(chp, (uint8_t)c);
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	0038      	movs	r0, r7
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	4798      	blx	r3
      n++;
 8002300:	2301      	movs	r3, #1
 8002302:	469c      	mov	ip, r3
    c = *fmt++;
 8002304:	4653      	mov	r3, sl
 8002306:	7819      	ldrb	r1, [r3, #0]
      n++;
 8002308:	44e1      	add	r9, ip
    c = *fmt++;
 800230a:	1c5d      	adds	r5, r3, #1
    if (c == 0)
 800230c:	2900      	cmp	r1, #0
 800230e:	d1ef      	bne.n	80022f0 <chprintf.constprop.2+0x30>
  formatted_bytes = chvprintf(chp, fmt, ap);
  va_end(ap);

  return formatted_bytes;
}
 8002310:	4648      	mov	r0, r9
 8002312:	b008      	add	sp, #32
 8002314:	bc3c      	pop	{r2, r3, r4, r5}
 8002316:	4690      	mov	r8, r2
 8002318:	4699      	mov	r9, r3
 800231a:	46a2      	mov	sl, r4
 800231c:	46ab      	mov	fp, r5
 800231e:	bcf0      	pop	{r4, r5, r6, r7}
 8002320:	bc08      	pop	{r3}
 8002322:	b003      	add	sp, #12
 8002324:	4718      	bx	r3
    if (*fmt == '-') {
 8002326:	4653      	mov	r3, sl
 8002328:	785a      	ldrb	r2, [r3, #1]
    left_align = FALSE;
 800232a:	2300      	movs	r3, #0
 800232c:	9302      	str	r3, [sp, #8]
    if (*fmt == '-') {
 800232e:	2a2d      	cmp	r2, #45	; 0x2d
 8002330:	d100      	bne.n	8002334 <chprintf.constprop.2+0x74>
 8002332:	e0f0      	b.n	8002516 <chprintf.constprop.2+0x256>
    filler = ' ';
 8002334:	2320      	movs	r3, #32
 8002336:	4698      	mov	r8, r3
    if (*fmt == '0') {
 8002338:	2a30      	cmp	r2, #48	; 0x30
 800233a:	d044      	beq.n	80023c6 <chprintf.constprop.2+0x106>
    width = 0;
 800233c:	2700      	movs	r7, #0
 800233e:	e006      	b.n	800234e <chprintf.constprop.2+0x8e>
        c = va_arg(ap, int);
 8002340:	7833      	ldrb	r3, [r6, #0]
 8002342:	3604      	adds	r6, #4
      width = width * 10 + c;
 8002344:	00ba      	lsls	r2, r7, #2
 8002346:	19d7      	adds	r7, r2, r7
 8002348:	007f      	lsls	r7, r7, #1
 800234a:	782a      	ldrb	r2, [r5, #0]
 800234c:	19df      	adds	r7, r3, r7
      if (c >= '0' && c <= '9')
 800234e:	0013      	movs	r3, r2
 8002350:	3b30      	subs	r3, #48	; 0x30
 8002352:	b2db      	uxtb	r3, r3
      c = *fmt++;
 8002354:	3501      	adds	r5, #1
      if (c >= '0' && c <= '9')
 8002356:	2b09      	cmp	r3, #9
 8002358:	d9f4      	bls.n	8002344 <chprintf.constprop.2+0x84>
      else if (c == '*')
 800235a:	2a2a      	cmp	r2, #42	; 0x2a
 800235c:	d0f0      	beq.n	8002340 <chprintf.constprop.2+0x80>
    precision = 0;
 800235e:	2300      	movs	r3, #0
    if (c == '.') {
 8002360:	2a2e      	cmp	r2, #46	; 0x2e
 8002362:	d013      	beq.n	800238c <chprintf.constprop.2+0xcc>
    if (c == 'l' || c == 'L') {
 8002364:	21df      	movs	r1, #223	; 0xdf
 8002366:	4011      	ands	r1, r2
 8002368:	294c      	cmp	r1, #76	; 0x4c
 800236a:	d01d      	beq.n	80023a8 <chprintf.constprop.2+0xe8>
    switch (c) {
 800236c:	0010      	movs	r0, r2
 800236e:	3844      	subs	r0, #68	; 0x44
 8002370:	b2c0      	uxtb	r0, r0
 8002372:	2834      	cmp	r0, #52	; 0x34
 8002374:	d900      	bls.n	8002378 <chprintf.constprop.2+0xb8>
 8002376:	e0bf      	b.n	80024f8 <chprintf.constprop.2+0x238>
 8002378:	0081      	lsls	r1, r0, #2
 800237a:	488a      	ldr	r0, [pc, #552]	; (80025a4 <chprintf.constprop.2+0x2e4>)
 800237c:	5840      	ldr	r0, [r0, r1]
 800237e:	4687      	mov	pc, r0
          c = va_arg(ap, int);
 8002380:	7831      	ldrb	r1, [r6, #0]
 8002382:	3604      	adds	r6, #4
        precision *= 10;
 8002384:	009a      	lsls	r2, r3, #2
 8002386:	18d3      	adds	r3, r2, r3
 8002388:	005b      	lsls	r3, r3, #1
        precision += c;
 800238a:	18cb      	adds	r3, r1, r3
        c = *fmt++;
 800238c:	3501      	adds	r5, #1
 800238e:	1e6a      	subs	r2, r5, #1
 8002390:	7812      	ldrb	r2, [r2, #0]
        if (c >= '0' && c <= '9')
 8002392:	0011      	movs	r1, r2
 8002394:	3930      	subs	r1, #48	; 0x30
 8002396:	b2c9      	uxtb	r1, r1
 8002398:	2909      	cmp	r1, #9
 800239a:	d9f3      	bls.n	8002384 <chprintf.constprop.2+0xc4>
        else if (c == '*')
 800239c:	2a2a      	cmp	r2, #42	; 0x2a
 800239e:	d0ef      	beq.n	8002380 <chprintf.constprop.2+0xc0>
    if (c == 'l' || c == 'L') {
 80023a0:	21df      	movs	r1, #223	; 0xdf
 80023a2:	4011      	ands	r1, r2
 80023a4:	294c      	cmp	r1, #76	; 0x4c
 80023a6:	d1e1      	bne.n	800236c <chprintf.constprop.2+0xac>
      if (*fmt)
 80023a8:	7829      	ldrb	r1, [r5, #0]
 80023aa:	2900      	cmp	r1, #0
 80023ac:	d100      	bne.n	80023b0 <chprintf.constprop.2+0xf0>
 80023ae:	e0a3      	b.n	80024f8 <chprintf.constprop.2+0x238>
    switch (c) {
 80023b0:	000a      	movs	r2, r1
 80023b2:	3a44      	subs	r2, #68	; 0x44
 80023b4:	b2d2      	uxtb	r2, r2
        c = *fmt++;
 80023b6:	3501      	adds	r5, #1
    switch (c) {
 80023b8:	2a34      	cmp	r2, #52	; 0x34
 80023ba:	d900      	bls.n	80023be <chprintf.constprop.2+0xfe>
 80023bc:	e09b      	b.n	80024f6 <chprintf.constprop.2+0x236>
 80023be:	487a      	ldr	r0, [pc, #488]	; (80025a8 <chprintf.constprop.2+0x2e8>)
 80023c0:	0092      	lsls	r2, r2, #2
 80023c2:	5882      	ldr	r2, [r0, r2]
 80023c4:	4697      	mov	pc, r2
      filler = '0';
 80023c6:	3310      	adds	r3, #16
 80023c8:	786a      	ldrb	r2, [r5, #1]
 80023ca:	4698      	mov	r8, r3
      fmt++;
 80023cc:	3501      	adds	r5, #1
 80023ce:	e7b5      	b.n	800233c <chprintf.constprop.2+0x7c>
        c = *fmt++;
 80023d0:	46aa      	mov	sl, r5
    switch (c) {
 80023d2:	2210      	movs	r2, #16
        l = va_arg(ap, unsigned int);
 80023d4:	6831      	ldr	r1, [r6, #0]
      p = ch_ltoa(p, l, c);
 80023d6:	a805      	add	r0, sp, #20
        l = va_arg(ap, unsigned int);
 80023d8:	3604      	adds	r6, #4
      p = ch_ltoa(p, l, c);
 80023da:	f7fe fd01 	bl	8000de0 <ch_ltoa.lto_priv.50>
 80023de:	ab05      	add	r3, sp, #20
 80023e0:	1ac4      	subs	r4, r0, r3
 80023e2:	1e63      	subs	r3, r4, #1
 80023e4:	9301      	str	r3, [sp, #4]
    s = tmpbuf;
 80023e6:	ab05      	add	r3, sp, #20
 80023e8:	469b      	mov	fp, r3
    if ((width -= i) < 0)
 80023ea:	1b3b      	subs	r3, r7, r4
 80023ec:	001a      	movs	r2, r3
 80023ee:	43db      	mvns	r3, r3
 80023f0:	17db      	asrs	r3, r3, #31
 80023f2:	401a      	ands	r2, r3
    if (left_align == FALSE)
 80023f4:	9b02      	ldr	r3, [sp, #8]
 80023f6:	9200      	str	r2, [sp, #0]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d000      	beq.n	80023fe <chprintf.constprop.2+0x13e>
 80023fc:	e086      	b.n	800250c <chprintf.constprop.2+0x24c>
      width = -width;
 80023fe:	9b00      	ldr	r3, [sp, #0]
 8002400:	425d      	negs	r5, r3
    if (width < 0) {
 8002402:	2d00      	cmp	r5, #0
 8002404:	d100      	bne.n	8002408 <chprintf.constprop.2+0x148>
 8002406:	e08c      	b.n	8002522 <chprintf.constprop.2+0x262>
      if (*s == '-' && filler == '0') {
 8002408:	465b      	mov	r3, fp
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	2b2d      	cmp	r3, #45	; 0x2d
 800240e:	d100      	bne.n	8002412 <chprintf.constprop.2+0x152>
 8002410:	e095      	b.n	800253e <chprintf.constprop.2+0x27e>
 8002412:	4644      	mov	r4, r8
 8002414:	4f62      	ldr	r7, [pc, #392]	; (80025a0 <chprintf.constprop.2+0x2e0>)
        streamPut(chp, (uint8_t)filler);
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	0021      	movs	r1, r4
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	0038      	movs	r0, r7
      } while (++width != 0);
 800241e:	3501      	adds	r5, #1
        streamPut(chp, (uint8_t)filler);
 8002420:	4798      	blx	r3
      } while (++width != 0);
 8002422:	2d00      	cmp	r5, #0
 8002424:	d1f7      	bne.n	8002416 <chprintf.constprop.2+0x156>
 8002426:	9b00      	ldr	r3, [sp, #0]
 8002428:	46a0      	mov	r8, r4
 800242a:	469c      	mov	ip, r3
    while (--i >= 0) {
 800242c:	2300      	movs	r3, #0
 800242e:	9300      	str	r3, [sp, #0]
 8002430:	9b01      	ldr	r3, [sp, #4]
 8002432:	44e1      	add	r9, ip
 8002434:	2b00      	cmp	r3, #0
 8002436:	da00      	bge.n	800243a <chprintf.constprop.2+0x17a>
 8002438:	e755      	b.n	80022e6 <chprintf.constprop.2+0x26>
 800243a:	465c      	mov	r4, fp
 800243c:	9d01      	ldr	r5, [sp, #4]
      streamPut(chp, (uint8_t)*s++);
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	7821      	ldrb	r1, [r4, #0]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	0038      	movs	r0, r7
 8002446:	4798      	blx	r3
 8002448:	3401      	adds	r4, #1
    while (--i >= 0) {
 800244a:	3d01      	subs	r5, #1
 800244c:	d2f7      	bcs.n	800243e <chprintf.constprop.2+0x17e>
 800244e:	9901      	ldr	r1, [sp, #4]
 8002450:	464a      	mov	r2, r9
 8002452:	43cb      	mvns	r3, r1
 8002454:	17db      	asrs	r3, r3, #31
 8002456:	400b      	ands	r3, r1
 8002458:	4699      	mov	r9, r3
 800245a:	3201      	adds	r2, #1
 800245c:	4491      	add	r9, r2
    while (width) {
 800245e:	9b00      	ldr	r3, [sp, #0]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d100      	bne.n	8002466 <chprintf.constprop.2+0x1a6>
 8002464:	e73f      	b.n	80022e6 <chprintf.constprop.2+0x26>
 8002466:	001d      	movs	r5, r3
 8002468:	4644      	mov	r4, r8
 800246a:	4f4d      	ldr	r7, [pc, #308]	; (80025a0 <chprintf.constprop.2+0x2e0>)
      streamPut(chp, (uint8_t)filler);
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	0021      	movs	r1, r4
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	0038      	movs	r0, r7
      width--;
 8002474:	3d01      	subs	r5, #1
      streamPut(chp, (uint8_t)filler);
 8002476:	4798      	blx	r3
    while (width) {
 8002478:	2d00      	cmp	r5, #0
 800247a:	d1f7      	bne.n	800246c <chprintf.constprop.2+0x1ac>
 800247c:	9b00      	ldr	r3, [sp, #0]
 800247e:	469c      	mov	ip, r3
 8002480:	44e1      	add	r9, ip
 8002482:	e730      	b.n	80022e6 <chprintf.constprop.2+0x26>
 8002484:	46aa      	mov	sl, r5
 8002486:	220a      	movs	r2, #10
 8002488:	e7a4      	b.n	80023d4 <chprintf.constprop.2+0x114>
      if ((s = va_arg(ap, char *)) == 0)
 800248a:	6831      	ldr	r1, [r6, #0]
 800248c:	1d32      	adds	r2, r6, #4
 800248e:	468b      	mov	fp, r1
 8002490:	2900      	cmp	r1, #0
 8002492:	d070      	beq.n	8002576 <chprintf.constprop.2+0x2b6>
      if (precision == 0)
 8002494:	2b00      	cmp	r3, #0
 8002496:	d14c      	bne.n	8002532 <chprintf.constprop.2+0x272>
      for (p = s; *p && (--precision >= 0); p++)
 8002498:	465b      	mov	r3, fp
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d06d      	beq.n	800257c <chprintf.constprop.2+0x2bc>
 80024a0:	4b42      	ldr	r3, [pc, #264]	; (80025ac <chprintf.constprop.2+0x2ec>)
 80024a2:	465c      	mov	r4, fp
 80024a4:	e001      	b.n	80024aa <chprintf.constprop.2+0x1ea>
 80024a6:	3b01      	subs	r3, #1
 80024a8:	d303      	bcc.n	80024b2 <chprintf.constprop.2+0x1f2>
 80024aa:	3401      	adds	r4, #1
 80024ac:	7821      	ldrb	r1, [r4, #0]
 80024ae:	2900      	cmp	r1, #0
 80024b0:	d1f9      	bne.n	80024a6 <chprintf.constprop.2+0x1e6>
 80024b2:	465b      	mov	r3, fp
 80024b4:	1ae4      	subs	r4, r4, r3
 80024b6:	1e63      	subs	r3, r4, #1
 80024b8:	9301      	str	r3, [sp, #4]
      filler = ' ';
 80024ba:	2320      	movs	r3, #32
      if ((s = va_arg(ap, char *)) == 0)
 80024bc:	0016      	movs	r6, r2
      for (p = s; *p && (--precision >= 0); p++)
 80024be:	46aa      	mov	sl, r5
      filler = ' ';
 80024c0:	4698      	mov	r8, r3
 80024c2:	e792      	b.n	80023ea <chprintf.constprop.2+0x12a>
      *p++ = va_arg(ap, int);
 80024c4:	7832      	ldrb	r2, [r6, #0]
 80024c6:	ab04      	add	r3, sp, #16
 80024c8:	711a      	strb	r2, [r3, #4]
 80024ca:	9b03      	ldr	r3, [sp, #12]
 80024cc:	3604      	adds	r6, #4
 80024ce:	001c      	movs	r4, r3
 80024d0:	3b01      	subs	r3, #1
 80024d2:	9301      	str	r3, [sp, #4]
      filler = ' ';
 80024d4:	2320      	movs	r3, #32
 80024d6:	4698      	mov	r8, r3
    s = tmpbuf;
 80024d8:	ab05      	add	r3, sp, #20
      *p++ = va_arg(ap, int);
 80024da:	46aa      	mov	sl, r5
    s = tmpbuf;
 80024dc:	469b      	mov	fp, r3
 80024de:	e784      	b.n	80023ea <chprintf.constprop.2+0x12a>
 80024e0:	46aa      	mov	sl, r5
 80024e2:	2208      	movs	r2, #8
 80024e4:	e776      	b.n	80023d4 <chprintf.constprop.2+0x114>
        l = va_arg(ap, int);
 80024e6:	6831      	ldr	r1, [r6, #0]
 80024e8:	46aa      	mov	sl, r5
 80024ea:	3604      	adds	r6, #4
    p = tmpbuf;
 80024ec:	a805      	add	r0, sp, #20
      if (l < 0) {
 80024ee:	2900      	cmp	r1, #0
 80024f0:	db3a      	blt.n	8002568 <chprintf.constprop.2+0x2a8>
      p = ch_ltoa(p, l, 10);
 80024f2:	220a      	movs	r2, #10
 80024f4:	e771      	b.n	80023da <chprintf.constprop.2+0x11a>
    switch (c) {
 80024f6:	000a      	movs	r2, r1
      *p++ = c;
 80024f8:	ab04      	add	r3, sp, #16
 80024fa:	711a      	strb	r2, [r3, #4]
 80024fc:	9b03      	ldr	r3, [sp, #12]
 80024fe:	46aa      	mov	sl, r5
 8002500:	001c      	movs	r4, r3
 8002502:	3b01      	subs	r3, #1
 8002504:	9301      	str	r3, [sp, #4]
    s = tmpbuf;
 8002506:	ab05      	add	r3, sp, #20
 8002508:	469b      	mov	fp, r3
 800250a:	e76e      	b.n	80023ea <chprintf.constprop.2+0x12a>
    while (--i >= 0) {
 800250c:	9b01      	ldr	r3, [sp, #4]
 800250e:	2b00      	cmp	r3, #0
 8002510:	dba5      	blt.n	800245e <chprintf.constprop.2+0x19e>
 8002512:	4f23      	ldr	r7, [pc, #140]	; (80025a0 <chprintf.constprop.2+0x2e0>)
 8002514:	e791      	b.n	800243a <chprintf.constprop.2+0x17a>
      fmt++;
 8002516:	4653      	mov	r3, sl
 8002518:	1c9d      	adds	r5, r3, #2
 800251a:	789a      	ldrb	r2, [r3, #2]
      left_align = TRUE;
 800251c:	2301      	movs	r3, #1
 800251e:	9302      	str	r3, [sp, #8]
 8002520:	e708      	b.n	8002334 <chprintf.constprop.2+0x74>
    while (--i >= 0) {
 8002522:	9b01      	ldr	r3, [sp, #4]
 8002524:	2b00      	cmp	r3, #0
 8002526:	da00      	bge.n	800252a <chprintf.constprop.2+0x26a>
 8002528:	e6dd      	b.n	80022e6 <chprintf.constprop.2+0x26>
 800252a:	2300      	movs	r3, #0
 800252c:	4f1c      	ldr	r7, [pc, #112]	; (80025a0 <chprintf.constprop.2+0x2e0>)
 800252e:	9300      	str	r3, [sp, #0]
 8002530:	e783      	b.n	800243a <chprintf.constprop.2+0x17a>
      for (p = s; *p && (--precision >= 0); p++)
 8002532:	4659      	mov	r1, fp
 8002534:	7809      	ldrb	r1, [r1, #0]
 8002536:	2900      	cmp	r1, #0
 8002538:	d020      	beq.n	800257c <chprintf.constprop.2+0x2bc>
 800253a:	3b01      	subs	r3, #1
 800253c:	e7b1      	b.n	80024a2 <chprintf.constprop.2+0x1e2>
      if (*s == '-' && filler == '0') {
 800253e:	4643      	mov	r3, r8
 8002540:	2b30      	cmp	r3, #48	; 0x30
 8002542:	d000      	beq.n	8002546 <chprintf.constprop.2+0x286>
 8002544:	e765      	b.n	8002412 <chprintf.constprop.2+0x152>
        streamPut(chp, (uint8_t)*s++);
 8002546:	2301      	movs	r3, #1
 8002548:	469c      	mov	ip, r3
 800254a:	4f15      	ldr	r7, [pc, #84]	; (80025a0 <chprintf.constprop.2+0x2e0>)
 800254c:	212d      	movs	r1, #45	; 0x2d
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	0038      	movs	r0, r7
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	44e3      	add	fp, ip
 8002556:	4798      	blx	r3
        n++;
 8002558:	2301      	movs	r3, #1
 800255a:	469c      	mov	ip, r3
 800255c:	9b01      	ldr	r3, [sp, #4]
 800255e:	44e1      	add	r9, ip
 8002560:	3b01      	subs	r3, #1
 8002562:	9301      	str	r3, [sp, #4]
 8002564:	4644      	mov	r4, r8
 8002566:	e756      	b.n	8002416 <chprintf.constprop.2+0x156>
        *p++ = '-';
 8002568:	232d      	movs	r3, #45	; 0x2d
 800256a:	aa04      	add	r2, sp, #16
 800256c:	7113      	strb	r3, [r2, #4]
 800256e:	1d50      	adds	r0, r2, #5
        l = -l;
 8002570:	4249      	negs	r1, r1
      p = ch_ltoa(p, l, 10);
 8002572:	220a      	movs	r2, #10
 8002574:	e731      	b.n	80023da <chprintf.constprop.2+0x11a>
        s = "(null)";
 8002576:	490e      	ldr	r1, [pc, #56]	; (80025b0 <chprintf.constprop.2+0x2f0>)
 8002578:	468b      	mov	fp, r1
 800257a:	e78b      	b.n	8002494 <chprintf.constprop.2+0x1d4>
 800257c:	43fc      	mvns	r4, r7
    if (left_align == FALSE)
 800257e:	9b02      	ldr	r3, [sp, #8]
 8002580:	17e4      	asrs	r4, r4, #31
 8002582:	4027      	ands	r7, r4
 8002584:	9700      	str	r7, [sp, #0]
 8002586:	46aa      	mov	sl, r5
 8002588:	0016      	movs	r6, r2
 800258a:	2b00      	cmp	r3, #0
 800258c:	d104      	bne.n	8002598 <chprintf.constprop.2+0x2d8>
 800258e:	3b01      	subs	r3, #1
 8002590:	9301      	str	r3, [sp, #4]
 8002592:	3321      	adds	r3, #33	; 0x21
 8002594:	4698      	mov	r8, r3
 8002596:	e732      	b.n	80023fe <chprintf.constprop.2+0x13e>
 8002598:	2320      	movs	r3, #32
 800259a:	4698      	mov	r8, r3
 800259c:	e75f      	b.n	800245e <chprintf.constprop.2+0x19e>
 800259e:	46c0      	nop			; (mov r8, r8)
 80025a0:	200009fc 	.word	0x200009fc
 80025a4:	08002854 	.word	0x08002854
 80025a8:	08002928 	.word	0x08002928
 80025ac:	00007ffe 	.word	0x00007ffe
 80025b0:	08002a04 	.word	0x08002a04


build/acs_f4_candev.elf:     file format elf32-littlearm


Disassembly of section .text:

080001c0 <Reset_Handler>:
 80001c0:	b672      	cpsid	i
 80001c2:	4826      	ldr	r0, [pc, #152]	; (800025c <endfiniloop+0x6>)
 80001c4:	f380 8809 	msr	PSP, r0
 80001c8:	4825      	ldr	r0, [pc, #148]	; (8000260 <endfiniloop+0xa>)
 80001ca:	f64e 5108 	movw	r1, #60680	; 0xed08
 80001ce:	f2ce 0100 	movt	r1, #57344	; 0xe000
 80001d2:	6008      	str	r0, [r1, #0]
 80001d4:	2002      	movs	r0, #2
 80001d6:	f380 8814 	msr	CONTROL, r0
 80001da:	f3bf 8f6f 	isb	sy
 80001de:	f004 f88f 	bl	8004300 <__core_init>
 80001e2:	f002 fccd 	bl	8002b80 <__early_init>
 80001e6:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
 80001ea:	491e      	ldr	r1, [pc, #120]	; (8000264 <endfiniloop+0xe>)
 80001ec:	4a1e      	ldr	r2, [pc, #120]	; (8000268 <endfiniloop+0x12>)

080001ee <msloop>:
 80001ee:	4291      	cmp	r1, r2
 80001f0:	bf3c      	itt	cc
 80001f2:	f841 0b04 	strcc.w	r0, [r1], #4
 80001f6:	e7fa      	bcc.n	80001ee <msloop>
 80001f8:	491c      	ldr	r1, [pc, #112]	; (800026c <endfiniloop+0x16>)
 80001fa:	4a18      	ldr	r2, [pc, #96]	; (800025c <endfiniloop+0x6>)

080001fc <psloop>:
 80001fc:	4291      	cmp	r1, r2
 80001fe:	bf3c      	itt	cc
 8000200:	f841 0b04 	strcc.w	r0, [r1], #4
 8000204:	e7fa      	bcc.n	80001fc <psloop>
 8000206:	491a      	ldr	r1, [pc, #104]	; (8000270 <endfiniloop+0x1a>)
 8000208:	4a1a      	ldr	r2, [pc, #104]	; (8000274 <endfiniloop+0x1e>)
 800020a:	4b1b      	ldr	r3, [pc, #108]	; (8000278 <endfiniloop+0x22>)

0800020c <dloop>:
 800020c:	429a      	cmp	r2, r3
 800020e:	bf3e      	ittt	cc
 8000210:	f851 0b04 	ldrcc.w	r0, [r1], #4
 8000214:	f842 0b04 	strcc.w	r0, [r2], #4
 8000218:	e7f8      	bcc.n	800020c <dloop>
 800021a:	2000      	movs	r0, #0
 800021c:	4917      	ldr	r1, [pc, #92]	; (800027c <endfiniloop+0x26>)
 800021e:	4a18      	ldr	r2, [pc, #96]	; (8000280 <endfiniloop+0x2a>)

08000220 <bloop>:
 8000220:	4291      	cmp	r1, r2
 8000222:	bf3c      	itt	cc
 8000224:	f841 0b04 	strcc.w	r0, [r1], #4
 8000228:	e7fa      	bcc.n	8000220 <bloop>
 800022a:	f004 f821 	bl	8004270 <__init_ram_areas>
 800022e:	f004 f85f 	bl	80042f0 <__late_init>
 8000232:	4c14      	ldr	r4, [pc, #80]	; (8000284 <endfiniloop+0x2e>)
 8000234:	4d14      	ldr	r5, [pc, #80]	; (8000288 <endfiniloop+0x32>)

08000236 <initloop>:
 8000236:	42ac      	cmp	r4, r5
 8000238:	da03      	bge.n	8000242 <endinitloop>
 800023a:	f854 1b04 	ldr.w	r1, [r4], #4
 800023e:	4788      	blx	r1
 8000240:	e7f9      	b.n	8000236 <initloop>

08000242 <endinitloop>:
 8000242:	f003 f845 	bl	80032d0 <main>
 8000246:	4c11      	ldr	r4, [pc, #68]	; (800028c <endfiniloop+0x36>)
 8000248:	4d11      	ldr	r5, [pc, #68]	; (8000290 <endfiniloop+0x3a>)

0800024a <finiloop>:
 800024a:	42ac      	cmp	r4, r5
 800024c:	da03      	bge.n	8000256 <endfiniloop>
 800024e:	f854 1b04 	ldr.w	r1, [r4], #4
 8000252:	4788      	blx	r1
 8000254:	e7f9      	b.n	800024a <finiloop>

08000256 <endfiniloop>:
 8000256:	f004 b843 	b.w	80042e0 <__default_exit>
 800025a:	0000      	.short	0x0000
 800025c:	20000400 	.word	0x20000400
 8000260:	08000000 	.word	0x08000000
 8000264:	20000000 	.word	0x20000000
 8000268:	20000200 	.word	0x20000200
 800026c:	20000200 	.word	0x20000200
 8000270:	080047bc 	.word	0x080047bc
 8000274:	20000400 	.word	0x20000400
 8000278:	2000040c 	.word	0x2000040c
 800027c:	20000410 	.word	0x20000410
 8000280:	20000ad0 	.word	0x20000ad0
 8000284:	080001c0 	.word	0x080001c0
 8000288:	080001c0 	.word	0x080001c0
 800028c:	080001c0 	.word	0x080001c0
 8000290:	080001c0 	.word	0x080001c0

08000294 <_port_switch>:
 8000294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000298:	f8c1 d00c 	str.w	sp, [r1, #12]
 800029c:	68c3      	ldr	r3, [r0, #12]
 800029e:	469d      	mov	sp, r3
 80002a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080002a4 <_port_thread_start>:
 80002a4:	2300      	movs	r3, #0
 80002a6:	f383 8811 	msr	BASEPRI, r3
 80002aa:	4628      	mov	r0, r5
 80002ac:	47a0      	blx	r4
 80002ae:	2000      	movs	r0, #0
 80002b0:	f003 ffae 	bl	8004210 <chThdExit>

080002b4 <_port_switch_from_isr>:
 80002b4:	f003 fc54 	bl	8003b60 <chSchDoReschedule>

080002b8 <_port_exit_from_isr>:
 80002b8:	df00      	svc	0
 80002ba:	e7fe      	b.n	80002ba <_port_exit_from_isr+0x2>

080002bc <__udivsi3>:
 80002bc:	2200      	movs	r2, #0
 80002be:	0843      	lsrs	r3, r0, #1
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d374      	bcc.n	80003ae <__udivsi3+0xf2>
 80002c4:	0903      	lsrs	r3, r0, #4
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d35f      	bcc.n	800038a <__udivsi3+0xce>
 80002ca:	0a03      	lsrs	r3, r0, #8
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d344      	bcc.n	800035a <__udivsi3+0x9e>
 80002d0:	0b03      	lsrs	r3, r0, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d328      	bcc.n	8000328 <__udivsi3+0x6c>
 80002d6:	0c03      	lsrs	r3, r0, #16
 80002d8:	428b      	cmp	r3, r1
 80002da:	d30d      	bcc.n	80002f8 <__udivsi3+0x3c>
 80002dc:	22ff      	movs	r2, #255	; 0xff
 80002de:	0209      	lsls	r1, r1, #8
 80002e0:	ba12      	rev	r2, r2
 80002e2:	0c03      	lsrs	r3, r0, #16
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d302      	bcc.n	80002ee <__udivsi3+0x32>
 80002e8:	1212      	asrs	r2, r2, #8
 80002ea:	0209      	lsls	r1, r1, #8
 80002ec:	d065      	beq.n	80003ba <__udivsi3+0xfe>
 80002ee:	0b03      	lsrs	r3, r0, #12
 80002f0:	428b      	cmp	r3, r1
 80002f2:	d319      	bcc.n	8000328 <__udivsi3+0x6c>
 80002f4:	e000      	b.n	80002f8 <__udivsi3+0x3c>
 80002f6:	0a09      	lsrs	r1, r1, #8
 80002f8:	0bc3      	lsrs	r3, r0, #15
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__udivsi3+0x46>
 80002fe:	03cb      	lsls	r3, r1, #15
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0b83      	lsrs	r3, r0, #14
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__udivsi3+0x52>
 800030a:	038b      	lsls	r3, r1, #14
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0b43      	lsrs	r3, r0, #13
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__udivsi3+0x5e>
 8000316:	034b      	lsls	r3, r1, #13
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0b03      	lsrs	r3, r0, #12
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__udivsi3+0x6a>
 8000322:	030b      	lsls	r3, r1, #12
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0ac3      	lsrs	r3, r0, #11
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__udivsi3+0x76>
 800032e:	02cb      	lsls	r3, r1, #11
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0a83      	lsrs	r3, r0, #10
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__udivsi3+0x82>
 800033a:	028b      	lsls	r3, r1, #10
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0a43      	lsrs	r3, r0, #9
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__udivsi3+0x8e>
 8000346:	024b      	lsls	r3, r1, #9
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	0a03      	lsrs	r3, r0, #8
 800034e:	428b      	cmp	r3, r1
 8000350:	d301      	bcc.n	8000356 <__udivsi3+0x9a>
 8000352:	020b      	lsls	r3, r1, #8
 8000354:	1ac0      	subs	r0, r0, r3
 8000356:	4152      	adcs	r2, r2
 8000358:	d2cd      	bcs.n	80002f6 <__udivsi3+0x3a>
 800035a:	09c3      	lsrs	r3, r0, #7
 800035c:	428b      	cmp	r3, r1
 800035e:	d301      	bcc.n	8000364 <__udivsi3+0xa8>
 8000360:	01cb      	lsls	r3, r1, #7
 8000362:	1ac0      	subs	r0, r0, r3
 8000364:	4152      	adcs	r2, r2
 8000366:	0983      	lsrs	r3, r0, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__udivsi3+0xb4>
 800036c:	018b      	lsls	r3, r1, #6
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0943      	lsrs	r3, r0, #5
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__udivsi3+0xc0>
 8000378:	014b      	lsls	r3, r1, #5
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0903      	lsrs	r3, r0, #4
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__udivsi3+0xcc>
 8000384:	010b      	lsls	r3, r1, #4
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	08c3      	lsrs	r3, r0, #3
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__udivsi3+0xd8>
 8000390:	00cb      	lsls	r3, r1, #3
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0883      	lsrs	r3, r0, #2
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__udivsi3+0xe4>
 800039c:	008b      	lsls	r3, r1, #2
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0843      	lsrs	r3, r0, #1
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__udivsi3+0xf0>
 80003a8:	004b      	lsls	r3, r1, #1
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	1a41      	subs	r1, r0, r1
 80003b0:	d200      	bcs.n	80003b4 <__udivsi3+0xf8>
 80003b2:	4601      	mov	r1, r0
 80003b4:	4152      	adcs	r2, r2
 80003b6:	4610      	mov	r0, r2
 80003b8:	4770      	bx	lr
 80003ba:	e7ff      	b.n	80003bc <__udivsi3+0x100>
 80003bc:	b501      	push	{r0, lr}
 80003be:	2000      	movs	r0, #0
 80003c0:	f000 f806 	bl	80003d0 <__aeabi_idiv0>
 80003c4:	bd02      	pop	{r1, pc}
 80003c6:	46c0      	nop			; (mov r8, r8)

080003c8 <__aeabi_uidivmod>:
 80003c8:	2900      	cmp	r1, #0
 80003ca:	d0f7      	beq.n	80003bc <__udivsi3+0x100>
 80003cc:	e776      	b.n	80002bc <__udivsi3>
 80003ce:	4770      	bx	lr

080003d0 <__aeabi_idiv0>:
 80003d0:	4770      	bx	lr
 80003d2:	46c0      	nop			; (mov r8, r8)

080003d4 <__aeabi_cfrcmple>:
 80003d4:	4684      	mov	ip, r0
 80003d6:	1c08      	adds	r0, r1, #0
 80003d8:	4661      	mov	r1, ip
 80003da:	e7ff      	b.n	80003dc <__aeabi_cfcmpeq>

080003dc <__aeabi_cfcmpeq>:
 80003dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80003de:	f000 fa2b 	bl	8000838 <__lesf2>
 80003e2:	2800      	cmp	r0, #0
 80003e4:	d401      	bmi.n	80003ea <__aeabi_cfcmpeq+0xe>
 80003e6:	2100      	movs	r1, #0
 80003e8:	42c8      	cmn	r0, r1
 80003ea:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080003ec <__aeabi_fcmpeq>:
 80003ec:	b510      	push	{r4, lr}
 80003ee:	f000 f9bd 	bl	800076c <__eqsf2>
 80003f2:	4240      	negs	r0, r0
 80003f4:	3001      	adds	r0, #1
 80003f6:	bd10      	pop	{r4, pc}

080003f8 <__aeabi_fcmplt>:
 80003f8:	b510      	push	{r4, lr}
 80003fa:	f000 fa1d 	bl	8000838 <__lesf2>
 80003fe:	2800      	cmp	r0, #0
 8000400:	db01      	blt.n	8000406 <__aeabi_fcmplt+0xe>
 8000402:	2000      	movs	r0, #0
 8000404:	bd10      	pop	{r4, pc}
 8000406:	2001      	movs	r0, #1
 8000408:	bd10      	pop	{r4, pc}
 800040a:	46c0      	nop			; (mov r8, r8)

0800040c <__aeabi_fcmple>:
 800040c:	b510      	push	{r4, lr}
 800040e:	f000 fa13 	bl	8000838 <__lesf2>
 8000412:	2800      	cmp	r0, #0
 8000414:	dd01      	ble.n	800041a <__aeabi_fcmple+0xe>
 8000416:	2000      	movs	r0, #0
 8000418:	bd10      	pop	{r4, pc}
 800041a:	2001      	movs	r0, #1
 800041c:	bd10      	pop	{r4, pc}
 800041e:	46c0      	nop			; (mov r8, r8)

08000420 <__aeabi_fcmpgt>:
 8000420:	b510      	push	{r4, lr}
 8000422:	f000 f9c9 	bl	80007b8 <__gesf2>
 8000426:	2800      	cmp	r0, #0
 8000428:	dc01      	bgt.n	800042e <__aeabi_fcmpgt+0xe>
 800042a:	2000      	movs	r0, #0
 800042c:	bd10      	pop	{r4, pc}
 800042e:	2001      	movs	r0, #1
 8000430:	bd10      	pop	{r4, pc}
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__aeabi_fcmpge>:
 8000434:	b510      	push	{r4, lr}
 8000436:	f000 f9bf 	bl	80007b8 <__gesf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	da01      	bge.n	8000442 <__aeabi_fcmpge+0xe>
 800043e:	2000      	movs	r0, #0
 8000440:	bd10      	pop	{r4, pc}
 8000442:	2001      	movs	r0, #1
 8000444:	bd10      	pop	{r4, pc}
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__aeabi_fadd>:
 8000448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800044a:	46c6      	mov	lr, r8
 800044c:	024e      	lsls	r6, r1, #9
 800044e:	0247      	lsls	r7, r0, #9
 8000450:	0a76      	lsrs	r6, r6, #9
 8000452:	0a7b      	lsrs	r3, r7, #9
 8000454:	0044      	lsls	r4, r0, #1
 8000456:	0fc5      	lsrs	r5, r0, #31
 8000458:	00f7      	lsls	r7, r6, #3
 800045a:	0048      	lsls	r0, r1, #1
 800045c:	4698      	mov	r8, r3
 800045e:	b500      	push	{lr}
 8000460:	0e24      	lsrs	r4, r4, #24
 8000462:	002a      	movs	r2, r5
 8000464:	00db      	lsls	r3, r3, #3
 8000466:	0e00      	lsrs	r0, r0, #24
 8000468:	0fc9      	lsrs	r1, r1, #31
 800046a:	46bc      	mov	ip, r7
 800046c:	428d      	cmp	r5, r1
 800046e:	d067      	beq.n	8000540 <__aeabi_fadd+0xf8>
 8000470:	1a22      	subs	r2, r4, r0
 8000472:	2a00      	cmp	r2, #0
 8000474:	dc00      	bgt.n	8000478 <__aeabi_fadd+0x30>
 8000476:	e0a5      	b.n	80005c4 <__aeabi_fadd+0x17c>
 8000478:	2800      	cmp	r0, #0
 800047a:	d13a      	bne.n	80004f2 <__aeabi_fadd+0xaa>
 800047c:	2f00      	cmp	r7, #0
 800047e:	d100      	bne.n	8000482 <__aeabi_fadd+0x3a>
 8000480:	e093      	b.n	80005aa <__aeabi_fadd+0x162>
 8000482:	1e51      	subs	r1, r2, #1
 8000484:	2900      	cmp	r1, #0
 8000486:	d000      	beq.n	800048a <__aeabi_fadd+0x42>
 8000488:	e0bc      	b.n	8000604 <__aeabi_fadd+0x1bc>
 800048a:	2401      	movs	r4, #1
 800048c:	1bdb      	subs	r3, r3, r7
 800048e:	015a      	lsls	r2, r3, #5
 8000490:	d546      	bpl.n	8000520 <__aeabi_fadd+0xd8>
 8000492:	019b      	lsls	r3, r3, #6
 8000494:	099e      	lsrs	r6, r3, #6
 8000496:	0030      	movs	r0, r6
 8000498:	f001 fd90 	bl	8001fbc <__clzsi2>
 800049c:	3805      	subs	r0, #5
 800049e:	4086      	lsls	r6, r0
 80004a0:	4284      	cmp	r4, r0
 80004a2:	dd00      	ble.n	80004a6 <__aeabi_fadd+0x5e>
 80004a4:	e09d      	b.n	80005e2 <__aeabi_fadd+0x19a>
 80004a6:	1b04      	subs	r4, r0, r4
 80004a8:	0032      	movs	r2, r6
 80004aa:	2020      	movs	r0, #32
 80004ac:	3401      	adds	r4, #1
 80004ae:	40e2      	lsrs	r2, r4
 80004b0:	1b04      	subs	r4, r0, r4
 80004b2:	40a6      	lsls	r6, r4
 80004b4:	0033      	movs	r3, r6
 80004b6:	1e5e      	subs	r6, r3, #1
 80004b8:	41b3      	sbcs	r3, r6
 80004ba:	2400      	movs	r4, #0
 80004bc:	4313      	orrs	r3, r2
 80004be:	075a      	lsls	r2, r3, #29
 80004c0:	d004      	beq.n	80004cc <__aeabi_fadd+0x84>
 80004c2:	220f      	movs	r2, #15
 80004c4:	401a      	ands	r2, r3
 80004c6:	2a04      	cmp	r2, #4
 80004c8:	d000      	beq.n	80004cc <__aeabi_fadd+0x84>
 80004ca:	3304      	adds	r3, #4
 80004cc:	015a      	lsls	r2, r3, #5
 80004ce:	d529      	bpl.n	8000524 <__aeabi_fadd+0xdc>
 80004d0:	3401      	adds	r4, #1
 80004d2:	2cff      	cmp	r4, #255	; 0xff
 80004d4:	d100      	bne.n	80004d8 <__aeabi_fadd+0x90>
 80004d6:	e081      	b.n	80005dc <__aeabi_fadd+0x194>
 80004d8:	002a      	movs	r2, r5
 80004da:	019b      	lsls	r3, r3, #6
 80004dc:	0a5b      	lsrs	r3, r3, #9
 80004de:	b2e4      	uxtb	r4, r4
 80004e0:	025b      	lsls	r3, r3, #9
 80004e2:	05e4      	lsls	r4, r4, #23
 80004e4:	0a58      	lsrs	r0, r3, #9
 80004e6:	07d2      	lsls	r2, r2, #31
 80004e8:	4320      	orrs	r0, r4
 80004ea:	4310      	orrs	r0, r2
 80004ec:	bc04      	pop	{r2}
 80004ee:	4690      	mov	r8, r2
 80004f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f2:	2cff      	cmp	r4, #255	; 0xff
 80004f4:	d0e3      	beq.n	80004be <__aeabi_fadd+0x76>
 80004f6:	2180      	movs	r1, #128	; 0x80
 80004f8:	0038      	movs	r0, r7
 80004fa:	04c9      	lsls	r1, r1, #19
 80004fc:	4308      	orrs	r0, r1
 80004fe:	4684      	mov	ip, r0
 8000500:	2a1b      	cmp	r2, #27
 8000502:	dd00      	ble.n	8000506 <__aeabi_fadd+0xbe>
 8000504:	e082      	b.n	800060c <__aeabi_fadd+0x1c4>
 8000506:	2020      	movs	r0, #32
 8000508:	4661      	mov	r1, ip
 800050a:	40d1      	lsrs	r1, r2
 800050c:	1a82      	subs	r2, r0, r2
 800050e:	4660      	mov	r0, ip
 8000510:	4090      	lsls	r0, r2
 8000512:	0002      	movs	r2, r0
 8000514:	1e50      	subs	r0, r2, #1
 8000516:	4182      	sbcs	r2, r0
 8000518:	430a      	orrs	r2, r1
 800051a:	1a9b      	subs	r3, r3, r2
 800051c:	015a      	lsls	r2, r3, #5
 800051e:	d4b8      	bmi.n	8000492 <__aeabi_fadd+0x4a>
 8000520:	075a      	lsls	r2, r3, #29
 8000522:	d1ce      	bne.n	80004c2 <__aeabi_fadd+0x7a>
 8000524:	08de      	lsrs	r6, r3, #3
 8000526:	002a      	movs	r2, r5
 8000528:	2cff      	cmp	r4, #255	; 0xff
 800052a:	d13a      	bne.n	80005a2 <__aeabi_fadd+0x15a>
 800052c:	2e00      	cmp	r6, #0
 800052e:	d100      	bne.n	8000532 <__aeabi_fadd+0xea>
 8000530:	e0ae      	b.n	8000690 <__aeabi_fadd+0x248>
 8000532:	2380      	movs	r3, #128	; 0x80
 8000534:	03db      	lsls	r3, r3, #15
 8000536:	4333      	orrs	r3, r6
 8000538:	025b      	lsls	r3, r3, #9
 800053a:	0a5b      	lsrs	r3, r3, #9
 800053c:	24ff      	movs	r4, #255	; 0xff
 800053e:	e7cf      	b.n	80004e0 <__aeabi_fadd+0x98>
 8000540:	1a21      	subs	r1, r4, r0
 8000542:	2900      	cmp	r1, #0
 8000544:	dd52      	ble.n	80005ec <__aeabi_fadd+0x1a4>
 8000546:	2800      	cmp	r0, #0
 8000548:	d031      	beq.n	80005ae <__aeabi_fadd+0x166>
 800054a:	2cff      	cmp	r4, #255	; 0xff
 800054c:	d0b7      	beq.n	80004be <__aeabi_fadd+0x76>
 800054e:	2080      	movs	r0, #128	; 0x80
 8000550:	003e      	movs	r6, r7
 8000552:	04c0      	lsls	r0, r0, #19
 8000554:	4306      	orrs	r6, r0
 8000556:	46b4      	mov	ip, r6
 8000558:	291b      	cmp	r1, #27
 800055a:	dd00      	ble.n	800055e <__aeabi_fadd+0x116>
 800055c:	e0aa      	b.n	80006b4 <__aeabi_fadd+0x26c>
 800055e:	2620      	movs	r6, #32
 8000560:	4660      	mov	r0, ip
 8000562:	40c8      	lsrs	r0, r1
 8000564:	1a71      	subs	r1, r6, r1
 8000566:	4666      	mov	r6, ip
 8000568:	408e      	lsls	r6, r1
 800056a:	0031      	movs	r1, r6
 800056c:	1e4e      	subs	r6, r1, #1
 800056e:	41b1      	sbcs	r1, r6
 8000570:	4301      	orrs	r1, r0
 8000572:	185b      	adds	r3, r3, r1
 8000574:	0159      	lsls	r1, r3, #5
 8000576:	d5d3      	bpl.n	8000520 <__aeabi_fadd+0xd8>
 8000578:	3401      	adds	r4, #1
 800057a:	2cff      	cmp	r4, #255	; 0xff
 800057c:	d100      	bne.n	8000580 <__aeabi_fadd+0x138>
 800057e:	e087      	b.n	8000690 <__aeabi_fadd+0x248>
 8000580:	2201      	movs	r2, #1
 8000582:	4978      	ldr	r1, [pc, #480]	; (8000764 <__aeabi_fadd+0x31c>)
 8000584:	401a      	ands	r2, r3
 8000586:	085b      	lsrs	r3, r3, #1
 8000588:	400b      	ands	r3, r1
 800058a:	4313      	orrs	r3, r2
 800058c:	e797      	b.n	80004be <__aeabi_fadd+0x76>
 800058e:	2c00      	cmp	r4, #0
 8000590:	d000      	beq.n	8000594 <__aeabi_fadd+0x14c>
 8000592:	e0a7      	b.n	80006e4 <__aeabi_fadd+0x29c>
 8000594:	2b00      	cmp	r3, #0
 8000596:	d000      	beq.n	800059a <__aeabi_fadd+0x152>
 8000598:	e0b6      	b.n	8000708 <__aeabi_fadd+0x2c0>
 800059a:	1e3b      	subs	r3, r7, #0
 800059c:	d162      	bne.n	8000664 <__aeabi_fadd+0x21c>
 800059e:	2600      	movs	r6, #0
 80005a0:	2200      	movs	r2, #0
 80005a2:	0273      	lsls	r3, r6, #9
 80005a4:	0a5b      	lsrs	r3, r3, #9
 80005a6:	b2e4      	uxtb	r4, r4
 80005a8:	e79a      	b.n	80004e0 <__aeabi_fadd+0x98>
 80005aa:	0014      	movs	r4, r2
 80005ac:	e787      	b.n	80004be <__aeabi_fadd+0x76>
 80005ae:	2f00      	cmp	r7, #0
 80005b0:	d04d      	beq.n	800064e <__aeabi_fadd+0x206>
 80005b2:	1e48      	subs	r0, r1, #1
 80005b4:	2800      	cmp	r0, #0
 80005b6:	d157      	bne.n	8000668 <__aeabi_fadd+0x220>
 80005b8:	4463      	add	r3, ip
 80005ba:	2401      	movs	r4, #1
 80005bc:	015a      	lsls	r2, r3, #5
 80005be:	d5af      	bpl.n	8000520 <__aeabi_fadd+0xd8>
 80005c0:	2402      	movs	r4, #2
 80005c2:	e7dd      	b.n	8000580 <__aeabi_fadd+0x138>
 80005c4:	2a00      	cmp	r2, #0
 80005c6:	d124      	bne.n	8000612 <__aeabi_fadd+0x1ca>
 80005c8:	1c62      	adds	r2, r4, #1
 80005ca:	b2d2      	uxtb	r2, r2
 80005cc:	2a01      	cmp	r2, #1
 80005ce:	ddde      	ble.n	800058e <__aeabi_fadd+0x146>
 80005d0:	1bde      	subs	r6, r3, r7
 80005d2:	0172      	lsls	r2, r6, #5
 80005d4:	d535      	bpl.n	8000642 <__aeabi_fadd+0x1fa>
 80005d6:	1afe      	subs	r6, r7, r3
 80005d8:	000d      	movs	r5, r1
 80005da:	e75c      	b.n	8000496 <__aeabi_fadd+0x4e>
 80005dc:	002a      	movs	r2, r5
 80005de:	2300      	movs	r3, #0
 80005e0:	e77e      	b.n	80004e0 <__aeabi_fadd+0x98>
 80005e2:	0033      	movs	r3, r6
 80005e4:	4a60      	ldr	r2, [pc, #384]	; (8000768 <__aeabi_fadd+0x320>)
 80005e6:	1a24      	subs	r4, r4, r0
 80005e8:	4013      	ands	r3, r2
 80005ea:	e768      	b.n	80004be <__aeabi_fadd+0x76>
 80005ec:	2900      	cmp	r1, #0
 80005ee:	d163      	bne.n	80006b8 <__aeabi_fadd+0x270>
 80005f0:	1c61      	adds	r1, r4, #1
 80005f2:	b2c8      	uxtb	r0, r1
 80005f4:	2801      	cmp	r0, #1
 80005f6:	dd4e      	ble.n	8000696 <__aeabi_fadd+0x24e>
 80005f8:	29ff      	cmp	r1, #255	; 0xff
 80005fa:	d049      	beq.n	8000690 <__aeabi_fadd+0x248>
 80005fc:	4463      	add	r3, ip
 80005fe:	085b      	lsrs	r3, r3, #1
 8000600:	000c      	movs	r4, r1
 8000602:	e75c      	b.n	80004be <__aeabi_fadd+0x76>
 8000604:	2aff      	cmp	r2, #255	; 0xff
 8000606:	d041      	beq.n	800068c <__aeabi_fadd+0x244>
 8000608:	000a      	movs	r2, r1
 800060a:	e779      	b.n	8000500 <__aeabi_fadd+0xb8>
 800060c:	2201      	movs	r2, #1
 800060e:	1a9b      	subs	r3, r3, r2
 8000610:	e784      	b.n	800051c <__aeabi_fadd+0xd4>
 8000612:	2c00      	cmp	r4, #0
 8000614:	d01d      	beq.n	8000652 <__aeabi_fadd+0x20a>
 8000616:	28ff      	cmp	r0, #255	; 0xff
 8000618:	d022      	beq.n	8000660 <__aeabi_fadd+0x218>
 800061a:	2480      	movs	r4, #128	; 0x80
 800061c:	04e4      	lsls	r4, r4, #19
 800061e:	4252      	negs	r2, r2
 8000620:	4323      	orrs	r3, r4
 8000622:	2a1b      	cmp	r2, #27
 8000624:	dd00      	ble.n	8000628 <__aeabi_fadd+0x1e0>
 8000626:	e08a      	b.n	800073e <__aeabi_fadd+0x2f6>
 8000628:	001c      	movs	r4, r3
 800062a:	2520      	movs	r5, #32
 800062c:	40d4      	lsrs	r4, r2
 800062e:	1aaa      	subs	r2, r5, r2
 8000630:	4093      	lsls	r3, r2
 8000632:	1e5a      	subs	r2, r3, #1
 8000634:	4193      	sbcs	r3, r2
 8000636:	4323      	orrs	r3, r4
 8000638:	4662      	mov	r2, ip
 800063a:	0004      	movs	r4, r0
 800063c:	1ad3      	subs	r3, r2, r3
 800063e:	000d      	movs	r5, r1
 8000640:	e725      	b.n	800048e <__aeabi_fadd+0x46>
 8000642:	2e00      	cmp	r6, #0
 8000644:	d000      	beq.n	8000648 <__aeabi_fadd+0x200>
 8000646:	e726      	b.n	8000496 <__aeabi_fadd+0x4e>
 8000648:	2200      	movs	r2, #0
 800064a:	2400      	movs	r4, #0
 800064c:	e7a9      	b.n	80005a2 <__aeabi_fadd+0x15a>
 800064e:	000c      	movs	r4, r1
 8000650:	e735      	b.n	80004be <__aeabi_fadd+0x76>
 8000652:	2b00      	cmp	r3, #0
 8000654:	d04d      	beq.n	80006f2 <__aeabi_fadd+0x2aa>
 8000656:	43d2      	mvns	r2, r2
 8000658:	2a00      	cmp	r2, #0
 800065a:	d0ed      	beq.n	8000638 <__aeabi_fadd+0x1f0>
 800065c:	28ff      	cmp	r0, #255	; 0xff
 800065e:	d1e0      	bne.n	8000622 <__aeabi_fadd+0x1da>
 8000660:	4663      	mov	r3, ip
 8000662:	24ff      	movs	r4, #255	; 0xff
 8000664:	000d      	movs	r5, r1
 8000666:	e72a      	b.n	80004be <__aeabi_fadd+0x76>
 8000668:	29ff      	cmp	r1, #255	; 0xff
 800066a:	d00f      	beq.n	800068c <__aeabi_fadd+0x244>
 800066c:	0001      	movs	r1, r0
 800066e:	e773      	b.n	8000558 <__aeabi_fadd+0x110>
 8000670:	2b00      	cmp	r3, #0
 8000672:	d061      	beq.n	8000738 <__aeabi_fadd+0x2f0>
 8000674:	24ff      	movs	r4, #255	; 0xff
 8000676:	2f00      	cmp	r7, #0
 8000678:	d100      	bne.n	800067c <__aeabi_fadd+0x234>
 800067a:	e720      	b.n	80004be <__aeabi_fadd+0x76>
 800067c:	2280      	movs	r2, #128	; 0x80
 800067e:	4641      	mov	r1, r8
 8000680:	03d2      	lsls	r2, r2, #15
 8000682:	4211      	tst	r1, r2
 8000684:	d002      	beq.n	800068c <__aeabi_fadd+0x244>
 8000686:	4216      	tst	r6, r2
 8000688:	d100      	bne.n	800068c <__aeabi_fadd+0x244>
 800068a:	003b      	movs	r3, r7
 800068c:	24ff      	movs	r4, #255	; 0xff
 800068e:	e716      	b.n	80004be <__aeabi_fadd+0x76>
 8000690:	24ff      	movs	r4, #255	; 0xff
 8000692:	2300      	movs	r3, #0
 8000694:	e724      	b.n	80004e0 <__aeabi_fadd+0x98>
 8000696:	2c00      	cmp	r4, #0
 8000698:	d1ea      	bne.n	8000670 <__aeabi_fadd+0x228>
 800069a:	2b00      	cmp	r3, #0
 800069c:	d058      	beq.n	8000750 <__aeabi_fadd+0x308>
 800069e:	2f00      	cmp	r7, #0
 80006a0:	d100      	bne.n	80006a4 <__aeabi_fadd+0x25c>
 80006a2:	e70c      	b.n	80004be <__aeabi_fadd+0x76>
 80006a4:	4463      	add	r3, ip
 80006a6:	015a      	lsls	r2, r3, #5
 80006a8:	d400      	bmi.n	80006ac <__aeabi_fadd+0x264>
 80006aa:	e739      	b.n	8000520 <__aeabi_fadd+0xd8>
 80006ac:	4a2e      	ldr	r2, [pc, #184]	; (8000768 <__aeabi_fadd+0x320>)
 80006ae:	000c      	movs	r4, r1
 80006b0:	4013      	ands	r3, r2
 80006b2:	e704      	b.n	80004be <__aeabi_fadd+0x76>
 80006b4:	2101      	movs	r1, #1
 80006b6:	e75c      	b.n	8000572 <__aeabi_fadd+0x12a>
 80006b8:	2c00      	cmp	r4, #0
 80006ba:	d11e      	bne.n	80006fa <__aeabi_fadd+0x2b2>
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d040      	beq.n	8000742 <__aeabi_fadd+0x2fa>
 80006c0:	43c9      	mvns	r1, r1
 80006c2:	2900      	cmp	r1, #0
 80006c4:	d00b      	beq.n	80006de <__aeabi_fadd+0x296>
 80006c6:	28ff      	cmp	r0, #255	; 0xff
 80006c8:	d036      	beq.n	8000738 <__aeabi_fadd+0x2f0>
 80006ca:	291b      	cmp	r1, #27
 80006cc:	dc47      	bgt.n	800075e <__aeabi_fadd+0x316>
 80006ce:	001c      	movs	r4, r3
 80006d0:	2620      	movs	r6, #32
 80006d2:	40cc      	lsrs	r4, r1
 80006d4:	1a71      	subs	r1, r6, r1
 80006d6:	408b      	lsls	r3, r1
 80006d8:	1e59      	subs	r1, r3, #1
 80006da:	418b      	sbcs	r3, r1
 80006dc:	4323      	orrs	r3, r4
 80006de:	4463      	add	r3, ip
 80006e0:	0004      	movs	r4, r0
 80006e2:	e747      	b.n	8000574 <__aeabi_fadd+0x12c>
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d118      	bne.n	800071a <__aeabi_fadd+0x2d2>
 80006e8:	1e3b      	subs	r3, r7, #0
 80006ea:	d02d      	beq.n	8000748 <__aeabi_fadd+0x300>
 80006ec:	000d      	movs	r5, r1
 80006ee:	24ff      	movs	r4, #255	; 0xff
 80006f0:	e6e5      	b.n	80004be <__aeabi_fadd+0x76>
 80006f2:	003b      	movs	r3, r7
 80006f4:	0004      	movs	r4, r0
 80006f6:	000d      	movs	r5, r1
 80006f8:	e6e1      	b.n	80004be <__aeabi_fadd+0x76>
 80006fa:	28ff      	cmp	r0, #255	; 0xff
 80006fc:	d01c      	beq.n	8000738 <__aeabi_fadd+0x2f0>
 80006fe:	2480      	movs	r4, #128	; 0x80
 8000700:	04e4      	lsls	r4, r4, #19
 8000702:	4249      	negs	r1, r1
 8000704:	4323      	orrs	r3, r4
 8000706:	e7e0      	b.n	80006ca <__aeabi_fadd+0x282>
 8000708:	2f00      	cmp	r7, #0
 800070a:	d100      	bne.n	800070e <__aeabi_fadd+0x2c6>
 800070c:	e6d7      	b.n	80004be <__aeabi_fadd+0x76>
 800070e:	1bde      	subs	r6, r3, r7
 8000710:	0172      	lsls	r2, r6, #5
 8000712:	d51f      	bpl.n	8000754 <__aeabi_fadd+0x30c>
 8000714:	1afb      	subs	r3, r7, r3
 8000716:	000d      	movs	r5, r1
 8000718:	e6d1      	b.n	80004be <__aeabi_fadd+0x76>
 800071a:	24ff      	movs	r4, #255	; 0xff
 800071c:	2f00      	cmp	r7, #0
 800071e:	d100      	bne.n	8000722 <__aeabi_fadd+0x2da>
 8000720:	e6cd      	b.n	80004be <__aeabi_fadd+0x76>
 8000722:	2280      	movs	r2, #128	; 0x80
 8000724:	4640      	mov	r0, r8
 8000726:	03d2      	lsls	r2, r2, #15
 8000728:	4210      	tst	r0, r2
 800072a:	d0af      	beq.n	800068c <__aeabi_fadd+0x244>
 800072c:	4216      	tst	r6, r2
 800072e:	d1ad      	bne.n	800068c <__aeabi_fadd+0x244>
 8000730:	003b      	movs	r3, r7
 8000732:	000d      	movs	r5, r1
 8000734:	24ff      	movs	r4, #255	; 0xff
 8000736:	e6c2      	b.n	80004be <__aeabi_fadd+0x76>
 8000738:	4663      	mov	r3, ip
 800073a:	24ff      	movs	r4, #255	; 0xff
 800073c:	e6bf      	b.n	80004be <__aeabi_fadd+0x76>
 800073e:	2301      	movs	r3, #1
 8000740:	e77a      	b.n	8000638 <__aeabi_fadd+0x1f0>
 8000742:	003b      	movs	r3, r7
 8000744:	0004      	movs	r4, r0
 8000746:	e6ba      	b.n	80004be <__aeabi_fadd+0x76>
 8000748:	2680      	movs	r6, #128	; 0x80
 800074a:	2200      	movs	r2, #0
 800074c:	03f6      	lsls	r6, r6, #15
 800074e:	e6f0      	b.n	8000532 <__aeabi_fadd+0xea>
 8000750:	003b      	movs	r3, r7
 8000752:	e6b4      	b.n	80004be <__aeabi_fadd+0x76>
 8000754:	1e33      	subs	r3, r6, #0
 8000756:	d000      	beq.n	800075a <__aeabi_fadd+0x312>
 8000758:	e6e2      	b.n	8000520 <__aeabi_fadd+0xd8>
 800075a:	2200      	movs	r2, #0
 800075c:	e721      	b.n	80005a2 <__aeabi_fadd+0x15a>
 800075e:	2301      	movs	r3, #1
 8000760:	e7bd      	b.n	80006de <__aeabi_fadd+0x296>
 8000762:	46c0      	nop			; (mov r8, r8)
 8000764:	7dffffff 	.word	0x7dffffff
 8000768:	fbffffff 	.word	0xfbffffff

0800076c <__eqsf2>:
 800076c:	b570      	push	{r4, r5, r6, lr}
 800076e:	0042      	lsls	r2, r0, #1
 8000770:	0245      	lsls	r5, r0, #9
 8000772:	024e      	lsls	r6, r1, #9
 8000774:	004c      	lsls	r4, r1, #1
 8000776:	0fc3      	lsrs	r3, r0, #31
 8000778:	0a6d      	lsrs	r5, r5, #9
 800077a:	0e12      	lsrs	r2, r2, #24
 800077c:	0a76      	lsrs	r6, r6, #9
 800077e:	0e24      	lsrs	r4, r4, #24
 8000780:	0fc9      	lsrs	r1, r1, #31
 8000782:	2001      	movs	r0, #1
 8000784:	2aff      	cmp	r2, #255	; 0xff
 8000786:	d006      	beq.n	8000796 <__eqsf2+0x2a>
 8000788:	2cff      	cmp	r4, #255	; 0xff
 800078a:	d003      	beq.n	8000794 <__eqsf2+0x28>
 800078c:	42a2      	cmp	r2, r4
 800078e:	d101      	bne.n	8000794 <__eqsf2+0x28>
 8000790:	42b5      	cmp	r5, r6
 8000792:	d006      	beq.n	80007a2 <__eqsf2+0x36>
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	2d00      	cmp	r5, #0
 8000798:	d1fc      	bne.n	8000794 <__eqsf2+0x28>
 800079a:	2cff      	cmp	r4, #255	; 0xff
 800079c:	d1fa      	bne.n	8000794 <__eqsf2+0x28>
 800079e:	2e00      	cmp	r6, #0
 80007a0:	d1f8      	bne.n	8000794 <__eqsf2+0x28>
 80007a2:	428b      	cmp	r3, r1
 80007a4:	d006      	beq.n	80007b4 <__eqsf2+0x48>
 80007a6:	2001      	movs	r0, #1
 80007a8:	2a00      	cmp	r2, #0
 80007aa:	d1f3      	bne.n	8000794 <__eqsf2+0x28>
 80007ac:	0028      	movs	r0, r5
 80007ae:	1e45      	subs	r5, r0, #1
 80007b0:	41a8      	sbcs	r0, r5
 80007b2:	e7ef      	b.n	8000794 <__eqsf2+0x28>
 80007b4:	2000      	movs	r0, #0
 80007b6:	e7ed      	b.n	8000794 <__eqsf2+0x28>

080007b8 <__gesf2>:
 80007b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007ba:	0042      	lsls	r2, r0, #1
 80007bc:	0245      	lsls	r5, r0, #9
 80007be:	024c      	lsls	r4, r1, #9
 80007c0:	0fc3      	lsrs	r3, r0, #31
 80007c2:	0048      	lsls	r0, r1, #1
 80007c4:	0a6d      	lsrs	r5, r5, #9
 80007c6:	0e12      	lsrs	r2, r2, #24
 80007c8:	0a64      	lsrs	r4, r4, #9
 80007ca:	0e00      	lsrs	r0, r0, #24
 80007cc:	0fc9      	lsrs	r1, r1, #31
 80007ce:	2aff      	cmp	r2, #255	; 0xff
 80007d0:	d01e      	beq.n	8000810 <__gesf2+0x58>
 80007d2:	28ff      	cmp	r0, #255	; 0xff
 80007d4:	d021      	beq.n	800081a <__gesf2+0x62>
 80007d6:	2a00      	cmp	r2, #0
 80007d8:	d10a      	bne.n	80007f0 <__gesf2+0x38>
 80007da:	426e      	negs	r6, r5
 80007dc:	416e      	adcs	r6, r5
 80007de:	b2f6      	uxtb	r6, r6
 80007e0:	2800      	cmp	r0, #0
 80007e2:	d10f      	bne.n	8000804 <__gesf2+0x4c>
 80007e4:	2c00      	cmp	r4, #0
 80007e6:	d10d      	bne.n	8000804 <__gesf2+0x4c>
 80007e8:	2000      	movs	r0, #0
 80007ea:	2d00      	cmp	r5, #0
 80007ec:	d009      	beq.n	8000802 <__gesf2+0x4a>
 80007ee:	e005      	b.n	80007fc <__gesf2+0x44>
 80007f0:	2800      	cmp	r0, #0
 80007f2:	d101      	bne.n	80007f8 <__gesf2+0x40>
 80007f4:	2c00      	cmp	r4, #0
 80007f6:	d001      	beq.n	80007fc <__gesf2+0x44>
 80007f8:	428b      	cmp	r3, r1
 80007fa:	d011      	beq.n	8000820 <__gesf2+0x68>
 80007fc:	2101      	movs	r1, #1
 80007fe:	4258      	negs	r0, r3
 8000800:	4308      	orrs	r0, r1
 8000802:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000804:	2e00      	cmp	r6, #0
 8000806:	d0f7      	beq.n	80007f8 <__gesf2+0x40>
 8000808:	2001      	movs	r0, #1
 800080a:	3901      	subs	r1, #1
 800080c:	4308      	orrs	r0, r1
 800080e:	e7f8      	b.n	8000802 <__gesf2+0x4a>
 8000810:	2d00      	cmp	r5, #0
 8000812:	d0de      	beq.n	80007d2 <__gesf2+0x1a>
 8000814:	2002      	movs	r0, #2
 8000816:	4240      	negs	r0, r0
 8000818:	e7f3      	b.n	8000802 <__gesf2+0x4a>
 800081a:	2c00      	cmp	r4, #0
 800081c:	d0db      	beq.n	80007d6 <__gesf2+0x1e>
 800081e:	e7f9      	b.n	8000814 <__gesf2+0x5c>
 8000820:	4282      	cmp	r2, r0
 8000822:	dceb      	bgt.n	80007fc <__gesf2+0x44>
 8000824:	db04      	blt.n	8000830 <__gesf2+0x78>
 8000826:	42a5      	cmp	r5, r4
 8000828:	d8e8      	bhi.n	80007fc <__gesf2+0x44>
 800082a:	2000      	movs	r0, #0
 800082c:	42a5      	cmp	r5, r4
 800082e:	d2e8      	bcs.n	8000802 <__gesf2+0x4a>
 8000830:	2101      	movs	r1, #1
 8000832:	1e58      	subs	r0, r3, #1
 8000834:	4308      	orrs	r0, r1
 8000836:	e7e4      	b.n	8000802 <__gesf2+0x4a>

08000838 <__lesf2>:
 8000838:	b5f0      	push	{r4, r5, r6, r7, lr}
 800083a:	0042      	lsls	r2, r0, #1
 800083c:	024d      	lsls	r5, r1, #9
 800083e:	004c      	lsls	r4, r1, #1
 8000840:	0246      	lsls	r6, r0, #9
 8000842:	0a76      	lsrs	r6, r6, #9
 8000844:	0e12      	lsrs	r2, r2, #24
 8000846:	0fc3      	lsrs	r3, r0, #31
 8000848:	0a6d      	lsrs	r5, r5, #9
 800084a:	0e24      	lsrs	r4, r4, #24
 800084c:	0fc9      	lsrs	r1, r1, #31
 800084e:	2aff      	cmp	r2, #255	; 0xff
 8000850:	d016      	beq.n	8000880 <__lesf2+0x48>
 8000852:	2cff      	cmp	r4, #255	; 0xff
 8000854:	d018      	beq.n	8000888 <__lesf2+0x50>
 8000856:	2a00      	cmp	r2, #0
 8000858:	d10a      	bne.n	8000870 <__lesf2+0x38>
 800085a:	4270      	negs	r0, r6
 800085c:	4170      	adcs	r0, r6
 800085e:	b2c0      	uxtb	r0, r0
 8000860:	2c00      	cmp	r4, #0
 8000862:	d015      	beq.n	8000890 <__lesf2+0x58>
 8000864:	2800      	cmp	r0, #0
 8000866:	d005      	beq.n	8000874 <__lesf2+0x3c>
 8000868:	2001      	movs	r0, #1
 800086a:	3901      	subs	r1, #1
 800086c:	4308      	orrs	r0, r1
 800086e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000870:	2c00      	cmp	r4, #0
 8000872:	d013      	beq.n	800089c <__lesf2+0x64>
 8000874:	4299      	cmp	r1, r3
 8000876:	d014      	beq.n	80008a2 <__lesf2+0x6a>
 8000878:	2001      	movs	r0, #1
 800087a:	425b      	negs	r3, r3
 800087c:	4318      	orrs	r0, r3
 800087e:	e7f6      	b.n	800086e <__lesf2+0x36>
 8000880:	2002      	movs	r0, #2
 8000882:	2e00      	cmp	r6, #0
 8000884:	d1f3      	bne.n	800086e <__lesf2+0x36>
 8000886:	e7e4      	b.n	8000852 <__lesf2+0x1a>
 8000888:	2002      	movs	r0, #2
 800088a:	2d00      	cmp	r5, #0
 800088c:	d1ef      	bne.n	800086e <__lesf2+0x36>
 800088e:	e7e2      	b.n	8000856 <__lesf2+0x1e>
 8000890:	2d00      	cmp	r5, #0
 8000892:	d1e7      	bne.n	8000864 <__lesf2+0x2c>
 8000894:	2000      	movs	r0, #0
 8000896:	2e00      	cmp	r6, #0
 8000898:	d0e9      	beq.n	800086e <__lesf2+0x36>
 800089a:	e7ed      	b.n	8000878 <__lesf2+0x40>
 800089c:	2d00      	cmp	r5, #0
 800089e:	d1e9      	bne.n	8000874 <__lesf2+0x3c>
 80008a0:	e7ea      	b.n	8000878 <__lesf2+0x40>
 80008a2:	42a2      	cmp	r2, r4
 80008a4:	dc06      	bgt.n	80008b4 <__lesf2+0x7c>
 80008a6:	dbdf      	blt.n	8000868 <__lesf2+0x30>
 80008a8:	42ae      	cmp	r6, r5
 80008aa:	d803      	bhi.n	80008b4 <__lesf2+0x7c>
 80008ac:	2000      	movs	r0, #0
 80008ae:	42ae      	cmp	r6, r5
 80008b0:	d3da      	bcc.n	8000868 <__lesf2+0x30>
 80008b2:	e7dc      	b.n	800086e <__lesf2+0x36>
 80008b4:	2001      	movs	r0, #1
 80008b6:	4249      	negs	r1, r1
 80008b8:	4308      	orrs	r0, r1
 80008ba:	e7d8      	b.n	800086e <__lesf2+0x36>

080008bc <__aeabi_fsub>:
 80008bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008be:	464f      	mov	r7, r9
 80008c0:	46d6      	mov	lr, sl
 80008c2:	4646      	mov	r6, r8
 80008c4:	0044      	lsls	r4, r0, #1
 80008c6:	b5c0      	push	{r6, r7, lr}
 80008c8:	0fc2      	lsrs	r2, r0, #31
 80008ca:	0247      	lsls	r7, r0, #9
 80008cc:	0248      	lsls	r0, r1, #9
 80008ce:	0a40      	lsrs	r0, r0, #9
 80008d0:	4684      	mov	ip, r0
 80008d2:	4666      	mov	r6, ip
 80008d4:	0a7b      	lsrs	r3, r7, #9
 80008d6:	0048      	lsls	r0, r1, #1
 80008d8:	0fc9      	lsrs	r1, r1, #31
 80008da:	469a      	mov	sl, r3
 80008dc:	0e24      	lsrs	r4, r4, #24
 80008de:	0015      	movs	r5, r2
 80008e0:	00db      	lsls	r3, r3, #3
 80008e2:	0e00      	lsrs	r0, r0, #24
 80008e4:	4689      	mov	r9, r1
 80008e6:	00f6      	lsls	r6, r6, #3
 80008e8:	28ff      	cmp	r0, #255	; 0xff
 80008ea:	d100      	bne.n	80008ee <__aeabi_fsub+0x32>
 80008ec:	e08f      	b.n	8000a0e <__aeabi_fsub+0x152>
 80008ee:	2101      	movs	r1, #1
 80008f0:	464f      	mov	r7, r9
 80008f2:	404f      	eors	r7, r1
 80008f4:	0039      	movs	r1, r7
 80008f6:	4291      	cmp	r1, r2
 80008f8:	d066      	beq.n	80009c8 <__aeabi_fsub+0x10c>
 80008fa:	1a22      	subs	r2, r4, r0
 80008fc:	2a00      	cmp	r2, #0
 80008fe:	dc00      	bgt.n	8000902 <__aeabi_fsub+0x46>
 8000900:	e09d      	b.n	8000a3e <__aeabi_fsub+0x182>
 8000902:	2800      	cmp	r0, #0
 8000904:	d13d      	bne.n	8000982 <__aeabi_fsub+0xc6>
 8000906:	2e00      	cmp	r6, #0
 8000908:	d100      	bne.n	800090c <__aeabi_fsub+0x50>
 800090a:	e08b      	b.n	8000a24 <__aeabi_fsub+0x168>
 800090c:	1e51      	subs	r1, r2, #1
 800090e:	2900      	cmp	r1, #0
 8000910:	d000      	beq.n	8000914 <__aeabi_fsub+0x58>
 8000912:	e0b5      	b.n	8000a80 <__aeabi_fsub+0x1c4>
 8000914:	2401      	movs	r4, #1
 8000916:	1b9b      	subs	r3, r3, r6
 8000918:	015a      	lsls	r2, r3, #5
 800091a:	d544      	bpl.n	80009a6 <__aeabi_fsub+0xea>
 800091c:	019b      	lsls	r3, r3, #6
 800091e:	099f      	lsrs	r7, r3, #6
 8000920:	0038      	movs	r0, r7
 8000922:	f001 fb4b 	bl	8001fbc <__clzsi2>
 8000926:	3805      	subs	r0, #5
 8000928:	4087      	lsls	r7, r0
 800092a:	4284      	cmp	r4, r0
 800092c:	dd00      	ble.n	8000930 <__aeabi_fsub+0x74>
 800092e:	e096      	b.n	8000a5e <__aeabi_fsub+0x1a2>
 8000930:	1b04      	subs	r4, r0, r4
 8000932:	003a      	movs	r2, r7
 8000934:	2020      	movs	r0, #32
 8000936:	3401      	adds	r4, #1
 8000938:	40e2      	lsrs	r2, r4
 800093a:	1b04      	subs	r4, r0, r4
 800093c:	40a7      	lsls	r7, r4
 800093e:	003b      	movs	r3, r7
 8000940:	1e5f      	subs	r7, r3, #1
 8000942:	41bb      	sbcs	r3, r7
 8000944:	2400      	movs	r4, #0
 8000946:	4313      	orrs	r3, r2
 8000948:	075a      	lsls	r2, r3, #29
 800094a:	d004      	beq.n	8000956 <__aeabi_fsub+0x9a>
 800094c:	220f      	movs	r2, #15
 800094e:	401a      	ands	r2, r3
 8000950:	2a04      	cmp	r2, #4
 8000952:	d000      	beq.n	8000956 <__aeabi_fsub+0x9a>
 8000954:	3304      	adds	r3, #4
 8000956:	015a      	lsls	r2, r3, #5
 8000958:	d527      	bpl.n	80009aa <__aeabi_fsub+0xee>
 800095a:	3401      	adds	r4, #1
 800095c:	2cff      	cmp	r4, #255	; 0xff
 800095e:	d100      	bne.n	8000962 <__aeabi_fsub+0xa6>
 8000960:	e079      	b.n	8000a56 <__aeabi_fsub+0x19a>
 8000962:	2201      	movs	r2, #1
 8000964:	019b      	lsls	r3, r3, #6
 8000966:	0a5b      	lsrs	r3, r3, #9
 8000968:	b2e4      	uxtb	r4, r4
 800096a:	402a      	ands	r2, r5
 800096c:	025b      	lsls	r3, r3, #9
 800096e:	05e4      	lsls	r4, r4, #23
 8000970:	0a58      	lsrs	r0, r3, #9
 8000972:	07d2      	lsls	r2, r2, #31
 8000974:	4320      	orrs	r0, r4
 8000976:	4310      	orrs	r0, r2
 8000978:	bc1c      	pop	{r2, r3, r4}
 800097a:	4690      	mov	r8, r2
 800097c:	4699      	mov	r9, r3
 800097e:	46a2      	mov	sl, r4
 8000980:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000982:	2cff      	cmp	r4, #255	; 0xff
 8000984:	d0e0      	beq.n	8000948 <__aeabi_fsub+0x8c>
 8000986:	2180      	movs	r1, #128	; 0x80
 8000988:	04c9      	lsls	r1, r1, #19
 800098a:	430e      	orrs	r6, r1
 800098c:	2a1b      	cmp	r2, #27
 800098e:	dc7b      	bgt.n	8000a88 <__aeabi_fsub+0x1cc>
 8000990:	0031      	movs	r1, r6
 8000992:	2020      	movs	r0, #32
 8000994:	40d1      	lsrs	r1, r2
 8000996:	1a82      	subs	r2, r0, r2
 8000998:	4096      	lsls	r6, r2
 800099a:	1e72      	subs	r2, r6, #1
 800099c:	4196      	sbcs	r6, r2
 800099e:	430e      	orrs	r6, r1
 80009a0:	1b9b      	subs	r3, r3, r6
 80009a2:	015a      	lsls	r2, r3, #5
 80009a4:	d4ba      	bmi.n	800091c <__aeabi_fsub+0x60>
 80009a6:	075a      	lsls	r2, r3, #29
 80009a8:	d1d0      	bne.n	800094c <__aeabi_fsub+0x90>
 80009aa:	2201      	movs	r2, #1
 80009ac:	08df      	lsrs	r7, r3, #3
 80009ae:	402a      	ands	r2, r5
 80009b0:	2cff      	cmp	r4, #255	; 0xff
 80009b2:	d133      	bne.n	8000a1c <__aeabi_fsub+0x160>
 80009b4:	2f00      	cmp	r7, #0
 80009b6:	d100      	bne.n	80009ba <__aeabi_fsub+0xfe>
 80009b8:	e0a8      	b.n	8000b0c <__aeabi_fsub+0x250>
 80009ba:	2380      	movs	r3, #128	; 0x80
 80009bc:	03db      	lsls	r3, r3, #15
 80009be:	433b      	orrs	r3, r7
 80009c0:	025b      	lsls	r3, r3, #9
 80009c2:	0a5b      	lsrs	r3, r3, #9
 80009c4:	24ff      	movs	r4, #255	; 0xff
 80009c6:	e7d1      	b.n	800096c <__aeabi_fsub+0xb0>
 80009c8:	1a21      	subs	r1, r4, r0
 80009ca:	2900      	cmp	r1, #0
 80009cc:	dd4c      	ble.n	8000a68 <__aeabi_fsub+0x1ac>
 80009ce:	2800      	cmp	r0, #0
 80009d0:	d02a      	beq.n	8000a28 <__aeabi_fsub+0x16c>
 80009d2:	2cff      	cmp	r4, #255	; 0xff
 80009d4:	d0b8      	beq.n	8000948 <__aeabi_fsub+0x8c>
 80009d6:	2080      	movs	r0, #128	; 0x80
 80009d8:	04c0      	lsls	r0, r0, #19
 80009da:	4306      	orrs	r6, r0
 80009dc:	291b      	cmp	r1, #27
 80009de:	dd00      	ble.n	80009e2 <__aeabi_fsub+0x126>
 80009e0:	e0af      	b.n	8000b42 <__aeabi_fsub+0x286>
 80009e2:	0030      	movs	r0, r6
 80009e4:	2720      	movs	r7, #32
 80009e6:	40c8      	lsrs	r0, r1
 80009e8:	1a79      	subs	r1, r7, r1
 80009ea:	408e      	lsls	r6, r1
 80009ec:	1e71      	subs	r1, r6, #1
 80009ee:	418e      	sbcs	r6, r1
 80009f0:	4306      	orrs	r6, r0
 80009f2:	199b      	adds	r3, r3, r6
 80009f4:	0159      	lsls	r1, r3, #5
 80009f6:	d5d6      	bpl.n	80009a6 <__aeabi_fsub+0xea>
 80009f8:	3401      	adds	r4, #1
 80009fa:	2cff      	cmp	r4, #255	; 0xff
 80009fc:	d100      	bne.n	8000a00 <__aeabi_fsub+0x144>
 80009fe:	e085      	b.n	8000b0c <__aeabi_fsub+0x250>
 8000a00:	2201      	movs	r2, #1
 8000a02:	497a      	ldr	r1, [pc, #488]	; (8000bec <__aeabi_fsub+0x330>)
 8000a04:	401a      	ands	r2, r3
 8000a06:	085b      	lsrs	r3, r3, #1
 8000a08:	400b      	ands	r3, r1
 8000a0a:	4313      	orrs	r3, r2
 8000a0c:	e79c      	b.n	8000948 <__aeabi_fsub+0x8c>
 8000a0e:	2e00      	cmp	r6, #0
 8000a10:	d000      	beq.n	8000a14 <__aeabi_fsub+0x158>
 8000a12:	e770      	b.n	80008f6 <__aeabi_fsub+0x3a>
 8000a14:	e76b      	b.n	80008ee <__aeabi_fsub+0x32>
 8000a16:	1e3b      	subs	r3, r7, #0
 8000a18:	d1c5      	bne.n	80009a6 <__aeabi_fsub+0xea>
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	027b      	lsls	r3, r7, #9
 8000a1e:	0a5b      	lsrs	r3, r3, #9
 8000a20:	b2e4      	uxtb	r4, r4
 8000a22:	e7a3      	b.n	800096c <__aeabi_fsub+0xb0>
 8000a24:	0014      	movs	r4, r2
 8000a26:	e78f      	b.n	8000948 <__aeabi_fsub+0x8c>
 8000a28:	2e00      	cmp	r6, #0
 8000a2a:	d04d      	beq.n	8000ac8 <__aeabi_fsub+0x20c>
 8000a2c:	1e48      	subs	r0, r1, #1
 8000a2e:	2800      	cmp	r0, #0
 8000a30:	d157      	bne.n	8000ae2 <__aeabi_fsub+0x226>
 8000a32:	199b      	adds	r3, r3, r6
 8000a34:	2401      	movs	r4, #1
 8000a36:	015a      	lsls	r2, r3, #5
 8000a38:	d5b5      	bpl.n	80009a6 <__aeabi_fsub+0xea>
 8000a3a:	2402      	movs	r4, #2
 8000a3c:	e7e0      	b.n	8000a00 <__aeabi_fsub+0x144>
 8000a3e:	2a00      	cmp	r2, #0
 8000a40:	d125      	bne.n	8000a8e <__aeabi_fsub+0x1d2>
 8000a42:	1c62      	adds	r2, r4, #1
 8000a44:	b2d2      	uxtb	r2, r2
 8000a46:	2a01      	cmp	r2, #1
 8000a48:	dd72      	ble.n	8000b30 <__aeabi_fsub+0x274>
 8000a4a:	1b9f      	subs	r7, r3, r6
 8000a4c:	017a      	lsls	r2, r7, #5
 8000a4e:	d535      	bpl.n	8000abc <__aeabi_fsub+0x200>
 8000a50:	1af7      	subs	r7, r6, r3
 8000a52:	000d      	movs	r5, r1
 8000a54:	e764      	b.n	8000920 <__aeabi_fsub+0x64>
 8000a56:	2201      	movs	r2, #1
 8000a58:	2300      	movs	r3, #0
 8000a5a:	402a      	ands	r2, r5
 8000a5c:	e786      	b.n	800096c <__aeabi_fsub+0xb0>
 8000a5e:	003b      	movs	r3, r7
 8000a60:	4a63      	ldr	r2, [pc, #396]	; (8000bf0 <__aeabi_fsub+0x334>)
 8000a62:	1a24      	subs	r4, r4, r0
 8000a64:	4013      	ands	r3, r2
 8000a66:	e76f      	b.n	8000948 <__aeabi_fsub+0x8c>
 8000a68:	2900      	cmp	r1, #0
 8000a6a:	d16c      	bne.n	8000b46 <__aeabi_fsub+0x28a>
 8000a6c:	1c61      	adds	r1, r4, #1
 8000a6e:	b2c8      	uxtb	r0, r1
 8000a70:	2801      	cmp	r0, #1
 8000a72:	dd4e      	ble.n	8000b12 <__aeabi_fsub+0x256>
 8000a74:	29ff      	cmp	r1, #255	; 0xff
 8000a76:	d049      	beq.n	8000b0c <__aeabi_fsub+0x250>
 8000a78:	199b      	adds	r3, r3, r6
 8000a7a:	085b      	lsrs	r3, r3, #1
 8000a7c:	000c      	movs	r4, r1
 8000a7e:	e763      	b.n	8000948 <__aeabi_fsub+0x8c>
 8000a80:	2aff      	cmp	r2, #255	; 0xff
 8000a82:	d041      	beq.n	8000b08 <__aeabi_fsub+0x24c>
 8000a84:	000a      	movs	r2, r1
 8000a86:	e781      	b.n	800098c <__aeabi_fsub+0xd0>
 8000a88:	2601      	movs	r6, #1
 8000a8a:	1b9b      	subs	r3, r3, r6
 8000a8c:	e789      	b.n	80009a2 <__aeabi_fsub+0xe6>
 8000a8e:	2c00      	cmp	r4, #0
 8000a90:	d01c      	beq.n	8000acc <__aeabi_fsub+0x210>
 8000a92:	28ff      	cmp	r0, #255	; 0xff
 8000a94:	d021      	beq.n	8000ada <__aeabi_fsub+0x21e>
 8000a96:	2480      	movs	r4, #128	; 0x80
 8000a98:	04e4      	lsls	r4, r4, #19
 8000a9a:	4252      	negs	r2, r2
 8000a9c:	4323      	orrs	r3, r4
 8000a9e:	2a1b      	cmp	r2, #27
 8000aa0:	dd00      	ble.n	8000aa4 <__aeabi_fsub+0x1e8>
 8000aa2:	e096      	b.n	8000bd2 <__aeabi_fsub+0x316>
 8000aa4:	001c      	movs	r4, r3
 8000aa6:	2520      	movs	r5, #32
 8000aa8:	40d4      	lsrs	r4, r2
 8000aaa:	1aaa      	subs	r2, r5, r2
 8000aac:	4093      	lsls	r3, r2
 8000aae:	1e5a      	subs	r2, r3, #1
 8000ab0:	4193      	sbcs	r3, r2
 8000ab2:	4323      	orrs	r3, r4
 8000ab4:	1af3      	subs	r3, r6, r3
 8000ab6:	0004      	movs	r4, r0
 8000ab8:	000d      	movs	r5, r1
 8000aba:	e72d      	b.n	8000918 <__aeabi_fsub+0x5c>
 8000abc:	2f00      	cmp	r7, #0
 8000abe:	d000      	beq.n	8000ac2 <__aeabi_fsub+0x206>
 8000ac0:	e72e      	b.n	8000920 <__aeabi_fsub+0x64>
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	2400      	movs	r4, #0
 8000ac6:	e7a9      	b.n	8000a1c <__aeabi_fsub+0x160>
 8000ac8:	000c      	movs	r4, r1
 8000aca:	e73d      	b.n	8000948 <__aeabi_fsub+0x8c>
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d058      	beq.n	8000b82 <__aeabi_fsub+0x2c6>
 8000ad0:	43d2      	mvns	r2, r2
 8000ad2:	2a00      	cmp	r2, #0
 8000ad4:	d0ee      	beq.n	8000ab4 <__aeabi_fsub+0x1f8>
 8000ad6:	28ff      	cmp	r0, #255	; 0xff
 8000ad8:	d1e1      	bne.n	8000a9e <__aeabi_fsub+0x1e2>
 8000ada:	0033      	movs	r3, r6
 8000adc:	24ff      	movs	r4, #255	; 0xff
 8000ade:	000d      	movs	r5, r1
 8000ae0:	e732      	b.n	8000948 <__aeabi_fsub+0x8c>
 8000ae2:	29ff      	cmp	r1, #255	; 0xff
 8000ae4:	d010      	beq.n	8000b08 <__aeabi_fsub+0x24c>
 8000ae6:	0001      	movs	r1, r0
 8000ae8:	e778      	b.n	80009dc <__aeabi_fsub+0x120>
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d06e      	beq.n	8000bcc <__aeabi_fsub+0x310>
 8000aee:	24ff      	movs	r4, #255	; 0xff
 8000af0:	2e00      	cmp	r6, #0
 8000af2:	d100      	bne.n	8000af6 <__aeabi_fsub+0x23a>
 8000af4:	e728      	b.n	8000948 <__aeabi_fsub+0x8c>
 8000af6:	2280      	movs	r2, #128	; 0x80
 8000af8:	4651      	mov	r1, sl
 8000afa:	03d2      	lsls	r2, r2, #15
 8000afc:	4211      	tst	r1, r2
 8000afe:	d003      	beq.n	8000b08 <__aeabi_fsub+0x24c>
 8000b00:	4661      	mov	r1, ip
 8000b02:	4211      	tst	r1, r2
 8000b04:	d100      	bne.n	8000b08 <__aeabi_fsub+0x24c>
 8000b06:	0033      	movs	r3, r6
 8000b08:	24ff      	movs	r4, #255	; 0xff
 8000b0a:	e71d      	b.n	8000948 <__aeabi_fsub+0x8c>
 8000b0c:	24ff      	movs	r4, #255	; 0xff
 8000b0e:	2300      	movs	r3, #0
 8000b10:	e72c      	b.n	800096c <__aeabi_fsub+0xb0>
 8000b12:	2c00      	cmp	r4, #0
 8000b14:	d1e9      	bne.n	8000aea <__aeabi_fsub+0x22e>
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d063      	beq.n	8000be2 <__aeabi_fsub+0x326>
 8000b1a:	2e00      	cmp	r6, #0
 8000b1c:	d100      	bne.n	8000b20 <__aeabi_fsub+0x264>
 8000b1e:	e713      	b.n	8000948 <__aeabi_fsub+0x8c>
 8000b20:	199b      	adds	r3, r3, r6
 8000b22:	015a      	lsls	r2, r3, #5
 8000b24:	d400      	bmi.n	8000b28 <__aeabi_fsub+0x26c>
 8000b26:	e73e      	b.n	80009a6 <__aeabi_fsub+0xea>
 8000b28:	4a31      	ldr	r2, [pc, #196]	; (8000bf0 <__aeabi_fsub+0x334>)
 8000b2a:	000c      	movs	r4, r1
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	e70b      	b.n	8000948 <__aeabi_fsub+0x8c>
 8000b30:	2c00      	cmp	r4, #0
 8000b32:	d11e      	bne.n	8000b72 <__aeabi_fsub+0x2b6>
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d12f      	bne.n	8000b98 <__aeabi_fsub+0x2dc>
 8000b38:	2e00      	cmp	r6, #0
 8000b3a:	d04f      	beq.n	8000bdc <__aeabi_fsub+0x320>
 8000b3c:	0033      	movs	r3, r6
 8000b3e:	000d      	movs	r5, r1
 8000b40:	e702      	b.n	8000948 <__aeabi_fsub+0x8c>
 8000b42:	2601      	movs	r6, #1
 8000b44:	e755      	b.n	80009f2 <__aeabi_fsub+0x136>
 8000b46:	2c00      	cmp	r4, #0
 8000b48:	d11f      	bne.n	8000b8a <__aeabi_fsub+0x2ce>
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d043      	beq.n	8000bd6 <__aeabi_fsub+0x31a>
 8000b4e:	43c9      	mvns	r1, r1
 8000b50:	2900      	cmp	r1, #0
 8000b52:	d00b      	beq.n	8000b6c <__aeabi_fsub+0x2b0>
 8000b54:	28ff      	cmp	r0, #255	; 0xff
 8000b56:	d039      	beq.n	8000bcc <__aeabi_fsub+0x310>
 8000b58:	291b      	cmp	r1, #27
 8000b5a:	dc44      	bgt.n	8000be6 <__aeabi_fsub+0x32a>
 8000b5c:	001c      	movs	r4, r3
 8000b5e:	2720      	movs	r7, #32
 8000b60:	40cc      	lsrs	r4, r1
 8000b62:	1a79      	subs	r1, r7, r1
 8000b64:	408b      	lsls	r3, r1
 8000b66:	1e59      	subs	r1, r3, #1
 8000b68:	418b      	sbcs	r3, r1
 8000b6a:	4323      	orrs	r3, r4
 8000b6c:	199b      	adds	r3, r3, r6
 8000b6e:	0004      	movs	r4, r0
 8000b70:	e740      	b.n	80009f4 <__aeabi_fsub+0x138>
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d11a      	bne.n	8000bac <__aeabi_fsub+0x2f0>
 8000b76:	2e00      	cmp	r6, #0
 8000b78:	d124      	bne.n	8000bc4 <__aeabi_fsub+0x308>
 8000b7a:	2780      	movs	r7, #128	; 0x80
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	03ff      	lsls	r7, r7, #15
 8000b80:	e71b      	b.n	80009ba <__aeabi_fsub+0xfe>
 8000b82:	0033      	movs	r3, r6
 8000b84:	0004      	movs	r4, r0
 8000b86:	000d      	movs	r5, r1
 8000b88:	e6de      	b.n	8000948 <__aeabi_fsub+0x8c>
 8000b8a:	28ff      	cmp	r0, #255	; 0xff
 8000b8c:	d01e      	beq.n	8000bcc <__aeabi_fsub+0x310>
 8000b8e:	2480      	movs	r4, #128	; 0x80
 8000b90:	04e4      	lsls	r4, r4, #19
 8000b92:	4249      	negs	r1, r1
 8000b94:	4323      	orrs	r3, r4
 8000b96:	e7df      	b.n	8000b58 <__aeabi_fsub+0x29c>
 8000b98:	2e00      	cmp	r6, #0
 8000b9a:	d100      	bne.n	8000b9e <__aeabi_fsub+0x2e2>
 8000b9c:	e6d4      	b.n	8000948 <__aeabi_fsub+0x8c>
 8000b9e:	1b9f      	subs	r7, r3, r6
 8000ba0:	017a      	lsls	r2, r7, #5
 8000ba2:	d400      	bmi.n	8000ba6 <__aeabi_fsub+0x2ea>
 8000ba4:	e737      	b.n	8000a16 <__aeabi_fsub+0x15a>
 8000ba6:	1af3      	subs	r3, r6, r3
 8000ba8:	000d      	movs	r5, r1
 8000baa:	e6cd      	b.n	8000948 <__aeabi_fsub+0x8c>
 8000bac:	24ff      	movs	r4, #255	; 0xff
 8000bae:	2e00      	cmp	r6, #0
 8000bb0:	d100      	bne.n	8000bb4 <__aeabi_fsub+0x2f8>
 8000bb2:	e6c9      	b.n	8000948 <__aeabi_fsub+0x8c>
 8000bb4:	2280      	movs	r2, #128	; 0x80
 8000bb6:	4650      	mov	r0, sl
 8000bb8:	03d2      	lsls	r2, r2, #15
 8000bba:	4210      	tst	r0, r2
 8000bbc:	d0a4      	beq.n	8000b08 <__aeabi_fsub+0x24c>
 8000bbe:	4660      	mov	r0, ip
 8000bc0:	4210      	tst	r0, r2
 8000bc2:	d1a1      	bne.n	8000b08 <__aeabi_fsub+0x24c>
 8000bc4:	0033      	movs	r3, r6
 8000bc6:	000d      	movs	r5, r1
 8000bc8:	24ff      	movs	r4, #255	; 0xff
 8000bca:	e6bd      	b.n	8000948 <__aeabi_fsub+0x8c>
 8000bcc:	0033      	movs	r3, r6
 8000bce:	24ff      	movs	r4, #255	; 0xff
 8000bd0:	e6ba      	b.n	8000948 <__aeabi_fsub+0x8c>
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	e76e      	b.n	8000ab4 <__aeabi_fsub+0x1f8>
 8000bd6:	0033      	movs	r3, r6
 8000bd8:	0004      	movs	r4, r0
 8000bda:	e6b5      	b.n	8000948 <__aeabi_fsub+0x8c>
 8000bdc:	2700      	movs	r7, #0
 8000bde:	2200      	movs	r2, #0
 8000be0:	e71c      	b.n	8000a1c <__aeabi_fsub+0x160>
 8000be2:	0033      	movs	r3, r6
 8000be4:	e6b0      	b.n	8000948 <__aeabi_fsub+0x8c>
 8000be6:	2301      	movs	r3, #1
 8000be8:	e7c0      	b.n	8000b6c <__aeabi_fsub+0x2b0>
 8000bea:	46c0      	nop			; (mov r8, r8)
 8000bec:	7dffffff 	.word	0x7dffffff
 8000bf0:	fbffffff 	.word	0xfbffffff

08000bf4 <__aeabi_f2iz>:
 8000bf4:	0241      	lsls	r1, r0, #9
 8000bf6:	0043      	lsls	r3, r0, #1
 8000bf8:	0fc2      	lsrs	r2, r0, #31
 8000bfa:	0a49      	lsrs	r1, r1, #9
 8000bfc:	0e1b      	lsrs	r3, r3, #24
 8000bfe:	2000      	movs	r0, #0
 8000c00:	2b7e      	cmp	r3, #126	; 0x7e
 8000c02:	dd0d      	ble.n	8000c20 <__aeabi_f2iz+0x2c>
 8000c04:	2b9d      	cmp	r3, #157	; 0x9d
 8000c06:	dc0c      	bgt.n	8000c22 <__aeabi_f2iz+0x2e>
 8000c08:	2080      	movs	r0, #128	; 0x80
 8000c0a:	0400      	lsls	r0, r0, #16
 8000c0c:	4301      	orrs	r1, r0
 8000c0e:	2b95      	cmp	r3, #149	; 0x95
 8000c10:	dc0a      	bgt.n	8000c28 <__aeabi_f2iz+0x34>
 8000c12:	2096      	movs	r0, #150	; 0x96
 8000c14:	1ac3      	subs	r3, r0, r3
 8000c16:	40d9      	lsrs	r1, r3
 8000c18:	4248      	negs	r0, r1
 8000c1a:	2a00      	cmp	r2, #0
 8000c1c:	d100      	bne.n	8000c20 <__aeabi_f2iz+0x2c>
 8000c1e:	0008      	movs	r0, r1
 8000c20:	4770      	bx	lr
 8000c22:	4b03      	ldr	r3, [pc, #12]	; (8000c30 <__aeabi_f2iz+0x3c>)
 8000c24:	18d0      	adds	r0, r2, r3
 8000c26:	e7fb      	b.n	8000c20 <__aeabi_f2iz+0x2c>
 8000c28:	3b96      	subs	r3, #150	; 0x96
 8000c2a:	4099      	lsls	r1, r3
 8000c2c:	e7f4      	b.n	8000c18 <__aeabi_f2iz+0x24>
 8000c2e:	46c0      	nop			; (mov r8, r8)
 8000c30:	7fffffff 	.word	0x7fffffff

08000c34 <__aeabi_dadd>:
 8000c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c36:	4645      	mov	r5, r8
 8000c38:	46de      	mov	lr, fp
 8000c3a:	4657      	mov	r7, sl
 8000c3c:	464e      	mov	r6, r9
 8000c3e:	030c      	lsls	r4, r1, #12
 8000c40:	b5e0      	push	{r5, r6, r7, lr}
 8000c42:	004e      	lsls	r6, r1, #1
 8000c44:	0fc9      	lsrs	r1, r1, #31
 8000c46:	4688      	mov	r8, r1
 8000c48:	000d      	movs	r5, r1
 8000c4a:	0a61      	lsrs	r1, r4, #9
 8000c4c:	0f44      	lsrs	r4, r0, #29
 8000c4e:	430c      	orrs	r4, r1
 8000c50:	00c7      	lsls	r7, r0, #3
 8000c52:	0319      	lsls	r1, r3, #12
 8000c54:	0058      	lsls	r0, r3, #1
 8000c56:	0fdb      	lsrs	r3, r3, #31
 8000c58:	469b      	mov	fp, r3
 8000c5a:	0a4b      	lsrs	r3, r1, #9
 8000c5c:	0f51      	lsrs	r1, r2, #29
 8000c5e:	430b      	orrs	r3, r1
 8000c60:	0d76      	lsrs	r6, r6, #21
 8000c62:	0d40      	lsrs	r0, r0, #21
 8000c64:	0019      	movs	r1, r3
 8000c66:	00d2      	lsls	r2, r2, #3
 8000c68:	45d8      	cmp	r8, fp
 8000c6a:	d100      	bne.n	8000c6e <__aeabi_dadd+0x3a>
 8000c6c:	e0ae      	b.n	8000dcc <__aeabi_dadd+0x198>
 8000c6e:	1a35      	subs	r5, r6, r0
 8000c70:	2d00      	cmp	r5, #0
 8000c72:	dc00      	bgt.n	8000c76 <__aeabi_dadd+0x42>
 8000c74:	e0f6      	b.n	8000e64 <__aeabi_dadd+0x230>
 8000c76:	2800      	cmp	r0, #0
 8000c78:	d10f      	bne.n	8000c9a <__aeabi_dadd+0x66>
 8000c7a:	4313      	orrs	r3, r2
 8000c7c:	d100      	bne.n	8000c80 <__aeabi_dadd+0x4c>
 8000c7e:	e0db      	b.n	8000e38 <__aeabi_dadd+0x204>
 8000c80:	1e6b      	subs	r3, r5, #1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d000      	beq.n	8000c88 <__aeabi_dadd+0x54>
 8000c86:	e137      	b.n	8000ef8 <__aeabi_dadd+0x2c4>
 8000c88:	1aba      	subs	r2, r7, r2
 8000c8a:	4297      	cmp	r7, r2
 8000c8c:	41bf      	sbcs	r7, r7
 8000c8e:	1a64      	subs	r4, r4, r1
 8000c90:	427f      	negs	r7, r7
 8000c92:	1be4      	subs	r4, r4, r7
 8000c94:	2601      	movs	r6, #1
 8000c96:	0017      	movs	r7, r2
 8000c98:	e024      	b.n	8000ce4 <__aeabi_dadd+0xb0>
 8000c9a:	4bc6      	ldr	r3, [pc, #792]	; (8000fb4 <__aeabi_dadd+0x380>)
 8000c9c:	429e      	cmp	r6, r3
 8000c9e:	d04d      	beq.n	8000d3c <__aeabi_dadd+0x108>
 8000ca0:	2380      	movs	r3, #128	; 0x80
 8000ca2:	041b      	lsls	r3, r3, #16
 8000ca4:	4319      	orrs	r1, r3
 8000ca6:	2d38      	cmp	r5, #56	; 0x38
 8000ca8:	dd00      	ble.n	8000cac <__aeabi_dadd+0x78>
 8000caa:	e107      	b.n	8000ebc <__aeabi_dadd+0x288>
 8000cac:	2d1f      	cmp	r5, #31
 8000cae:	dd00      	ble.n	8000cb2 <__aeabi_dadd+0x7e>
 8000cb0:	e138      	b.n	8000f24 <__aeabi_dadd+0x2f0>
 8000cb2:	2020      	movs	r0, #32
 8000cb4:	1b43      	subs	r3, r0, r5
 8000cb6:	469a      	mov	sl, r3
 8000cb8:	000b      	movs	r3, r1
 8000cba:	4650      	mov	r0, sl
 8000cbc:	4083      	lsls	r3, r0
 8000cbe:	4699      	mov	r9, r3
 8000cc0:	0013      	movs	r3, r2
 8000cc2:	4648      	mov	r0, r9
 8000cc4:	40eb      	lsrs	r3, r5
 8000cc6:	4318      	orrs	r0, r3
 8000cc8:	0003      	movs	r3, r0
 8000cca:	4650      	mov	r0, sl
 8000ccc:	4082      	lsls	r2, r0
 8000cce:	1e50      	subs	r0, r2, #1
 8000cd0:	4182      	sbcs	r2, r0
 8000cd2:	40e9      	lsrs	r1, r5
 8000cd4:	431a      	orrs	r2, r3
 8000cd6:	1aba      	subs	r2, r7, r2
 8000cd8:	1a61      	subs	r1, r4, r1
 8000cda:	4297      	cmp	r7, r2
 8000cdc:	41a4      	sbcs	r4, r4
 8000cde:	0017      	movs	r7, r2
 8000ce0:	4264      	negs	r4, r4
 8000ce2:	1b0c      	subs	r4, r1, r4
 8000ce4:	0223      	lsls	r3, r4, #8
 8000ce6:	d562      	bpl.n	8000dae <__aeabi_dadd+0x17a>
 8000ce8:	0264      	lsls	r4, r4, #9
 8000cea:	0a65      	lsrs	r5, r4, #9
 8000cec:	2d00      	cmp	r5, #0
 8000cee:	d100      	bne.n	8000cf2 <__aeabi_dadd+0xbe>
 8000cf0:	e0df      	b.n	8000eb2 <__aeabi_dadd+0x27e>
 8000cf2:	0028      	movs	r0, r5
 8000cf4:	f001 f962 	bl	8001fbc <__clzsi2>
 8000cf8:	0003      	movs	r3, r0
 8000cfa:	3b08      	subs	r3, #8
 8000cfc:	2b1f      	cmp	r3, #31
 8000cfe:	dd00      	ble.n	8000d02 <__aeabi_dadd+0xce>
 8000d00:	e0d2      	b.n	8000ea8 <__aeabi_dadd+0x274>
 8000d02:	2220      	movs	r2, #32
 8000d04:	003c      	movs	r4, r7
 8000d06:	1ad2      	subs	r2, r2, r3
 8000d08:	409d      	lsls	r5, r3
 8000d0a:	40d4      	lsrs	r4, r2
 8000d0c:	409f      	lsls	r7, r3
 8000d0e:	4325      	orrs	r5, r4
 8000d10:	429e      	cmp	r6, r3
 8000d12:	dd00      	ble.n	8000d16 <__aeabi_dadd+0xe2>
 8000d14:	e0c4      	b.n	8000ea0 <__aeabi_dadd+0x26c>
 8000d16:	1b9e      	subs	r6, r3, r6
 8000d18:	1c73      	adds	r3, r6, #1
 8000d1a:	2b1f      	cmp	r3, #31
 8000d1c:	dd00      	ble.n	8000d20 <__aeabi_dadd+0xec>
 8000d1e:	e0f1      	b.n	8000f04 <__aeabi_dadd+0x2d0>
 8000d20:	2220      	movs	r2, #32
 8000d22:	0038      	movs	r0, r7
 8000d24:	0029      	movs	r1, r5
 8000d26:	1ad2      	subs	r2, r2, r3
 8000d28:	40d8      	lsrs	r0, r3
 8000d2a:	4091      	lsls	r1, r2
 8000d2c:	4097      	lsls	r7, r2
 8000d2e:	002c      	movs	r4, r5
 8000d30:	4301      	orrs	r1, r0
 8000d32:	1e78      	subs	r0, r7, #1
 8000d34:	4187      	sbcs	r7, r0
 8000d36:	40dc      	lsrs	r4, r3
 8000d38:	2600      	movs	r6, #0
 8000d3a:	430f      	orrs	r7, r1
 8000d3c:	077b      	lsls	r3, r7, #29
 8000d3e:	d009      	beq.n	8000d54 <__aeabi_dadd+0x120>
 8000d40:	230f      	movs	r3, #15
 8000d42:	403b      	ands	r3, r7
 8000d44:	2b04      	cmp	r3, #4
 8000d46:	d005      	beq.n	8000d54 <__aeabi_dadd+0x120>
 8000d48:	1d3b      	adds	r3, r7, #4
 8000d4a:	42bb      	cmp	r3, r7
 8000d4c:	41bf      	sbcs	r7, r7
 8000d4e:	427f      	negs	r7, r7
 8000d50:	19e4      	adds	r4, r4, r7
 8000d52:	001f      	movs	r7, r3
 8000d54:	0223      	lsls	r3, r4, #8
 8000d56:	d52c      	bpl.n	8000db2 <__aeabi_dadd+0x17e>
 8000d58:	4b96      	ldr	r3, [pc, #600]	; (8000fb4 <__aeabi_dadd+0x380>)
 8000d5a:	3601      	adds	r6, #1
 8000d5c:	429e      	cmp	r6, r3
 8000d5e:	d100      	bne.n	8000d62 <__aeabi_dadd+0x12e>
 8000d60:	e09a      	b.n	8000e98 <__aeabi_dadd+0x264>
 8000d62:	4645      	mov	r5, r8
 8000d64:	4b94      	ldr	r3, [pc, #592]	; (8000fb8 <__aeabi_dadd+0x384>)
 8000d66:	08ff      	lsrs	r7, r7, #3
 8000d68:	401c      	ands	r4, r3
 8000d6a:	0760      	lsls	r0, r4, #29
 8000d6c:	0576      	lsls	r6, r6, #21
 8000d6e:	0264      	lsls	r4, r4, #9
 8000d70:	4307      	orrs	r7, r0
 8000d72:	0b24      	lsrs	r4, r4, #12
 8000d74:	0d76      	lsrs	r6, r6, #21
 8000d76:	2100      	movs	r1, #0
 8000d78:	0324      	lsls	r4, r4, #12
 8000d7a:	0b23      	lsrs	r3, r4, #12
 8000d7c:	0d0c      	lsrs	r4, r1, #20
 8000d7e:	4a8f      	ldr	r2, [pc, #572]	; (8000fbc <__aeabi_dadd+0x388>)
 8000d80:	0524      	lsls	r4, r4, #20
 8000d82:	431c      	orrs	r4, r3
 8000d84:	4014      	ands	r4, r2
 8000d86:	0533      	lsls	r3, r6, #20
 8000d88:	4323      	orrs	r3, r4
 8000d8a:	005b      	lsls	r3, r3, #1
 8000d8c:	07ed      	lsls	r5, r5, #31
 8000d8e:	085b      	lsrs	r3, r3, #1
 8000d90:	432b      	orrs	r3, r5
 8000d92:	0038      	movs	r0, r7
 8000d94:	0019      	movs	r1, r3
 8000d96:	bc3c      	pop	{r2, r3, r4, r5}
 8000d98:	4690      	mov	r8, r2
 8000d9a:	4699      	mov	r9, r3
 8000d9c:	46a2      	mov	sl, r4
 8000d9e:	46ab      	mov	fp, r5
 8000da0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000da2:	4664      	mov	r4, ip
 8000da4:	4304      	orrs	r4, r0
 8000da6:	d100      	bne.n	8000daa <__aeabi_dadd+0x176>
 8000da8:	e211      	b.n	80011ce <__aeabi_dadd+0x59a>
 8000daa:	0004      	movs	r4, r0
 8000dac:	4667      	mov	r7, ip
 8000dae:	077b      	lsls	r3, r7, #29
 8000db0:	d1c6      	bne.n	8000d40 <__aeabi_dadd+0x10c>
 8000db2:	4645      	mov	r5, r8
 8000db4:	0760      	lsls	r0, r4, #29
 8000db6:	08ff      	lsrs	r7, r7, #3
 8000db8:	4307      	orrs	r7, r0
 8000dba:	08e4      	lsrs	r4, r4, #3
 8000dbc:	4b7d      	ldr	r3, [pc, #500]	; (8000fb4 <__aeabi_dadd+0x380>)
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	d030      	beq.n	8000e24 <__aeabi_dadd+0x1f0>
 8000dc2:	0324      	lsls	r4, r4, #12
 8000dc4:	0576      	lsls	r6, r6, #21
 8000dc6:	0b24      	lsrs	r4, r4, #12
 8000dc8:	0d76      	lsrs	r6, r6, #21
 8000dca:	e7d4      	b.n	8000d76 <__aeabi_dadd+0x142>
 8000dcc:	1a33      	subs	r3, r6, r0
 8000dce:	469a      	mov	sl, r3
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	dd78      	ble.n	8000ec6 <__aeabi_dadd+0x292>
 8000dd4:	2800      	cmp	r0, #0
 8000dd6:	d031      	beq.n	8000e3c <__aeabi_dadd+0x208>
 8000dd8:	4876      	ldr	r0, [pc, #472]	; (8000fb4 <__aeabi_dadd+0x380>)
 8000dda:	4286      	cmp	r6, r0
 8000ddc:	d0ae      	beq.n	8000d3c <__aeabi_dadd+0x108>
 8000dde:	2080      	movs	r0, #128	; 0x80
 8000de0:	0400      	lsls	r0, r0, #16
 8000de2:	4301      	orrs	r1, r0
 8000de4:	4653      	mov	r3, sl
 8000de6:	2b38      	cmp	r3, #56	; 0x38
 8000de8:	dc00      	bgt.n	8000dec <__aeabi_dadd+0x1b8>
 8000dea:	e0e9      	b.n	8000fc0 <__aeabi_dadd+0x38c>
 8000dec:	430a      	orrs	r2, r1
 8000dee:	1e51      	subs	r1, r2, #1
 8000df0:	418a      	sbcs	r2, r1
 8000df2:	2100      	movs	r1, #0
 8000df4:	19d2      	adds	r2, r2, r7
 8000df6:	42ba      	cmp	r2, r7
 8000df8:	41bf      	sbcs	r7, r7
 8000dfa:	1909      	adds	r1, r1, r4
 8000dfc:	427c      	negs	r4, r7
 8000dfe:	0017      	movs	r7, r2
 8000e00:	190c      	adds	r4, r1, r4
 8000e02:	0223      	lsls	r3, r4, #8
 8000e04:	d5d3      	bpl.n	8000dae <__aeabi_dadd+0x17a>
 8000e06:	4b6b      	ldr	r3, [pc, #428]	; (8000fb4 <__aeabi_dadd+0x380>)
 8000e08:	3601      	adds	r6, #1
 8000e0a:	429e      	cmp	r6, r3
 8000e0c:	d100      	bne.n	8000e10 <__aeabi_dadd+0x1dc>
 8000e0e:	e13a      	b.n	8001086 <__aeabi_dadd+0x452>
 8000e10:	2001      	movs	r0, #1
 8000e12:	4b69      	ldr	r3, [pc, #420]	; (8000fb8 <__aeabi_dadd+0x384>)
 8000e14:	401c      	ands	r4, r3
 8000e16:	087b      	lsrs	r3, r7, #1
 8000e18:	4007      	ands	r7, r0
 8000e1a:	431f      	orrs	r7, r3
 8000e1c:	07e0      	lsls	r0, r4, #31
 8000e1e:	4307      	orrs	r7, r0
 8000e20:	0864      	lsrs	r4, r4, #1
 8000e22:	e78b      	b.n	8000d3c <__aeabi_dadd+0x108>
 8000e24:	0023      	movs	r3, r4
 8000e26:	433b      	orrs	r3, r7
 8000e28:	d100      	bne.n	8000e2c <__aeabi_dadd+0x1f8>
 8000e2a:	e1cb      	b.n	80011c4 <__aeabi_dadd+0x590>
 8000e2c:	2280      	movs	r2, #128	; 0x80
 8000e2e:	0312      	lsls	r2, r2, #12
 8000e30:	4314      	orrs	r4, r2
 8000e32:	0324      	lsls	r4, r4, #12
 8000e34:	0b24      	lsrs	r4, r4, #12
 8000e36:	e79e      	b.n	8000d76 <__aeabi_dadd+0x142>
 8000e38:	002e      	movs	r6, r5
 8000e3a:	e77f      	b.n	8000d3c <__aeabi_dadd+0x108>
 8000e3c:	0008      	movs	r0, r1
 8000e3e:	4310      	orrs	r0, r2
 8000e40:	d100      	bne.n	8000e44 <__aeabi_dadd+0x210>
 8000e42:	e0b4      	b.n	8000fae <__aeabi_dadd+0x37a>
 8000e44:	1e58      	subs	r0, r3, #1
 8000e46:	2800      	cmp	r0, #0
 8000e48:	d000      	beq.n	8000e4c <__aeabi_dadd+0x218>
 8000e4a:	e0de      	b.n	800100a <__aeabi_dadd+0x3d6>
 8000e4c:	18ba      	adds	r2, r7, r2
 8000e4e:	42ba      	cmp	r2, r7
 8000e50:	419b      	sbcs	r3, r3
 8000e52:	1864      	adds	r4, r4, r1
 8000e54:	425b      	negs	r3, r3
 8000e56:	18e4      	adds	r4, r4, r3
 8000e58:	0017      	movs	r7, r2
 8000e5a:	2601      	movs	r6, #1
 8000e5c:	0223      	lsls	r3, r4, #8
 8000e5e:	d5a6      	bpl.n	8000dae <__aeabi_dadd+0x17a>
 8000e60:	2602      	movs	r6, #2
 8000e62:	e7d5      	b.n	8000e10 <__aeabi_dadd+0x1dc>
 8000e64:	2d00      	cmp	r5, #0
 8000e66:	d16e      	bne.n	8000f46 <__aeabi_dadd+0x312>
 8000e68:	1c70      	adds	r0, r6, #1
 8000e6a:	0540      	lsls	r0, r0, #21
 8000e6c:	0d40      	lsrs	r0, r0, #21
 8000e6e:	2801      	cmp	r0, #1
 8000e70:	dc00      	bgt.n	8000e74 <__aeabi_dadd+0x240>
 8000e72:	e0f9      	b.n	8001068 <__aeabi_dadd+0x434>
 8000e74:	1ab8      	subs	r0, r7, r2
 8000e76:	4684      	mov	ip, r0
 8000e78:	4287      	cmp	r7, r0
 8000e7a:	4180      	sbcs	r0, r0
 8000e7c:	1ae5      	subs	r5, r4, r3
 8000e7e:	4240      	negs	r0, r0
 8000e80:	1a2d      	subs	r5, r5, r0
 8000e82:	0228      	lsls	r0, r5, #8
 8000e84:	d400      	bmi.n	8000e88 <__aeabi_dadd+0x254>
 8000e86:	e089      	b.n	8000f9c <__aeabi_dadd+0x368>
 8000e88:	1bd7      	subs	r7, r2, r7
 8000e8a:	42ba      	cmp	r2, r7
 8000e8c:	4192      	sbcs	r2, r2
 8000e8e:	1b1c      	subs	r4, r3, r4
 8000e90:	4252      	negs	r2, r2
 8000e92:	1aa5      	subs	r5, r4, r2
 8000e94:	46d8      	mov	r8, fp
 8000e96:	e729      	b.n	8000cec <__aeabi_dadd+0xb8>
 8000e98:	4645      	mov	r5, r8
 8000e9a:	2400      	movs	r4, #0
 8000e9c:	2700      	movs	r7, #0
 8000e9e:	e76a      	b.n	8000d76 <__aeabi_dadd+0x142>
 8000ea0:	4c45      	ldr	r4, [pc, #276]	; (8000fb8 <__aeabi_dadd+0x384>)
 8000ea2:	1af6      	subs	r6, r6, r3
 8000ea4:	402c      	ands	r4, r5
 8000ea6:	e749      	b.n	8000d3c <__aeabi_dadd+0x108>
 8000ea8:	003d      	movs	r5, r7
 8000eaa:	3828      	subs	r0, #40	; 0x28
 8000eac:	4085      	lsls	r5, r0
 8000eae:	2700      	movs	r7, #0
 8000eb0:	e72e      	b.n	8000d10 <__aeabi_dadd+0xdc>
 8000eb2:	0038      	movs	r0, r7
 8000eb4:	f001 f882 	bl	8001fbc <__clzsi2>
 8000eb8:	3020      	adds	r0, #32
 8000eba:	e71d      	b.n	8000cf8 <__aeabi_dadd+0xc4>
 8000ebc:	430a      	orrs	r2, r1
 8000ebe:	1e51      	subs	r1, r2, #1
 8000ec0:	418a      	sbcs	r2, r1
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	e707      	b.n	8000cd6 <__aeabi_dadd+0xa2>
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d000      	beq.n	8000ecc <__aeabi_dadd+0x298>
 8000eca:	e0f3      	b.n	80010b4 <__aeabi_dadd+0x480>
 8000ecc:	1c70      	adds	r0, r6, #1
 8000ece:	0543      	lsls	r3, r0, #21
 8000ed0:	0d5b      	lsrs	r3, r3, #21
 8000ed2:	2b01      	cmp	r3, #1
 8000ed4:	dc00      	bgt.n	8000ed8 <__aeabi_dadd+0x2a4>
 8000ed6:	e0ad      	b.n	8001034 <__aeabi_dadd+0x400>
 8000ed8:	4b36      	ldr	r3, [pc, #216]	; (8000fb4 <__aeabi_dadd+0x380>)
 8000eda:	4298      	cmp	r0, r3
 8000edc:	d100      	bne.n	8000ee0 <__aeabi_dadd+0x2ac>
 8000ede:	e0d1      	b.n	8001084 <__aeabi_dadd+0x450>
 8000ee0:	18ba      	adds	r2, r7, r2
 8000ee2:	42ba      	cmp	r2, r7
 8000ee4:	41bf      	sbcs	r7, r7
 8000ee6:	1864      	adds	r4, r4, r1
 8000ee8:	427f      	negs	r7, r7
 8000eea:	19e4      	adds	r4, r4, r7
 8000eec:	07e7      	lsls	r7, r4, #31
 8000eee:	0852      	lsrs	r2, r2, #1
 8000ef0:	4317      	orrs	r7, r2
 8000ef2:	0864      	lsrs	r4, r4, #1
 8000ef4:	0006      	movs	r6, r0
 8000ef6:	e721      	b.n	8000d3c <__aeabi_dadd+0x108>
 8000ef8:	482e      	ldr	r0, [pc, #184]	; (8000fb4 <__aeabi_dadd+0x380>)
 8000efa:	4285      	cmp	r5, r0
 8000efc:	d100      	bne.n	8000f00 <__aeabi_dadd+0x2cc>
 8000efe:	e093      	b.n	8001028 <__aeabi_dadd+0x3f4>
 8000f00:	001d      	movs	r5, r3
 8000f02:	e6d0      	b.n	8000ca6 <__aeabi_dadd+0x72>
 8000f04:	0029      	movs	r1, r5
 8000f06:	3e1f      	subs	r6, #31
 8000f08:	40f1      	lsrs	r1, r6
 8000f0a:	2b20      	cmp	r3, #32
 8000f0c:	d100      	bne.n	8000f10 <__aeabi_dadd+0x2dc>
 8000f0e:	e08d      	b.n	800102c <__aeabi_dadd+0x3f8>
 8000f10:	2240      	movs	r2, #64	; 0x40
 8000f12:	1ad3      	subs	r3, r2, r3
 8000f14:	409d      	lsls	r5, r3
 8000f16:	432f      	orrs	r7, r5
 8000f18:	1e7d      	subs	r5, r7, #1
 8000f1a:	41af      	sbcs	r7, r5
 8000f1c:	2400      	movs	r4, #0
 8000f1e:	430f      	orrs	r7, r1
 8000f20:	2600      	movs	r6, #0
 8000f22:	e744      	b.n	8000dae <__aeabi_dadd+0x17a>
 8000f24:	002b      	movs	r3, r5
 8000f26:	0008      	movs	r0, r1
 8000f28:	3b20      	subs	r3, #32
 8000f2a:	40d8      	lsrs	r0, r3
 8000f2c:	0003      	movs	r3, r0
 8000f2e:	2d20      	cmp	r5, #32
 8000f30:	d100      	bne.n	8000f34 <__aeabi_dadd+0x300>
 8000f32:	e07d      	b.n	8001030 <__aeabi_dadd+0x3fc>
 8000f34:	2040      	movs	r0, #64	; 0x40
 8000f36:	1b45      	subs	r5, r0, r5
 8000f38:	40a9      	lsls	r1, r5
 8000f3a:	430a      	orrs	r2, r1
 8000f3c:	1e51      	subs	r1, r2, #1
 8000f3e:	418a      	sbcs	r2, r1
 8000f40:	2100      	movs	r1, #0
 8000f42:	431a      	orrs	r2, r3
 8000f44:	e6c7      	b.n	8000cd6 <__aeabi_dadd+0xa2>
 8000f46:	2e00      	cmp	r6, #0
 8000f48:	d050      	beq.n	8000fec <__aeabi_dadd+0x3b8>
 8000f4a:	4e1a      	ldr	r6, [pc, #104]	; (8000fb4 <__aeabi_dadd+0x380>)
 8000f4c:	42b0      	cmp	r0, r6
 8000f4e:	d057      	beq.n	8001000 <__aeabi_dadd+0x3cc>
 8000f50:	2680      	movs	r6, #128	; 0x80
 8000f52:	426b      	negs	r3, r5
 8000f54:	4699      	mov	r9, r3
 8000f56:	0436      	lsls	r6, r6, #16
 8000f58:	4334      	orrs	r4, r6
 8000f5a:	464b      	mov	r3, r9
 8000f5c:	2b38      	cmp	r3, #56	; 0x38
 8000f5e:	dd00      	ble.n	8000f62 <__aeabi_dadd+0x32e>
 8000f60:	e0d6      	b.n	8001110 <__aeabi_dadd+0x4dc>
 8000f62:	2b1f      	cmp	r3, #31
 8000f64:	dd00      	ble.n	8000f68 <__aeabi_dadd+0x334>
 8000f66:	e135      	b.n	80011d4 <__aeabi_dadd+0x5a0>
 8000f68:	2620      	movs	r6, #32
 8000f6a:	1af5      	subs	r5, r6, r3
 8000f6c:	0026      	movs	r6, r4
 8000f6e:	40ae      	lsls	r6, r5
 8000f70:	46b2      	mov	sl, r6
 8000f72:	003e      	movs	r6, r7
 8000f74:	40de      	lsrs	r6, r3
 8000f76:	46ac      	mov	ip, r5
 8000f78:	0035      	movs	r5, r6
 8000f7a:	4656      	mov	r6, sl
 8000f7c:	432e      	orrs	r6, r5
 8000f7e:	4665      	mov	r5, ip
 8000f80:	40af      	lsls	r7, r5
 8000f82:	1e7d      	subs	r5, r7, #1
 8000f84:	41af      	sbcs	r7, r5
 8000f86:	40dc      	lsrs	r4, r3
 8000f88:	4337      	orrs	r7, r6
 8000f8a:	1bd7      	subs	r7, r2, r7
 8000f8c:	42ba      	cmp	r2, r7
 8000f8e:	4192      	sbcs	r2, r2
 8000f90:	1b0c      	subs	r4, r1, r4
 8000f92:	4252      	negs	r2, r2
 8000f94:	1aa4      	subs	r4, r4, r2
 8000f96:	0006      	movs	r6, r0
 8000f98:	46d8      	mov	r8, fp
 8000f9a:	e6a3      	b.n	8000ce4 <__aeabi_dadd+0xb0>
 8000f9c:	4664      	mov	r4, ip
 8000f9e:	4667      	mov	r7, ip
 8000fa0:	432c      	orrs	r4, r5
 8000fa2:	d000      	beq.n	8000fa6 <__aeabi_dadd+0x372>
 8000fa4:	e6a2      	b.n	8000cec <__aeabi_dadd+0xb8>
 8000fa6:	2500      	movs	r5, #0
 8000fa8:	2600      	movs	r6, #0
 8000faa:	2700      	movs	r7, #0
 8000fac:	e706      	b.n	8000dbc <__aeabi_dadd+0x188>
 8000fae:	001e      	movs	r6, r3
 8000fb0:	e6c4      	b.n	8000d3c <__aeabi_dadd+0x108>
 8000fb2:	46c0      	nop			; (mov r8, r8)
 8000fb4:	000007ff 	.word	0x000007ff
 8000fb8:	ff7fffff 	.word	0xff7fffff
 8000fbc:	800fffff 	.word	0x800fffff
 8000fc0:	2b1f      	cmp	r3, #31
 8000fc2:	dc63      	bgt.n	800108c <__aeabi_dadd+0x458>
 8000fc4:	2020      	movs	r0, #32
 8000fc6:	1ac3      	subs	r3, r0, r3
 8000fc8:	0008      	movs	r0, r1
 8000fca:	4098      	lsls	r0, r3
 8000fcc:	469c      	mov	ip, r3
 8000fce:	4683      	mov	fp, r0
 8000fd0:	4653      	mov	r3, sl
 8000fd2:	0010      	movs	r0, r2
 8000fd4:	40d8      	lsrs	r0, r3
 8000fd6:	0003      	movs	r3, r0
 8000fd8:	4658      	mov	r0, fp
 8000fda:	4318      	orrs	r0, r3
 8000fdc:	4663      	mov	r3, ip
 8000fde:	409a      	lsls	r2, r3
 8000fe0:	1e53      	subs	r3, r2, #1
 8000fe2:	419a      	sbcs	r2, r3
 8000fe4:	4653      	mov	r3, sl
 8000fe6:	4302      	orrs	r2, r0
 8000fe8:	40d9      	lsrs	r1, r3
 8000fea:	e703      	b.n	8000df4 <__aeabi_dadd+0x1c0>
 8000fec:	0026      	movs	r6, r4
 8000fee:	433e      	orrs	r6, r7
 8000ff0:	d006      	beq.n	8001000 <__aeabi_dadd+0x3cc>
 8000ff2:	43eb      	mvns	r3, r5
 8000ff4:	4699      	mov	r9, r3
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d0c7      	beq.n	8000f8a <__aeabi_dadd+0x356>
 8000ffa:	4e94      	ldr	r6, [pc, #592]	; (800124c <__aeabi_dadd+0x618>)
 8000ffc:	42b0      	cmp	r0, r6
 8000ffe:	d1ac      	bne.n	8000f5a <__aeabi_dadd+0x326>
 8001000:	000c      	movs	r4, r1
 8001002:	0017      	movs	r7, r2
 8001004:	0006      	movs	r6, r0
 8001006:	46d8      	mov	r8, fp
 8001008:	e698      	b.n	8000d3c <__aeabi_dadd+0x108>
 800100a:	4b90      	ldr	r3, [pc, #576]	; (800124c <__aeabi_dadd+0x618>)
 800100c:	459a      	cmp	sl, r3
 800100e:	d00b      	beq.n	8001028 <__aeabi_dadd+0x3f4>
 8001010:	4682      	mov	sl, r0
 8001012:	e6e7      	b.n	8000de4 <__aeabi_dadd+0x1b0>
 8001014:	2800      	cmp	r0, #0
 8001016:	d000      	beq.n	800101a <__aeabi_dadd+0x3e6>
 8001018:	e09e      	b.n	8001158 <__aeabi_dadd+0x524>
 800101a:	0018      	movs	r0, r3
 800101c:	4310      	orrs	r0, r2
 800101e:	d100      	bne.n	8001022 <__aeabi_dadd+0x3ee>
 8001020:	e0e9      	b.n	80011f6 <__aeabi_dadd+0x5c2>
 8001022:	001c      	movs	r4, r3
 8001024:	0017      	movs	r7, r2
 8001026:	46d8      	mov	r8, fp
 8001028:	4e88      	ldr	r6, [pc, #544]	; (800124c <__aeabi_dadd+0x618>)
 800102a:	e687      	b.n	8000d3c <__aeabi_dadd+0x108>
 800102c:	2500      	movs	r5, #0
 800102e:	e772      	b.n	8000f16 <__aeabi_dadd+0x2e2>
 8001030:	2100      	movs	r1, #0
 8001032:	e782      	b.n	8000f3a <__aeabi_dadd+0x306>
 8001034:	0023      	movs	r3, r4
 8001036:	433b      	orrs	r3, r7
 8001038:	2e00      	cmp	r6, #0
 800103a:	d000      	beq.n	800103e <__aeabi_dadd+0x40a>
 800103c:	e0ab      	b.n	8001196 <__aeabi_dadd+0x562>
 800103e:	2b00      	cmp	r3, #0
 8001040:	d100      	bne.n	8001044 <__aeabi_dadd+0x410>
 8001042:	e0e7      	b.n	8001214 <__aeabi_dadd+0x5e0>
 8001044:	000b      	movs	r3, r1
 8001046:	4313      	orrs	r3, r2
 8001048:	d100      	bne.n	800104c <__aeabi_dadd+0x418>
 800104a:	e677      	b.n	8000d3c <__aeabi_dadd+0x108>
 800104c:	18ba      	adds	r2, r7, r2
 800104e:	42ba      	cmp	r2, r7
 8001050:	41bf      	sbcs	r7, r7
 8001052:	1864      	adds	r4, r4, r1
 8001054:	427f      	negs	r7, r7
 8001056:	19e4      	adds	r4, r4, r7
 8001058:	0223      	lsls	r3, r4, #8
 800105a:	d400      	bmi.n	800105e <__aeabi_dadd+0x42a>
 800105c:	e0f2      	b.n	8001244 <__aeabi_dadd+0x610>
 800105e:	4b7c      	ldr	r3, [pc, #496]	; (8001250 <__aeabi_dadd+0x61c>)
 8001060:	0017      	movs	r7, r2
 8001062:	401c      	ands	r4, r3
 8001064:	0006      	movs	r6, r0
 8001066:	e669      	b.n	8000d3c <__aeabi_dadd+0x108>
 8001068:	0020      	movs	r0, r4
 800106a:	4338      	orrs	r0, r7
 800106c:	2e00      	cmp	r6, #0
 800106e:	d1d1      	bne.n	8001014 <__aeabi_dadd+0x3e0>
 8001070:	2800      	cmp	r0, #0
 8001072:	d15b      	bne.n	800112c <__aeabi_dadd+0x4f8>
 8001074:	001c      	movs	r4, r3
 8001076:	4314      	orrs	r4, r2
 8001078:	d100      	bne.n	800107c <__aeabi_dadd+0x448>
 800107a:	e0a8      	b.n	80011ce <__aeabi_dadd+0x59a>
 800107c:	001c      	movs	r4, r3
 800107e:	0017      	movs	r7, r2
 8001080:	46d8      	mov	r8, fp
 8001082:	e65b      	b.n	8000d3c <__aeabi_dadd+0x108>
 8001084:	0006      	movs	r6, r0
 8001086:	2400      	movs	r4, #0
 8001088:	2700      	movs	r7, #0
 800108a:	e697      	b.n	8000dbc <__aeabi_dadd+0x188>
 800108c:	4650      	mov	r0, sl
 800108e:	000b      	movs	r3, r1
 8001090:	3820      	subs	r0, #32
 8001092:	40c3      	lsrs	r3, r0
 8001094:	4699      	mov	r9, r3
 8001096:	4653      	mov	r3, sl
 8001098:	2b20      	cmp	r3, #32
 800109a:	d100      	bne.n	800109e <__aeabi_dadd+0x46a>
 800109c:	e095      	b.n	80011ca <__aeabi_dadd+0x596>
 800109e:	2340      	movs	r3, #64	; 0x40
 80010a0:	4650      	mov	r0, sl
 80010a2:	1a1b      	subs	r3, r3, r0
 80010a4:	4099      	lsls	r1, r3
 80010a6:	430a      	orrs	r2, r1
 80010a8:	1e51      	subs	r1, r2, #1
 80010aa:	418a      	sbcs	r2, r1
 80010ac:	464b      	mov	r3, r9
 80010ae:	2100      	movs	r1, #0
 80010b0:	431a      	orrs	r2, r3
 80010b2:	e69f      	b.n	8000df4 <__aeabi_dadd+0x1c0>
 80010b4:	2e00      	cmp	r6, #0
 80010b6:	d130      	bne.n	800111a <__aeabi_dadd+0x4e6>
 80010b8:	0026      	movs	r6, r4
 80010ba:	433e      	orrs	r6, r7
 80010bc:	d067      	beq.n	800118e <__aeabi_dadd+0x55a>
 80010be:	43db      	mvns	r3, r3
 80010c0:	469a      	mov	sl, r3
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d01c      	beq.n	8001100 <__aeabi_dadd+0x4cc>
 80010c6:	4e61      	ldr	r6, [pc, #388]	; (800124c <__aeabi_dadd+0x618>)
 80010c8:	42b0      	cmp	r0, r6
 80010ca:	d060      	beq.n	800118e <__aeabi_dadd+0x55a>
 80010cc:	4653      	mov	r3, sl
 80010ce:	2b38      	cmp	r3, #56	; 0x38
 80010d0:	dd00      	ble.n	80010d4 <__aeabi_dadd+0x4a0>
 80010d2:	e096      	b.n	8001202 <__aeabi_dadd+0x5ce>
 80010d4:	2b1f      	cmp	r3, #31
 80010d6:	dd00      	ble.n	80010da <__aeabi_dadd+0x4a6>
 80010d8:	e09f      	b.n	800121a <__aeabi_dadd+0x5e6>
 80010da:	2620      	movs	r6, #32
 80010dc:	1af3      	subs	r3, r6, r3
 80010de:	0026      	movs	r6, r4
 80010e0:	409e      	lsls	r6, r3
 80010e2:	469c      	mov	ip, r3
 80010e4:	46b3      	mov	fp, r6
 80010e6:	4653      	mov	r3, sl
 80010e8:	003e      	movs	r6, r7
 80010ea:	40de      	lsrs	r6, r3
 80010ec:	0033      	movs	r3, r6
 80010ee:	465e      	mov	r6, fp
 80010f0:	431e      	orrs	r6, r3
 80010f2:	4663      	mov	r3, ip
 80010f4:	409f      	lsls	r7, r3
 80010f6:	1e7b      	subs	r3, r7, #1
 80010f8:	419f      	sbcs	r7, r3
 80010fa:	4653      	mov	r3, sl
 80010fc:	40dc      	lsrs	r4, r3
 80010fe:	4337      	orrs	r7, r6
 8001100:	18bf      	adds	r7, r7, r2
 8001102:	4297      	cmp	r7, r2
 8001104:	4192      	sbcs	r2, r2
 8001106:	1864      	adds	r4, r4, r1
 8001108:	4252      	negs	r2, r2
 800110a:	18a4      	adds	r4, r4, r2
 800110c:	0006      	movs	r6, r0
 800110e:	e678      	b.n	8000e02 <__aeabi_dadd+0x1ce>
 8001110:	4327      	orrs	r7, r4
 8001112:	1e7c      	subs	r4, r7, #1
 8001114:	41a7      	sbcs	r7, r4
 8001116:	2400      	movs	r4, #0
 8001118:	e737      	b.n	8000f8a <__aeabi_dadd+0x356>
 800111a:	4e4c      	ldr	r6, [pc, #304]	; (800124c <__aeabi_dadd+0x618>)
 800111c:	42b0      	cmp	r0, r6
 800111e:	d036      	beq.n	800118e <__aeabi_dadd+0x55a>
 8001120:	2680      	movs	r6, #128	; 0x80
 8001122:	425b      	negs	r3, r3
 8001124:	0436      	lsls	r6, r6, #16
 8001126:	469a      	mov	sl, r3
 8001128:	4334      	orrs	r4, r6
 800112a:	e7cf      	b.n	80010cc <__aeabi_dadd+0x498>
 800112c:	0018      	movs	r0, r3
 800112e:	4310      	orrs	r0, r2
 8001130:	d100      	bne.n	8001134 <__aeabi_dadd+0x500>
 8001132:	e603      	b.n	8000d3c <__aeabi_dadd+0x108>
 8001134:	1ab8      	subs	r0, r7, r2
 8001136:	4684      	mov	ip, r0
 8001138:	4567      	cmp	r7, ip
 800113a:	41ad      	sbcs	r5, r5
 800113c:	1ae0      	subs	r0, r4, r3
 800113e:	426d      	negs	r5, r5
 8001140:	1b40      	subs	r0, r0, r5
 8001142:	0205      	lsls	r5, r0, #8
 8001144:	d400      	bmi.n	8001148 <__aeabi_dadd+0x514>
 8001146:	e62c      	b.n	8000da2 <__aeabi_dadd+0x16e>
 8001148:	1bd7      	subs	r7, r2, r7
 800114a:	42ba      	cmp	r2, r7
 800114c:	4192      	sbcs	r2, r2
 800114e:	1b1c      	subs	r4, r3, r4
 8001150:	4252      	negs	r2, r2
 8001152:	1aa4      	subs	r4, r4, r2
 8001154:	46d8      	mov	r8, fp
 8001156:	e5f1      	b.n	8000d3c <__aeabi_dadd+0x108>
 8001158:	0018      	movs	r0, r3
 800115a:	4310      	orrs	r0, r2
 800115c:	d100      	bne.n	8001160 <__aeabi_dadd+0x52c>
 800115e:	e763      	b.n	8001028 <__aeabi_dadd+0x3f4>
 8001160:	08f8      	lsrs	r0, r7, #3
 8001162:	0767      	lsls	r7, r4, #29
 8001164:	4307      	orrs	r7, r0
 8001166:	2080      	movs	r0, #128	; 0x80
 8001168:	08e4      	lsrs	r4, r4, #3
 800116a:	0300      	lsls	r0, r0, #12
 800116c:	4204      	tst	r4, r0
 800116e:	d008      	beq.n	8001182 <__aeabi_dadd+0x54e>
 8001170:	08dd      	lsrs	r5, r3, #3
 8001172:	4205      	tst	r5, r0
 8001174:	d105      	bne.n	8001182 <__aeabi_dadd+0x54e>
 8001176:	08d2      	lsrs	r2, r2, #3
 8001178:	0759      	lsls	r1, r3, #29
 800117a:	4311      	orrs	r1, r2
 800117c:	000f      	movs	r7, r1
 800117e:	002c      	movs	r4, r5
 8001180:	46d8      	mov	r8, fp
 8001182:	0f7b      	lsrs	r3, r7, #29
 8001184:	00e4      	lsls	r4, r4, #3
 8001186:	431c      	orrs	r4, r3
 8001188:	00ff      	lsls	r7, r7, #3
 800118a:	4e30      	ldr	r6, [pc, #192]	; (800124c <__aeabi_dadd+0x618>)
 800118c:	e5d6      	b.n	8000d3c <__aeabi_dadd+0x108>
 800118e:	000c      	movs	r4, r1
 8001190:	0017      	movs	r7, r2
 8001192:	0006      	movs	r6, r0
 8001194:	e5d2      	b.n	8000d3c <__aeabi_dadd+0x108>
 8001196:	2b00      	cmp	r3, #0
 8001198:	d038      	beq.n	800120c <__aeabi_dadd+0x5d8>
 800119a:	000b      	movs	r3, r1
 800119c:	4313      	orrs	r3, r2
 800119e:	d100      	bne.n	80011a2 <__aeabi_dadd+0x56e>
 80011a0:	e742      	b.n	8001028 <__aeabi_dadd+0x3f4>
 80011a2:	08f8      	lsrs	r0, r7, #3
 80011a4:	0767      	lsls	r7, r4, #29
 80011a6:	4307      	orrs	r7, r0
 80011a8:	2080      	movs	r0, #128	; 0x80
 80011aa:	08e4      	lsrs	r4, r4, #3
 80011ac:	0300      	lsls	r0, r0, #12
 80011ae:	4204      	tst	r4, r0
 80011b0:	d0e7      	beq.n	8001182 <__aeabi_dadd+0x54e>
 80011b2:	08cb      	lsrs	r3, r1, #3
 80011b4:	4203      	tst	r3, r0
 80011b6:	d1e4      	bne.n	8001182 <__aeabi_dadd+0x54e>
 80011b8:	08d2      	lsrs	r2, r2, #3
 80011ba:	0749      	lsls	r1, r1, #29
 80011bc:	4311      	orrs	r1, r2
 80011be:	000f      	movs	r7, r1
 80011c0:	001c      	movs	r4, r3
 80011c2:	e7de      	b.n	8001182 <__aeabi_dadd+0x54e>
 80011c4:	2700      	movs	r7, #0
 80011c6:	2400      	movs	r4, #0
 80011c8:	e5d5      	b.n	8000d76 <__aeabi_dadd+0x142>
 80011ca:	2100      	movs	r1, #0
 80011cc:	e76b      	b.n	80010a6 <__aeabi_dadd+0x472>
 80011ce:	2500      	movs	r5, #0
 80011d0:	2700      	movs	r7, #0
 80011d2:	e5f3      	b.n	8000dbc <__aeabi_dadd+0x188>
 80011d4:	464e      	mov	r6, r9
 80011d6:	0025      	movs	r5, r4
 80011d8:	3e20      	subs	r6, #32
 80011da:	40f5      	lsrs	r5, r6
 80011dc:	464b      	mov	r3, r9
 80011de:	002e      	movs	r6, r5
 80011e0:	2b20      	cmp	r3, #32
 80011e2:	d02d      	beq.n	8001240 <__aeabi_dadd+0x60c>
 80011e4:	2540      	movs	r5, #64	; 0x40
 80011e6:	1aed      	subs	r5, r5, r3
 80011e8:	40ac      	lsls	r4, r5
 80011ea:	4327      	orrs	r7, r4
 80011ec:	1e7c      	subs	r4, r7, #1
 80011ee:	41a7      	sbcs	r7, r4
 80011f0:	2400      	movs	r4, #0
 80011f2:	4337      	orrs	r7, r6
 80011f4:	e6c9      	b.n	8000f8a <__aeabi_dadd+0x356>
 80011f6:	2480      	movs	r4, #128	; 0x80
 80011f8:	2500      	movs	r5, #0
 80011fa:	0324      	lsls	r4, r4, #12
 80011fc:	4e13      	ldr	r6, [pc, #76]	; (800124c <__aeabi_dadd+0x618>)
 80011fe:	2700      	movs	r7, #0
 8001200:	e5dc      	b.n	8000dbc <__aeabi_dadd+0x188>
 8001202:	4327      	orrs	r7, r4
 8001204:	1e7c      	subs	r4, r7, #1
 8001206:	41a7      	sbcs	r7, r4
 8001208:	2400      	movs	r4, #0
 800120a:	e779      	b.n	8001100 <__aeabi_dadd+0x4cc>
 800120c:	000c      	movs	r4, r1
 800120e:	0017      	movs	r7, r2
 8001210:	4e0e      	ldr	r6, [pc, #56]	; (800124c <__aeabi_dadd+0x618>)
 8001212:	e593      	b.n	8000d3c <__aeabi_dadd+0x108>
 8001214:	000c      	movs	r4, r1
 8001216:	0017      	movs	r7, r2
 8001218:	e590      	b.n	8000d3c <__aeabi_dadd+0x108>
 800121a:	4656      	mov	r6, sl
 800121c:	0023      	movs	r3, r4
 800121e:	3e20      	subs	r6, #32
 8001220:	40f3      	lsrs	r3, r6
 8001222:	4699      	mov	r9, r3
 8001224:	4653      	mov	r3, sl
 8001226:	2b20      	cmp	r3, #32
 8001228:	d00e      	beq.n	8001248 <__aeabi_dadd+0x614>
 800122a:	2340      	movs	r3, #64	; 0x40
 800122c:	4656      	mov	r6, sl
 800122e:	1b9b      	subs	r3, r3, r6
 8001230:	409c      	lsls	r4, r3
 8001232:	4327      	orrs	r7, r4
 8001234:	1e7c      	subs	r4, r7, #1
 8001236:	41a7      	sbcs	r7, r4
 8001238:	464b      	mov	r3, r9
 800123a:	2400      	movs	r4, #0
 800123c:	431f      	orrs	r7, r3
 800123e:	e75f      	b.n	8001100 <__aeabi_dadd+0x4cc>
 8001240:	2400      	movs	r4, #0
 8001242:	e7d2      	b.n	80011ea <__aeabi_dadd+0x5b6>
 8001244:	0017      	movs	r7, r2
 8001246:	e5b2      	b.n	8000dae <__aeabi_dadd+0x17a>
 8001248:	2400      	movs	r4, #0
 800124a:	e7f2      	b.n	8001232 <__aeabi_dadd+0x5fe>
 800124c:	000007ff 	.word	0x000007ff
 8001250:	ff7fffff 	.word	0xff7fffff

08001254 <__aeabi_ddiv>:
 8001254:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001256:	4657      	mov	r7, sl
 8001258:	4645      	mov	r5, r8
 800125a:	46de      	mov	lr, fp
 800125c:	464e      	mov	r6, r9
 800125e:	b5e0      	push	{r5, r6, r7, lr}
 8001260:	004c      	lsls	r4, r1, #1
 8001262:	030e      	lsls	r6, r1, #12
 8001264:	b087      	sub	sp, #28
 8001266:	4683      	mov	fp, r0
 8001268:	4692      	mov	sl, r2
 800126a:	001d      	movs	r5, r3
 800126c:	4680      	mov	r8, r0
 800126e:	0b36      	lsrs	r6, r6, #12
 8001270:	0d64      	lsrs	r4, r4, #21
 8001272:	0fcf      	lsrs	r7, r1, #31
 8001274:	2c00      	cmp	r4, #0
 8001276:	d04f      	beq.n	8001318 <__aeabi_ddiv+0xc4>
 8001278:	4b6f      	ldr	r3, [pc, #444]	; (8001438 <__aeabi_ddiv+0x1e4>)
 800127a:	429c      	cmp	r4, r3
 800127c:	d035      	beq.n	80012ea <__aeabi_ddiv+0x96>
 800127e:	2380      	movs	r3, #128	; 0x80
 8001280:	0f42      	lsrs	r2, r0, #29
 8001282:	041b      	lsls	r3, r3, #16
 8001284:	00f6      	lsls	r6, r6, #3
 8001286:	4313      	orrs	r3, r2
 8001288:	4333      	orrs	r3, r6
 800128a:	4699      	mov	r9, r3
 800128c:	00c3      	lsls	r3, r0, #3
 800128e:	4698      	mov	r8, r3
 8001290:	4b6a      	ldr	r3, [pc, #424]	; (800143c <__aeabi_ddiv+0x1e8>)
 8001292:	2600      	movs	r6, #0
 8001294:	469c      	mov	ip, r3
 8001296:	2300      	movs	r3, #0
 8001298:	4464      	add	r4, ip
 800129a:	9303      	str	r3, [sp, #12]
 800129c:	032b      	lsls	r3, r5, #12
 800129e:	0b1b      	lsrs	r3, r3, #12
 80012a0:	469b      	mov	fp, r3
 80012a2:	006b      	lsls	r3, r5, #1
 80012a4:	0fed      	lsrs	r5, r5, #31
 80012a6:	4650      	mov	r0, sl
 80012a8:	0d5b      	lsrs	r3, r3, #21
 80012aa:	9501      	str	r5, [sp, #4]
 80012ac:	d05e      	beq.n	800136c <__aeabi_ddiv+0x118>
 80012ae:	4a62      	ldr	r2, [pc, #392]	; (8001438 <__aeabi_ddiv+0x1e4>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d053      	beq.n	800135c <__aeabi_ddiv+0x108>
 80012b4:	465a      	mov	r2, fp
 80012b6:	00d1      	lsls	r1, r2, #3
 80012b8:	2280      	movs	r2, #128	; 0x80
 80012ba:	0f40      	lsrs	r0, r0, #29
 80012bc:	0412      	lsls	r2, r2, #16
 80012be:	4302      	orrs	r2, r0
 80012c0:	430a      	orrs	r2, r1
 80012c2:	4693      	mov	fp, r2
 80012c4:	4652      	mov	r2, sl
 80012c6:	00d1      	lsls	r1, r2, #3
 80012c8:	4a5c      	ldr	r2, [pc, #368]	; (800143c <__aeabi_ddiv+0x1e8>)
 80012ca:	4694      	mov	ip, r2
 80012cc:	2200      	movs	r2, #0
 80012ce:	4463      	add	r3, ip
 80012d0:	0038      	movs	r0, r7
 80012d2:	4068      	eors	r0, r5
 80012d4:	4684      	mov	ip, r0
 80012d6:	9002      	str	r0, [sp, #8]
 80012d8:	1ae4      	subs	r4, r4, r3
 80012da:	4316      	orrs	r6, r2
 80012dc:	2e0f      	cmp	r6, #15
 80012de:	d900      	bls.n	80012e2 <__aeabi_ddiv+0x8e>
 80012e0:	e0b4      	b.n	800144c <__aeabi_ddiv+0x1f8>
 80012e2:	4b57      	ldr	r3, [pc, #348]	; (8001440 <__aeabi_ddiv+0x1ec>)
 80012e4:	00b6      	lsls	r6, r6, #2
 80012e6:	599b      	ldr	r3, [r3, r6]
 80012e8:	469f      	mov	pc, r3
 80012ea:	0003      	movs	r3, r0
 80012ec:	4333      	orrs	r3, r6
 80012ee:	4699      	mov	r9, r3
 80012f0:	d16c      	bne.n	80013cc <__aeabi_ddiv+0x178>
 80012f2:	2300      	movs	r3, #0
 80012f4:	4698      	mov	r8, r3
 80012f6:	3302      	adds	r3, #2
 80012f8:	2608      	movs	r6, #8
 80012fa:	9303      	str	r3, [sp, #12]
 80012fc:	e7ce      	b.n	800129c <__aeabi_ddiv+0x48>
 80012fe:	46cb      	mov	fp, r9
 8001300:	4641      	mov	r1, r8
 8001302:	9a03      	ldr	r2, [sp, #12]
 8001304:	9701      	str	r7, [sp, #4]
 8001306:	2a02      	cmp	r2, #2
 8001308:	d165      	bne.n	80013d6 <__aeabi_ddiv+0x182>
 800130a:	9b01      	ldr	r3, [sp, #4]
 800130c:	4c4a      	ldr	r4, [pc, #296]	; (8001438 <__aeabi_ddiv+0x1e4>)
 800130e:	469c      	mov	ip, r3
 8001310:	2300      	movs	r3, #0
 8001312:	2200      	movs	r2, #0
 8001314:	4698      	mov	r8, r3
 8001316:	e06b      	b.n	80013f0 <__aeabi_ddiv+0x19c>
 8001318:	0003      	movs	r3, r0
 800131a:	4333      	orrs	r3, r6
 800131c:	4699      	mov	r9, r3
 800131e:	d04e      	beq.n	80013be <__aeabi_ddiv+0x16a>
 8001320:	2e00      	cmp	r6, #0
 8001322:	d100      	bne.n	8001326 <__aeabi_ddiv+0xd2>
 8001324:	e1bc      	b.n	80016a0 <__aeabi_ddiv+0x44c>
 8001326:	0030      	movs	r0, r6
 8001328:	f000 fe48 	bl	8001fbc <__clzsi2>
 800132c:	0003      	movs	r3, r0
 800132e:	3b0b      	subs	r3, #11
 8001330:	2b1c      	cmp	r3, #28
 8001332:	dd00      	ble.n	8001336 <__aeabi_ddiv+0xe2>
 8001334:	e1ac      	b.n	8001690 <__aeabi_ddiv+0x43c>
 8001336:	221d      	movs	r2, #29
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	465a      	mov	r2, fp
 800133c:	0001      	movs	r1, r0
 800133e:	40da      	lsrs	r2, r3
 8001340:	3908      	subs	r1, #8
 8001342:	408e      	lsls	r6, r1
 8001344:	0013      	movs	r3, r2
 8001346:	4333      	orrs	r3, r6
 8001348:	4699      	mov	r9, r3
 800134a:	465b      	mov	r3, fp
 800134c:	408b      	lsls	r3, r1
 800134e:	4698      	mov	r8, r3
 8001350:	2300      	movs	r3, #0
 8001352:	4c3c      	ldr	r4, [pc, #240]	; (8001444 <__aeabi_ddiv+0x1f0>)
 8001354:	2600      	movs	r6, #0
 8001356:	1a24      	subs	r4, r4, r0
 8001358:	9303      	str	r3, [sp, #12]
 800135a:	e79f      	b.n	800129c <__aeabi_ddiv+0x48>
 800135c:	4651      	mov	r1, sl
 800135e:	465a      	mov	r2, fp
 8001360:	4311      	orrs	r1, r2
 8001362:	d129      	bne.n	80013b8 <__aeabi_ddiv+0x164>
 8001364:	2200      	movs	r2, #0
 8001366:	4693      	mov	fp, r2
 8001368:	3202      	adds	r2, #2
 800136a:	e7b1      	b.n	80012d0 <__aeabi_ddiv+0x7c>
 800136c:	4659      	mov	r1, fp
 800136e:	4301      	orrs	r1, r0
 8001370:	d01e      	beq.n	80013b0 <__aeabi_ddiv+0x15c>
 8001372:	465b      	mov	r3, fp
 8001374:	2b00      	cmp	r3, #0
 8001376:	d100      	bne.n	800137a <__aeabi_ddiv+0x126>
 8001378:	e19e      	b.n	80016b8 <__aeabi_ddiv+0x464>
 800137a:	4658      	mov	r0, fp
 800137c:	f000 fe1e 	bl	8001fbc <__clzsi2>
 8001380:	0003      	movs	r3, r0
 8001382:	3b0b      	subs	r3, #11
 8001384:	2b1c      	cmp	r3, #28
 8001386:	dd00      	ble.n	800138a <__aeabi_ddiv+0x136>
 8001388:	e18f      	b.n	80016aa <__aeabi_ddiv+0x456>
 800138a:	0002      	movs	r2, r0
 800138c:	4659      	mov	r1, fp
 800138e:	3a08      	subs	r2, #8
 8001390:	4091      	lsls	r1, r2
 8001392:	468b      	mov	fp, r1
 8001394:	211d      	movs	r1, #29
 8001396:	1acb      	subs	r3, r1, r3
 8001398:	4651      	mov	r1, sl
 800139a:	40d9      	lsrs	r1, r3
 800139c:	000b      	movs	r3, r1
 800139e:	4659      	mov	r1, fp
 80013a0:	430b      	orrs	r3, r1
 80013a2:	4651      	mov	r1, sl
 80013a4:	469b      	mov	fp, r3
 80013a6:	4091      	lsls	r1, r2
 80013a8:	4b26      	ldr	r3, [pc, #152]	; (8001444 <__aeabi_ddiv+0x1f0>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	1a1b      	subs	r3, r3, r0
 80013ae:	e78f      	b.n	80012d0 <__aeabi_ddiv+0x7c>
 80013b0:	2300      	movs	r3, #0
 80013b2:	2201      	movs	r2, #1
 80013b4:	469b      	mov	fp, r3
 80013b6:	e78b      	b.n	80012d0 <__aeabi_ddiv+0x7c>
 80013b8:	4651      	mov	r1, sl
 80013ba:	2203      	movs	r2, #3
 80013bc:	e788      	b.n	80012d0 <__aeabi_ddiv+0x7c>
 80013be:	2300      	movs	r3, #0
 80013c0:	4698      	mov	r8, r3
 80013c2:	3301      	adds	r3, #1
 80013c4:	2604      	movs	r6, #4
 80013c6:	2400      	movs	r4, #0
 80013c8:	9303      	str	r3, [sp, #12]
 80013ca:	e767      	b.n	800129c <__aeabi_ddiv+0x48>
 80013cc:	2303      	movs	r3, #3
 80013ce:	46b1      	mov	r9, r6
 80013d0:	9303      	str	r3, [sp, #12]
 80013d2:	260c      	movs	r6, #12
 80013d4:	e762      	b.n	800129c <__aeabi_ddiv+0x48>
 80013d6:	2a03      	cmp	r2, #3
 80013d8:	d100      	bne.n	80013dc <__aeabi_ddiv+0x188>
 80013da:	e25c      	b.n	8001896 <__aeabi_ddiv+0x642>
 80013dc:	9b01      	ldr	r3, [sp, #4]
 80013de:	2a01      	cmp	r2, #1
 80013e0:	d000      	beq.n	80013e4 <__aeabi_ddiv+0x190>
 80013e2:	e1e4      	b.n	80017ae <__aeabi_ddiv+0x55a>
 80013e4:	4013      	ands	r3, r2
 80013e6:	469c      	mov	ip, r3
 80013e8:	2300      	movs	r3, #0
 80013ea:	2400      	movs	r4, #0
 80013ec:	2200      	movs	r2, #0
 80013ee:	4698      	mov	r8, r3
 80013f0:	2100      	movs	r1, #0
 80013f2:	0312      	lsls	r2, r2, #12
 80013f4:	0b13      	lsrs	r3, r2, #12
 80013f6:	0d0a      	lsrs	r2, r1, #20
 80013f8:	0512      	lsls	r2, r2, #20
 80013fa:	431a      	orrs	r2, r3
 80013fc:	0523      	lsls	r3, r4, #20
 80013fe:	4c12      	ldr	r4, [pc, #72]	; (8001448 <__aeabi_ddiv+0x1f4>)
 8001400:	4640      	mov	r0, r8
 8001402:	4022      	ands	r2, r4
 8001404:	4313      	orrs	r3, r2
 8001406:	4662      	mov	r2, ip
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	07d2      	lsls	r2, r2, #31
 800140c:	085b      	lsrs	r3, r3, #1
 800140e:	4313      	orrs	r3, r2
 8001410:	0019      	movs	r1, r3
 8001412:	b007      	add	sp, #28
 8001414:	bc3c      	pop	{r2, r3, r4, r5}
 8001416:	4690      	mov	r8, r2
 8001418:	4699      	mov	r9, r3
 800141a:	46a2      	mov	sl, r4
 800141c:	46ab      	mov	fp, r5
 800141e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001420:	2300      	movs	r3, #0
 8001422:	2280      	movs	r2, #128	; 0x80
 8001424:	469c      	mov	ip, r3
 8001426:	0312      	lsls	r2, r2, #12
 8001428:	4698      	mov	r8, r3
 800142a:	4c03      	ldr	r4, [pc, #12]	; (8001438 <__aeabi_ddiv+0x1e4>)
 800142c:	e7e0      	b.n	80013f0 <__aeabi_ddiv+0x19c>
 800142e:	2300      	movs	r3, #0
 8001430:	4c01      	ldr	r4, [pc, #4]	; (8001438 <__aeabi_ddiv+0x1e4>)
 8001432:	2200      	movs	r2, #0
 8001434:	4698      	mov	r8, r3
 8001436:	e7db      	b.n	80013f0 <__aeabi_ddiv+0x19c>
 8001438:	000007ff 	.word	0x000007ff
 800143c:	fffffc01 	.word	0xfffffc01
 8001440:	08004304 	.word	0x08004304
 8001444:	fffffc0d 	.word	0xfffffc0d
 8001448:	800fffff 	.word	0x800fffff
 800144c:	45d9      	cmp	r9, fp
 800144e:	d900      	bls.n	8001452 <__aeabi_ddiv+0x1fe>
 8001450:	e139      	b.n	80016c6 <__aeabi_ddiv+0x472>
 8001452:	d100      	bne.n	8001456 <__aeabi_ddiv+0x202>
 8001454:	e134      	b.n	80016c0 <__aeabi_ddiv+0x46c>
 8001456:	2300      	movs	r3, #0
 8001458:	4646      	mov	r6, r8
 800145a:	464d      	mov	r5, r9
 800145c:	469a      	mov	sl, r3
 800145e:	3c01      	subs	r4, #1
 8001460:	465b      	mov	r3, fp
 8001462:	0e0a      	lsrs	r2, r1, #24
 8001464:	021b      	lsls	r3, r3, #8
 8001466:	431a      	orrs	r2, r3
 8001468:	020b      	lsls	r3, r1, #8
 800146a:	0c17      	lsrs	r7, r2, #16
 800146c:	9303      	str	r3, [sp, #12]
 800146e:	0413      	lsls	r3, r2, #16
 8001470:	0c1b      	lsrs	r3, r3, #16
 8001472:	0039      	movs	r1, r7
 8001474:	0028      	movs	r0, r5
 8001476:	4690      	mov	r8, r2
 8001478:	9301      	str	r3, [sp, #4]
 800147a:	f7fe ff1f 	bl	80002bc <__udivsi3>
 800147e:	0002      	movs	r2, r0
 8001480:	9b01      	ldr	r3, [sp, #4]
 8001482:	4683      	mov	fp, r0
 8001484:	435a      	muls	r2, r3
 8001486:	0028      	movs	r0, r5
 8001488:	0039      	movs	r1, r7
 800148a:	4691      	mov	r9, r2
 800148c:	f7fe ff9c 	bl	80003c8 <__aeabi_uidivmod>
 8001490:	0c35      	lsrs	r5, r6, #16
 8001492:	0409      	lsls	r1, r1, #16
 8001494:	430d      	orrs	r5, r1
 8001496:	45a9      	cmp	r9, r5
 8001498:	d90d      	bls.n	80014b6 <__aeabi_ddiv+0x262>
 800149a:	465b      	mov	r3, fp
 800149c:	4445      	add	r5, r8
 800149e:	3b01      	subs	r3, #1
 80014a0:	45a8      	cmp	r8, r5
 80014a2:	d900      	bls.n	80014a6 <__aeabi_ddiv+0x252>
 80014a4:	e13a      	b.n	800171c <__aeabi_ddiv+0x4c8>
 80014a6:	45a9      	cmp	r9, r5
 80014a8:	d800      	bhi.n	80014ac <__aeabi_ddiv+0x258>
 80014aa:	e137      	b.n	800171c <__aeabi_ddiv+0x4c8>
 80014ac:	2302      	movs	r3, #2
 80014ae:	425b      	negs	r3, r3
 80014b0:	469c      	mov	ip, r3
 80014b2:	4445      	add	r5, r8
 80014b4:	44e3      	add	fp, ip
 80014b6:	464b      	mov	r3, r9
 80014b8:	1aeb      	subs	r3, r5, r3
 80014ba:	0039      	movs	r1, r7
 80014bc:	0018      	movs	r0, r3
 80014be:	9304      	str	r3, [sp, #16]
 80014c0:	f7fe fefc 	bl	80002bc <__udivsi3>
 80014c4:	9b01      	ldr	r3, [sp, #4]
 80014c6:	0005      	movs	r5, r0
 80014c8:	4343      	muls	r3, r0
 80014ca:	0039      	movs	r1, r7
 80014cc:	9804      	ldr	r0, [sp, #16]
 80014ce:	4699      	mov	r9, r3
 80014d0:	f7fe ff7a 	bl	80003c8 <__aeabi_uidivmod>
 80014d4:	0433      	lsls	r3, r6, #16
 80014d6:	0409      	lsls	r1, r1, #16
 80014d8:	0c1b      	lsrs	r3, r3, #16
 80014da:	430b      	orrs	r3, r1
 80014dc:	4599      	cmp	r9, r3
 80014de:	d909      	bls.n	80014f4 <__aeabi_ddiv+0x2a0>
 80014e0:	4443      	add	r3, r8
 80014e2:	1e6a      	subs	r2, r5, #1
 80014e4:	4598      	cmp	r8, r3
 80014e6:	d900      	bls.n	80014ea <__aeabi_ddiv+0x296>
 80014e8:	e11a      	b.n	8001720 <__aeabi_ddiv+0x4cc>
 80014ea:	4599      	cmp	r9, r3
 80014ec:	d800      	bhi.n	80014f0 <__aeabi_ddiv+0x29c>
 80014ee:	e117      	b.n	8001720 <__aeabi_ddiv+0x4cc>
 80014f0:	3d02      	subs	r5, #2
 80014f2:	4443      	add	r3, r8
 80014f4:	464a      	mov	r2, r9
 80014f6:	1a9b      	subs	r3, r3, r2
 80014f8:	465a      	mov	r2, fp
 80014fa:	0412      	lsls	r2, r2, #16
 80014fc:	432a      	orrs	r2, r5
 80014fe:	9903      	ldr	r1, [sp, #12]
 8001500:	4693      	mov	fp, r2
 8001502:	0c10      	lsrs	r0, r2, #16
 8001504:	0c0a      	lsrs	r2, r1, #16
 8001506:	4691      	mov	r9, r2
 8001508:	0409      	lsls	r1, r1, #16
 800150a:	465a      	mov	r2, fp
 800150c:	0c09      	lsrs	r1, r1, #16
 800150e:	464e      	mov	r6, r9
 8001510:	000d      	movs	r5, r1
 8001512:	0412      	lsls	r2, r2, #16
 8001514:	0c12      	lsrs	r2, r2, #16
 8001516:	4345      	muls	r5, r0
 8001518:	9105      	str	r1, [sp, #20]
 800151a:	4351      	muls	r1, r2
 800151c:	4372      	muls	r2, r6
 800151e:	4370      	muls	r0, r6
 8001520:	1952      	adds	r2, r2, r5
 8001522:	0c0e      	lsrs	r6, r1, #16
 8001524:	18b2      	adds	r2, r6, r2
 8001526:	4295      	cmp	r5, r2
 8001528:	d903      	bls.n	8001532 <__aeabi_ddiv+0x2de>
 800152a:	2580      	movs	r5, #128	; 0x80
 800152c:	026d      	lsls	r5, r5, #9
 800152e:	46ac      	mov	ip, r5
 8001530:	4460      	add	r0, ip
 8001532:	0c15      	lsrs	r5, r2, #16
 8001534:	0409      	lsls	r1, r1, #16
 8001536:	0412      	lsls	r2, r2, #16
 8001538:	0c09      	lsrs	r1, r1, #16
 800153a:	1828      	adds	r0, r5, r0
 800153c:	1852      	adds	r2, r2, r1
 800153e:	4283      	cmp	r3, r0
 8001540:	d200      	bcs.n	8001544 <__aeabi_ddiv+0x2f0>
 8001542:	e0ce      	b.n	80016e2 <__aeabi_ddiv+0x48e>
 8001544:	d100      	bne.n	8001548 <__aeabi_ddiv+0x2f4>
 8001546:	e0c8      	b.n	80016da <__aeabi_ddiv+0x486>
 8001548:	1a1d      	subs	r5, r3, r0
 800154a:	4653      	mov	r3, sl
 800154c:	1a9e      	subs	r6, r3, r2
 800154e:	45b2      	cmp	sl, r6
 8001550:	4192      	sbcs	r2, r2
 8001552:	4252      	negs	r2, r2
 8001554:	1aab      	subs	r3, r5, r2
 8001556:	469a      	mov	sl, r3
 8001558:	4598      	cmp	r8, r3
 800155a:	d100      	bne.n	800155e <__aeabi_ddiv+0x30a>
 800155c:	e117      	b.n	800178e <__aeabi_ddiv+0x53a>
 800155e:	0039      	movs	r1, r7
 8001560:	0018      	movs	r0, r3
 8001562:	f7fe feab 	bl	80002bc <__udivsi3>
 8001566:	9b01      	ldr	r3, [sp, #4]
 8001568:	0005      	movs	r5, r0
 800156a:	4343      	muls	r3, r0
 800156c:	0039      	movs	r1, r7
 800156e:	4650      	mov	r0, sl
 8001570:	9304      	str	r3, [sp, #16]
 8001572:	f7fe ff29 	bl	80003c8 <__aeabi_uidivmod>
 8001576:	9804      	ldr	r0, [sp, #16]
 8001578:	040b      	lsls	r3, r1, #16
 800157a:	0c31      	lsrs	r1, r6, #16
 800157c:	4319      	orrs	r1, r3
 800157e:	4288      	cmp	r0, r1
 8001580:	d909      	bls.n	8001596 <__aeabi_ddiv+0x342>
 8001582:	4441      	add	r1, r8
 8001584:	1e6b      	subs	r3, r5, #1
 8001586:	4588      	cmp	r8, r1
 8001588:	d900      	bls.n	800158c <__aeabi_ddiv+0x338>
 800158a:	e107      	b.n	800179c <__aeabi_ddiv+0x548>
 800158c:	4288      	cmp	r0, r1
 800158e:	d800      	bhi.n	8001592 <__aeabi_ddiv+0x33e>
 8001590:	e104      	b.n	800179c <__aeabi_ddiv+0x548>
 8001592:	3d02      	subs	r5, #2
 8001594:	4441      	add	r1, r8
 8001596:	9b04      	ldr	r3, [sp, #16]
 8001598:	1acb      	subs	r3, r1, r3
 800159a:	0018      	movs	r0, r3
 800159c:	0039      	movs	r1, r7
 800159e:	9304      	str	r3, [sp, #16]
 80015a0:	f7fe fe8c 	bl	80002bc <__udivsi3>
 80015a4:	9b01      	ldr	r3, [sp, #4]
 80015a6:	4682      	mov	sl, r0
 80015a8:	4343      	muls	r3, r0
 80015aa:	0039      	movs	r1, r7
 80015ac:	9804      	ldr	r0, [sp, #16]
 80015ae:	9301      	str	r3, [sp, #4]
 80015b0:	f7fe ff0a 	bl	80003c8 <__aeabi_uidivmod>
 80015b4:	9801      	ldr	r0, [sp, #4]
 80015b6:	040b      	lsls	r3, r1, #16
 80015b8:	0431      	lsls	r1, r6, #16
 80015ba:	0c09      	lsrs	r1, r1, #16
 80015bc:	4319      	orrs	r1, r3
 80015be:	4288      	cmp	r0, r1
 80015c0:	d90d      	bls.n	80015de <__aeabi_ddiv+0x38a>
 80015c2:	4653      	mov	r3, sl
 80015c4:	4441      	add	r1, r8
 80015c6:	3b01      	subs	r3, #1
 80015c8:	4588      	cmp	r8, r1
 80015ca:	d900      	bls.n	80015ce <__aeabi_ddiv+0x37a>
 80015cc:	e0e8      	b.n	80017a0 <__aeabi_ddiv+0x54c>
 80015ce:	4288      	cmp	r0, r1
 80015d0:	d800      	bhi.n	80015d4 <__aeabi_ddiv+0x380>
 80015d2:	e0e5      	b.n	80017a0 <__aeabi_ddiv+0x54c>
 80015d4:	2302      	movs	r3, #2
 80015d6:	425b      	negs	r3, r3
 80015d8:	469c      	mov	ip, r3
 80015da:	4441      	add	r1, r8
 80015dc:	44e2      	add	sl, ip
 80015de:	9b01      	ldr	r3, [sp, #4]
 80015e0:	042d      	lsls	r5, r5, #16
 80015e2:	1ace      	subs	r6, r1, r3
 80015e4:	4651      	mov	r1, sl
 80015e6:	4329      	orrs	r1, r5
 80015e8:	9d05      	ldr	r5, [sp, #20]
 80015ea:	464f      	mov	r7, r9
 80015ec:	002a      	movs	r2, r5
 80015ee:	040b      	lsls	r3, r1, #16
 80015f0:	0c08      	lsrs	r0, r1, #16
 80015f2:	0c1b      	lsrs	r3, r3, #16
 80015f4:	435a      	muls	r2, r3
 80015f6:	4345      	muls	r5, r0
 80015f8:	437b      	muls	r3, r7
 80015fa:	4378      	muls	r0, r7
 80015fc:	195b      	adds	r3, r3, r5
 80015fe:	0c17      	lsrs	r7, r2, #16
 8001600:	18fb      	adds	r3, r7, r3
 8001602:	429d      	cmp	r5, r3
 8001604:	d903      	bls.n	800160e <__aeabi_ddiv+0x3ba>
 8001606:	2580      	movs	r5, #128	; 0x80
 8001608:	026d      	lsls	r5, r5, #9
 800160a:	46ac      	mov	ip, r5
 800160c:	4460      	add	r0, ip
 800160e:	0c1d      	lsrs	r5, r3, #16
 8001610:	0412      	lsls	r2, r2, #16
 8001612:	041b      	lsls	r3, r3, #16
 8001614:	0c12      	lsrs	r2, r2, #16
 8001616:	1828      	adds	r0, r5, r0
 8001618:	189b      	adds	r3, r3, r2
 800161a:	4286      	cmp	r6, r0
 800161c:	d200      	bcs.n	8001620 <__aeabi_ddiv+0x3cc>
 800161e:	e093      	b.n	8001748 <__aeabi_ddiv+0x4f4>
 8001620:	d100      	bne.n	8001624 <__aeabi_ddiv+0x3d0>
 8001622:	e08e      	b.n	8001742 <__aeabi_ddiv+0x4ee>
 8001624:	2301      	movs	r3, #1
 8001626:	4319      	orrs	r1, r3
 8001628:	4ba0      	ldr	r3, [pc, #640]	; (80018ac <__aeabi_ddiv+0x658>)
 800162a:	18e3      	adds	r3, r4, r3
 800162c:	2b00      	cmp	r3, #0
 800162e:	dc00      	bgt.n	8001632 <__aeabi_ddiv+0x3de>
 8001630:	e099      	b.n	8001766 <__aeabi_ddiv+0x512>
 8001632:	074a      	lsls	r2, r1, #29
 8001634:	d000      	beq.n	8001638 <__aeabi_ddiv+0x3e4>
 8001636:	e09e      	b.n	8001776 <__aeabi_ddiv+0x522>
 8001638:	465a      	mov	r2, fp
 800163a:	01d2      	lsls	r2, r2, #7
 800163c:	d506      	bpl.n	800164c <__aeabi_ddiv+0x3f8>
 800163e:	465a      	mov	r2, fp
 8001640:	4b9b      	ldr	r3, [pc, #620]	; (80018b0 <__aeabi_ddiv+0x65c>)
 8001642:	401a      	ands	r2, r3
 8001644:	2380      	movs	r3, #128	; 0x80
 8001646:	4693      	mov	fp, r2
 8001648:	00db      	lsls	r3, r3, #3
 800164a:	18e3      	adds	r3, r4, r3
 800164c:	4a99      	ldr	r2, [pc, #612]	; (80018b4 <__aeabi_ddiv+0x660>)
 800164e:	4293      	cmp	r3, r2
 8001650:	dd68      	ble.n	8001724 <__aeabi_ddiv+0x4d0>
 8001652:	2301      	movs	r3, #1
 8001654:	9a02      	ldr	r2, [sp, #8]
 8001656:	4c98      	ldr	r4, [pc, #608]	; (80018b8 <__aeabi_ddiv+0x664>)
 8001658:	401a      	ands	r2, r3
 800165a:	2300      	movs	r3, #0
 800165c:	4694      	mov	ip, r2
 800165e:	4698      	mov	r8, r3
 8001660:	2200      	movs	r2, #0
 8001662:	e6c5      	b.n	80013f0 <__aeabi_ddiv+0x19c>
 8001664:	2280      	movs	r2, #128	; 0x80
 8001666:	464b      	mov	r3, r9
 8001668:	0312      	lsls	r2, r2, #12
 800166a:	4213      	tst	r3, r2
 800166c:	d00a      	beq.n	8001684 <__aeabi_ddiv+0x430>
 800166e:	465b      	mov	r3, fp
 8001670:	4213      	tst	r3, r2
 8001672:	d106      	bne.n	8001682 <__aeabi_ddiv+0x42e>
 8001674:	431a      	orrs	r2, r3
 8001676:	0312      	lsls	r2, r2, #12
 8001678:	0b12      	lsrs	r2, r2, #12
 800167a:	46ac      	mov	ip, r5
 800167c:	4688      	mov	r8, r1
 800167e:	4c8e      	ldr	r4, [pc, #568]	; (80018b8 <__aeabi_ddiv+0x664>)
 8001680:	e6b6      	b.n	80013f0 <__aeabi_ddiv+0x19c>
 8001682:	464b      	mov	r3, r9
 8001684:	431a      	orrs	r2, r3
 8001686:	0312      	lsls	r2, r2, #12
 8001688:	0b12      	lsrs	r2, r2, #12
 800168a:	46bc      	mov	ip, r7
 800168c:	4c8a      	ldr	r4, [pc, #552]	; (80018b8 <__aeabi_ddiv+0x664>)
 800168e:	e6af      	b.n	80013f0 <__aeabi_ddiv+0x19c>
 8001690:	0003      	movs	r3, r0
 8001692:	465a      	mov	r2, fp
 8001694:	3b28      	subs	r3, #40	; 0x28
 8001696:	409a      	lsls	r2, r3
 8001698:	2300      	movs	r3, #0
 800169a:	4691      	mov	r9, r2
 800169c:	4698      	mov	r8, r3
 800169e:	e657      	b.n	8001350 <__aeabi_ddiv+0xfc>
 80016a0:	4658      	mov	r0, fp
 80016a2:	f000 fc8b 	bl	8001fbc <__clzsi2>
 80016a6:	3020      	adds	r0, #32
 80016a8:	e640      	b.n	800132c <__aeabi_ddiv+0xd8>
 80016aa:	0003      	movs	r3, r0
 80016ac:	4652      	mov	r2, sl
 80016ae:	3b28      	subs	r3, #40	; 0x28
 80016b0:	409a      	lsls	r2, r3
 80016b2:	2100      	movs	r1, #0
 80016b4:	4693      	mov	fp, r2
 80016b6:	e677      	b.n	80013a8 <__aeabi_ddiv+0x154>
 80016b8:	f000 fc80 	bl	8001fbc <__clzsi2>
 80016bc:	3020      	adds	r0, #32
 80016be:	e65f      	b.n	8001380 <__aeabi_ddiv+0x12c>
 80016c0:	4588      	cmp	r8, r1
 80016c2:	d200      	bcs.n	80016c6 <__aeabi_ddiv+0x472>
 80016c4:	e6c7      	b.n	8001456 <__aeabi_ddiv+0x202>
 80016c6:	464b      	mov	r3, r9
 80016c8:	07de      	lsls	r6, r3, #31
 80016ca:	085d      	lsrs	r5, r3, #1
 80016cc:	4643      	mov	r3, r8
 80016ce:	085b      	lsrs	r3, r3, #1
 80016d0:	431e      	orrs	r6, r3
 80016d2:	4643      	mov	r3, r8
 80016d4:	07db      	lsls	r3, r3, #31
 80016d6:	469a      	mov	sl, r3
 80016d8:	e6c2      	b.n	8001460 <__aeabi_ddiv+0x20c>
 80016da:	2500      	movs	r5, #0
 80016dc:	4592      	cmp	sl, r2
 80016de:	d300      	bcc.n	80016e2 <__aeabi_ddiv+0x48e>
 80016e0:	e733      	b.n	800154a <__aeabi_ddiv+0x2f6>
 80016e2:	9e03      	ldr	r6, [sp, #12]
 80016e4:	4659      	mov	r1, fp
 80016e6:	46b4      	mov	ip, r6
 80016e8:	44e2      	add	sl, ip
 80016ea:	45b2      	cmp	sl, r6
 80016ec:	41ad      	sbcs	r5, r5
 80016ee:	426d      	negs	r5, r5
 80016f0:	4445      	add	r5, r8
 80016f2:	18eb      	adds	r3, r5, r3
 80016f4:	3901      	subs	r1, #1
 80016f6:	4598      	cmp	r8, r3
 80016f8:	d207      	bcs.n	800170a <__aeabi_ddiv+0x4b6>
 80016fa:	4298      	cmp	r0, r3
 80016fc:	d900      	bls.n	8001700 <__aeabi_ddiv+0x4ac>
 80016fe:	e07f      	b.n	8001800 <__aeabi_ddiv+0x5ac>
 8001700:	d100      	bne.n	8001704 <__aeabi_ddiv+0x4b0>
 8001702:	e0bc      	b.n	800187e <__aeabi_ddiv+0x62a>
 8001704:	1a1d      	subs	r5, r3, r0
 8001706:	468b      	mov	fp, r1
 8001708:	e71f      	b.n	800154a <__aeabi_ddiv+0x2f6>
 800170a:	4598      	cmp	r8, r3
 800170c:	d1fa      	bne.n	8001704 <__aeabi_ddiv+0x4b0>
 800170e:	9d03      	ldr	r5, [sp, #12]
 8001710:	4555      	cmp	r5, sl
 8001712:	d9f2      	bls.n	80016fa <__aeabi_ddiv+0x4a6>
 8001714:	4643      	mov	r3, r8
 8001716:	468b      	mov	fp, r1
 8001718:	1a1d      	subs	r5, r3, r0
 800171a:	e716      	b.n	800154a <__aeabi_ddiv+0x2f6>
 800171c:	469b      	mov	fp, r3
 800171e:	e6ca      	b.n	80014b6 <__aeabi_ddiv+0x262>
 8001720:	0015      	movs	r5, r2
 8001722:	e6e7      	b.n	80014f4 <__aeabi_ddiv+0x2a0>
 8001724:	465a      	mov	r2, fp
 8001726:	08c9      	lsrs	r1, r1, #3
 8001728:	0752      	lsls	r2, r2, #29
 800172a:	430a      	orrs	r2, r1
 800172c:	055b      	lsls	r3, r3, #21
 800172e:	4690      	mov	r8, r2
 8001730:	0d5c      	lsrs	r4, r3, #21
 8001732:	465a      	mov	r2, fp
 8001734:	2301      	movs	r3, #1
 8001736:	9902      	ldr	r1, [sp, #8]
 8001738:	0252      	lsls	r2, r2, #9
 800173a:	4019      	ands	r1, r3
 800173c:	0b12      	lsrs	r2, r2, #12
 800173e:	468c      	mov	ip, r1
 8001740:	e656      	b.n	80013f0 <__aeabi_ddiv+0x19c>
 8001742:	2b00      	cmp	r3, #0
 8001744:	d100      	bne.n	8001748 <__aeabi_ddiv+0x4f4>
 8001746:	e76f      	b.n	8001628 <__aeabi_ddiv+0x3d4>
 8001748:	4446      	add	r6, r8
 800174a:	1e4a      	subs	r2, r1, #1
 800174c:	45b0      	cmp	r8, r6
 800174e:	d929      	bls.n	80017a4 <__aeabi_ddiv+0x550>
 8001750:	0011      	movs	r1, r2
 8001752:	4286      	cmp	r6, r0
 8001754:	d000      	beq.n	8001758 <__aeabi_ddiv+0x504>
 8001756:	e765      	b.n	8001624 <__aeabi_ddiv+0x3d0>
 8001758:	9a03      	ldr	r2, [sp, #12]
 800175a:	4293      	cmp	r3, r2
 800175c:	d000      	beq.n	8001760 <__aeabi_ddiv+0x50c>
 800175e:	e761      	b.n	8001624 <__aeabi_ddiv+0x3d0>
 8001760:	e762      	b.n	8001628 <__aeabi_ddiv+0x3d4>
 8001762:	2101      	movs	r1, #1
 8001764:	4249      	negs	r1, r1
 8001766:	2001      	movs	r0, #1
 8001768:	1ac2      	subs	r2, r0, r3
 800176a:	2a38      	cmp	r2, #56	; 0x38
 800176c:	dd21      	ble.n	80017b2 <__aeabi_ddiv+0x55e>
 800176e:	9b02      	ldr	r3, [sp, #8]
 8001770:	4003      	ands	r3, r0
 8001772:	469c      	mov	ip, r3
 8001774:	e638      	b.n	80013e8 <__aeabi_ddiv+0x194>
 8001776:	220f      	movs	r2, #15
 8001778:	400a      	ands	r2, r1
 800177a:	2a04      	cmp	r2, #4
 800177c:	d100      	bne.n	8001780 <__aeabi_ddiv+0x52c>
 800177e:	e75b      	b.n	8001638 <__aeabi_ddiv+0x3e4>
 8001780:	000a      	movs	r2, r1
 8001782:	1d11      	adds	r1, r2, #4
 8001784:	4291      	cmp	r1, r2
 8001786:	4192      	sbcs	r2, r2
 8001788:	4252      	negs	r2, r2
 800178a:	4493      	add	fp, r2
 800178c:	e754      	b.n	8001638 <__aeabi_ddiv+0x3e4>
 800178e:	4b47      	ldr	r3, [pc, #284]	; (80018ac <__aeabi_ddiv+0x658>)
 8001790:	18e3      	adds	r3, r4, r3
 8001792:	2b00      	cmp	r3, #0
 8001794:	dde5      	ble.n	8001762 <__aeabi_ddiv+0x50e>
 8001796:	2201      	movs	r2, #1
 8001798:	4252      	negs	r2, r2
 800179a:	e7f2      	b.n	8001782 <__aeabi_ddiv+0x52e>
 800179c:	001d      	movs	r5, r3
 800179e:	e6fa      	b.n	8001596 <__aeabi_ddiv+0x342>
 80017a0:	469a      	mov	sl, r3
 80017a2:	e71c      	b.n	80015de <__aeabi_ddiv+0x38a>
 80017a4:	42b0      	cmp	r0, r6
 80017a6:	d839      	bhi.n	800181c <__aeabi_ddiv+0x5c8>
 80017a8:	d06e      	beq.n	8001888 <__aeabi_ddiv+0x634>
 80017aa:	0011      	movs	r1, r2
 80017ac:	e73a      	b.n	8001624 <__aeabi_ddiv+0x3d0>
 80017ae:	9302      	str	r3, [sp, #8]
 80017b0:	e73a      	b.n	8001628 <__aeabi_ddiv+0x3d4>
 80017b2:	2a1f      	cmp	r2, #31
 80017b4:	dc3c      	bgt.n	8001830 <__aeabi_ddiv+0x5dc>
 80017b6:	2320      	movs	r3, #32
 80017b8:	1a9b      	subs	r3, r3, r2
 80017ba:	000c      	movs	r4, r1
 80017bc:	4658      	mov	r0, fp
 80017be:	4099      	lsls	r1, r3
 80017c0:	4098      	lsls	r0, r3
 80017c2:	1e4b      	subs	r3, r1, #1
 80017c4:	4199      	sbcs	r1, r3
 80017c6:	465b      	mov	r3, fp
 80017c8:	40d4      	lsrs	r4, r2
 80017ca:	40d3      	lsrs	r3, r2
 80017cc:	4320      	orrs	r0, r4
 80017ce:	4308      	orrs	r0, r1
 80017d0:	001a      	movs	r2, r3
 80017d2:	0743      	lsls	r3, r0, #29
 80017d4:	d009      	beq.n	80017ea <__aeabi_ddiv+0x596>
 80017d6:	230f      	movs	r3, #15
 80017d8:	4003      	ands	r3, r0
 80017da:	2b04      	cmp	r3, #4
 80017dc:	d005      	beq.n	80017ea <__aeabi_ddiv+0x596>
 80017de:	0001      	movs	r1, r0
 80017e0:	1d08      	adds	r0, r1, #4
 80017e2:	4288      	cmp	r0, r1
 80017e4:	419b      	sbcs	r3, r3
 80017e6:	425b      	negs	r3, r3
 80017e8:	18d2      	adds	r2, r2, r3
 80017ea:	0213      	lsls	r3, r2, #8
 80017ec:	d53a      	bpl.n	8001864 <__aeabi_ddiv+0x610>
 80017ee:	2301      	movs	r3, #1
 80017f0:	9a02      	ldr	r2, [sp, #8]
 80017f2:	2401      	movs	r4, #1
 80017f4:	401a      	ands	r2, r3
 80017f6:	2300      	movs	r3, #0
 80017f8:	4694      	mov	ip, r2
 80017fa:	4698      	mov	r8, r3
 80017fc:	2200      	movs	r2, #0
 80017fe:	e5f7      	b.n	80013f0 <__aeabi_ddiv+0x19c>
 8001800:	2102      	movs	r1, #2
 8001802:	4249      	negs	r1, r1
 8001804:	468c      	mov	ip, r1
 8001806:	9d03      	ldr	r5, [sp, #12]
 8001808:	44e3      	add	fp, ip
 800180a:	46ac      	mov	ip, r5
 800180c:	44e2      	add	sl, ip
 800180e:	45aa      	cmp	sl, r5
 8001810:	41ad      	sbcs	r5, r5
 8001812:	426d      	negs	r5, r5
 8001814:	4445      	add	r5, r8
 8001816:	18ed      	adds	r5, r5, r3
 8001818:	1a2d      	subs	r5, r5, r0
 800181a:	e696      	b.n	800154a <__aeabi_ddiv+0x2f6>
 800181c:	1e8a      	subs	r2, r1, #2
 800181e:	9903      	ldr	r1, [sp, #12]
 8001820:	004d      	lsls	r5, r1, #1
 8001822:	428d      	cmp	r5, r1
 8001824:	4189      	sbcs	r1, r1
 8001826:	4249      	negs	r1, r1
 8001828:	4441      	add	r1, r8
 800182a:	1876      	adds	r6, r6, r1
 800182c:	9503      	str	r5, [sp, #12]
 800182e:	e78f      	b.n	8001750 <__aeabi_ddiv+0x4fc>
 8001830:	201f      	movs	r0, #31
 8001832:	4240      	negs	r0, r0
 8001834:	1ac3      	subs	r3, r0, r3
 8001836:	4658      	mov	r0, fp
 8001838:	40d8      	lsrs	r0, r3
 800183a:	0003      	movs	r3, r0
 800183c:	2a20      	cmp	r2, #32
 800183e:	d028      	beq.n	8001892 <__aeabi_ddiv+0x63e>
 8001840:	2040      	movs	r0, #64	; 0x40
 8001842:	465d      	mov	r5, fp
 8001844:	1a82      	subs	r2, r0, r2
 8001846:	4095      	lsls	r5, r2
 8001848:	4329      	orrs	r1, r5
 800184a:	1e4a      	subs	r2, r1, #1
 800184c:	4191      	sbcs	r1, r2
 800184e:	4319      	orrs	r1, r3
 8001850:	2307      	movs	r3, #7
 8001852:	2200      	movs	r2, #0
 8001854:	400b      	ands	r3, r1
 8001856:	d009      	beq.n	800186c <__aeabi_ddiv+0x618>
 8001858:	230f      	movs	r3, #15
 800185a:	2200      	movs	r2, #0
 800185c:	400b      	ands	r3, r1
 800185e:	0008      	movs	r0, r1
 8001860:	2b04      	cmp	r3, #4
 8001862:	d1bd      	bne.n	80017e0 <__aeabi_ddiv+0x58c>
 8001864:	0001      	movs	r1, r0
 8001866:	0753      	lsls	r3, r2, #29
 8001868:	0252      	lsls	r2, r2, #9
 800186a:	0b12      	lsrs	r2, r2, #12
 800186c:	08c9      	lsrs	r1, r1, #3
 800186e:	4319      	orrs	r1, r3
 8001870:	2301      	movs	r3, #1
 8001872:	4688      	mov	r8, r1
 8001874:	9902      	ldr	r1, [sp, #8]
 8001876:	2400      	movs	r4, #0
 8001878:	4019      	ands	r1, r3
 800187a:	468c      	mov	ip, r1
 800187c:	e5b8      	b.n	80013f0 <__aeabi_ddiv+0x19c>
 800187e:	4552      	cmp	r2, sl
 8001880:	d8be      	bhi.n	8001800 <__aeabi_ddiv+0x5ac>
 8001882:	468b      	mov	fp, r1
 8001884:	2500      	movs	r5, #0
 8001886:	e660      	b.n	800154a <__aeabi_ddiv+0x2f6>
 8001888:	9d03      	ldr	r5, [sp, #12]
 800188a:	429d      	cmp	r5, r3
 800188c:	d3c6      	bcc.n	800181c <__aeabi_ddiv+0x5c8>
 800188e:	0011      	movs	r1, r2
 8001890:	e762      	b.n	8001758 <__aeabi_ddiv+0x504>
 8001892:	2500      	movs	r5, #0
 8001894:	e7d8      	b.n	8001848 <__aeabi_ddiv+0x5f4>
 8001896:	2280      	movs	r2, #128	; 0x80
 8001898:	465b      	mov	r3, fp
 800189a:	0312      	lsls	r2, r2, #12
 800189c:	431a      	orrs	r2, r3
 800189e:	9b01      	ldr	r3, [sp, #4]
 80018a0:	0312      	lsls	r2, r2, #12
 80018a2:	0b12      	lsrs	r2, r2, #12
 80018a4:	469c      	mov	ip, r3
 80018a6:	4688      	mov	r8, r1
 80018a8:	4c03      	ldr	r4, [pc, #12]	; (80018b8 <__aeabi_ddiv+0x664>)
 80018aa:	e5a1      	b.n	80013f0 <__aeabi_ddiv+0x19c>
 80018ac:	000003ff 	.word	0x000003ff
 80018b0:	feffffff 	.word	0xfeffffff
 80018b4:	000007fe 	.word	0x000007fe
 80018b8:	000007ff 	.word	0x000007ff

080018bc <__aeabi_dmul>:
 80018bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018be:	4657      	mov	r7, sl
 80018c0:	4645      	mov	r5, r8
 80018c2:	46de      	mov	lr, fp
 80018c4:	464e      	mov	r6, r9
 80018c6:	b5e0      	push	{r5, r6, r7, lr}
 80018c8:	030c      	lsls	r4, r1, #12
 80018ca:	4698      	mov	r8, r3
 80018cc:	004e      	lsls	r6, r1, #1
 80018ce:	0b23      	lsrs	r3, r4, #12
 80018d0:	b087      	sub	sp, #28
 80018d2:	0007      	movs	r7, r0
 80018d4:	4692      	mov	sl, r2
 80018d6:	469b      	mov	fp, r3
 80018d8:	0d76      	lsrs	r6, r6, #21
 80018da:	0fcd      	lsrs	r5, r1, #31
 80018dc:	2e00      	cmp	r6, #0
 80018de:	d06b      	beq.n	80019b8 <__aeabi_dmul+0xfc>
 80018e0:	4b6d      	ldr	r3, [pc, #436]	; (8001a98 <__aeabi_dmul+0x1dc>)
 80018e2:	429e      	cmp	r6, r3
 80018e4:	d035      	beq.n	8001952 <__aeabi_dmul+0x96>
 80018e6:	2480      	movs	r4, #128	; 0x80
 80018e8:	465b      	mov	r3, fp
 80018ea:	0f42      	lsrs	r2, r0, #29
 80018ec:	0424      	lsls	r4, r4, #16
 80018ee:	00db      	lsls	r3, r3, #3
 80018f0:	4314      	orrs	r4, r2
 80018f2:	431c      	orrs	r4, r3
 80018f4:	00c3      	lsls	r3, r0, #3
 80018f6:	4699      	mov	r9, r3
 80018f8:	4b68      	ldr	r3, [pc, #416]	; (8001a9c <__aeabi_dmul+0x1e0>)
 80018fa:	46a3      	mov	fp, r4
 80018fc:	469c      	mov	ip, r3
 80018fe:	2300      	movs	r3, #0
 8001900:	2700      	movs	r7, #0
 8001902:	4466      	add	r6, ip
 8001904:	9302      	str	r3, [sp, #8]
 8001906:	4643      	mov	r3, r8
 8001908:	031c      	lsls	r4, r3, #12
 800190a:	005a      	lsls	r2, r3, #1
 800190c:	0fdb      	lsrs	r3, r3, #31
 800190e:	4650      	mov	r0, sl
 8001910:	0b24      	lsrs	r4, r4, #12
 8001912:	0d52      	lsrs	r2, r2, #21
 8001914:	4698      	mov	r8, r3
 8001916:	d100      	bne.n	800191a <__aeabi_dmul+0x5e>
 8001918:	e076      	b.n	8001a08 <__aeabi_dmul+0x14c>
 800191a:	4b5f      	ldr	r3, [pc, #380]	; (8001a98 <__aeabi_dmul+0x1dc>)
 800191c:	429a      	cmp	r2, r3
 800191e:	d06d      	beq.n	80019fc <__aeabi_dmul+0x140>
 8001920:	2380      	movs	r3, #128	; 0x80
 8001922:	0f41      	lsrs	r1, r0, #29
 8001924:	041b      	lsls	r3, r3, #16
 8001926:	430b      	orrs	r3, r1
 8001928:	495c      	ldr	r1, [pc, #368]	; (8001a9c <__aeabi_dmul+0x1e0>)
 800192a:	00e4      	lsls	r4, r4, #3
 800192c:	468c      	mov	ip, r1
 800192e:	431c      	orrs	r4, r3
 8001930:	00c3      	lsls	r3, r0, #3
 8001932:	2000      	movs	r0, #0
 8001934:	4462      	add	r2, ip
 8001936:	4641      	mov	r1, r8
 8001938:	18b6      	adds	r6, r6, r2
 800193a:	4069      	eors	r1, r5
 800193c:	1c72      	adds	r2, r6, #1
 800193e:	9101      	str	r1, [sp, #4]
 8001940:	4694      	mov	ip, r2
 8001942:	4307      	orrs	r7, r0
 8001944:	2f0f      	cmp	r7, #15
 8001946:	d900      	bls.n	800194a <__aeabi_dmul+0x8e>
 8001948:	e0b0      	b.n	8001aac <__aeabi_dmul+0x1f0>
 800194a:	4a55      	ldr	r2, [pc, #340]	; (8001aa0 <__aeabi_dmul+0x1e4>)
 800194c:	00bf      	lsls	r7, r7, #2
 800194e:	59d2      	ldr	r2, [r2, r7]
 8001950:	4697      	mov	pc, r2
 8001952:	465b      	mov	r3, fp
 8001954:	4303      	orrs	r3, r0
 8001956:	4699      	mov	r9, r3
 8001958:	d000      	beq.n	800195c <__aeabi_dmul+0xa0>
 800195a:	e087      	b.n	8001a6c <__aeabi_dmul+0x1b0>
 800195c:	2300      	movs	r3, #0
 800195e:	469b      	mov	fp, r3
 8001960:	3302      	adds	r3, #2
 8001962:	2708      	movs	r7, #8
 8001964:	9302      	str	r3, [sp, #8]
 8001966:	e7ce      	b.n	8001906 <__aeabi_dmul+0x4a>
 8001968:	4642      	mov	r2, r8
 800196a:	9201      	str	r2, [sp, #4]
 800196c:	2802      	cmp	r0, #2
 800196e:	d067      	beq.n	8001a40 <__aeabi_dmul+0x184>
 8001970:	2803      	cmp	r0, #3
 8001972:	d100      	bne.n	8001976 <__aeabi_dmul+0xba>
 8001974:	e20e      	b.n	8001d94 <__aeabi_dmul+0x4d8>
 8001976:	2801      	cmp	r0, #1
 8001978:	d000      	beq.n	800197c <__aeabi_dmul+0xc0>
 800197a:	e162      	b.n	8001c42 <__aeabi_dmul+0x386>
 800197c:	2300      	movs	r3, #0
 800197e:	2400      	movs	r4, #0
 8001980:	2200      	movs	r2, #0
 8001982:	4699      	mov	r9, r3
 8001984:	9901      	ldr	r1, [sp, #4]
 8001986:	4001      	ands	r1, r0
 8001988:	b2cd      	uxtb	r5, r1
 800198a:	2100      	movs	r1, #0
 800198c:	0312      	lsls	r2, r2, #12
 800198e:	0d0b      	lsrs	r3, r1, #20
 8001990:	0b12      	lsrs	r2, r2, #12
 8001992:	051b      	lsls	r3, r3, #20
 8001994:	4313      	orrs	r3, r2
 8001996:	4a43      	ldr	r2, [pc, #268]	; (8001aa4 <__aeabi_dmul+0x1e8>)
 8001998:	0524      	lsls	r4, r4, #20
 800199a:	4013      	ands	r3, r2
 800199c:	431c      	orrs	r4, r3
 800199e:	0064      	lsls	r4, r4, #1
 80019a0:	07ed      	lsls	r5, r5, #31
 80019a2:	0864      	lsrs	r4, r4, #1
 80019a4:	432c      	orrs	r4, r5
 80019a6:	4648      	mov	r0, r9
 80019a8:	0021      	movs	r1, r4
 80019aa:	b007      	add	sp, #28
 80019ac:	bc3c      	pop	{r2, r3, r4, r5}
 80019ae:	4690      	mov	r8, r2
 80019b0:	4699      	mov	r9, r3
 80019b2:	46a2      	mov	sl, r4
 80019b4:	46ab      	mov	fp, r5
 80019b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019b8:	4303      	orrs	r3, r0
 80019ba:	4699      	mov	r9, r3
 80019bc:	d04f      	beq.n	8001a5e <__aeabi_dmul+0x1a2>
 80019be:	465b      	mov	r3, fp
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d100      	bne.n	80019c6 <__aeabi_dmul+0x10a>
 80019c4:	e189      	b.n	8001cda <__aeabi_dmul+0x41e>
 80019c6:	4658      	mov	r0, fp
 80019c8:	f000 faf8 	bl	8001fbc <__clzsi2>
 80019cc:	0003      	movs	r3, r0
 80019ce:	3b0b      	subs	r3, #11
 80019d0:	2b1c      	cmp	r3, #28
 80019d2:	dd00      	ble.n	80019d6 <__aeabi_dmul+0x11a>
 80019d4:	e17a      	b.n	8001ccc <__aeabi_dmul+0x410>
 80019d6:	221d      	movs	r2, #29
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	003a      	movs	r2, r7
 80019dc:	0001      	movs	r1, r0
 80019de:	465c      	mov	r4, fp
 80019e0:	40da      	lsrs	r2, r3
 80019e2:	3908      	subs	r1, #8
 80019e4:	408c      	lsls	r4, r1
 80019e6:	0013      	movs	r3, r2
 80019e8:	408f      	lsls	r7, r1
 80019ea:	4323      	orrs	r3, r4
 80019ec:	469b      	mov	fp, r3
 80019ee:	46b9      	mov	r9, r7
 80019f0:	2300      	movs	r3, #0
 80019f2:	4e2d      	ldr	r6, [pc, #180]	; (8001aa8 <__aeabi_dmul+0x1ec>)
 80019f4:	2700      	movs	r7, #0
 80019f6:	1a36      	subs	r6, r6, r0
 80019f8:	9302      	str	r3, [sp, #8]
 80019fa:	e784      	b.n	8001906 <__aeabi_dmul+0x4a>
 80019fc:	4653      	mov	r3, sl
 80019fe:	4323      	orrs	r3, r4
 8001a00:	d12a      	bne.n	8001a58 <__aeabi_dmul+0x19c>
 8001a02:	2400      	movs	r4, #0
 8001a04:	2002      	movs	r0, #2
 8001a06:	e796      	b.n	8001936 <__aeabi_dmul+0x7a>
 8001a08:	4653      	mov	r3, sl
 8001a0a:	4323      	orrs	r3, r4
 8001a0c:	d020      	beq.n	8001a50 <__aeabi_dmul+0x194>
 8001a0e:	2c00      	cmp	r4, #0
 8001a10:	d100      	bne.n	8001a14 <__aeabi_dmul+0x158>
 8001a12:	e157      	b.n	8001cc4 <__aeabi_dmul+0x408>
 8001a14:	0020      	movs	r0, r4
 8001a16:	f000 fad1 	bl	8001fbc <__clzsi2>
 8001a1a:	0003      	movs	r3, r0
 8001a1c:	3b0b      	subs	r3, #11
 8001a1e:	2b1c      	cmp	r3, #28
 8001a20:	dd00      	ble.n	8001a24 <__aeabi_dmul+0x168>
 8001a22:	e149      	b.n	8001cb8 <__aeabi_dmul+0x3fc>
 8001a24:	211d      	movs	r1, #29
 8001a26:	1acb      	subs	r3, r1, r3
 8001a28:	4651      	mov	r1, sl
 8001a2a:	0002      	movs	r2, r0
 8001a2c:	40d9      	lsrs	r1, r3
 8001a2e:	4653      	mov	r3, sl
 8001a30:	3a08      	subs	r2, #8
 8001a32:	4094      	lsls	r4, r2
 8001a34:	4093      	lsls	r3, r2
 8001a36:	430c      	orrs	r4, r1
 8001a38:	4a1b      	ldr	r2, [pc, #108]	; (8001aa8 <__aeabi_dmul+0x1ec>)
 8001a3a:	1a12      	subs	r2, r2, r0
 8001a3c:	2000      	movs	r0, #0
 8001a3e:	e77a      	b.n	8001936 <__aeabi_dmul+0x7a>
 8001a40:	2501      	movs	r5, #1
 8001a42:	9b01      	ldr	r3, [sp, #4]
 8001a44:	4c14      	ldr	r4, [pc, #80]	; (8001a98 <__aeabi_dmul+0x1dc>)
 8001a46:	401d      	ands	r5, r3
 8001a48:	2300      	movs	r3, #0
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	4699      	mov	r9, r3
 8001a4e:	e79c      	b.n	800198a <__aeabi_dmul+0xce>
 8001a50:	2400      	movs	r4, #0
 8001a52:	2200      	movs	r2, #0
 8001a54:	2001      	movs	r0, #1
 8001a56:	e76e      	b.n	8001936 <__aeabi_dmul+0x7a>
 8001a58:	4653      	mov	r3, sl
 8001a5a:	2003      	movs	r0, #3
 8001a5c:	e76b      	b.n	8001936 <__aeabi_dmul+0x7a>
 8001a5e:	2300      	movs	r3, #0
 8001a60:	469b      	mov	fp, r3
 8001a62:	3301      	adds	r3, #1
 8001a64:	2704      	movs	r7, #4
 8001a66:	2600      	movs	r6, #0
 8001a68:	9302      	str	r3, [sp, #8]
 8001a6a:	e74c      	b.n	8001906 <__aeabi_dmul+0x4a>
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	4681      	mov	r9, r0
 8001a70:	270c      	movs	r7, #12
 8001a72:	9302      	str	r3, [sp, #8]
 8001a74:	e747      	b.n	8001906 <__aeabi_dmul+0x4a>
 8001a76:	2280      	movs	r2, #128	; 0x80
 8001a78:	2300      	movs	r3, #0
 8001a7a:	2500      	movs	r5, #0
 8001a7c:	0312      	lsls	r2, r2, #12
 8001a7e:	4699      	mov	r9, r3
 8001a80:	4c05      	ldr	r4, [pc, #20]	; (8001a98 <__aeabi_dmul+0x1dc>)
 8001a82:	e782      	b.n	800198a <__aeabi_dmul+0xce>
 8001a84:	465c      	mov	r4, fp
 8001a86:	464b      	mov	r3, r9
 8001a88:	9802      	ldr	r0, [sp, #8]
 8001a8a:	e76f      	b.n	800196c <__aeabi_dmul+0xb0>
 8001a8c:	465c      	mov	r4, fp
 8001a8e:	464b      	mov	r3, r9
 8001a90:	9501      	str	r5, [sp, #4]
 8001a92:	9802      	ldr	r0, [sp, #8]
 8001a94:	e76a      	b.n	800196c <__aeabi_dmul+0xb0>
 8001a96:	46c0      	nop			; (mov r8, r8)
 8001a98:	000007ff 	.word	0x000007ff
 8001a9c:	fffffc01 	.word	0xfffffc01
 8001aa0:	08004344 	.word	0x08004344
 8001aa4:	800fffff 	.word	0x800fffff
 8001aa8:	fffffc0d 	.word	0xfffffc0d
 8001aac:	464a      	mov	r2, r9
 8001aae:	4649      	mov	r1, r9
 8001ab0:	0c17      	lsrs	r7, r2, #16
 8001ab2:	0c1a      	lsrs	r2, r3, #16
 8001ab4:	041b      	lsls	r3, r3, #16
 8001ab6:	0c1b      	lsrs	r3, r3, #16
 8001ab8:	0408      	lsls	r0, r1, #16
 8001aba:	0019      	movs	r1, r3
 8001abc:	0c00      	lsrs	r0, r0, #16
 8001abe:	4341      	muls	r1, r0
 8001ac0:	0015      	movs	r5, r2
 8001ac2:	4688      	mov	r8, r1
 8001ac4:	0019      	movs	r1, r3
 8001ac6:	437d      	muls	r5, r7
 8001ac8:	4379      	muls	r1, r7
 8001aca:	9503      	str	r5, [sp, #12]
 8001acc:	4689      	mov	r9, r1
 8001ace:	0029      	movs	r1, r5
 8001ad0:	0015      	movs	r5, r2
 8001ad2:	4345      	muls	r5, r0
 8001ad4:	444d      	add	r5, r9
 8001ad6:	9502      	str	r5, [sp, #8]
 8001ad8:	4645      	mov	r5, r8
 8001ada:	0c2d      	lsrs	r5, r5, #16
 8001adc:	46aa      	mov	sl, r5
 8001ade:	9d02      	ldr	r5, [sp, #8]
 8001ae0:	4455      	add	r5, sl
 8001ae2:	45a9      	cmp	r9, r5
 8001ae4:	d906      	bls.n	8001af4 <__aeabi_dmul+0x238>
 8001ae6:	468a      	mov	sl, r1
 8001ae8:	2180      	movs	r1, #128	; 0x80
 8001aea:	0249      	lsls	r1, r1, #9
 8001aec:	4689      	mov	r9, r1
 8001aee:	44ca      	add	sl, r9
 8001af0:	4651      	mov	r1, sl
 8001af2:	9103      	str	r1, [sp, #12]
 8001af4:	0c29      	lsrs	r1, r5, #16
 8001af6:	9104      	str	r1, [sp, #16]
 8001af8:	4641      	mov	r1, r8
 8001afa:	0409      	lsls	r1, r1, #16
 8001afc:	042d      	lsls	r5, r5, #16
 8001afe:	0c09      	lsrs	r1, r1, #16
 8001b00:	4688      	mov	r8, r1
 8001b02:	0029      	movs	r1, r5
 8001b04:	0c25      	lsrs	r5, r4, #16
 8001b06:	0424      	lsls	r4, r4, #16
 8001b08:	4441      	add	r1, r8
 8001b0a:	0c24      	lsrs	r4, r4, #16
 8001b0c:	9105      	str	r1, [sp, #20]
 8001b0e:	0021      	movs	r1, r4
 8001b10:	4341      	muls	r1, r0
 8001b12:	4688      	mov	r8, r1
 8001b14:	0021      	movs	r1, r4
 8001b16:	4379      	muls	r1, r7
 8001b18:	468a      	mov	sl, r1
 8001b1a:	4368      	muls	r0, r5
 8001b1c:	4641      	mov	r1, r8
 8001b1e:	4450      	add	r0, sl
 8001b20:	4681      	mov	r9, r0
 8001b22:	0c08      	lsrs	r0, r1, #16
 8001b24:	4448      	add	r0, r9
 8001b26:	436f      	muls	r7, r5
 8001b28:	4582      	cmp	sl, r0
 8001b2a:	d903      	bls.n	8001b34 <__aeabi_dmul+0x278>
 8001b2c:	2180      	movs	r1, #128	; 0x80
 8001b2e:	0249      	lsls	r1, r1, #9
 8001b30:	4689      	mov	r9, r1
 8001b32:	444f      	add	r7, r9
 8001b34:	0c01      	lsrs	r1, r0, #16
 8001b36:	4689      	mov	r9, r1
 8001b38:	0039      	movs	r1, r7
 8001b3a:	4449      	add	r1, r9
 8001b3c:	9102      	str	r1, [sp, #8]
 8001b3e:	4641      	mov	r1, r8
 8001b40:	040f      	lsls	r7, r1, #16
 8001b42:	9904      	ldr	r1, [sp, #16]
 8001b44:	0c3f      	lsrs	r7, r7, #16
 8001b46:	4688      	mov	r8, r1
 8001b48:	0400      	lsls	r0, r0, #16
 8001b4a:	19c0      	adds	r0, r0, r7
 8001b4c:	4480      	add	r8, r0
 8001b4e:	4641      	mov	r1, r8
 8001b50:	9104      	str	r1, [sp, #16]
 8001b52:	4659      	mov	r1, fp
 8001b54:	0c0f      	lsrs	r7, r1, #16
 8001b56:	0409      	lsls	r1, r1, #16
 8001b58:	0c09      	lsrs	r1, r1, #16
 8001b5a:	4688      	mov	r8, r1
 8001b5c:	4359      	muls	r1, r3
 8001b5e:	468a      	mov	sl, r1
 8001b60:	0039      	movs	r1, r7
 8001b62:	4351      	muls	r1, r2
 8001b64:	4689      	mov	r9, r1
 8001b66:	4641      	mov	r1, r8
 8001b68:	434a      	muls	r2, r1
 8001b6a:	4651      	mov	r1, sl
 8001b6c:	0c09      	lsrs	r1, r1, #16
 8001b6e:	468b      	mov	fp, r1
 8001b70:	437b      	muls	r3, r7
 8001b72:	18d2      	adds	r2, r2, r3
 8001b74:	445a      	add	r2, fp
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d903      	bls.n	8001b82 <__aeabi_dmul+0x2c6>
 8001b7a:	2380      	movs	r3, #128	; 0x80
 8001b7c:	025b      	lsls	r3, r3, #9
 8001b7e:	469b      	mov	fp, r3
 8001b80:	44d9      	add	r9, fp
 8001b82:	4651      	mov	r1, sl
 8001b84:	0409      	lsls	r1, r1, #16
 8001b86:	0c09      	lsrs	r1, r1, #16
 8001b88:	468a      	mov	sl, r1
 8001b8a:	4641      	mov	r1, r8
 8001b8c:	4361      	muls	r1, r4
 8001b8e:	437c      	muls	r4, r7
 8001b90:	0c13      	lsrs	r3, r2, #16
 8001b92:	0412      	lsls	r2, r2, #16
 8001b94:	444b      	add	r3, r9
 8001b96:	4452      	add	r2, sl
 8001b98:	46a1      	mov	r9, r4
 8001b9a:	468a      	mov	sl, r1
 8001b9c:	003c      	movs	r4, r7
 8001b9e:	4641      	mov	r1, r8
 8001ba0:	436c      	muls	r4, r5
 8001ba2:	434d      	muls	r5, r1
 8001ba4:	4651      	mov	r1, sl
 8001ba6:	444d      	add	r5, r9
 8001ba8:	0c0f      	lsrs	r7, r1, #16
 8001baa:	197d      	adds	r5, r7, r5
 8001bac:	45a9      	cmp	r9, r5
 8001bae:	d903      	bls.n	8001bb8 <__aeabi_dmul+0x2fc>
 8001bb0:	2180      	movs	r1, #128	; 0x80
 8001bb2:	0249      	lsls	r1, r1, #9
 8001bb4:	4688      	mov	r8, r1
 8001bb6:	4444      	add	r4, r8
 8001bb8:	9f04      	ldr	r7, [sp, #16]
 8001bba:	9903      	ldr	r1, [sp, #12]
 8001bbc:	46b8      	mov	r8, r7
 8001bbe:	4441      	add	r1, r8
 8001bc0:	468b      	mov	fp, r1
 8001bc2:	4583      	cmp	fp, r0
 8001bc4:	4180      	sbcs	r0, r0
 8001bc6:	4241      	negs	r1, r0
 8001bc8:	4688      	mov	r8, r1
 8001bca:	4651      	mov	r1, sl
 8001bcc:	0408      	lsls	r0, r1, #16
 8001bce:	042f      	lsls	r7, r5, #16
 8001bd0:	0c00      	lsrs	r0, r0, #16
 8001bd2:	183f      	adds	r7, r7, r0
 8001bd4:	4658      	mov	r0, fp
 8001bd6:	9902      	ldr	r1, [sp, #8]
 8001bd8:	1810      	adds	r0, r2, r0
 8001bda:	4689      	mov	r9, r1
 8001bdc:	4290      	cmp	r0, r2
 8001bde:	4192      	sbcs	r2, r2
 8001be0:	444f      	add	r7, r9
 8001be2:	46ba      	mov	sl, r7
 8001be4:	4252      	negs	r2, r2
 8001be6:	4699      	mov	r9, r3
 8001be8:	4693      	mov	fp, r2
 8001bea:	44c2      	add	sl, r8
 8001bec:	44d1      	add	r9, sl
 8001bee:	44cb      	add	fp, r9
 8001bf0:	428f      	cmp	r7, r1
 8001bf2:	41bf      	sbcs	r7, r7
 8001bf4:	45c2      	cmp	sl, r8
 8001bf6:	4189      	sbcs	r1, r1
 8001bf8:	4599      	cmp	r9, r3
 8001bfa:	419b      	sbcs	r3, r3
 8001bfc:	4593      	cmp	fp, r2
 8001bfe:	4192      	sbcs	r2, r2
 8001c00:	427f      	negs	r7, r7
 8001c02:	4249      	negs	r1, r1
 8001c04:	0c2d      	lsrs	r5, r5, #16
 8001c06:	4252      	negs	r2, r2
 8001c08:	430f      	orrs	r7, r1
 8001c0a:	425b      	negs	r3, r3
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	197f      	adds	r7, r7, r5
 8001c10:	18ff      	adds	r7, r7, r3
 8001c12:	465b      	mov	r3, fp
 8001c14:	193c      	adds	r4, r7, r4
 8001c16:	0ddb      	lsrs	r3, r3, #23
 8001c18:	9a05      	ldr	r2, [sp, #20]
 8001c1a:	0264      	lsls	r4, r4, #9
 8001c1c:	431c      	orrs	r4, r3
 8001c1e:	0243      	lsls	r3, r0, #9
 8001c20:	4313      	orrs	r3, r2
 8001c22:	1e5d      	subs	r5, r3, #1
 8001c24:	41ab      	sbcs	r3, r5
 8001c26:	465a      	mov	r2, fp
 8001c28:	0dc0      	lsrs	r0, r0, #23
 8001c2a:	4303      	orrs	r3, r0
 8001c2c:	0252      	lsls	r2, r2, #9
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	01e2      	lsls	r2, r4, #7
 8001c32:	d556      	bpl.n	8001ce2 <__aeabi_dmul+0x426>
 8001c34:	2001      	movs	r0, #1
 8001c36:	085a      	lsrs	r2, r3, #1
 8001c38:	4003      	ands	r3, r0
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	07e2      	lsls	r2, r4, #31
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	0864      	lsrs	r4, r4, #1
 8001c42:	485a      	ldr	r0, [pc, #360]	; (8001dac <__aeabi_dmul+0x4f0>)
 8001c44:	4460      	add	r0, ip
 8001c46:	2800      	cmp	r0, #0
 8001c48:	dd4d      	ble.n	8001ce6 <__aeabi_dmul+0x42a>
 8001c4a:	075a      	lsls	r2, r3, #29
 8001c4c:	d009      	beq.n	8001c62 <__aeabi_dmul+0x3a6>
 8001c4e:	220f      	movs	r2, #15
 8001c50:	401a      	ands	r2, r3
 8001c52:	2a04      	cmp	r2, #4
 8001c54:	d005      	beq.n	8001c62 <__aeabi_dmul+0x3a6>
 8001c56:	1d1a      	adds	r2, r3, #4
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	419b      	sbcs	r3, r3
 8001c5c:	425b      	negs	r3, r3
 8001c5e:	18e4      	adds	r4, r4, r3
 8001c60:	0013      	movs	r3, r2
 8001c62:	01e2      	lsls	r2, r4, #7
 8001c64:	d504      	bpl.n	8001c70 <__aeabi_dmul+0x3b4>
 8001c66:	2080      	movs	r0, #128	; 0x80
 8001c68:	4a51      	ldr	r2, [pc, #324]	; (8001db0 <__aeabi_dmul+0x4f4>)
 8001c6a:	00c0      	lsls	r0, r0, #3
 8001c6c:	4014      	ands	r4, r2
 8001c6e:	4460      	add	r0, ip
 8001c70:	4a50      	ldr	r2, [pc, #320]	; (8001db4 <__aeabi_dmul+0x4f8>)
 8001c72:	4290      	cmp	r0, r2
 8001c74:	dd00      	ble.n	8001c78 <__aeabi_dmul+0x3bc>
 8001c76:	e6e3      	b.n	8001a40 <__aeabi_dmul+0x184>
 8001c78:	2501      	movs	r5, #1
 8001c7a:	08db      	lsrs	r3, r3, #3
 8001c7c:	0762      	lsls	r2, r4, #29
 8001c7e:	431a      	orrs	r2, r3
 8001c80:	0264      	lsls	r4, r4, #9
 8001c82:	9b01      	ldr	r3, [sp, #4]
 8001c84:	4691      	mov	r9, r2
 8001c86:	0b22      	lsrs	r2, r4, #12
 8001c88:	0544      	lsls	r4, r0, #21
 8001c8a:	0d64      	lsrs	r4, r4, #21
 8001c8c:	401d      	ands	r5, r3
 8001c8e:	e67c      	b.n	800198a <__aeabi_dmul+0xce>
 8001c90:	2280      	movs	r2, #128	; 0x80
 8001c92:	4659      	mov	r1, fp
 8001c94:	0312      	lsls	r2, r2, #12
 8001c96:	4211      	tst	r1, r2
 8001c98:	d008      	beq.n	8001cac <__aeabi_dmul+0x3f0>
 8001c9a:	4214      	tst	r4, r2
 8001c9c:	d106      	bne.n	8001cac <__aeabi_dmul+0x3f0>
 8001c9e:	4322      	orrs	r2, r4
 8001ca0:	0312      	lsls	r2, r2, #12
 8001ca2:	0b12      	lsrs	r2, r2, #12
 8001ca4:	4645      	mov	r5, r8
 8001ca6:	4699      	mov	r9, r3
 8001ca8:	4c43      	ldr	r4, [pc, #268]	; (8001db8 <__aeabi_dmul+0x4fc>)
 8001caa:	e66e      	b.n	800198a <__aeabi_dmul+0xce>
 8001cac:	465b      	mov	r3, fp
 8001cae:	431a      	orrs	r2, r3
 8001cb0:	0312      	lsls	r2, r2, #12
 8001cb2:	0b12      	lsrs	r2, r2, #12
 8001cb4:	4c40      	ldr	r4, [pc, #256]	; (8001db8 <__aeabi_dmul+0x4fc>)
 8001cb6:	e668      	b.n	800198a <__aeabi_dmul+0xce>
 8001cb8:	0003      	movs	r3, r0
 8001cba:	4654      	mov	r4, sl
 8001cbc:	3b28      	subs	r3, #40	; 0x28
 8001cbe:	409c      	lsls	r4, r3
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	e6b9      	b.n	8001a38 <__aeabi_dmul+0x17c>
 8001cc4:	f000 f97a 	bl	8001fbc <__clzsi2>
 8001cc8:	3020      	adds	r0, #32
 8001cca:	e6a6      	b.n	8001a1a <__aeabi_dmul+0x15e>
 8001ccc:	0003      	movs	r3, r0
 8001cce:	3b28      	subs	r3, #40	; 0x28
 8001cd0:	409f      	lsls	r7, r3
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	46bb      	mov	fp, r7
 8001cd6:	4699      	mov	r9, r3
 8001cd8:	e68a      	b.n	80019f0 <__aeabi_dmul+0x134>
 8001cda:	f000 f96f 	bl	8001fbc <__clzsi2>
 8001cde:	3020      	adds	r0, #32
 8001ce0:	e674      	b.n	80019cc <__aeabi_dmul+0x110>
 8001ce2:	46b4      	mov	ip, r6
 8001ce4:	e7ad      	b.n	8001c42 <__aeabi_dmul+0x386>
 8001ce6:	2501      	movs	r5, #1
 8001ce8:	1a2a      	subs	r2, r5, r0
 8001cea:	2a38      	cmp	r2, #56	; 0x38
 8001cec:	dd06      	ble.n	8001cfc <__aeabi_dmul+0x440>
 8001cee:	9b01      	ldr	r3, [sp, #4]
 8001cf0:	2400      	movs	r4, #0
 8001cf2:	401d      	ands	r5, r3
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	4699      	mov	r9, r3
 8001cfa:	e646      	b.n	800198a <__aeabi_dmul+0xce>
 8001cfc:	2a1f      	cmp	r2, #31
 8001cfe:	dc21      	bgt.n	8001d44 <__aeabi_dmul+0x488>
 8001d00:	2520      	movs	r5, #32
 8001d02:	0020      	movs	r0, r4
 8001d04:	1aad      	subs	r5, r5, r2
 8001d06:	001e      	movs	r6, r3
 8001d08:	40ab      	lsls	r3, r5
 8001d0a:	40a8      	lsls	r0, r5
 8001d0c:	40d6      	lsrs	r6, r2
 8001d0e:	1e5d      	subs	r5, r3, #1
 8001d10:	41ab      	sbcs	r3, r5
 8001d12:	4330      	orrs	r0, r6
 8001d14:	4318      	orrs	r0, r3
 8001d16:	40d4      	lsrs	r4, r2
 8001d18:	0743      	lsls	r3, r0, #29
 8001d1a:	d009      	beq.n	8001d30 <__aeabi_dmul+0x474>
 8001d1c:	230f      	movs	r3, #15
 8001d1e:	4003      	ands	r3, r0
 8001d20:	2b04      	cmp	r3, #4
 8001d22:	d005      	beq.n	8001d30 <__aeabi_dmul+0x474>
 8001d24:	0003      	movs	r3, r0
 8001d26:	1d18      	adds	r0, r3, #4
 8001d28:	4298      	cmp	r0, r3
 8001d2a:	419b      	sbcs	r3, r3
 8001d2c:	425b      	negs	r3, r3
 8001d2e:	18e4      	adds	r4, r4, r3
 8001d30:	0223      	lsls	r3, r4, #8
 8001d32:	d521      	bpl.n	8001d78 <__aeabi_dmul+0x4bc>
 8001d34:	2501      	movs	r5, #1
 8001d36:	9b01      	ldr	r3, [sp, #4]
 8001d38:	2401      	movs	r4, #1
 8001d3a:	401d      	ands	r5, r3
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	2200      	movs	r2, #0
 8001d40:	4699      	mov	r9, r3
 8001d42:	e622      	b.n	800198a <__aeabi_dmul+0xce>
 8001d44:	251f      	movs	r5, #31
 8001d46:	0021      	movs	r1, r4
 8001d48:	426d      	negs	r5, r5
 8001d4a:	1a28      	subs	r0, r5, r0
 8001d4c:	40c1      	lsrs	r1, r0
 8001d4e:	0008      	movs	r0, r1
 8001d50:	2a20      	cmp	r2, #32
 8001d52:	d01d      	beq.n	8001d90 <__aeabi_dmul+0x4d4>
 8001d54:	355f      	adds	r5, #95	; 0x5f
 8001d56:	1aaa      	subs	r2, r5, r2
 8001d58:	4094      	lsls	r4, r2
 8001d5a:	4323      	orrs	r3, r4
 8001d5c:	1e5c      	subs	r4, r3, #1
 8001d5e:	41a3      	sbcs	r3, r4
 8001d60:	2507      	movs	r5, #7
 8001d62:	4303      	orrs	r3, r0
 8001d64:	401d      	ands	r5, r3
 8001d66:	2200      	movs	r2, #0
 8001d68:	2d00      	cmp	r5, #0
 8001d6a:	d009      	beq.n	8001d80 <__aeabi_dmul+0x4c4>
 8001d6c:	220f      	movs	r2, #15
 8001d6e:	2400      	movs	r4, #0
 8001d70:	401a      	ands	r2, r3
 8001d72:	0018      	movs	r0, r3
 8001d74:	2a04      	cmp	r2, #4
 8001d76:	d1d6      	bne.n	8001d26 <__aeabi_dmul+0x46a>
 8001d78:	0003      	movs	r3, r0
 8001d7a:	0765      	lsls	r5, r4, #29
 8001d7c:	0264      	lsls	r4, r4, #9
 8001d7e:	0b22      	lsrs	r2, r4, #12
 8001d80:	08db      	lsrs	r3, r3, #3
 8001d82:	432b      	orrs	r3, r5
 8001d84:	2501      	movs	r5, #1
 8001d86:	4699      	mov	r9, r3
 8001d88:	9b01      	ldr	r3, [sp, #4]
 8001d8a:	2400      	movs	r4, #0
 8001d8c:	401d      	ands	r5, r3
 8001d8e:	e5fc      	b.n	800198a <__aeabi_dmul+0xce>
 8001d90:	2400      	movs	r4, #0
 8001d92:	e7e2      	b.n	8001d5a <__aeabi_dmul+0x49e>
 8001d94:	2280      	movs	r2, #128	; 0x80
 8001d96:	2501      	movs	r5, #1
 8001d98:	0312      	lsls	r2, r2, #12
 8001d9a:	4322      	orrs	r2, r4
 8001d9c:	9901      	ldr	r1, [sp, #4]
 8001d9e:	0312      	lsls	r2, r2, #12
 8001da0:	0b12      	lsrs	r2, r2, #12
 8001da2:	400d      	ands	r5, r1
 8001da4:	4699      	mov	r9, r3
 8001da6:	4c04      	ldr	r4, [pc, #16]	; (8001db8 <__aeabi_dmul+0x4fc>)
 8001da8:	e5ef      	b.n	800198a <__aeabi_dmul+0xce>
 8001daa:	46c0      	nop			; (mov r8, r8)
 8001dac:	000003ff 	.word	0x000003ff
 8001db0:	feffffff 	.word	0xfeffffff
 8001db4:	000007fe 	.word	0x000007fe
 8001db8:	000007ff 	.word	0x000007ff

08001dbc <__aeabi_d2iz>:
 8001dbc:	b530      	push	{r4, r5, lr}
 8001dbe:	4d13      	ldr	r5, [pc, #76]	; (8001e0c <__aeabi_d2iz+0x50>)
 8001dc0:	030a      	lsls	r2, r1, #12
 8001dc2:	004b      	lsls	r3, r1, #1
 8001dc4:	0b12      	lsrs	r2, r2, #12
 8001dc6:	0d5b      	lsrs	r3, r3, #21
 8001dc8:	0fc9      	lsrs	r1, r1, #31
 8001dca:	2400      	movs	r4, #0
 8001dcc:	42ab      	cmp	r3, r5
 8001dce:	dd10      	ble.n	8001df2 <__aeabi_d2iz+0x36>
 8001dd0:	4c0f      	ldr	r4, [pc, #60]	; (8001e10 <__aeabi_d2iz+0x54>)
 8001dd2:	42a3      	cmp	r3, r4
 8001dd4:	dc0f      	bgt.n	8001df6 <__aeabi_d2iz+0x3a>
 8001dd6:	2480      	movs	r4, #128	; 0x80
 8001dd8:	4d0e      	ldr	r5, [pc, #56]	; (8001e14 <__aeabi_d2iz+0x58>)
 8001dda:	0364      	lsls	r4, r4, #13
 8001ddc:	4322      	orrs	r2, r4
 8001dde:	1aed      	subs	r5, r5, r3
 8001de0:	2d1f      	cmp	r5, #31
 8001de2:	dd0b      	ble.n	8001dfc <__aeabi_d2iz+0x40>
 8001de4:	480c      	ldr	r0, [pc, #48]	; (8001e18 <__aeabi_d2iz+0x5c>)
 8001de6:	1ac3      	subs	r3, r0, r3
 8001de8:	40da      	lsrs	r2, r3
 8001dea:	4254      	negs	r4, r2
 8001dec:	2900      	cmp	r1, #0
 8001dee:	d100      	bne.n	8001df2 <__aeabi_d2iz+0x36>
 8001df0:	0014      	movs	r4, r2
 8001df2:	0020      	movs	r0, r4
 8001df4:	bd30      	pop	{r4, r5, pc}
 8001df6:	4b09      	ldr	r3, [pc, #36]	; (8001e1c <__aeabi_d2iz+0x60>)
 8001df8:	18cc      	adds	r4, r1, r3
 8001dfa:	e7fa      	b.n	8001df2 <__aeabi_d2iz+0x36>
 8001dfc:	4c08      	ldr	r4, [pc, #32]	; (8001e20 <__aeabi_d2iz+0x64>)
 8001dfe:	40e8      	lsrs	r0, r5
 8001e00:	46a4      	mov	ip, r4
 8001e02:	4463      	add	r3, ip
 8001e04:	409a      	lsls	r2, r3
 8001e06:	4302      	orrs	r2, r0
 8001e08:	e7ef      	b.n	8001dea <__aeabi_d2iz+0x2e>
 8001e0a:	46c0      	nop			; (mov r8, r8)
 8001e0c:	000003fe 	.word	0x000003fe
 8001e10:	0000041d 	.word	0x0000041d
 8001e14:	00000433 	.word	0x00000433
 8001e18:	00000413 	.word	0x00000413
 8001e1c:	7fffffff 	.word	0x7fffffff
 8001e20:	fffffbed 	.word	0xfffffbed

08001e24 <__aeabi_i2d>:
 8001e24:	b570      	push	{r4, r5, r6, lr}
 8001e26:	2800      	cmp	r0, #0
 8001e28:	d030      	beq.n	8001e8c <__aeabi_i2d+0x68>
 8001e2a:	17c3      	asrs	r3, r0, #31
 8001e2c:	18c4      	adds	r4, r0, r3
 8001e2e:	405c      	eors	r4, r3
 8001e30:	0fc5      	lsrs	r5, r0, #31
 8001e32:	0020      	movs	r0, r4
 8001e34:	f000 f8c2 	bl	8001fbc <__clzsi2>
 8001e38:	4b17      	ldr	r3, [pc, #92]	; (8001e98 <__aeabi_i2d+0x74>)
 8001e3a:	4a18      	ldr	r2, [pc, #96]	; (8001e9c <__aeabi_i2d+0x78>)
 8001e3c:	1a1b      	subs	r3, r3, r0
 8001e3e:	1ad2      	subs	r2, r2, r3
 8001e40:	2a1f      	cmp	r2, #31
 8001e42:	dd18      	ble.n	8001e76 <__aeabi_i2d+0x52>
 8001e44:	4a16      	ldr	r2, [pc, #88]	; (8001ea0 <__aeabi_i2d+0x7c>)
 8001e46:	1ad2      	subs	r2, r2, r3
 8001e48:	4094      	lsls	r4, r2
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	0324      	lsls	r4, r4, #12
 8001e4e:	055b      	lsls	r3, r3, #21
 8001e50:	0b24      	lsrs	r4, r4, #12
 8001e52:	0d5b      	lsrs	r3, r3, #21
 8001e54:	2100      	movs	r1, #0
 8001e56:	0010      	movs	r0, r2
 8001e58:	0324      	lsls	r4, r4, #12
 8001e5a:	0d0a      	lsrs	r2, r1, #20
 8001e5c:	0b24      	lsrs	r4, r4, #12
 8001e5e:	0512      	lsls	r2, r2, #20
 8001e60:	4322      	orrs	r2, r4
 8001e62:	4c10      	ldr	r4, [pc, #64]	; (8001ea4 <__aeabi_i2d+0x80>)
 8001e64:	051b      	lsls	r3, r3, #20
 8001e66:	4022      	ands	r2, r4
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	005b      	lsls	r3, r3, #1
 8001e6c:	07ed      	lsls	r5, r5, #31
 8001e6e:	085b      	lsrs	r3, r3, #1
 8001e70:	432b      	orrs	r3, r5
 8001e72:	0019      	movs	r1, r3
 8001e74:	bd70      	pop	{r4, r5, r6, pc}
 8001e76:	0021      	movs	r1, r4
 8001e78:	4091      	lsls	r1, r2
 8001e7a:	000a      	movs	r2, r1
 8001e7c:	210b      	movs	r1, #11
 8001e7e:	1a08      	subs	r0, r1, r0
 8001e80:	40c4      	lsrs	r4, r0
 8001e82:	055b      	lsls	r3, r3, #21
 8001e84:	0324      	lsls	r4, r4, #12
 8001e86:	0b24      	lsrs	r4, r4, #12
 8001e88:	0d5b      	lsrs	r3, r3, #21
 8001e8a:	e7e3      	b.n	8001e54 <__aeabi_i2d+0x30>
 8001e8c:	2500      	movs	r5, #0
 8001e8e:	2300      	movs	r3, #0
 8001e90:	2400      	movs	r4, #0
 8001e92:	2200      	movs	r2, #0
 8001e94:	e7de      	b.n	8001e54 <__aeabi_i2d+0x30>
 8001e96:	46c0      	nop			; (mov r8, r8)
 8001e98:	0000041e 	.word	0x0000041e
 8001e9c:	00000433 	.word	0x00000433
 8001ea0:	00000413 	.word	0x00000413
 8001ea4:	800fffff 	.word	0x800fffff

08001ea8 <__aeabi_d2f>:
 8001ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001eaa:	004c      	lsls	r4, r1, #1
 8001eac:	0d64      	lsrs	r4, r4, #21
 8001eae:	030b      	lsls	r3, r1, #12
 8001eb0:	1c62      	adds	r2, r4, #1
 8001eb2:	0f45      	lsrs	r5, r0, #29
 8001eb4:	0a5b      	lsrs	r3, r3, #9
 8001eb6:	0552      	lsls	r2, r2, #21
 8001eb8:	432b      	orrs	r3, r5
 8001eba:	0fc9      	lsrs	r1, r1, #31
 8001ebc:	00c5      	lsls	r5, r0, #3
 8001ebe:	0d52      	lsrs	r2, r2, #21
 8001ec0:	2a01      	cmp	r2, #1
 8001ec2:	dd28      	ble.n	8001f16 <__aeabi_d2f+0x6e>
 8001ec4:	4a3a      	ldr	r2, [pc, #232]	; (8001fb0 <__aeabi_d2f+0x108>)
 8001ec6:	18a6      	adds	r6, r4, r2
 8001ec8:	2efe      	cmp	r6, #254	; 0xfe
 8001eca:	dc1b      	bgt.n	8001f04 <__aeabi_d2f+0x5c>
 8001ecc:	2e00      	cmp	r6, #0
 8001ece:	dd3e      	ble.n	8001f4e <__aeabi_d2f+0xa6>
 8001ed0:	0180      	lsls	r0, r0, #6
 8001ed2:	0002      	movs	r2, r0
 8001ed4:	1e50      	subs	r0, r2, #1
 8001ed6:	4182      	sbcs	r2, r0
 8001ed8:	0f6d      	lsrs	r5, r5, #29
 8001eda:	432a      	orrs	r2, r5
 8001edc:	00db      	lsls	r3, r3, #3
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	075a      	lsls	r2, r3, #29
 8001ee2:	d004      	beq.n	8001eee <__aeabi_d2f+0x46>
 8001ee4:	220f      	movs	r2, #15
 8001ee6:	401a      	ands	r2, r3
 8001ee8:	2a04      	cmp	r2, #4
 8001eea:	d000      	beq.n	8001eee <__aeabi_d2f+0x46>
 8001eec:	3304      	adds	r3, #4
 8001eee:	2280      	movs	r2, #128	; 0x80
 8001ef0:	04d2      	lsls	r2, r2, #19
 8001ef2:	401a      	ands	r2, r3
 8001ef4:	d05a      	beq.n	8001fac <__aeabi_d2f+0x104>
 8001ef6:	3601      	adds	r6, #1
 8001ef8:	2eff      	cmp	r6, #255	; 0xff
 8001efa:	d003      	beq.n	8001f04 <__aeabi_d2f+0x5c>
 8001efc:	019b      	lsls	r3, r3, #6
 8001efe:	0a5b      	lsrs	r3, r3, #9
 8001f00:	b2f4      	uxtb	r4, r6
 8001f02:	e001      	b.n	8001f08 <__aeabi_d2f+0x60>
 8001f04:	24ff      	movs	r4, #255	; 0xff
 8001f06:	2300      	movs	r3, #0
 8001f08:	0258      	lsls	r0, r3, #9
 8001f0a:	05e4      	lsls	r4, r4, #23
 8001f0c:	0a40      	lsrs	r0, r0, #9
 8001f0e:	07c9      	lsls	r1, r1, #31
 8001f10:	4320      	orrs	r0, r4
 8001f12:	4308      	orrs	r0, r1
 8001f14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f16:	2c00      	cmp	r4, #0
 8001f18:	d007      	beq.n	8001f2a <__aeabi_d2f+0x82>
 8001f1a:	431d      	orrs	r5, r3
 8001f1c:	d0f2      	beq.n	8001f04 <__aeabi_d2f+0x5c>
 8001f1e:	2080      	movs	r0, #128	; 0x80
 8001f20:	00db      	lsls	r3, r3, #3
 8001f22:	0480      	lsls	r0, r0, #18
 8001f24:	4303      	orrs	r3, r0
 8001f26:	26ff      	movs	r6, #255	; 0xff
 8001f28:	e7da      	b.n	8001ee0 <__aeabi_d2f+0x38>
 8001f2a:	432b      	orrs	r3, r5
 8001f2c:	d003      	beq.n	8001f36 <__aeabi_d2f+0x8e>
 8001f2e:	2305      	movs	r3, #5
 8001f30:	08db      	lsrs	r3, r3, #3
 8001f32:	2cff      	cmp	r4, #255	; 0xff
 8001f34:	d003      	beq.n	8001f3e <__aeabi_d2f+0x96>
 8001f36:	025b      	lsls	r3, r3, #9
 8001f38:	0a5b      	lsrs	r3, r3, #9
 8001f3a:	b2e4      	uxtb	r4, r4
 8001f3c:	e7e4      	b.n	8001f08 <__aeabi_d2f+0x60>
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d032      	beq.n	8001fa8 <__aeabi_d2f+0x100>
 8001f42:	2080      	movs	r0, #128	; 0x80
 8001f44:	03c0      	lsls	r0, r0, #15
 8001f46:	4303      	orrs	r3, r0
 8001f48:	025b      	lsls	r3, r3, #9
 8001f4a:	0a5b      	lsrs	r3, r3, #9
 8001f4c:	e7dc      	b.n	8001f08 <__aeabi_d2f+0x60>
 8001f4e:	0032      	movs	r2, r6
 8001f50:	3217      	adds	r2, #23
 8001f52:	db14      	blt.n	8001f7e <__aeabi_d2f+0xd6>
 8001f54:	2280      	movs	r2, #128	; 0x80
 8001f56:	271e      	movs	r7, #30
 8001f58:	0412      	lsls	r2, r2, #16
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	1bbf      	subs	r7, r7, r6
 8001f5e:	2f1f      	cmp	r7, #31
 8001f60:	dc0f      	bgt.n	8001f82 <__aeabi_d2f+0xda>
 8001f62:	4a14      	ldr	r2, [pc, #80]	; (8001fb4 <__aeabi_d2f+0x10c>)
 8001f64:	4694      	mov	ip, r2
 8001f66:	4464      	add	r4, ip
 8001f68:	002a      	movs	r2, r5
 8001f6a:	40a5      	lsls	r5, r4
 8001f6c:	002e      	movs	r6, r5
 8001f6e:	40a3      	lsls	r3, r4
 8001f70:	1e75      	subs	r5, r6, #1
 8001f72:	41ae      	sbcs	r6, r5
 8001f74:	40fa      	lsrs	r2, r7
 8001f76:	4333      	orrs	r3, r6
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	2600      	movs	r6, #0
 8001f7c:	e7b0      	b.n	8001ee0 <__aeabi_d2f+0x38>
 8001f7e:	2400      	movs	r4, #0
 8001f80:	e7d5      	b.n	8001f2e <__aeabi_d2f+0x86>
 8001f82:	2202      	movs	r2, #2
 8001f84:	4252      	negs	r2, r2
 8001f86:	1b96      	subs	r6, r2, r6
 8001f88:	001a      	movs	r2, r3
 8001f8a:	40f2      	lsrs	r2, r6
 8001f8c:	2f20      	cmp	r7, #32
 8001f8e:	d009      	beq.n	8001fa4 <__aeabi_d2f+0xfc>
 8001f90:	4809      	ldr	r0, [pc, #36]	; (8001fb8 <__aeabi_d2f+0x110>)
 8001f92:	4684      	mov	ip, r0
 8001f94:	4464      	add	r4, ip
 8001f96:	40a3      	lsls	r3, r4
 8001f98:	432b      	orrs	r3, r5
 8001f9a:	1e5d      	subs	r5, r3, #1
 8001f9c:	41ab      	sbcs	r3, r5
 8001f9e:	2600      	movs	r6, #0
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	e79d      	b.n	8001ee0 <__aeabi_d2f+0x38>
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	e7f7      	b.n	8001f98 <__aeabi_d2f+0xf0>
 8001fa8:	2300      	movs	r3, #0
 8001faa:	e7ad      	b.n	8001f08 <__aeabi_d2f+0x60>
 8001fac:	0034      	movs	r4, r6
 8001fae:	e7bf      	b.n	8001f30 <__aeabi_d2f+0x88>
 8001fb0:	fffffc80 	.word	0xfffffc80
 8001fb4:	fffffc82 	.word	0xfffffc82
 8001fb8:	fffffca2 	.word	0xfffffca2

08001fbc <__clzsi2>:
 8001fbc:	211c      	movs	r1, #28
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	041b      	lsls	r3, r3, #16
 8001fc2:	4298      	cmp	r0, r3
 8001fc4:	d301      	bcc.n	8001fca <__clzsi2+0xe>
 8001fc6:	0c00      	lsrs	r0, r0, #16
 8001fc8:	3910      	subs	r1, #16
 8001fca:	0a1b      	lsrs	r3, r3, #8
 8001fcc:	4298      	cmp	r0, r3
 8001fce:	d301      	bcc.n	8001fd4 <__clzsi2+0x18>
 8001fd0:	0a00      	lsrs	r0, r0, #8
 8001fd2:	3908      	subs	r1, #8
 8001fd4:	091b      	lsrs	r3, r3, #4
 8001fd6:	4298      	cmp	r0, r3
 8001fd8:	d301      	bcc.n	8001fde <__clzsi2+0x22>
 8001fda:	0900      	lsrs	r0, r0, #4
 8001fdc:	3904      	subs	r1, #4
 8001fde:	a202      	add	r2, pc, #8	; (adr r2, 8001fe8 <__clzsi2+0x2c>)
 8001fe0:	5c10      	ldrb	r0, [r2, r0]
 8001fe2:	1840      	adds	r0, r0, r1
 8001fe4:	4770      	bx	lr
 8001fe6:	46c0      	nop			; (mov r8, r8)
 8001fe8:	02020304 	.word	0x02020304
 8001fec:	01010101 	.word	0x01010101
	...

08001ff8 <strncpy>:
 8001ff8:	000b      	movs	r3, r1
 8001ffa:	4303      	orrs	r3, r0
 8001ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ffe:	079b      	lsls	r3, r3, #30
 8002000:	d101      	bne.n	8002006 <strncpy+0xe>
 8002002:	2a03      	cmp	r2, #3
 8002004:	d814      	bhi.n	8002030 <strncpy+0x38>
 8002006:	0006      	movs	r6, r0
 8002008:	2a00      	cmp	r2, #0
 800200a:	d010      	beq.n	800202e <strncpy+0x36>
 800200c:	780c      	ldrb	r4, [r1, #0]
 800200e:	3a01      	subs	r2, #1
 8002010:	1c73      	adds	r3, r6, #1
 8002012:	7034      	strb	r4, [r6, #0]
 8002014:	2c00      	cmp	r4, #0
 8002016:	d01d      	beq.n	8002054 <strncpy+0x5c>
 8002018:	2401      	movs	r4, #1
 800201a:	e006      	b.n	800202a <strncpy+0x32>
 800201c:	5d0d      	ldrb	r5, [r1, r4]
 800201e:	3a01      	subs	r2, #1
 8002020:	5535      	strb	r5, [r6, r4]
 8002022:	3301      	adds	r3, #1
 8002024:	3401      	adds	r4, #1
 8002026:	2d00      	cmp	r5, #0
 8002028:	d014      	beq.n	8002054 <strncpy+0x5c>
 800202a:	2a00      	cmp	r2, #0
 800202c:	d1f6      	bne.n	800201c <strncpy+0x24>
 800202e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002030:	0005      	movs	r5, r0
 8002032:	4f0d      	ldr	r7, [pc, #52]	; (8002068 <strncpy+0x70>)
 8002034:	e006      	b.n	8002044 <strncpy+0x4c>
 8002036:	3a04      	subs	r2, #4
 8002038:	1d2e      	adds	r6, r5, #4
 800203a:	3104      	adds	r1, #4
 800203c:	602c      	str	r4, [r5, #0]
 800203e:	2a03      	cmp	r2, #3
 8002040:	d9e2      	bls.n	8002008 <strncpy+0x10>
 8002042:	0035      	movs	r5, r6
 8002044:	680c      	ldr	r4, [r1, #0]
 8002046:	4b09      	ldr	r3, [pc, #36]	; (800206c <strncpy+0x74>)
 8002048:	18e3      	adds	r3, r4, r3
 800204a:	43a3      	bics	r3, r4
 800204c:	423b      	tst	r3, r7
 800204e:	d0f2      	beq.n	8002036 <strncpy+0x3e>
 8002050:	002e      	movs	r6, r5
 8002052:	e7db      	b.n	800200c <strncpy+0x14>
 8002054:	189c      	adds	r4, r3, r2
 8002056:	2100      	movs	r1, #0
 8002058:	2a00      	cmp	r2, #0
 800205a:	d0e8      	beq.n	800202e <strncpy+0x36>
 800205c:	7019      	strb	r1, [r3, #0]
 800205e:	3301      	adds	r3, #1
 8002060:	42a3      	cmp	r3, r4
 8002062:	d1fb      	bne.n	800205c <strncpy+0x64>
 8002064:	e7e3      	b.n	800202e <strncpy+0x36>
 8002066:	46c0      	nop			; (mov r8, r8)
 8002068:	80808080 	.word	0x80808080
 800206c:	fefefeff 	.word	0xfefefeff

08002070 <notify2.lto_priv.49>:

#if STM32_SERIAL_USE_USART2 || defined(__DOXYGEN__)
static void notify2(io_queue_t *qp) {

  (void)qp;
  USART2->CR1 |= USART_CR1_TXEIE;
 8002070:	2180      	movs	r1, #128	; 0x80
 8002072:	4a02      	ldr	r2, [pc, #8]	; (800207c <notify2.lto_priv.49+0xc>)
 8002074:	68d3      	ldr	r3, [r2, #12]
 8002076:	430b      	orrs	r3, r1
 8002078:	60d3      	str	r3, [r2, #12]
}
 800207a:	4770      	bx	lr
 800207c:	40004400 	.word	0x40004400

08002080 <can_rx.lto_priv.48>:
/*
 * Receiver thread.
 */
static THD_WORKING_AREA(can_rx_wa, 256);
static THD_FUNCTION(can_rx, p)
{
 8002080:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002082:	46de      	mov	lr, fp
 8002084:	4657      	mov	r7, sl
 8002086:	464e      	mov	r6, r9
 8002088:	4645      	mov	r5, r8
 800208a:	b5e0      	push	{r5, r6, r7, lr}
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.current->name = name;
 800208c:	4bd5      	ldr	r3, [pc, #852]	; (80023e4 <can_rx.lto_priv.48+0x364>)
 800208e:	4ad6      	ldr	r2, [pc, #856]	; (80023e8 <can_rx.lto_priv.48+0x368>)
 8002090:	469b      	mov	fp, r3
 8002092:	699b      	ldr	r3, [r3, #24]
 8002094:	b095      	sub	sp, #84	; 0x54
 8002096:	619a      	str	r2, [r3, #24]
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8002098:	2320      	movs	r3, #32
 800209a:	f383 8811 	msr	BASEPRI, r3
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->next     = esp->next;
 800209e:	4ed3      	ldr	r6, [pc, #844]	; (80023ec <can_rx.lto_priv.48+0x36c>)
  esp->next     = elp;
  elp->listener = currp;
  elp->events   = events;
  elp->flags    = (eventflags_t)0;
  elp->wflags   = wflags;
 80020a0:	2201      	movs	r2, #1
  elp->next     = esp->next;
 80020a2:	69b3      	ldr	r3, [r6, #24]
  elp->wflags   = wflags;
 80020a4:	4252      	negs	r2, r2
  elp->next     = esp->next;
 80020a6:	9309      	str	r3, [sp, #36]	; 0x24
  esp->next     = elp;
 80020a8:	ab09      	add	r3, sp, #36	; 0x24
 80020aa:	61b3      	str	r3, [r6, #24]
  elp->listener = currp;
 80020ac:	465b      	mov	r3, fp
 80020ae:	699b      	ldr	r3, [r3, #24]
  elp->wflags   = wflags;
 80020b0:	920d      	str	r2, [sp, #52]	; 0x34
  elp->listener = currp;
 80020b2:	930a      	str	r3, [sp, #40]	; 0x28
  elp->events   = events;
 80020b4:	2301      	movs	r3, #1
 80020b6:	930b      	str	r3, [sp, #44]	; 0x2c
  elp->flags    = (eventflags_t)0;
 80020b8:	2300      	movs	r3, #0
 80020ba:	930c      	str	r3, [sp, #48]	; 0x30
 80020bc:	f383 8811 	msr	BASEPRI, r3
 80020c0:	e005      	b.n	80020ce <can_rx.lto_priv.48+0x4e>
bool can_lld_is_rx_nonempty(CANDriver *canp, canmbx_t mailbox) {

  switch (mailbox) {
  case CAN_ANY_MAILBOX:
    return ((canp->can->RF0R & CAN_RF0R_FMP0) != 0 ||
            (canp->can->RF1R & CAN_RF1R_FMP1) != 0);
 80020c2:	691a      	ldr	r2, [r3, #16]
    return ((canp->can->RF0R & CAN_RF0R_FMP0) != 0 ||
 80020c4:	4211      	tst	r1, r2
 80020c6:	d12e      	bne.n	8002126 <can_rx.lto_priv.48+0xa6>
 80020c8:	2300      	movs	r3, #0
 80020ca:	f383 8811 	msr	BASEPRI, r3

    // Register RX event
    chEvtRegister(&CAND1.rxfull_event, &el, 0);

    // Start RX Loop
    while(!chThdShouldTerminateX())
 80020ce:	2504      	movs	r5, #4
 80020d0:	2720      	movs	r7, #32
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.current;
 80020d2:	465b      	mov	r3, fp
 80020d4:	699c      	ldr	r4, [r3, #24]
 80020d6:	7f63      	ldrb	r3, [r4, #29]
 80020d8:	421d      	tst	r5, r3
 80020da:	d000      	beq.n	80020de <can_rx.lto_priv.48+0x5e>
 80020dc:	e10a      	b.n	80022f4 <can_rx.lto_priv.48+0x274>
 80020de:	f387 8811 	msr	BASEPRI, r7
eventmask_t chEvtWaitAnyTimeout(eventmask_t events, systime_t time) {
  thread_t *ctp = currp;
  eventmask_t m;

  chSysLock();
  m = ctp->epending & events;
 80020e2:	6b23      	ldr	r3, [r4, #48]	; 0x30
  if (m == (eventmask_t)0) {
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d10a      	bne.n	80020fe <can_rx.lto_priv.48+0x7e>
    if (TIME_IMMEDIATE == time) {
      chSysUnlock();
      return (eventmask_t)0;
    }
    ctp->u.ewmask = events;
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, time) < MSG_OK) {
 80020e8:	21fa      	movs	r1, #250	; 0xfa
    ctp->u.ewmask = events;
 80020ea:	3b01      	subs	r3, #1
 80020ec:	6223      	str	r3, [r4, #32]
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, time) < MSG_OK) {
 80020ee:	0089      	lsls	r1, r1, #2
 80020f0:	200a      	movs	r0, #10
 80020f2:	f001 fd55 	bl	8003ba0 <chSchGoSleepTimeoutS>
 80020f6:	2800      	cmp	r0, #0
 80020f8:	da00      	bge.n	80020fc <can_rx.lto_priv.48+0x7c>
 80020fa:	e112      	b.n	8002322 <can_rx.lto_priv.48+0x2a2>
      chSysUnlock();
      return (eventmask_t)0;
    }
    m = ctp->epending & events;
 80020fc:	6b23      	ldr	r3, [r4, #48]	; 0x30
  }
  ctp->epending &= ~m;
 80020fe:	2200      	movs	r2, #0
 8002100:	6322      	str	r2, [r4, #48]	; 0x30
 8002102:	f382 8811 	msr	BASEPRI, r2
    {
        if (chEvtWaitAnyTimeout(ALL_EVENTS, MS2ST(100)) == 0)
 8002106:	2b00      	cmp	r3, #0
 8002108:	d0e3      	beq.n	80020d2 <can_rx.lto_priv.48+0x52>
    }
  }
  switch (mailbox) {
  case 1:
    /* Fetches the message.*/
    rir  = canp->can->sFIFOMailBox[0].RIR;
 800210a:	23d8      	movs	r3, #216	; 0xd8
 800210c:	005b      	lsls	r3, r3, #1
 800210e:	2520      	movs	r5, #32
    return ((canp->can->RF0R & CAN_RF0R_FMP0) != 0 ||
 8002110:	2103      	movs	r1, #3
    rir  = canp->can->sFIFOMailBox[0].RIR;
 8002112:	469c      	mov	ip, r3
 8002114:	f385 8811 	msr	BASEPRI, r5
  osalSysLock();
  osalDbgAssert((canp->state == CAN_READY) || (canp->state == CAN_SLEEP),
                "invalid state");

  /*lint -save -e9007 [13.5] Right side is supposed to be pure.*/
  while ((canp->state == CAN_SLEEP) || !can_lld_is_rx_nonempty(canp, mailbox)) {
 8002118:	7833      	ldrb	r3, [r6, #0]
 800211a:	2b04      	cmp	r3, #4
 800211c:	d0d4      	beq.n	80020c8 <can_rx.lto_priv.48+0x48>
    return ((canp->can->RF0R & CAN_RF0R_FMP0) != 0 ||
 800211e:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8002120:	68da      	ldr	r2, [r3, #12]
 8002122:	4211      	tst	r1, r2
 8002124:	d0cd      	beq.n	80020c2 <can_rx.lto_priv.48+0x42>
    if ((canp->can->RF0R & CAN_RF0R_FMP0) != 0)
 8002126:	68da      	ldr	r2, [r3, #12]
 8002128:	4211      	tst	r1, r2
 800212a:	d100      	bne.n	800212e <can_rx.lto_priv.48+0xae>
 800212c:	e0b7      	b.n	800229e <can_rx.lto_priv.48+0x21e>
    rdtr = canp->can->sFIFOMailBox[0].RDTR;
 800212e:	20da      	movs	r0, #218	; 0xda
    rir  = canp->can->sFIFOMailBox[0].RIR;
 8002130:	4662      	mov	r2, ip
    rdtr = canp->can->sFIFOMailBox[0].RDTR;
 8002132:	0040      	lsls	r0, r0, #1
    rir  = canp->can->sFIFOMailBox[0].RIR;
 8002134:	589a      	ldr	r2, [r3, r2]
    rdtr = canp->can->sFIFOMailBox[0].RDTR;
 8002136:	5818      	ldr	r0, [r3, r0]
 8002138:	9005      	str	r0, [sp, #20]
    crfp->data32[0] = canp->can->sFIFOMailBox[0].RDLR;
 800213a:	20dc      	movs	r0, #220	; 0xdc
 800213c:	0040      	lsls	r0, r0, #1
 800213e:	5818      	ldr	r0, [r3, r0]
 8002140:	4680      	mov	r8, r0
 8002142:	4644      	mov	r4, r8
 8002144:	a80e      	add	r0, sp, #56	; 0x38
 8002146:	6104      	str	r4, [r0, #16]
    crfp->data32[1] = canp->can->sFIFOMailBox[0].RDHR;
 8002148:	24de      	movs	r4, #222	; 0xde
 800214a:	0064      	lsls	r4, r4, #1
 800214c:	591c      	ldr	r4, [r3, r4]

    /* Releases the mailbox.*/
    canp->can->RF0R = CAN_RF0R_RFOM0;
 800214e:	60dd      	str	r5, [r3, #12]
    crfp->data32[1] = canp->can->sFIFOMailBox[0].RDHR;
 8002150:	6144      	str	r4, [r0, #20]

    /* If the queue is empty re-enables the interrupt in order to generate
       events again.*/
    if ((canp->can->RF0R & CAN_RF0R_FMP0) == 0)
 8002152:	68dc      	ldr	r4, [r3, #12]
 8002154:	4221      	tst	r1, r4
 8002156:	d103      	bne.n	8002160 <can_rx.lto_priv.48+0xe0>
      canp->can->IER |= CAN_IER_FMPIE0;
 8002158:	2702      	movs	r7, #2
 800215a:	695c      	ldr	r4, [r3, #20]
 800215c:	433c      	orrs	r4, r7
 800215e:	615c      	str	r4, [r3, #20]
  }

  /* Decodes the various fields in the RX frame.*/
  crfp->RTR = (rir & CAN_RI0R_RTR) >> 1;
  crfp->IDE = (rir & CAN_RI0R_IDE) >> 2;
  if (crfp->IDE)
 8002160:	240f      	movs	r4, #15
 8002162:	4653      	mov	r3, sl
 8002164:	4023      	ands	r3, r4
 8002166:	469a      	mov	sl, r3
 8002168:	7903      	ldrb	r3, [r0, #4]
 800216a:	43a3      	bics	r3, r4
  crfp->RTR = (rir & CAN_RI0R_RTR) >> 1;
 800216c:	0854      	lsrs	r4, r2, #1
 800216e:	46a1      	mov	r9, r4
  if (crfp->IDE)
 8002170:	2401      	movs	r4, #1
 8002172:	46a0      	mov	r8, r4
 8002174:	464c      	mov	r4, r9
 8002176:	4647      	mov	r7, r8
 8002178:	403c      	ands	r4, r7
 800217a:	0124      	lsls	r4, r4, #4
 800217c:	46a1      	mov	r9, r4
 800217e:	4654      	mov	r4, sl
 8002180:	4323      	orrs	r3, r4
 8002182:	2410      	movs	r4, #16
 8002184:	43a3      	bics	r3, r4
  crfp->IDE = (rir & CAN_RI0R_IDE) >> 2;
 8002186:	0894      	lsrs	r4, r2, #2
 8002188:	46a2      	mov	sl, r4
  if (crfp->IDE)
 800218a:	4644      	mov	r4, r8
 800218c:	4657      	mov	r7, sl
 800218e:	403c      	ands	r4, r7
 8002190:	0164      	lsls	r4, r4, #5
 8002192:	46a0      	mov	r8, r4
 8002194:	464c      	mov	r4, r9
 8002196:	4323      	orrs	r3, r4
 8002198:	4644      	mov	r4, r8
 800219a:	43ab      	bics	r3, r5
 800219c:	4323      	orrs	r3, r4
 800219e:	7103      	strb	r3, [r0, #4]
 80021a0:	421d      	tst	r5, r3
 80021a2:	d100      	bne.n	80021a6 <can_rx.lto_priv.48+0x126>
 80021a4:	e09f      	b.n	80022e6 <can_rx.lto_priv.48+0x266>
    crfp->EID = rir >> 3;
 80021a6:	08d3      	lsrs	r3, r2, #3
 80021a8:	6882      	ldr	r2, [r0, #8]
 80021aa:	0f52      	lsrs	r2, r2, #29
 80021ac:	0752      	lsls	r2, r2, #29
 80021ae:	431a      	orrs	r2, r3
 80021b0:	6082      	str	r2, [r0, #8]
  else
    crfp->SID = rir >> 21;
  crfp->DLC = rdtr & CAN_RDT0R_DLC;
 80021b2:	230f      	movs	r3, #15
 80021b4:	9c05      	ldr	r4, [sp, #20]
 80021b6:	401c      	ands	r4, r3
 80021b8:	46a2      	mov	sl, r4
 80021ba:	2300      	movs	r3, #0
 80021bc:	f383 8811 	msr	BASEPRI, r3
            continue;
        }
        while (canReceive(&CAND1, CAN_ANY_MAILBOX, &rxmsg, TIME_IMMEDIATE) == MSG_OK)
        {
            /* Process message.*/
            if (0x30 & rxmsg.EID)
 80021c0:	6883      	ldr	r3, [r0, #8]
 80021c2:	00dc      	lsls	r4, r3, #3
 80021c4:	2330      	movs	r3, #48	; 0x30
 80021c6:	08e4      	lsrs	r4, r4, #3
 80021c8:	4223      	tst	r3, r4
 80021ca:	d0a3      	beq.n	8002114 <can_rx.lto_priv.48+0x94>
            {
                telemetry.T_INT_MSB = rxmsg.data8[0];
                telemetry.T_INT_LSB = rxmsg.data8[1];
 80021cc:	7c43      	ldrb	r3, [r0, #17]
                telemetry.VCC_MSB = rxmsg.data8[2];
                telemetry.VCC_LSB = rxmsg.data8[3];
                telemetry.V1_MSB = rxmsg.data8[4];
                telemetry.V1_LSB = rxmsg.data8[5];
 80021ce:	7d47      	ldrb	r7, [r0, #21]
                telemetry.T_INT_MSB = rxmsg.data8[0];
 80021d0:	7c02      	ldrb	r2, [r0, #16]
                telemetry.VCC_LSB = rxmsg.data8[3];
 80021d2:	7cc1      	ldrb	r1, [r0, #19]
                telemetry.V1_MSB = rxmsg.data8[4];
 80021d4:	7d05      	ldrb	r5, [r0, #20]
                telemetry.T_INT_LSB = rxmsg.data8[1];
 80021d6:	469c      	mov	ip, r3
                telemetry.VCC_MSB = rxmsg.data8[2];
 80021d8:	7c83      	ldrb	r3, [r0, #18]
                telemetry.V1_LSB = rxmsg.data8[5];
 80021da:	9705      	str	r7, [sp, #20]
                telemetry.V3_MSB = rxmsg.data8[6];
 80021dc:	7d87      	ldrb	r7, [r0, #22]
                telemetry.V3_LSB = rxmsg.data8[7];
 80021de:	7dc0      	ldrb	r0, [r0, #23]
                telemetry.V3_MSB = rxmsg.data8[6];
 80021e0:	46b8      	mov	r8, r7
                telemetry.V3_LSB = rxmsg.data8[7];
 80021e2:	9006      	str	r0, [sp, #24]
signed int ltc2990_calc_tint(ltc2990_data * d, ltc2990_error * error)
{
    signed int tint_C           = 0;

    *error = LTC2990_DATA_INVALID;
    if((0x80 & d->T_INT_MSB) != 0)
 80021e4:	b250      	sxtb	r0, r2
 80021e6:	2700      	movs	r7, #0
 80021e8:	2800      	cmp	r0, #0
 80021ea:	da00      	bge.n	80021ee <can_rx.lto_priv.48+0x16e>
 80021ec:	e0cf      	b.n	800238e <can_rx.lto_priv.48+0x30e>
/* VCC in millivolts */
signed int ltc2990_calc_vcc(ltc2990_data * d, ltc2990_error * error)
{
    uint16_t   vcc_bits         = 0;
    double     vcc_volts_d      = 0.0;
    signed int vcc_millivolts   = 0;
 80021ee:	2000      	movs	r0, #0

    *error = LTC2990_DATA_INVALID;
    if((0x80 & d->VCC_MSB) != 0)
 80021f0:	b25a      	sxtb	r2, r3
    signed int vcc_millivolts   = 0;
 80021f2:	4681      	mov	r9, r0
    if((0x80 & d->VCC_MSB) != 0)
 80021f4:	2a00      	cmp	r2, #0
 80021f6:	da00      	bge.n	80021fa <can_rx.lto_priv.48+0x17a>
 80021f8:	e09a      	b.n	8002330 <can_rx.lto_priv.48+0x2b0>
    double     v_volts_d      = 0.0;
    double     i_amps_d       = 0.0;
    signed int i_milliamps    = INT_MIN;

    *error = LTC2990_DATA_INVALID;
    if((0x80 & d->V1_MSB) != 0)
 80021fa:	b26b      	sxtb	r3, r5
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	db00      	blt.n	8002202 <can_rx.lto_priv.48+0x182>
 8002200:	e093      	b.n	800232a <can_rx.lto_priv.48+0x2aa>
 8002202:	2340      	movs	r3, #64	; 0x40
 8002204:	402b      	ands	r3, r5
 8002206:	9307      	str	r3, [sp, #28]
    {
        SIGN           = ((d->V1_MSB & (1 << 6)) >> 6);
        v_bits         = ((d->V1_MSB << 8) | d->V1_LSB);
 8002208:	9b05      	ldr	r3, [sp, #20]
 800220a:	0228      	lsls	r0, r5, #8
 800220c:	4318      	orrs	r0, r3
        v_volts_d      = (double)(v_bits & 0x3fff) * 0.00001942 ;
 800220e:	0480      	lsls	r0, r0, #18
 8002210:	0c80      	lsrs	r0, r0, #18
 8002212:	f7ff fe07 	bl	8001e24 <__aeabi_i2d>
 8002216:	4a76      	ldr	r2, [pc, #472]	; (80023f0 <can_rx.lto_priv.48+0x370>)
 8002218:	4b76      	ldr	r3, [pc, #472]	; (80023f4 <can_rx.lto_priv.48+0x374>)
 800221a:	f7ff fb4f 	bl	80018bc <__aeabi_dmul>
        i_amps_d       = v_volts_d / 0.18;
 800221e:	4a76      	ldr	r2, [pc, #472]	; (80023f8 <can_rx.lto_priv.48+0x378>)
 8002220:	4b76      	ldr	r3, [pc, #472]	; (80023fc <can_rx.lto_priv.48+0x37c>)
 8002222:	f7ff f817 	bl	8001254 <__aeabi_ddiv>
        i_milliamps    = (signed int)incr_rnd(i_amps_d * 1000, 0.1);
 8002226:	2200      	movs	r2, #0
 8002228:	4b75      	ldr	r3, [pc, #468]	; (8002400 <can_rx.lto_priv.48+0x380>)
 800222a:	f7ff fb47 	bl	80018bc <__aeabi_dmul>

    int    q;
    double y = 0;
    double z = 0;

    y = d / m;
 800222e:	4a75      	ldr	r2, [pc, #468]	; (8002404 <can_rx.lto_priv.48+0x384>)
 8002230:	4b75      	ldr	r3, [pc, #468]	; (8002408 <can_rx.lto_priv.48+0x388>)
 8002232:	f7ff f80f 	bl	8001254 <__aeabi_ddiv>

    q = round_nearest(y);
 8002236:	f7ff fe37 	bl	8001ea8 <__aeabi_d2f>
extern "C" {
#endif

static inline int round_nearest(float f)
{
    return((f < 0) ? ((int)(f - 0.5f)) : ((int)(f + 0.5f)));
 800223a:	2100      	movs	r1, #0
 800223c:	1c05      	adds	r5, r0, #0
 800223e:	f7fe f8db 	bl	80003f8 <__aeabi_fcmplt>
 8002242:	21fc      	movs	r1, #252	; 0xfc
 8002244:	0589      	lsls	r1, r1, #22
 8002246:	2800      	cmp	r0, #0
 8002248:	d000      	beq.n	800224c <can_rx.lto_priv.48+0x1cc>
 800224a:	e0ad      	b.n	80023a8 <can_rx.lto_priv.48+0x328>
 800224c:	1c28      	adds	r0, r5, #0
 800224e:	f7fe f8fb 	bl	8000448 <__aeabi_fadd>
 8002252:	f7fe fccf 	bl	8000bf4 <__aeabi_f2iz>

    z = q * m;
 8002256:	f7ff fde5 	bl	8001e24 <__aeabi_i2d>
 800225a:	4b6b      	ldr	r3, [pc, #428]	; (8002408 <can_rx.lto_priv.48+0x388>)
 800225c:	4a69      	ldr	r2, [pc, #420]	; (8002404 <can_rx.lto_priv.48+0x384>)
 800225e:	f7ff fb2d 	bl	80018bc <__aeabi_dmul>
 8002262:	f7ff fdab 	bl	8001dbc <__aeabi_d2iz>
        if(SIGN == 1)
 8002266:	9b07      	ldr	r3, [sp, #28]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d000      	beq.n	800226e <can_rx.lto_priv.48+0x1ee>
        {
            i_milliamps *= -1;
 800226c:	4240      	negs	r0, r0
    *error = LTC2990_DATA_INVALID;
    if(((0x1 << 6) & d->V3_MSB) != 0)
    {
        *error = LTC2990_SENSOR_SHORT;
    }
    else if (((0x1 << 5) & d->V3_MSB) != 0)
 800226e:	2360      	movs	r3, #96	; 0x60
 8002270:	4642      	mov	r2, r8
 8002272:	4213      	tst	r3, r2
 8002274:	d107      	bne.n	8002286 <can_rx.lto_priv.48+0x206>
    {
        *error = LTC2990_SENSOR_OPEN;
    }
    else if((0x80 & d->V3_MSB) != 0)
 8002276:	4643      	mov	r3, r8
 8002278:	466a      	mov	r2, sp
 800227a:	7513      	strb	r3, [r2, #20]
 800227c:	7d13      	ldrb	r3, [r2, #20]
 800227e:	b25b      	sxtb	r3, r3
 8002280:	2b00      	cmp	r3, #0
 8002282:	da00      	bge.n	8002286 <can_rx.lto_priv.48+0x206>
 8002284:	e099      	b.n	80023ba <can_rx.lto_priv.48+0x33a>
 8002286:	23f8      	movs	r3, #248	; 0xf8
 8002288:	061b      	lsls	r3, r3, #24
                params.tint = ltc2990_calc_tint(&telemetry, &derror);
                params.vcc = ltc2990_calc_vcc(&telemetry, &derror);
                params.current = solar_v1_calc_current(&telemetry, &derror);
                params.temp_ext = solar_v1_calc_temp(&telemetry, &derror);
                chprintf(DEBUG_CHP, "\r\n0x%x:\r\nExt Temp: %dC\r\nCurrent: %dmA\r\nVoltage: %dmV\r\nInt Temp: %dC\r\n", rxmsg.EID, params.temp_ext, params.current, params.vcc, params.tint);
 800228a:	464a      	mov	r2, r9
 800228c:	9000      	str	r0, [sp, #0]
 800228e:	9201      	str	r2, [sp, #4]
 8002290:	9702      	str	r7, [sp, #8]
 8002292:	0022      	movs	r2, r4
 8002294:	495d      	ldr	r1, [pc, #372]	; (800240c <can_rx.lto_priv.48+0x38c>)
 8002296:	485e      	ldr	r0, [pc, #376]	; (8002410 <can_rx.lto_priv.48+0x390>)
 8002298:	f000 fe3a 	bl	8002f10 <chprintf.constprop.3>
 800229c:	e735      	b.n	800210a <can_rx.lto_priv.48+0x8a>
    else if ((canp->can->RF1R & CAN_RF1R_FMP1) != 0)
 800229e:	691a      	ldr	r2, [r3, #16]
 80022a0:	a80e      	add	r0, sp, #56	; 0x38
 80022a2:	4211      	tst	r1, r2
 80022a4:	d089      	beq.n	80021ba <can_rx.lto_priv.48+0x13a>
    rir  = canp->can->sFIFOMailBox[1].RIR;
 80022a6:	22e0      	movs	r2, #224	; 0xe0
    rdtr = canp->can->sFIFOMailBox[1].RDTR;
 80022a8:	20e2      	movs	r0, #226	; 0xe2
    rir  = canp->can->sFIFOMailBox[1].RIR;
 80022aa:	0052      	lsls	r2, r2, #1
    rdtr = canp->can->sFIFOMailBox[1].RDTR;
 80022ac:	0040      	lsls	r0, r0, #1
    rir  = canp->can->sFIFOMailBox[1].RIR;
 80022ae:	589a      	ldr	r2, [r3, r2]
    rdtr = canp->can->sFIFOMailBox[1].RDTR;
 80022b0:	5818      	ldr	r0, [r3, r0]
 80022b2:	9005      	str	r0, [sp, #20]
    crfp->data32[0] = canp->can->sFIFOMailBox[1].RDLR;
 80022b4:	20e4      	movs	r0, #228	; 0xe4
 80022b6:	0040      	lsls	r0, r0, #1
 80022b8:	5818      	ldr	r0, [r3, r0]
 80022ba:	4680      	mov	r8, r0
 80022bc:	4644      	mov	r4, r8
 80022be:	a80e      	add	r0, sp, #56	; 0x38
 80022c0:	6104      	str	r4, [r0, #16]
    crfp->data32[1] = canp->can->sFIFOMailBox[1].RDHR;
 80022c2:	24e6      	movs	r4, #230	; 0xe6
 80022c4:	0064      	lsls	r4, r4, #1
 80022c6:	591c      	ldr	r4, [r3, r4]
    canp->can->RF1R = CAN_RF1R_RFOM1;
 80022c8:	611d      	str	r5, [r3, #16]
    crfp->data32[1] = canp->can->sFIFOMailBox[1].RDHR;
 80022ca:	6144      	str	r4, [r0, #20]
    if ((canp->can->RF1R & CAN_RF1R_FMP1) == 0)
 80022cc:	691c      	ldr	r4, [r3, #16]
 80022ce:	4221      	tst	r1, r4
 80022d0:	d000      	beq.n	80022d4 <can_rx.lto_priv.48+0x254>
 80022d2:	e745      	b.n	8002160 <can_rx.lto_priv.48+0xe0>
      canp->can->IER |= CAN_IER_FMPIE1;
 80022d4:	695c      	ldr	r4, [r3, #20]
 80022d6:	46a0      	mov	r8, r4
 80022d8:	2410      	movs	r4, #16
 80022da:	46a1      	mov	r9, r4
 80022dc:	4644      	mov	r4, r8
 80022de:	464f      	mov	r7, r9
 80022e0:	433c      	orrs	r4, r7
 80022e2:	615c      	str	r4, [r3, #20]
 80022e4:	e73c      	b.n	8002160 <can_rx.lto_priv.48+0xe0>
    crfp->SID = rir >> 21;
 80022e6:	0d53      	lsrs	r3, r2, #21
 80022e8:	8902      	ldrh	r2, [r0, #8]
 80022ea:	0ad2      	lsrs	r2, r2, #11
 80022ec:	02d2      	lsls	r2, r2, #11
 80022ee:	431a      	orrs	r2, r3
 80022f0:	8102      	strh	r2, [r0, #8]
 80022f2:	e75e      	b.n	80021b2 <can_rx.lto_priv.48+0x132>
 80022f4:	2320      	movs	r3, #32
 80022f6:	f383 8811 	msr	BASEPRI, r3
  p = (event_listener_t *)esp;
 80022fa:	4946      	ldr	r1, [pc, #280]	; (8002414 <can_rx.lto_priv.48+0x394>)
 80022fc:	000a      	movs	r2, r1
 80022fe:	e003      	b.n	8002308 <can_rx.lto_priv.48+0x288>
    if (p->next == elp) {
 8002300:	a809      	add	r0, sp, #36	; 0x24
 8002302:	4283      	cmp	r3, r0
 8002304:	d056      	beq.n	80023b4 <can_rx.lto_priv.48+0x334>
 8002306:	001a      	movs	r2, r3
  while (p->next != (event_listener_t *)esp) {
 8002308:	6813      	ldr	r3, [r2, #0]
 800230a:	428b      	cmp	r3, r1
 800230c:	d1f8      	bne.n	8002300 <can_rx.lto_priv.48+0x280>
 800230e:	2300      	movs	r3, #0
 8002310:	f383 8811 	msr	BASEPRI, r3
        }
    }

    //Unregister RX event before terminating thread
    chEvtUnregister(&CAND1.rxfull_event, &el);
}
 8002314:	b015      	add	sp, #84	; 0x54
 8002316:	bc3c      	pop	{r2, r3, r4, r5}
 8002318:	4690      	mov	r8, r2
 800231a:	4699      	mov	r9, r3
 800231c:	46a2      	mov	sl, r4
 800231e:	46ab      	mov	fp, r5
 8002320:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002322:	2300      	movs	r3, #0
 8002324:	f383 8811 	msr	BASEPRI, r3
 8002328:	e6d3      	b.n	80020d2 <can_rx.lto_priv.48+0x52>
    signed int i_milliamps    = INT_MIN;
 800232a:	2080      	movs	r0, #128	; 0x80
 800232c:	0600      	lsls	r0, r0, #24
 800232e:	e79e      	b.n	800226e <can_rx.lto_priv.48+0x1ee>
    {
        vcc_bits          = ((d->VCC_MSB << 8) | d->VCC_LSB);
 8002330:	0218      	lsls	r0, r3, #8
 8002332:	4308      	orrs	r0, r1
        vcc_volts_d       = 2.5 + ((double)(vcc_bits & 0x3fff) * 0.00030518 ) ;
 8002334:	0480      	lsls	r0, r0, #18
 8002336:	0c80      	lsrs	r0, r0, #18
 8002338:	f7ff fd74 	bl	8001e24 <__aeabi_i2d>
 800233c:	4a36      	ldr	r2, [pc, #216]	; (8002418 <can_rx.lto_priv.48+0x398>)
 800233e:	4b37      	ldr	r3, [pc, #220]	; (800241c <can_rx.lto_priv.48+0x39c>)
 8002340:	f7ff fabc 	bl	80018bc <__aeabi_dmul>
 8002344:	2200      	movs	r2, #0
 8002346:	4b36      	ldr	r3, [pc, #216]	; (8002420 <can_rx.lto_priv.48+0x3a0>)
 8002348:	f7fe fc74 	bl	8000c34 <__aeabi_dadd>
        vcc_millivolts    = (signed int)incr_rnd(vcc_volts_d * 1000, 0.1);
 800234c:	2200      	movs	r2, #0
 800234e:	4b2c      	ldr	r3, [pc, #176]	; (8002400 <can_rx.lto_priv.48+0x380>)
 8002350:	f7ff fab4 	bl	80018bc <__aeabi_dmul>
    y = d / m;
 8002354:	4a2b      	ldr	r2, [pc, #172]	; (8002404 <can_rx.lto_priv.48+0x384>)
 8002356:	4b2c      	ldr	r3, [pc, #176]	; (8002408 <can_rx.lto_priv.48+0x388>)
 8002358:	f7fe ff7c 	bl	8001254 <__aeabi_ddiv>
    q = round_nearest(y);
 800235c:	f7ff fda4 	bl	8001ea8 <__aeabi_d2f>
 8002360:	2100      	movs	r1, #0
 8002362:	4681      	mov	r9, r0
 8002364:	f7fe f848 	bl	80003f8 <__aeabi_fcmplt>
 8002368:	21fc      	movs	r1, #252	; 0xfc
 800236a:	0589      	lsls	r1, r1, #22
 800236c:	2800      	cmp	r0, #0
 800236e:	d132      	bne.n	80023d6 <can_rx.lto_priv.48+0x356>
 8002370:	4648      	mov	r0, r9
 8002372:	f7fe f869 	bl	8000448 <__aeabi_fadd>
 8002376:	f7fe fc3d 	bl	8000bf4 <__aeabi_f2iz>
    z = q * m;
 800237a:	f7ff fd53 	bl	8001e24 <__aeabi_i2d>
 800237e:	4a21      	ldr	r2, [pc, #132]	; (8002404 <can_rx.lto_priv.48+0x384>)
 8002380:	4b21      	ldr	r3, [pc, #132]	; (8002408 <can_rx.lto_priv.48+0x388>)
 8002382:	f7ff fa9b 	bl	80018bc <__aeabi_dmul>
 8002386:	f7ff fd19 	bl	8001dbc <__aeabi_d2iz>
 800238a:	4681      	mov	r9, r0
 800238c:	e735      	b.n	80021fa <can_rx.lto_priv.48+0x17a>
        tint_C            = sign_extend_13bit((d->T_INT_MSB << 8) | d->T_INT_LSB);
 800238e:	207f      	movs	r0, #127	; 0x7f
 8002390:	4002      	ands	r2, r0
 8002392:	4660      	mov	r0, ip
 8002394:	0212      	lsls	r2, r2, #8
 8002396:	4302      	orrs	r2, r0
 8002398:	04d2      	lsls	r2, r2, #19
 800239a:	14d2      	asrs	r2, r2, #19
 800239c:	17d0      	asrs	r0, r2, #31
 800239e:	370f      	adds	r7, #15
 80023a0:	4007      	ands	r7, r0
 80023a2:	18bf      	adds	r7, r7, r2
 80023a4:	113f      	asrs	r7, r7, #4
 80023a6:	e722      	b.n	80021ee <can_rx.lto_priv.48+0x16e>
 80023a8:	1c28      	adds	r0, r5, #0
 80023aa:	f7fe fa87 	bl	80008bc <__aeabi_fsub>
 80023ae:	f7fe fc21 	bl	8000bf4 <__aeabi_f2iz>
 80023b2:	e750      	b.n	8002256 <can_rx.lto_priv.48+0x1d6>
      p->next = elp->next;
 80023b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80023b6:	6013      	str	r3, [r2, #0]
 80023b8:	e7a9      	b.n	800230e <can_rx.lto_priv.48+0x28e>
    {
        //clear dv bit
        d->V3_MSB      = ((~(1 << 7)) & d->V3_MSB);
        text_C         = sign_extend_13bit((d->V3_MSB << 8) | d->V3_LSB);
 80023ba:	4642      	mov	r2, r8
 80023bc:	237f      	movs	r3, #127	; 0x7f
 80023be:	4013      	ands	r3, r2
 80023c0:	9a06      	ldr	r2, [sp, #24]
 80023c2:	021b      	lsls	r3, r3, #8
 80023c4:	4313      	orrs	r3, r2
 80023c6:	220f      	movs	r2, #15
    struct
    {
        signed int x: 13;
    } s;

    r = s.x = x;
 80023c8:	04db      	lsls	r3, r3, #19
 80023ca:	14db      	asrs	r3, r3, #19
 80023cc:	17d9      	asrs	r1, r3, #31
 80023ce:	400a      	ands	r2, r1
 80023d0:	18d3      	adds	r3, r2, r3
 80023d2:	111b      	asrs	r3, r3, #4
 80023d4:	e759      	b.n	800228a <can_rx.lto_priv.48+0x20a>
 80023d6:	4648      	mov	r0, r9
 80023d8:	f7fe fa70 	bl	80008bc <__aeabi_fsub>
 80023dc:	f7fe fc0a 	bl	8000bf4 <__aeabi_f2iz>
 80023e0:	e7cb      	b.n	800237a <can_rx.lto_priv.48+0x2fa>
 80023e2:	46c0      	nop			; (mov r8, r8)
 80023e4:	200008a8 	.word	0x200008a8
 80023e8:	08004384 	.word	0x08004384
 80023ec:	20000410 	.word	0x20000410
 80023f0:	3cfb88f8 	.word	0x3cfb88f8
 80023f4:	3ef45d04 	.word	0x3ef45d04
 80023f8:	70a3d70a 	.word	0x70a3d70a
 80023fc:	3fc70a3d 	.word	0x3fc70a3d
 8002400:	408f4000 	.word	0x408f4000
 8002404:	9999999a 	.word	0x9999999a
 8002408:	3fb99999 	.word	0x3fb99999
 800240c:	08004390 	.word	0x08004390
 8002410:	20000478 	.word	0x20000478
 8002414:	20000428 	.word	0x20000428
 8002418:	1e908ed9 	.word	0x1e908ed9
 800241c:	3f340012 	.word	0x3f340012
 8002420:	40040000 	.word	0x40040000
	...

08002430 <VectorB0>:
 * @brief   TIM2 interrupt handler.
 * @details This interrupt is used for system tick in free running mode.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(ST_HANDLER) {
 8002430:	b5f0      	push	{r4, r5, r6, r7, lr}
  OSAL_IRQ_PROLOGUE();

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
 8002432:	2780      	movs	r7, #128	; 0x80
OSAL_IRQ_HANDLER(ST_HANDLER) {
 8002434:	46c6      	mov	lr, r8
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
 8002436:	05ff      	lsls	r7, r7, #23
 8002438:	693b      	ldr	r3, [r7, #16]
OSAL_IRQ_HANDLER(ST_HANDLER) {
 800243a:	b500      	push	{lr}
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
 800243c:	079b      	lsls	r3, r3, #30
 800243e:	d404      	bmi.n	800244a <VectorB0+0x1a>
    osalSysLockFromISR();
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
 8002440:	f001 fb46 	bl	8003ad0 <_port_irq_epilogue>
}
 8002444:	bc04      	pop	{r2}
 8002446:	4690      	mov	r8, r2
 8002448:	bdf0      	pop	{r4, r5, r6, r7, pc}
    STM32_ST_TIM->SR = 0U;
 800244a:	2300      	movs	r3, #0
 800244c:	613b      	str	r3, [r7, #16]
 800244e:	3320      	adds	r3, #32
 8002450:	f383 8811 	msr	BASEPRI, r3
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  virtual_timer_t *vtp;
  systime_t now, delta;

  /* First timer to be processed.*/
  vtp = ch.vtlist.next;
 8002454:	4c1b      	ldr	r4, [pc, #108]	; (80024c4 <VectorB0+0x94>)
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8002456:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002458:	69e3      	ldr	r3, [r4, #28]

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->delta <= (systime_t)(now - ch.vtlist.lasttime)) {
 800245a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800245c:	6899      	ldr	r1, [r3, #8]
 800245e:	1a85      	subs	r5, r0, r2
 8002460:	428d      	cmp	r5, r1
 8002462:	d31b      	bcc.n	800249c <VectorB0+0x6c>
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.lasttime += vtp->delta;

    vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 8002464:	0026      	movs	r6, r4
    ch.vtlist.next = vtp->next;
    fn = vtp->func;
    vtp->func = NULL;
 8002466:	2500      	movs	r5, #0
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
 8002468:	46b8      	mov	r8, r7
    vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 800246a:	361c      	adds	r6, #28
    ch.vtlist.lasttime += vtp->delta;
 800246c:	1852      	adds	r2, r2, r1
 800246e:	62a2      	str	r2, [r4, #40]	; 0x28
    vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 8002470:	681a      	ldr	r2, [r3, #0]
    fn = vtp->func;
 8002472:	68d9      	ldr	r1, [r3, #12]
    vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 8002474:	6056      	str	r6, [r2, #4]
    ch.vtlist.next = vtp->next;
 8002476:	61e2      	str	r2, [r4, #28]
    vtp->func = NULL;
 8002478:	60dd      	str	r5, [r3, #12]

    /* if the list becomes empty then the timer is stopped.*/
    if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 800247a:	42b2      	cmp	r2, r6
 800247c:	d01d      	beq.n	80024ba <VectorB0+0x8a>
 800247e:	f385 8811 	msr	BASEPRI, r5
       and in order to give a preemption chance to higher priority
       interrupts.*/
    chSysUnlockFromISR();

    /* The callback is invoked outside the kernel critical zone.*/
    fn(vtp->par);
 8002482:	6918      	ldr	r0, [r3, #16]
 8002484:	4788      	blx	r1
 8002486:	2320      	movs	r3, #32
 8002488:	f383 8811 	msr	BASEPRI, r3
  return (systime_t)STM32_ST_TIM->CNT;
 800248c:	4642      	mov	r2, r8
       of the list.*/
    chSysLockFromISR();

    /* Next element in the list, the current time could have advanced so
       recalculating the time window.*/
    vtp = ch.vtlist.next;
 800248e:	69e3      	ldr	r3, [r4, #28]
 8002490:	6a50      	ldr	r0, [r2, #36]	; 0x24
  while (vtp->delta <= (systime_t)(now - ch.vtlist.lasttime)) {
 8002492:	6899      	ldr	r1, [r3, #8]
 8002494:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002496:	1a87      	subs	r7, r0, r2
 8002498:	42b9      	cmp	r1, r7
 800249a:	d9e7      	bls.n	800246c <VectorB0+0x3c>
    now = chVTGetSystemTimeX();
  }

  /* if the list is empty, nothing else to do.*/
  if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 800249c:	4c0a      	ldr	r4, [pc, #40]	; (80024c8 <VectorB0+0x98>)
 800249e:	42a3      	cmp	r3, r4
 80024a0:	d007      	beq.n	80024b2 <VectorB0+0x82>
    return;
  }

  /* Recalculating the next alarm time.*/
  delta = ch.vtlist.lasttime + vtp->delta - now;
 80024a2:	188a      	adds	r2, r1, r2
 80024a4:	1a12      	subs	r2, r2, r0
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
  }
  port_timer_set_alarm(now + delta);
 80024a6:	2a02      	cmp	r2, #2
 80024a8:	d30a      	bcc.n	80024c0 <VectorB0+0x90>
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 80024aa:	2380      	movs	r3, #128	; 0x80
 80024ac:	1812      	adds	r2, r2, r0
 80024ae:	05db      	lsls	r3, r3, #23
 80024b0:	635a      	str	r2, [r3, #52]	; 0x34
 80024b2:	2300      	movs	r3, #0
 80024b4:	f383 8811 	msr	BASEPRI, r3
 80024b8:	e7c2      	b.n	8002440 <VectorB0+0x10>
  STM32_ST_TIM->DIER = 0;
 80024ba:	4642      	mov	r2, r8
 80024bc:	60d5      	str	r5, [r2, #12]
 80024be:	e7de      	b.n	800247e <VectorB0+0x4e>
 80024c0:	2202      	movs	r2, #2
 80024c2:	e7f2      	b.n	80024aa <VectorB0+0x7a>
 80024c4:	200008a8 	.word	0x200008a8
 80024c8:	200008c4 	.word	0x200008c4
 80024cc:	00000000 	.word	0x00000000

080024d0 <Vector158>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH7_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 80024d0:	213d      	movs	r1, #61	; 0x3d
 80024d2:	4a08      	ldr	r2, [pc, #32]	; (80024f4 <Vector158+0x24>)
OSAL_IRQ_HANDLER(STM32_DMA2_CH7_HANDLER) {
 80024d4:	b510      	push	{r4, lr}
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 80024d6:	6853      	ldr	r3, [r2, #4]
 80024d8:	0d9b      	lsrs	r3, r3, #22
 80024da:	4019      	ands	r1, r3
  DMA2->HIFCR = flags << 22U;
 80024dc:	058b      	lsls	r3, r1, #22
 80024de:	60d3      	str	r3, [r2, #12]
  if (dma_isr_redir[15].dma_func)
 80024e0:	4a05      	ldr	r2, [pc, #20]	; (80024f8 <Vector158+0x28>)
 80024e2:	6f93      	ldr	r3, [r2, #120]	; 0x78
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d001      	beq.n	80024ec <Vector158+0x1c>
    dma_isr_redir[15].dma_func(dma_isr_redir[15].dma_param, flags);
 80024e8:	6fd0      	ldr	r0, [r2, #124]	; 0x7c
 80024ea:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 80024ec:	f001 faf0 	bl	8003ad0 <_port_irq_epilogue>
}
 80024f0:	bd10      	pop	{r4, pc}
 80024f2:	46c0      	nop			; (mov r8, r8)
 80024f4:	40026400 	.word	0x40026400
 80024f8:	20000a08 	.word	0x20000a08
 80024fc:	00000000 	.word	0x00000000

08002500 <Vector154>:
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8002500:	213d      	movs	r1, #61	; 0x3d
 8002502:	4a08      	ldr	r2, [pc, #32]	; (8002524 <Vector154+0x24>)
OSAL_IRQ_HANDLER(STM32_DMA2_CH6_HANDLER) {
 8002504:	b510      	push	{r4, lr}
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8002506:	6853      	ldr	r3, [r2, #4]
 8002508:	0c1b      	lsrs	r3, r3, #16
 800250a:	4019      	ands	r1, r3
  DMA2->HIFCR = flags << 16U;
 800250c:	040b      	lsls	r3, r1, #16
 800250e:	60d3      	str	r3, [r2, #12]
  if (dma_isr_redir[14].dma_func)
 8002510:	4a05      	ldr	r2, [pc, #20]	; (8002528 <Vector154+0x28>)
 8002512:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8002514:	2b00      	cmp	r3, #0
 8002516:	d001      	beq.n	800251c <Vector154+0x1c>
    dma_isr_redir[14].dma_func(dma_isr_redir[14].dma_param, flags);
 8002518:	6f50      	ldr	r0, [r2, #116]	; 0x74
 800251a:	4798      	blx	r3
  OSAL_IRQ_EPILOGUE();
 800251c:	f001 fad8 	bl	8003ad0 <_port_irq_epilogue>
}
 8002520:	bd10      	pop	{r4, pc}
 8002522:	46c0      	nop			; (mov r8, r8)
 8002524:	40026400 	.word	0x40026400
 8002528:	20000a08 	.word	0x20000a08
 800252c:	00000000 	.word	0x00000000

08002530 <Vector150>:
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8002530:	213d      	movs	r1, #61	; 0x3d
 8002532:	4a08      	ldr	r2, [pc, #32]	; (8002554 <Vector150+0x24>)
OSAL_IRQ_HANDLER(STM32_DMA2_CH5_HANDLER) {
 8002534:	b510      	push	{r4, lr}
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8002536:	6853      	ldr	r3, [r2, #4]
 8002538:	099b      	lsrs	r3, r3, #6
 800253a:	4019      	ands	r1, r3
  DMA2->HIFCR = flags << 6U;
 800253c:	018b      	lsls	r3, r1, #6
 800253e:	60d3      	str	r3, [r2, #12]
  if (dma_isr_redir[13].dma_func)
 8002540:	4a05      	ldr	r2, [pc, #20]	; (8002558 <Vector150+0x28>)
 8002542:	6e93      	ldr	r3, [r2, #104]	; 0x68
 8002544:	2b00      	cmp	r3, #0
 8002546:	d001      	beq.n	800254c <Vector150+0x1c>
    dma_isr_redir[13].dma_func(dma_isr_redir[13].dma_param, flags);
 8002548:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 800254a:	4798      	blx	r3
  OSAL_IRQ_EPILOGUE();
 800254c:	f001 fac0 	bl	8003ad0 <_port_irq_epilogue>
}
 8002550:	bd10      	pop	{r4, pc}
 8002552:	46c0      	nop			; (mov r8, r8)
 8002554:	40026400 	.word	0x40026400
 8002558:	20000a08 	.word	0x20000a08
 800255c:	00000000 	.word	0x00000000

08002560 <Vector130>:
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8002560:	213d      	movs	r1, #61	; 0x3d
 8002562:	4b07      	ldr	r3, [pc, #28]	; (8002580 <Vector130+0x20>)
OSAL_IRQ_HANDLER(STM32_DMA2_CH4_HANDLER) {
 8002564:	b510      	push	{r4, lr}
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8002566:	685a      	ldr	r2, [r3, #4]
 8002568:	4011      	ands	r1, r2
  if (dma_isr_redir[12].dma_func)
 800256a:	4a06      	ldr	r2, [pc, #24]	; (8002584 <Vector130+0x24>)
  DMA2->HIFCR = flags << 0U;
 800256c:	60d9      	str	r1, [r3, #12]
  if (dma_isr_redir[12].dma_func)
 800256e:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8002570:	2b00      	cmp	r3, #0
 8002572:	d001      	beq.n	8002578 <Vector130+0x18>
    dma_isr_redir[12].dma_func(dma_isr_redir[12].dma_param, flags);
 8002574:	6e50      	ldr	r0, [r2, #100]	; 0x64
 8002576:	4798      	blx	r3
  OSAL_IRQ_EPILOGUE();
 8002578:	f001 faaa 	bl	8003ad0 <_port_irq_epilogue>
}
 800257c:	bd10      	pop	{r4, pc}
 800257e:	46c0      	nop			; (mov r8, r8)
 8002580:	40026400 	.word	0x40026400
 8002584:	20000a08 	.word	0x20000a08
	...

08002590 <Vector12C>:
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8002590:	213d      	movs	r1, #61	; 0x3d
 8002592:	4a08      	ldr	r2, [pc, #32]	; (80025b4 <Vector12C+0x24>)
OSAL_IRQ_HANDLER(STM32_DMA2_CH3_HANDLER) {
 8002594:	b510      	push	{r4, lr}
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8002596:	6813      	ldr	r3, [r2, #0]
 8002598:	0d9b      	lsrs	r3, r3, #22
 800259a:	4019      	ands	r1, r3
  DMA2->LIFCR = flags << 22U;
 800259c:	058b      	lsls	r3, r1, #22
 800259e:	6093      	str	r3, [r2, #8]
  if (dma_isr_redir[11].dma_func)
 80025a0:	4a05      	ldr	r2, [pc, #20]	; (80025b8 <Vector12C+0x28>)
 80025a2:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d001      	beq.n	80025ac <Vector12C+0x1c>
    dma_isr_redir[11].dma_func(dma_isr_redir[11].dma_param, flags);
 80025a8:	6dd0      	ldr	r0, [r2, #92]	; 0x5c
 80025aa:	4798      	blx	r3
  OSAL_IRQ_EPILOGUE();
 80025ac:	f001 fa90 	bl	8003ad0 <_port_irq_epilogue>
}
 80025b0:	bd10      	pop	{r4, pc}
 80025b2:	46c0      	nop			; (mov r8, r8)
 80025b4:	40026400 	.word	0x40026400
 80025b8:	20000a08 	.word	0x20000a08
 80025bc:	00000000 	.word	0x00000000

080025c0 <Vector128>:
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 80025c0:	213d      	movs	r1, #61	; 0x3d
 80025c2:	4a08      	ldr	r2, [pc, #32]	; (80025e4 <Vector128+0x24>)
OSAL_IRQ_HANDLER(STM32_DMA2_CH2_HANDLER) {
 80025c4:	b510      	push	{r4, lr}
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 80025c6:	6813      	ldr	r3, [r2, #0]
 80025c8:	0c1b      	lsrs	r3, r3, #16
 80025ca:	4019      	ands	r1, r3
  DMA2->LIFCR = flags << 16U;
 80025cc:	040b      	lsls	r3, r1, #16
 80025ce:	6093      	str	r3, [r2, #8]
  if (dma_isr_redir[10].dma_func)
 80025d0:	4a05      	ldr	r2, [pc, #20]	; (80025e8 <Vector128+0x28>)
 80025d2:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d001      	beq.n	80025dc <Vector128+0x1c>
    dma_isr_redir[10].dma_func(dma_isr_redir[10].dma_param, flags);
 80025d8:	6d50      	ldr	r0, [r2, #84]	; 0x54
 80025da:	4798      	blx	r3
  OSAL_IRQ_EPILOGUE();
 80025dc:	f001 fa78 	bl	8003ad0 <_port_irq_epilogue>
}
 80025e0:	bd10      	pop	{r4, pc}
 80025e2:	46c0      	nop			; (mov r8, r8)
 80025e4:	40026400 	.word	0x40026400
 80025e8:	20000a08 	.word	0x20000a08
 80025ec:	00000000 	.word	0x00000000

080025f0 <Vector124>:
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 80025f0:	213d      	movs	r1, #61	; 0x3d
 80025f2:	4a08      	ldr	r2, [pc, #32]	; (8002614 <Vector124+0x24>)
OSAL_IRQ_HANDLER(STM32_DMA2_CH1_HANDLER) {
 80025f4:	b510      	push	{r4, lr}
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 80025f6:	6813      	ldr	r3, [r2, #0]
 80025f8:	099b      	lsrs	r3, r3, #6
 80025fa:	4019      	ands	r1, r3
  DMA2->LIFCR = flags << 6U;
 80025fc:	018b      	lsls	r3, r1, #6
 80025fe:	6093      	str	r3, [r2, #8]
  if (dma_isr_redir[9].dma_func)
 8002600:	4a05      	ldr	r2, [pc, #20]	; (8002618 <Vector124+0x28>)
 8002602:	6c93      	ldr	r3, [r2, #72]	; 0x48
 8002604:	2b00      	cmp	r3, #0
 8002606:	d001      	beq.n	800260c <Vector124+0x1c>
    dma_isr_redir[9].dma_func(dma_isr_redir[9].dma_param, flags);
 8002608:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 800260a:	4798      	blx	r3
  OSAL_IRQ_EPILOGUE();
 800260c:	f001 fa60 	bl	8003ad0 <_port_irq_epilogue>
}
 8002610:	bd10      	pop	{r4, pc}
 8002612:	46c0      	nop			; (mov r8, r8)
 8002614:	40026400 	.word	0x40026400
 8002618:	20000a08 	.word	0x20000a08
 800261c:	00000000 	.word	0x00000000

08002620 <Vector120>:
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8002620:	213d      	movs	r1, #61	; 0x3d
 8002622:	4b07      	ldr	r3, [pc, #28]	; (8002640 <Vector120+0x20>)
OSAL_IRQ_HANDLER(STM32_DMA2_CH0_HANDLER) {
 8002624:	b510      	push	{r4, lr}
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	4011      	ands	r1, r2
  if (dma_isr_redir[8].dma_func)
 800262a:	4a06      	ldr	r2, [pc, #24]	; (8002644 <Vector120+0x24>)
  DMA2->LIFCR = flags << 0U;
 800262c:	6099      	str	r1, [r3, #8]
  if (dma_isr_redir[8].dma_func)
 800262e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002630:	2b00      	cmp	r3, #0
 8002632:	d001      	beq.n	8002638 <Vector120+0x18>
    dma_isr_redir[8].dma_func(dma_isr_redir[8].dma_param, flags);
 8002634:	6c50      	ldr	r0, [r2, #68]	; 0x44
 8002636:	4798      	blx	r3
  OSAL_IRQ_EPILOGUE();
 8002638:	f001 fa4a 	bl	8003ad0 <_port_irq_epilogue>
}
 800263c:	bd10      	pop	{r4, pc}
 800263e:	46c0      	nop			; (mov r8, r8)
 8002640:	40026400 	.word	0x40026400
 8002644:	20000a08 	.word	0x20000a08
	...

08002650 <VectorFC>:
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8002650:	213d      	movs	r1, #61	; 0x3d
 8002652:	4a08      	ldr	r2, [pc, #32]	; (8002674 <VectorFC+0x24>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
 8002654:	b510      	push	{r4, lr}
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8002656:	6853      	ldr	r3, [r2, #4]
 8002658:	0d9b      	lsrs	r3, r3, #22
 800265a:	4019      	ands	r1, r3
  DMA1->HIFCR = flags << 22U;
 800265c:	058b      	lsls	r3, r1, #22
 800265e:	60d3      	str	r3, [r2, #12]
  if (dma_isr_redir[7].dma_func)
 8002660:	4a05      	ldr	r2, [pc, #20]	; (8002678 <VectorFC+0x28>)
 8002662:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8002664:	2b00      	cmp	r3, #0
 8002666:	d001      	beq.n	800266c <VectorFC+0x1c>
    dma_isr_redir[7].dma_func(dma_isr_redir[7].dma_param, flags);
 8002668:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
 800266a:	4798      	blx	r3
  OSAL_IRQ_EPILOGUE();
 800266c:	f001 fa30 	bl	8003ad0 <_port_irq_epilogue>
}
 8002670:	bd10      	pop	{r4, pc}
 8002672:	46c0      	nop			; (mov r8, r8)
 8002674:	40026000 	.word	0x40026000
 8002678:	20000a08 	.word	0x20000a08
 800267c:	00000000 	.word	0x00000000

08002680 <Vector84>:
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8002680:	213d      	movs	r1, #61	; 0x3d
 8002682:	4a08      	ldr	r2, [pc, #32]	; (80026a4 <Vector84+0x24>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
 8002684:	b510      	push	{r4, lr}
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8002686:	6853      	ldr	r3, [r2, #4]
 8002688:	0c1b      	lsrs	r3, r3, #16
 800268a:	4019      	ands	r1, r3
  DMA1->HIFCR = flags << 16U;
 800268c:	040b      	lsls	r3, r1, #16
 800268e:	60d3      	str	r3, [r2, #12]
  if (dma_isr_redir[6].dma_func)
 8002690:	4a05      	ldr	r2, [pc, #20]	; (80026a8 <Vector84+0x28>)
 8002692:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002694:	2b00      	cmp	r3, #0
 8002696:	d001      	beq.n	800269c <Vector84+0x1c>
    dma_isr_redir[6].dma_func(dma_isr_redir[6].dma_param, flags);
 8002698:	6b50      	ldr	r0, [r2, #52]	; 0x34
 800269a:	4798      	blx	r3
  OSAL_IRQ_EPILOGUE();
 800269c:	f001 fa18 	bl	8003ad0 <_port_irq_epilogue>
}
 80026a0:	bd10      	pop	{r4, pc}
 80026a2:	46c0      	nop			; (mov r8, r8)
 80026a4:	40026000 	.word	0x40026000
 80026a8:	20000a08 	.word	0x20000a08
 80026ac:	00000000 	.word	0x00000000

080026b0 <Vector80>:
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 80026b0:	213d      	movs	r1, #61	; 0x3d
 80026b2:	4a08      	ldr	r2, [pc, #32]	; (80026d4 <Vector80+0x24>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
 80026b4:	b510      	push	{r4, lr}
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 80026b6:	6853      	ldr	r3, [r2, #4]
 80026b8:	099b      	lsrs	r3, r3, #6
 80026ba:	4019      	ands	r1, r3
  DMA1->HIFCR = flags << 6U;
 80026bc:	018b      	lsls	r3, r1, #6
 80026be:	60d3      	str	r3, [r2, #12]
  if (dma_isr_redir[5].dma_func)
 80026c0:	4a05      	ldr	r2, [pc, #20]	; (80026d8 <Vector80+0x28>)
 80026c2:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d001      	beq.n	80026cc <Vector80+0x1c>
    dma_isr_redir[5].dma_func(dma_isr_redir[5].dma_param, flags);
 80026c8:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 80026ca:	4798      	blx	r3
  OSAL_IRQ_EPILOGUE();
 80026cc:	f001 fa00 	bl	8003ad0 <_port_irq_epilogue>
}
 80026d0:	bd10      	pop	{r4, pc}
 80026d2:	46c0      	nop			; (mov r8, r8)
 80026d4:	40026000 	.word	0x40026000
 80026d8:	20000a08 	.word	0x20000a08
 80026dc:	00000000 	.word	0x00000000

080026e0 <Vector7C>:
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 80026e0:	213d      	movs	r1, #61	; 0x3d
 80026e2:	4b07      	ldr	r3, [pc, #28]	; (8002700 <Vector7C+0x20>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
 80026e4:	b510      	push	{r4, lr}
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 80026e6:	685a      	ldr	r2, [r3, #4]
 80026e8:	4011      	ands	r1, r2
  if (dma_isr_redir[4].dma_func)
 80026ea:	4a06      	ldr	r2, [pc, #24]	; (8002704 <Vector7C+0x24>)
  DMA1->HIFCR = flags << 0U;
 80026ec:	60d9      	str	r1, [r3, #12]
  if (dma_isr_redir[4].dma_func)
 80026ee:	6a13      	ldr	r3, [r2, #32]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d001      	beq.n	80026f8 <Vector7C+0x18>
    dma_isr_redir[4].dma_func(dma_isr_redir[4].dma_param, flags);
 80026f4:	6a50      	ldr	r0, [r2, #36]	; 0x24
 80026f6:	4798      	blx	r3
  OSAL_IRQ_EPILOGUE();
 80026f8:	f001 f9ea 	bl	8003ad0 <_port_irq_epilogue>
}
 80026fc:	bd10      	pop	{r4, pc}
 80026fe:	46c0      	nop			; (mov r8, r8)
 8002700:	40026000 	.word	0x40026000
 8002704:	20000a08 	.word	0x20000a08
	...

08002710 <Vector78>:
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8002710:	213d      	movs	r1, #61	; 0x3d
 8002712:	4a08      	ldr	r2, [pc, #32]	; (8002734 <Vector78+0x24>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
 8002714:	b510      	push	{r4, lr}
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8002716:	6813      	ldr	r3, [r2, #0]
 8002718:	0d9b      	lsrs	r3, r3, #22
 800271a:	4019      	ands	r1, r3
  DMA1->LIFCR = flags << 22U;
 800271c:	058b      	lsls	r3, r1, #22
 800271e:	6093      	str	r3, [r2, #8]
  if (dma_isr_redir[3].dma_func)
 8002720:	4a05      	ldr	r2, [pc, #20]	; (8002738 <Vector78+0x28>)
 8002722:	6993      	ldr	r3, [r2, #24]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d001      	beq.n	800272c <Vector78+0x1c>
    dma_isr_redir[3].dma_func(dma_isr_redir[3].dma_param, flags);
 8002728:	69d0      	ldr	r0, [r2, #28]
 800272a:	4798      	blx	r3
  OSAL_IRQ_EPILOGUE();
 800272c:	f001 f9d0 	bl	8003ad0 <_port_irq_epilogue>
}
 8002730:	bd10      	pop	{r4, pc}
 8002732:	46c0      	nop			; (mov r8, r8)
 8002734:	40026000 	.word	0x40026000
 8002738:	20000a08 	.word	0x20000a08
 800273c:	00000000 	.word	0x00000000

08002740 <Vector74>:
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8002740:	213d      	movs	r1, #61	; 0x3d
 8002742:	4a08      	ldr	r2, [pc, #32]	; (8002764 <Vector74+0x24>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
 8002744:	b510      	push	{r4, lr}
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8002746:	6813      	ldr	r3, [r2, #0]
 8002748:	0c1b      	lsrs	r3, r3, #16
 800274a:	4019      	ands	r1, r3
  DMA1->LIFCR = flags << 16U;
 800274c:	040b      	lsls	r3, r1, #16
 800274e:	6093      	str	r3, [r2, #8]
  if (dma_isr_redir[2].dma_func)
 8002750:	4a05      	ldr	r2, [pc, #20]	; (8002768 <Vector74+0x28>)
 8002752:	6913      	ldr	r3, [r2, #16]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d001      	beq.n	800275c <Vector74+0x1c>
    dma_isr_redir[2].dma_func(dma_isr_redir[2].dma_param, flags);
 8002758:	6950      	ldr	r0, [r2, #20]
 800275a:	4798      	blx	r3
  OSAL_IRQ_EPILOGUE();
 800275c:	f001 f9b8 	bl	8003ad0 <_port_irq_epilogue>
}
 8002760:	bd10      	pop	{r4, pc}
 8002762:	46c0      	nop			; (mov r8, r8)
 8002764:	40026000 	.word	0x40026000
 8002768:	20000a08 	.word	0x20000a08
 800276c:	00000000 	.word	0x00000000

08002770 <Vector70>:
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8002770:	213d      	movs	r1, #61	; 0x3d
 8002772:	4a08      	ldr	r2, [pc, #32]	; (8002794 <Vector70+0x24>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
 8002774:	b510      	push	{r4, lr}
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8002776:	6813      	ldr	r3, [r2, #0]
 8002778:	099b      	lsrs	r3, r3, #6
 800277a:	4019      	ands	r1, r3
  DMA1->LIFCR = flags << 6U;
 800277c:	018b      	lsls	r3, r1, #6
 800277e:	6093      	str	r3, [r2, #8]
  if (dma_isr_redir[1].dma_func)
 8002780:	4a05      	ldr	r2, [pc, #20]	; (8002798 <Vector70+0x28>)
 8002782:	6893      	ldr	r3, [r2, #8]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d001      	beq.n	800278c <Vector70+0x1c>
    dma_isr_redir[1].dma_func(dma_isr_redir[1].dma_param, flags);
 8002788:	68d0      	ldr	r0, [r2, #12]
 800278a:	4798      	blx	r3
  OSAL_IRQ_EPILOGUE();
 800278c:	f001 f9a0 	bl	8003ad0 <_port_irq_epilogue>
}
 8002790:	bd10      	pop	{r4, pc}
 8002792:	46c0      	nop			; (mov r8, r8)
 8002794:	40026000 	.word	0x40026000
 8002798:	20000a08 	.word	0x20000a08
 800279c:	00000000 	.word	0x00000000

080027a0 <VectorD8>:
/**
 * @brief   USART2 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART2_HANDLER) {
 80027a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027a2:	4646      	mov	r6, r8
 80027a4:	46d6      	mov	lr, sl
 80027a6:	464f      	mov	r7, r9
  USART_TypeDef *u = sdp->usart;
 80027a8:	4d6b      	ldr	r5, [pc, #428]	; (8002958 <VectorD8+0x1b8>)
OSAL_IRQ_HANDLER(STM32_USART2_HANDLER) {
 80027aa:	b5c0      	push	{r6, r7, lr}
  USART_TypeDef *u = sdp->usart;
 80027ac:	6f6e      	ldr	r6, [r5, #116]	; 0x74
  uint16_t cr1 = u->CR1;
 80027ae:	68f3      	ldr	r3, [r6, #12]
 80027b0:	4698      	mov	r8, r3
  uint16_t sr = u->SR;
 80027b2:	6833      	ldr	r3, [r6, #0]
 80027b4:	b29c      	uxth	r4, r3
  if (sr & USART_SR_LBD) {
 80027b6:	05db      	lsls	r3, r3, #23
 80027b8:	d500      	bpl.n	80027bc <VectorD8+0x1c>
 80027ba:	e086      	b.n	80028ca <VectorD8+0x12a>
 80027bc:	2320      	movs	r3, #32
 80027be:	f383 8811 	msr	BASEPRI, r3
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 80027c2:	330f      	adds	r3, #15
 80027c4:	4223      	tst	r3, r4
 80027c6:	d04c      	beq.n	8002862 <VectorD8+0xc2>
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 80027c8:	4b64      	ldr	r3, [pc, #400]	; (800295c <VectorD8+0x1bc>)
    sts |= SD_PARITY_ERROR;
 80027ca:	2720      	movs	r7, #32
 80027cc:	4699      	mov	r9, r3
 80027ce:	e008      	b.n	80027e2 <VectorD8+0x42>
    b = (uint8_t)u->DR & sdp->rxmask;
 80027d0:	6873      	ldr	r3, [r6, #4]
 80027d2:	469a      	mov	sl, r3
    if (sr & USART_SR_RXNE)
 80027d4:	4227      	tst	r7, r4
 80027d6:	d11c      	bne.n	8002812 <VectorD8+0x72>
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 80027d8:	232f      	movs	r3, #47	; 0x2f
    sr = u->SR;
 80027da:	6834      	ldr	r4, [r6, #0]
 80027dc:	b2a4      	uxth	r4, r4
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 80027de:	4223      	tst	r3, r4
 80027e0:	d03f      	beq.n	8002862 <VectorD8+0xc2>
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
 80027e2:	0723      	lsls	r3, r4, #28
 80027e4:	d0f4      	beq.n	80027d0 <VectorD8+0x30>
  if (sr & USART_SR_ORE)
 80027e6:	0721      	lsls	r1, r4, #28
    sts |= SD_OVERRUN_ERROR;
 80027e8:	0fc9      	lsrs	r1, r1, #31
 80027ea:	01c9      	lsls	r1, r1, #7
  if (sr & USART_SR_PE)
 80027ec:	07e3      	lsls	r3, r4, #31
 80027ee:	d500      	bpl.n	80027f2 <VectorD8+0x52>
    sts |= SD_PARITY_ERROR;
 80027f0:	4339      	orrs	r1, r7
  if (sr & USART_SR_FE)
 80027f2:	07a3      	lsls	r3, r4, #30
 80027f4:	d501      	bpl.n	80027fa <VectorD8+0x5a>
    sts |= SD_FRAMING_ERROR;
 80027f6:	2340      	movs	r3, #64	; 0x40
 80027f8:	4319      	orrs	r1, r3
  if (sr & USART_SR_NE)
 80027fa:	0763      	lsls	r3, r4, #29
 80027fc:	d502      	bpl.n	8002804 <VectorD8+0x64>
    sts |= SD_NOISE_ERROR;
 80027fe:	2380      	movs	r3, #128	; 0x80
 8002800:	005b      	lsls	r3, r3, #1
 8002802:	4319      	orrs	r1, r3
 8002804:	4648      	mov	r0, r9
 8002806:	f001 fc03 	bl	8004010 <chEvtBroadcastFlagsI>
    b = (uint8_t)u->DR & sdp->rxmask;
 800280a:	6873      	ldr	r3, [r6, #4]
 800280c:	469a      	mov	sl, r3
    if (sr & USART_SR_RXNE)
 800280e:	4227      	tst	r7, r4
 8002810:	d0e2      	beq.n	80027d8 <VectorD8+0x38>
    b = (uint8_t)u->DR & sdp->rxmask;
 8002812:	2378      	movs	r3, #120	; 0x78
 8002814:	5cec      	ldrb	r4, [r5, r3]
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
 8002816:	696b      	ldr	r3, [r5, #20]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d045      	beq.n	80028a8 <VectorD8+0x108>
 */
msg_t iqPutI(input_queue_t *iqp, uint8_t b) {

  osalDbgCheckClassI();

  if (iqIsFullI(iqp)) {
 800281c:	6a2a      	ldr	r2, [r5, #32]
 800281e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002820:	429a      	cmp	r2, r3
 8002822:	d049      	beq.n	80028b8 <VectorD8+0x118>
    return MSG_TIMEOUT;
  }

  iqp->q_counter++;
 8002824:	696b      	ldr	r3, [r5, #20]
 8002826:	3301      	adds	r3, #1
 8002828:	616b      	str	r3, [r5, #20]
  *iqp->q_wrptr++ = b;
 800282a:	1c53      	adds	r3, r2, #1
 800282c:	622b      	str	r3, [r5, #32]
 800282e:	4653      	mov	r3, sl
 8002830:	4023      	ands	r3, r4
 8002832:	7013      	strb	r3, [r2, #0]
  if (iqp->q_wrptr >= iqp->q_top) {
 8002834:	6a2b      	ldr	r3, [r5, #32]
 8002836:	69ea      	ldr	r2, [r5, #28]
 8002838:	4293      	cmp	r3, r2
 800283a:	d301      	bcc.n	8002840 <VectorD8+0xa0>
    iqp->q_wrptr = iqp->q_buffer;
 800283c:	69ab      	ldr	r3, [r5, #24]
 800283e:	622b      	str	r3, [r5, #32]
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (queue_notempty(tqp)) {
 8002840:	002b      	movs	r3, r5
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->next != (const thread_t *)tqp);
 8002842:	68e8      	ldr	r0, [r5, #12]
 8002844:	330c      	adds	r3, #12
 8002846:	4298      	cmp	r0, r3
 8002848:	d0c6      	beq.n	80027d8 <VectorD8+0x38>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;

  tqp->next             = tp->queue.next;
 800284a:	6802      	ldr	r2, [r0, #0]
 800284c:	60ea      	str	r2, [r5, #12]
  tqp->next->queue.prev = (thread_t *)tqp;
 800284e:	6053      	str	r3, [r2, #4]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
 8002850:	2300      	movs	r3, #0
 8002852:	6203      	str	r3, [r0, #32]
  (void) chSchReadyI(tp);
 8002854:	f001 fbcc 	bl	8003ff0 <chSchReadyI>
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8002858:	232f      	movs	r3, #47	; 0x2f
    sr = u->SR;
 800285a:	6834      	ldr	r4, [r6, #0]
 800285c:	b2a4      	uxth	r4, r4
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 800285e:	4223      	tst	r3, r4
 8002860:	d1bf      	bne.n	80027e2 <VectorD8+0x42>
 8002862:	2300      	movs	r3, #0
 8002864:	f383 8811 	msr	BASEPRI, r3
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
 8002868:	4642      	mov	r2, r8
 800286a:	3380      	adds	r3, #128	; 0x80
 800286c:	4213      	tst	r3, r2
 800286e:	d001      	beq.n	8002874 <VectorD8+0xd4>
 8002870:	4223      	tst	r3, r4
 8002872:	d138      	bne.n	80028e6 <VectorD8+0x146>
  if (sr & USART_SR_TC) {
 8002874:	0663      	lsls	r3, r4, #25
 8002876:	d510      	bpl.n	800289a <VectorD8+0xfa>
 8002878:	2320      	movs	r3, #32
 800287a:	f383 8811 	msr	BASEPRI, r3
    if (oqIsEmptyI(&sdp->oqueue))
 800287e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8002880:	6caa      	ldr	r2, [r5, #72]	; 0x48
 8002882:	4293      	cmp	r3, r2
 8002884:	d052      	beq.n	800292c <VectorD8+0x18c>
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 8002886:	4642      	mov	r2, r8
 8002888:	4b35      	ldr	r3, [pc, #212]	; (8002960 <VectorD8+0x1c0>)
 800288a:	401a      	ands	r2, r3
    u->SR = ~USART_SR_TC;
 800288c:	2341      	movs	r3, #65	; 0x41
 800288e:	425b      	negs	r3, r3
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 8002890:	60f2      	str	r2, [r6, #12]
    u->SR = ~USART_SR_TC;
 8002892:	6033      	str	r3, [r6, #0]
 8002894:	2300      	movs	r3, #0
 8002896:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD2);

  OSAL_IRQ_EPILOGUE();
 800289a:	f001 f919 	bl	8003ad0 <_port_irq_epilogue>
}
 800289e:	bc1c      	pop	{r2, r3, r4}
 80028a0:	4690      	mov	r8, r2
 80028a2:	4699      	mov	r9, r3
 80028a4:	46a2      	mov	sl, r4
 80028a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028a8:	1d28      	adds	r0, r5, #4
 80028aa:	2104      	movs	r1, #4
 80028ac:	f001 fbb0 	bl	8004010 <chEvtBroadcastFlagsI>
  if (iqIsFullI(iqp)) {
 80028b0:	6a2a      	ldr	r2, [r5, #32]
 80028b2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d1b5      	bne.n	8002824 <VectorD8+0x84>
 80028b8:	696b      	ldr	r3, [r5, #20]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d0b2      	beq.n	8002824 <VectorD8+0x84>
 80028be:	2180      	movs	r1, #128	; 0x80
 80028c0:	1d28      	adds	r0, r5, #4
 80028c2:	00c9      	lsls	r1, r1, #3
 80028c4:	f001 fba4 	bl	8004010 <chEvtBroadcastFlagsI>
 80028c8:	e786      	b.n	80027d8 <VectorD8+0x38>
 80028ca:	2320      	movs	r3, #32
 80028cc:	f383 8811 	msr	BASEPRI, r3
 80028d0:	2180      	movs	r1, #128	; 0x80
 80028d2:	1d28      	adds	r0, r5, #4
 80028d4:	0089      	lsls	r1, r1, #2
 80028d6:	f001 fb9b 	bl	8004010 <chEvtBroadcastFlagsI>
    u->SR = ~USART_SR_LBD;
 80028da:	4b22      	ldr	r3, [pc, #136]	; (8002964 <VectorD8+0x1c4>)
 80028dc:	6033      	str	r3, [r6, #0]
 80028de:	2300      	movs	r3, #0
 80028e0:	f383 8811 	msr	BASEPRI, r3
 80028e4:	e76a      	b.n	80027bc <VectorD8+0x1c>
 80028e6:	3b60      	subs	r3, #96	; 0x60
 80028e8:	f383 8811 	msr	BASEPRI, r3
msg_t oqGetI(output_queue_t *oqp) {
  uint8_t b;

  osalDbgCheckClassI();

  if (oqIsEmptyI(oqp)) {
 80028ec:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80028ee:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d023      	beq.n	800293c <VectorD8+0x19c>
    return MSG_TIMEOUT;
  }

  oqp->q_counter++;
 80028f4:	6baa      	ldr	r2, [r5, #56]	; 0x38
 80028f6:	3201      	adds	r2, #1
 80028f8:	63aa      	str	r2, [r5, #56]	; 0x38
  b = *oqp->q_rdptr++;
 80028fa:	1c5a      	adds	r2, r3, #1
 80028fc:	64aa      	str	r2, [r5, #72]	; 0x48
 80028fe:	781f      	ldrb	r7, [r3, #0]
  if (oqp->q_rdptr >= oqp->q_top) {
 8002900:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8002902:	429a      	cmp	r2, r3
 8002904:	d301      	bcc.n	800290a <VectorD8+0x16a>
    oqp->q_rdptr = oqp->q_buffer;
 8002906:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8002908:	64ab      	str	r3, [r5, #72]	; 0x48
 800290a:	002b      	movs	r3, r5
  return (bool)(tqp->next != (const thread_t *)tqp);
 800290c:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800290e:	3330      	adds	r3, #48	; 0x30
 8002910:	4298      	cmp	r0, r3
 8002912:	d006      	beq.n	8002922 <VectorD8+0x182>
  tqp->next             = tp->queue.next;
 8002914:	6802      	ldr	r2, [r0, #0]
 8002916:	632a      	str	r2, [r5, #48]	; 0x30
  tqp->next->queue.prev = (thread_t *)tqp;
 8002918:	6053      	str	r3, [r2, #4]
  tp->u.rdymsg = msg;
 800291a:	2300      	movs	r3, #0
 800291c:	6203      	str	r3, [r0, #32]
  (void) chSchReadyI(tp);
 800291e:	f001 fb67 	bl	8003ff0 <chSchReadyI>
      u->DR = b;
 8002922:	6077      	str	r7, [r6, #4]
 8002924:	2300      	movs	r3, #0
 8002926:	f383 8811 	msr	BASEPRI, r3
 800292a:	e7a3      	b.n	8002874 <VectorD8+0xd4>
    if (oqIsEmptyI(&sdp->oqueue))
 800292c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800292e:	2b00      	cmp	r3, #0
 8002930:	d0a9      	beq.n	8002886 <VectorD8+0xe6>
 8002932:	1d28      	adds	r0, r5, #4
 8002934:	2110      	movs	r1, #16
 8002936:	f001 fb6b 	bl	8004010 <chEvtBroadcastFlagsI>
 800293a:	e7a4      	b.n	8002886 <VectorD8+0xe6>
  if (oqIsEmptyI(oqp)) {
 800293c:	6baa      	ldr	r2, [r5, #56]	; 0x38
 800293e:	2a00      	cmp	r2, #0
 8002940:	d0d8      	beq.n	80028f4 <VectorD8+0x154>
 8002942:	1d28      	adds	r0, r5, #4
 8002944:	2108      	movs	r1, #8
 8002946:	f001 fb63 	bl	8004010 <chEvtBroadcastFlagsI>
      u->CR1 = (cr1 & ~USART_CR1_TXEIE) | USART_CR1_TCIE;
 800294a:	4642      	mov	r2, r8
 800294c:	4b06      	ldr	r3, [pc, #24]	; (8002968 <VectorD8+0x1c8>)
 800294e:	4013      	ands	r3, r2
 8002950:	2240      	movs	r2, #64	; 0x40
 8002952:	4313      	orrs	r3, r2
 8002954:	60f3      	str	r3, [r6, #12]
 8002956:	e7e5      	b.n	8002924 <VectorD8+0x184>
 8002958:	20000478 	.word	0x20000478
 800295c:	2000047c 	.word	0x2000047c
 8002960:	0000ffbf 	.word	0x0000ffbf
 8002964:	fffffeff 	.word	0xfffffeff
 8002968:	0000ff3f 	.word	0x0000ff3f
 800296c:	00000000 	.word	0x00000000

08002970 <VectorBC>:
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @notapi
 */
static void i2c_lld_serve_event_interrupt(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;
 8002970:	4a3d      	ldr	r2, [pc, #244]	; (8002a68 <VectorBC+0xf8>)
/**
 * @brief   I2C1 event interrupt handler.
 *
 * @notapi
 */
OSAL_IRQ_HANDLER(STM32_I2C1_EVENT_HANDLER) {
 8002972:	b570      	push	{r4, r5, r6, lr}
  I2C_TypeDef *dp = i2cp->i2c;
 8002974:	6b54      	ldr	r4, [r2, #52]	; 0x34
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 8002976:	493d      	ldr	r1, [pc, #244]	; (8002a6c <VectorBC+0xfc>)
  uint32_t regSR2 = dp->SR2;
 8002978:	69a3      	ldr	r3, [r4, #24]
  uint32_t event = dp->SR1;
 800297a:	6965      	ldr	r5, [r4, #20]
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 800297c:	041b      	lsls	r3, r3, #16
 800297e:	432b      	orrs	r3, r5
 8002980:	021b      	lsls	r3, r3, #8
 8002982:	0a1b      	lsrs	r3, r3, #8
 8002984:	428b      	cmp	r3, r1
 8002986:	d04c      	beq.n	8002a22 <VectorBC+0xb2>
 8002988:	d81e      	bhi.n	80029c8 <VectorBC+0x58>
 800298a:	4939      	ldr	r1, [pc, #228]	; (8002a70 <VectorBC+0x100>)
 800298c:	428b      	cmp	r3, r1
 800298e:	d03b      	beq.n	8002a08 <VectorBC+0x98>
 8002990:	4938      	ldr	r1, [pc, #224]	; (8002a74 <VectorBC+0x104>)
 8002992:	428b      	cmp	r3, r1
 8002994:	d111      	bne.n	80029ba <VectorBC+0x4a>
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8002996:	6863      	ldr	r3, [r4, #4]
 8002998:	4937      	ldr	r1, [pc, #220]	; (8002a78 <VectorBC+0x108>)
 800299a:	400b      	ands	r3, r1
    dmaStreamEnable(i2cp->dmarx);
 800299c:	2101      	movs	r1, #1
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 800299e:	6063      	str	r3, [r4, #4]
    dmaStreamEnable(i2cp->dmarx);
 80029a0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	430a      	orrs	r2, r1
 80029a8:	601a      	str	r2, [r3, #0]
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
 80029aa:	2280      	movs	r2, #128	; 0x80
 80029ac:	6861      	ldr	r1, [r4, #4]
 80029ae:	0152      	lsls	r2, r2, #5
 80029b0:	430a      	orrs	r2, r1
 80029b2:	6062      	str	r2, [r4, #4]
    if (dmaStreamGetTransactionSize(i2cp->dmarx) < 2)
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d951      	bls.n	8002a5e <VectorBC+0xee>
  if (event & (I2C_SR1_ADDR | I2C_SR1_ADD10))
 80029ba:	230a      	movs	r3, #10
 80029bc:	422b      	tst	r3, r5
 80029be:	d000      	beq.n	80029c2 <VectorBC+0x52>
    (void)dp->SR2;
 80029c0:	69a3      	ldr	r3, [r4, #24]

  OSAL_IRQ_PROLOGUE();

  i2c_lld_serve_event_interrupt(&I2CD1);

  OSAL_IRQ_EPILOGUE();
 80029c2:	f001 f885 	bl	8003ad0 <_port_irq_epilogue>
}
 80029c6:	bd70      	pop	{r4, r5, r6, pc}
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 80029c8:	492c      	ldr	r1, [pc, #176]	; (8002a7c <VectorBC+0x10c>)
 80029ca:	428b      	cmp	r3, r1
 80029cc:	d011      	beq.n	80029f2 <VectorBC+0x82>
 80029ce:	492c      	ldr	r1, [pc, #176]	; (8002a80 <VectorBC+0x110>)
 80029d0:	428b      	cmp	r3, r1
 80029d2:	d1f2      	bne.n	80029ba <VectorBC+0x4a>
    if (dmaStreamGetTransactionSize(i2cp->dmarx) > 0) {
 80029d4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d028      	beq.n	8002a30 <VectorBC+0xc0>
      i2cp->addr |= 0x01;
 80029de:	2101      	movs	r1, #1
 80029e0:	8c13      	ldrh	r3, [r2, #32]
 80029e2:	430b      	orrs	r3, r1
 80029e4:	8413      	strh	r3, [r2, #32]
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 80029e6:	23a0      	movs	r3, #160	; 0xa0
 80029e8:	6822      	ldr	r2, [r4, #0]
 80029ea:	00db      	lsls	r3, r3, #3
 80029ec:	4313      	orrs	r3, r2
 80029ee:	6023      	str	r3, [r4, #0]
 80029f0:	e7e7      	b.n	80029c2 <VectorBC+0x52>
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 80029f2:	6863      	ldr	r3, [r4, #4]
 80029f4:	4920      	ldr	r1, [pc, #128]	; (8002a78 <VectorBC+0x108>)
 80029f6:	400b      	ands	r3, r1
    dmaStreamEnable(i2cp->dmatx);
 80029f8:	2101      	movs	r1, #1
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 80029fa:	6063      	str	r3, [r4, #4]
    dmaStreamEnable(i2cp->dmatx);
 80029fc:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	6813      	ldr	r3, [r2, #0]
 8002a02:	430b      	orrs	r3, r1
 8002a04:	6013      	str	r3, [r2, #0]
 8002a06:	e7d8      	b.n	80029ba <VectorBC+0x4a>
    if ((i2cp->addr >> 8) > 0) { 
 8002a08:	8c12      	ldrh	r2, [r2, #32]
 8002a0a:	0a11      	lsrs	r1, r2, #8
 8002a0c:	d00e      	beq.n	8002a2c <VectorBC+0xbc>
      dp->DR = 0xF0 | (0x6 & (i2cp->addr >> 8)) | (0x1 & i2cp->addr);
 8002a0e:	2301      	movs	r3, #1
 8002a10:	4013      	ands	r3, r2
 8002a12:	22f0      	movs	r2, #240	; 0xf0
 8002a14:	4313      	orrs	r3, r2
 8002a16:	2206      	movs	r2, #6
 8002a18:	4011      	ands	r1, r2
 8002a1a:	430b      	orrs	r3, r1
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	6123      	str	r3, [r4, #16]
 8002a20:	e7cb      	b.n	80029ba <VectorBC+0x4a>
    dp->DR = (0xFF & (i2cp->addr >> 1));
 8002a22:	8c13      	ldrh	r3, [r2, #32]
 8002a24:	05db      	lsls	r3, r3, #23
 8002a26:	0e1b      	lsrs	r3, r3, #24
 8002a28:	6123      	str	r3, [r4, #16]
 8002a2a:	e7c6      	b.n	80029ba <VectorBC+0x4a>
      dp->DR = i2cp->addr;
 8002a2c:	6122      	str	r2, [r4, #16]
 8002a2e:	e7c4      	b.n	80029ba <VectorBC+0x4a>
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8002a30:	6861      	ldr	r1, [r4, #4]
 8002a32:	4811      	ldr	r0, [pc, #68]	; (8002a78 <VectorBC+0x108>)
 8002a34:	4001      	ands	r1, r0
 8002a36:	6061      	str	r1, [r4, #4]
    dp->CR1 |= I2C_CR1_STOP;
 8002a38:	2180      	movs	r1, #128	; 0x80
 8002a3a:	6820      	ldr	r0, [r4, #0]
 8002a3c:	0089      	lsls	r1, r1, #2
 8002a3e:	4301      	orrs	r1, r0
 8002a40:	6021      	str	r1, [r4, #0]
 8002a42:	2120      	movs	r1, #32
 8002a44:	f381 8811 	msr	BASEPRI, r1
  if (*trp != NULL) {
 8002a48:	69d0      	ldr	r0, [r2, #28]
 8002a4a:	2800      	cmp	r0, #0
 8002a4c:	d003      	beq.n	8002a56 <VectorBC+0xe6>
    *trp = NULL;
 8002a4e:	61d3      	str	r3, [r2, #28]
    tp->u.rdymsg = msg;
 8002a50:	6203      	str	r3, [r0, #32]
    (void) chSchReadyI(tp);
 8002a52:	f001 facd 	bl	8003ff0 <chSchReadyI>
 8002a56:	2300      	movs	r3, #0
 8002a58:	f383 8811 	msr	BASEPRI, r3
 8002a5c:	e7ad      	b.n	80029ba <VectorBC+0x4a>
      dp->CR1 &= ~I2C_CR1_ACK;
 8002a5e:	6823      	ldr	r3, [r4, #0]
 8002a60:	4a08      	ldr	r2, [pc, #32]	; (8002a84 <VectorBC+0x114>)
 8002a62:	4013      	ands	r3, r2
 8002a64:	6023      	str	r3, [r4, #0]
 8002a66:	e7a8      	b.n	80029ba <VectorBC+0x4a>
 8002a68:	20000440 	.word	0x20000440
 8002a6c:	00030008 	.word	0x00030008
 8002a70:	00030001 	.word	0x00030001
 8002a74:	00030002 	.word	0x00030002
 8002a78:	fffffdff 	.word	0xfffffdff
 8002a7c:	00070082 	.word	0x00070082
 8002a80:	00070084 	.word	0x00070084
 8002a84:	fffffbff 	.word	0xfffffbff
	...

08002a90 <VectorC0>:

/**
 * @brief   I2C1 error interrupt handler.
 */
OSAL_IRQ_HANDLER(STM32_I2C1_ERROR_HANDLER) {
 8002a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint16_t sr = I2CD1.i2c->SR1;

  OSAL_IRQ_PROLOGUE();

  I2CD1.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
 8002a92:	23df      	movs	r3, #223	; 0xdf
  uint16_t sr = I2CD1.i2c->SR1;
 8002a94:	4c36      	ldr	r4, [pc, #216]	; (8002b70 <VectorC0+0xe0>)
  I2CD1.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
 8002a96:	021b      	lsls	r3, r3, #8
  uint16_t sr = I2CD1.i2c->SR1;
 8002a98:	6b65      	ldr	r5, [r4, #52]	; 0x34
  dmaStreamDisable(i2cp->dmatx);
 8002a9a:	211f      	movs	r1, #31
  uint16_t sr = I2CD1.i2c->SR1;
 8002a9c:	696e      	ldr	r6, [r5, #20]
  dmaStreamDisable(i2cp->dmatx);
 8002a9e:	6b27      	ldr	r7, [r4, #48]	; 0x30
  I2CD1.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
 8002aa0:	4033      	ands	r3, r6
 8002aa2:	43db      	mvns	r3, r3
  dmaStreamDisable(i2cp->dmatx);
 8002aa4:	683a      	ldr	r2, [r7, #0]
  I2CD1.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
 8002aa6:	616b      	str	r3, [r5, #20]
  dmaStreamDisable(i2cp->dmatx);
 8002aa8:	6813      	ldr	r3, [r2, #0]
  uint16_t sr = I2CD1.i2c->SR1;
 8002aaa:	b2b0      	uxth	r0, r6
  dmaStreamDisable(i2cp->dmatx);
 8002aac:	438b      	bics	r3, r1
 8002aae:	6013      	str	r3, [r2, #0]
 8002ab0:	391e      	subs	r1, #30
 8002ab2:	6813      	ldr	r3, [r2, #0]
 8002ab4:	4219      	tst	r1, r3
 8002ab6:	d1fc      	bne.n	8002ab2 <VectorC0+0x22>
 8002ab8:	233d      	movs	r3, #61	; 0x3d
 8002aba:	7a39      	ldrb	r1, [r7, #8]
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	408b      	lsls	r3, r1
  dmaStreamDisable(i2cp->dmarx);
 8002ac0:	211f      	movs	r1, #31
 8002ac2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
  dmaStreamDisable(i2cp->dmatx);
 8002ac4:	6013      	str	r3, [r2, #0]
  dmaStreamDisable(i2cp->dmarx);
 8002ac6:	683a      	ldr	r2, [r7, #0]
 8002ac8:	6813      	ldr	r3, [r2, #0]
 8002aca:	438b      	bics	r3, r1
 8002acc:	6013      	str	r3, [r2, #0]
 8002ace:	391e      	subs	r1, #30
 8002ad0:	6813      	ldr	r3, [r2, #0]
 8002ad2:	4219      	tst	r1, r3
 8002ad4:	d1fc      	bne.n	8002ad0 <VectorC0+0x40>
 8002ad6:	233d      	movs	r3, #61	; 0x3d
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	7a3f      	ldrb	r7, [r7, #8]
 8002adc:	40bb      	lsls	r3, r7
 8002ade:	6013      	str	r3, [r2, #0]
  if (sr & I2C_SR1_BERR)                            /* Bus error.           */
 8002ae0:	2380      	movs	r3, #128	; 0x80
 8002ae2:	005b      	lsls	r3, r3, #1
 8002ae4:	4003      	ands	r3, r0
 8002ae6:	d136      	bne.n	8002b56 <VectorC0+0xc6>
  i2cp->errors = I2C_NO_ERROR;
 8002ae8:	60a3      	str	r3, [r4, #8]
  if (sr & I2C_SR1_ARLO)                            /* Arbitration lost.    */
 8002aea:	0582      	lsls	r2, r0, #22
 8002aec:	d502      	bpl.n	8002af4 <VectorC0+0x64>
    i2cp->errors |= I2C_ARBITRATION_LOST;
 8002aee:	2202      	movs	r2, #2
 8002af0:	4313      	orrs	r3, r2
 8002af2:	60a3      	str	r3, [r4, #8]
  if (sr & I2C_SR1_AF) {                            /* Acknowledge fail.    */
 8002af4:	0542      	lsls	r2, r0, #21
 8002af6:	d50b      	bpl.n	8002b10 <VectorC0+0x80>
    i2cp->i2c->CR2 &= ~I2C_CR2_ITEVTEN;
 8002af8:	686a      	ldr	r2, [r5, #4]
 8002afa:	491e      	ldr	r1, [pc, #120]	; (8002b74 <VectorC0+0xe4>)
 8002afc:	400a      	ands	r2, r1
 8002afe:	606a      	str	r2, [r5, #4]
    i2cp->i2c->CR1 |= I2C_CR1_STOP;                 /* Setting stop bit.    */
 8002b00:	2280      	movs	r2, #128	; 0x80
 8002b02:	6829      	ldr	r1, [r5, #0]
 8002b04:	0092      	lsls	r2, r2, #2
 8002b06:	430a      	orrs	r2, r1
 8002b08:	602a      	str	r2, [r5, #0]
    i2cp->errors |= I2C_ACK_FAILURE;
 8002b0a:	2204      	movs	r2, #4
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	60a3      	str	r3, [r4, #8]
  if (sr & I2C_SR1_OVR)                             /* Overrun.             */
 8002b10:	0502      	lsls	r2, r0, #20
 8002b12:	d502      	bpl.n	8002b1a <VectorC0+0x8a>
    i2cp->errors |= I2C_OVERRUN;
 8002b14:	2208      	movs	r2, #8
 8002b16:	4313      	orrs	r3, r2
 8002b18:	60a3      	str	r3, [r4, #8]
  if (sr & I2C_SR1_TIMEOUT)                         /* SMBus Timeout.       */
 8002b1a:	0442      	lsls	r2, r0, #17
 8002b1c:	d502      	bpl.n	8002b24 <VectorC0+0x94>
    i2cp->errors |= I2C_TIMEOUT;
 8002b1e:	2220      	movs	r2, #32
 8002b20:	4313      	orrs	r3, r2
 8002b22:	60a3      	str	r3, [r4, #8]
  if (sr & I2C_SR1_PECERR)                          /* PEC error.           */
 8002b24:	04c2      	lsls	r2, r0, #19
 8002b26:	d519      	bpl.n	8002b5c <VectorC0+0xcc>
    i2cp->errors |= I2C_PEC_ERROR;
 8002b28:	2210      	movs	r2, #16
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	60a3      	str	r3, [r4, #8]
  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 8002b2e:	0432      	lsls	r2, r6, #16
 8002b30:	d419      	bmi.n	8002b66 <VectorC0+0xd6>
 8002b32:	2320      	movs	r3, #32
 8002b34:	f383 8811 	msr	BASEPRI, r3
  if (*trp != NULL) {
 8002b38:	69e0      	ldr	r0, [r4, #28]
 8002b3a:	2800      	cmp	r0, #0
 8002b3c:	d005      	beq.n	8002b4a <VectorC0+0xba>
    *trp = NULL;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	61e3      	str	r3, [r4, #28]
    tp->u.rdymsg = msg;
 8002b42:	3b02      	subs	r3, #2
 8002b44:	6203      	str	r3, [r0, #32]
    (void) chSchReadyI(tp);
 8002b46:	f001 fa53 	bl	8003ff0 <chSchReadyI>
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	f383 8811 	msr	BASEPRI, r3
  i2c_lld_serve_error_interrupt(&I2CD1, sr);

  OSAL_IRQ_EPILOGUE();
 8002b50:	f000 ffbe 	bl	8003ad0 <_port_irq_epilogue>
}
 8002b54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    i2cp->errors |= I2C_BUS_ERROR;
 8002b56:	60a1      	str	r1, [r4, #8]
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e7c6      	b.n	8002aea <VectorC0+0x5a>
  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 8002b5c:	0432      	lsls	r2, r6, #16
 8002b5e:	d402      	bmi.n	8002b66 <VectorC0+0xd6>
  if (i2cp->errors != I2C_NO_ERROR)
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d0f5      	beq.n	8002b50 <VectorC0+0xc0>
 8002b64:	e7e5      	b.n	8002b32 <VectorC0+0xa2>
    i2cp->errors |= I2C_SMB_ALERT;
 8002b66:	2240      	movs	r2, #64	; 0x40
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	60a3      	str	r3, [r4, #8]
 8002b6c:	e7e1      	b.n	8002b32 <VectorC0+0xa2>
 8002b6e:	46c0      	nop			; (mov r8, r8)
 8002b70:	20000440 	.word	0x20000440
 8002b74:	fffffdff 	.word	0xfffffdff
	...

08002b80 <__early_init>:
#if !STM32_NO_INIT
  /* PWR clock enable.*/
#if defined(HAL_USE_RTC) && defined(RCC_APB1ENR_RTCAPBEN)
  RCC->APB1ENR = RCC_APB1ENR_PWREN | RCC_APB1ENR_RTCAPBEN;
#else
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8002b80:	2380      	movs	r3, #128	; 0x80
#endif

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 8002b82:	21c0      	movs	r1, #192	; 0xc0
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8002b84:	4a50      	ldr	r2, [pc, #320]	; (8002cc8 <__early_init+0x148>)
 8002b86:	055b      	lsls	r3, r3, #21
 8002b88:	6413      	str	r3, [r2, #64]	; 0x40
  PWR->CR = STM32_VOS;
 8002b8a:	4b50      	ldr	r3, [pc, #320]	; (8002ccc <__early_init+0x14c>)
 8002b8c:	0209      	lsls	r1, r1, #8
 8002b8e:	6019      	str	r1, [r3, #0]
  PWR->CR = 0;
#endif

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8002b90:	2101      	movs	r1, #1
 8002b92:	6813      	ldr	r3, [r2, #0]
 8002b94:	430b      	orrs	r3, r1
 8002b96:	6013      	str	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 8002b98:	3101      	adds	r1, #1
 8002b9a:	6813      	ldr	r3, [r2, #0]
 8002b9c:	4219      	tst	r1, r3
 8002b9e:	d0fc      	beq.n	8002b9a <__early_init+0x1a>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
 8002ba0:	2103      	movs	r1, #3
 8002ba2:	6893      	ldr	r3, [r2, #8]
 8002ba4:	438b      	bics	r3, r1
 8002ba6:	6093      	str	r3, [r2, #8]
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
 8002ba8:	6893      	ldr	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8002baa:	3109      	adds	r1, #9
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
 8002bac:	6093      	str	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8002bae:	4a46      	ldr	r2, [pc, #280]	; (8002cc8 <__early_init+0x148>)
 8002bb0:	6893      	ldr	r3, [r2, #8]
 8002bb2:	400b      	ands	r3, r1
 8002bb4:	d1fc      	bne.n	8002bb0 <__early_init+0x30>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8002bb6:	21f9      	movs	r1, #249	; 0xf9
 8002bb8:	6810      	ldr	r0, [r2, #0]
 8002bba:	4001      	ands	r1, r0
 8002bbc:	6011      	str	r1, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 8002bbe:	6093      	str	r3, [r2, #8]
  
#if STM32_HSE_ENABLED
  /* HSE activation.*/
#if defined(STM32_HSE_BYPASS)
  /* HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
 8002bc0:	23a0      	movs	r3, #160	; 0xa0
 8002bc2:	6811      	ldr	r1, [r2, #0]
 8002bc4:	02db      	lsls	r3, r3, #11
 8002bc6:	430b      	orrs	r3, r1
#else
  /* No HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON;
#endif
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 8002bc8:	2180      	movs	r1, #128	; 0x80
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
 8002bca:	6013      	str	r3, [r2, #0]
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 8002bcc:	4a3e      	ldr	r2, [pc, #248]	; (8002cc8 <__early_init+0x148>)
 8002bce:	0289      	lsls	r1, r1, #10
 8002bd0:	6813      	ldr	r3, [r2, #0]
 8002bd2:	420b      	tst	r3, r1
 8002bd4:	d0fc      	beq.n	8002bd0 <__early_init+0x50>
    ;                           /* Waits until HSE is stable.               */
#endif

#if STM32_LSI_ENABLED
  /* LSI activation.*/
  RCC->CSR |= RCC_CSR_LSION;
 8002bd6:	2101      	movs	r1, #1
 8002bd8:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8002bda:	430b      	orrs	r3, r1
 8002bdc:	6753      	str	r3, [r2, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 8002bde:	4a3a      	ldr	r2, [pc, #232]	; (8002cc8 <__early_init+0x148>)
 8002be0:	3101      	adds	r1, #1
 8002be2:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8002be4:	4219      	tst	r1, r3
 8002be6:	d0fc      	beq.n	8002be2 <__early_init+0x62>
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
 8002be8:	4b39      	ldr	r3, [pc, #228]	; (8002cd0 <__early_init+0x150>)
 8002bea:	6053      	str	r3, [r2, #4]
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 8002bec:	2380      	movs	r3, #128	; 0x80
 8002bee:	6811      	ldr	r1, [r2, #0]
 8002bf0:	045b      	lsls	r3, r3, #17
 8002bf2:	430b      	orrs	r3, r1
 8002bf4:	6013      	str	r3, [r2, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 8002bf6:	2280      	movs	r2, #128	; 0x80
 8002bf8:	4934      	ldr	r1, [pc, #208]	; (8002ccc <__early_init+0x14c>)
 8002bfa:	01d2      	lsls	r2, r2, #7
 8002bfc:	684b      	ldr	r3, [r1, #4]
 8002bfe:	4213      	tst	r3, r2
 8002c00:	d0fc      	beq.n	8002bfc <__early_init+0x7c>
    ;                           /* Waits until power regulator is stable.   */

#if STM32_OVERDRIVE_REQUIRED
  /* Overdrive activation performed after activating the PLL in order to save
     time as recommended in RM in "Entering Over-drive mode" paragraph.*/
  PWR->CR |= PWR_CR_ODEN;
 8002c02:	2280      	movs	r2, #128	; 0x80
 8002c04:	680b      	ldr	r3, [r1, #0]
 8002c06:	0252      	lsls	r2, r2, #9
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	600b      	str	r3, [r1, #0]
  while (!(PWR->CSR & PWR_CSR_ODRDY))
 8002c0c:	492f      	ldr	r1, [pc, #188]	; (8002ccc <__early_init+0x14c>)
 8002c0e:	684b      	ldr	r3, [r1, #4]
 8002c10:	4213      	tst	r3, r2
 8002c12:	d0fc      	beq.n	8002c0e <__early_init+0x8e>
      ;
  PWR->CR |= PWR_CR_ODSWEN;
 8002c14:	2280      	movs	r2, #128	; 0x80
 8002c16:	680b      	ldr	r3, [r1, #0]
 8002c18:	0292      	lsls	r2, r2, #10
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	600b      	str	r3, [r1, #0]
  while (!(PWR->CSR & PWR_CSR_ODSWRDY))
 8002c1e:	492b      	ldr	r1, [pc, #172]	; (8002ccc <__early_init+0x14c>)
 8002c20:	684b      	ldr	r3, [r1, #4]
 8002c22:	4213      	tst	r3, r2
 8002c24:	d0fc      	beq.n	8002c20 <__early_init+0xa0>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */
#endif /* defined(STM32F4XX) */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
 8002c26:	2180      	movs	r1, #128	; 0x80
 8002c28:	4a27      	ldr	r2, [pc, #156]	; (8002cc8 <__early_init+0x148>)
 8002c2a:	0489      	lsls	r1, r1, #18
 8002c2c:	6813      	ldr	r3, [r2, #0]
 8002c2e:	420b      	tst	r3, r1
 8002c30:	d0fc      	beq.n	8002c2c <__early_init+0xac>
    ;
#endif /* STM32_ACTIVATE_PLL */

#if STM32_ACTIVATE_PLLI2S
  /* PLLI2S activation.*/
  RCC->PLLI2SCFGR = STM32_PLLI2SR | STM32_PLLI2SN | STM32_PLLI2SP |
 8002c32:	2384      	movs	r3, #132	; 0x84
 8002c34:	4927      	ldr	r1, [pc, #156]	; (8002cd4 <__early_init+0x154>)
 8002c36:	50d1      	str	r1, [r2, r3]
                    STM32_PLLI2SQ | STM32_PLLI2SM;
  RCC->CR |= RCC_CR_PLLI2SON;
 8002c38:	2380      	movs	r3, #128	; 0x80
 8002c3a:	6811      	ldr	r1, [r2, #0]
 8002c3c:	04db      	lsls	r3, r3, #19
 8002c3e:	430b      	orrs	r3, r1

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLI2SRDY))
 8002c40:	2180      	movs	r1, #128	; 0x80
  RCC->CR |= RCC_CR_PLLI2SON;
 8002c42:	6013      	str	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_PLLI2SRDY))
 8002c44:	4a20      	ldr	r2, [pc, #128]	; (8002cc8 <__early_init+0x148>)
 8002c46:	0509      	lsls	r1, r1, #20
 8002c48:	6813      	ldr	r3, [r2, #0]
 8002c4a:	420b      	tst	r3, r1
 8002c4c:	d0fc      	beq.n	8002c48 <__early_init+0xc8>
    ;
#endif /* STM32_ACTIVATE_PLLI2S */

#if STM32_ACTIVATE_PLLSAI
  /* PLLSAI activation.*/
  RCC->PLLSAICFGR = STM32_PLLSAIR | STM32_PLLSAIN | STM32_PLLSAIP |
 8002c4e:	2388      	movs	r3, #136	; 0x88
 8002c50:	4921      	ldr	r1, [pc, #132]	; (8002cd8 <__early_init+0x158>)
 8002c52:	50d1      	str	r1, [r2, r3]
                    STM32_PLLSAIQ | STM32_PLLSAIM;
  RCC->CR |= RCC_CR_PLLSAION;
 8002c54:	2380      	movs	r3, #128	; 0x80
 8002c56:	6811      	ldr	r1, [r2, #0]
 8002c58:	055b      	lsls	r3, r3, #21
 8002c5a:	430b      	orrs	r3, r1

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLSAIRDY))
 8002c5c:	2180      	movs	r1, #128	; 0x80
  RCC->CR |= RCC_CR_PLLSAION;
 8002c5e:	6013      	str	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_PLLSAIRDY))
 8002c60:	4a19      	ldr	r2, [pc, #100]	; (8002cc8 <__early_init+0x148>)
 8002c62:	0589      	lsls	r1, r1, #22
 8002c64:	6813      	ldr	r3, [r2, #0]
 8002c66:	420b      	tst	r3, r1
 8002c68:	d0fc      	beq.n	8002c64 <__early_init+0xe4>
    ;
#endif /* STM32_ACTIVATE_PLLSAI */

  /* Other clock-related settings (dividers, MCO etc).*/
  RCC->CFGR = STM32_MCO2PRE | STM32_MCO2SEL | STM32_MCO1PRE | STM32_MCO1SEL |
 8002c6a:	4b1c      	ldr	r3, [pc, #112]	; (8002cdc <__early_init+0x15c>)
    dckcfgr |= STM32_SAI1SEL;
#endif
#if STM32_PLLSAIDIVR != STM32_PLLSAIDIVR_OFF
    dckcfgr |= STM32_PLLSAIDIVR;
#endif
    RCC->DCKCFGR = dckcfgr | STM32_PLLI2SDIVQ | STM32_PLLSAIDIVQ;
 8002c6c:	2180      	movs	r1, #128	; 0x80
  RCC->CFGR = STM32_MCO2PRE | STM32_MCO2SEL | STM32_MCO1PRE | STM32_MCO1SEL |
 8002c6e:	6093      	str	r3, [r2, #8]
    RCC->DCKCFGR = dckcfgr | STM32_PLLI2SDIVQ | STM32_PLLSAIDIVQ;
 8002c70:	238c      	movs	r3, #140	; 0x8c
 8002c72:	0409      	lsls	r1, r1, #16
 8002c74:	50d1      	str	r1, [r2, r3]
  }
  RCC->DCKCFGR2 = STM32_CK48MSEL;
 8002c76:	2180      	movs	r1, #128	; 0x80
 8002c78:	3308      	adds	r3, #8
 8002c7a:	0509      	lsls	r1, r1, #20
 8002c7c:	50d1      	str	r1, [r2, r3]

  /* Flash setup.*/
#if !defined(STM32_REMOVE_REVISION_A_FIX)
  /* Some old revisions of F4x MCUs randomly crashes with compiler
     optimizations enabled AND flash caches enabled. */
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 8002c7e:	4b18      	ldr	r3, [pc, #96]	; (8002ce0 <__early_init+0x160>)
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	4b18      	ldr	r3, [pc, #96]	; (8002ce4 <__early_init+0x164>)
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d015      	beq.n	8002cb4 <__early_init+0x134>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 8002c88:	4a17      	ldr	r2, [pc, #92]	; (8002ce8 <__early_init+0x168>)
 8002c8a:	4b18      	ldr	r3, [pc, #96]	; (8002cec <__early_init+0x16c>)
 8002c8c:	601a      	str	r2, [r3, #0]
               FLASH_ACR_DCEN | STM32_FLASHBITS;
#endif

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
 8002c8e:	2102      	movs	r1, #2
 8002c90:	4a0d      	ldr	r2, [pc, #52]	; (8002cc8 <__early_init+0x148>)
 8002c92:	6893      	ldr	r3, [r2, #8]
 8002c94:	430b      	orrs	r3, r1
 8002c96:	6093      	str	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8002c98:	310a      	adds	r1, #10
 8002c9a:	6893      	ldr	r3, [r2, #8]
 8002c9c:	400b      	ands	r3, r1
 8002c9e:	2b08      	cmp	r3, #8
 8002ca0:	d1fb      	bne.n	8002c9a <__early_init+0x11a>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, TRUE);
 8002ca2:	2380      	movs	r3, #128	; 0x80
 8002ca4:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002ca6:	01db      	lsls	r3, r3, #7
 8002ca8:	4319      	orrs	r1, r3
 8002caa:	6451      	str	r1, [r2, #68]	; 0x44
 8002cac:	6e51      	ldr	r1, [r2, #100]	; 0x64
 8002cae:	430b      	orrs	r3, r1
 8002cb0:	6653      	str	r3, [r2, #100]	; 0x64
 *          and before any other initialization.
 */
void __early_init(void) {

  stm32_clock_init();
}
 8002cb2:	4770      	bx	lr
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 8002cb4:	4b0e      	ldr	r3, [pc, #56]	; (8002cf0 <__early_init+0x170>)
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	4b0e      	ldr	r3, [pc, #56]	; (8002cf4 <__early_init+0x174>)
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d1e4      	bne.n	8002c88 <__early_init+0x108>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
 8002cbe:	2206      	movs	r2, #6
 8002cc0:	4b0a      	ldr	r3, [pc, #40]	; (8002cec <__early_init+0x16c>)
 8002cc2:	32ff      	adds	r2, #255	; 0xff
 8002cc4:	601a      	str	r2, [r3, #0]
 8002cc6:	e7e2      	b.n	8002c8e <__early_init+0x10e>
 8002cc8:	40023800 	.word	0x40023800
 8002ccc:	40007000 	.word	0x40007000
 8002cd0:	07405a08 	.word	0x07405a08
 8002cd4:	44013004 	.word	0x44013004
 8002cd8:	44033004 	.word	0x44033004
 8002cdc:	40089400 	.word	0x40089400
 8002ce0:	e0042000 	.word	0xe0042000
 8002ce4:	20006411 	.word	0x20006411
 8002ce8:	00000705 	.word	0x00000705
 8002cec:	40023c00 	.word	0x40023c00
 8002cf0:	e000ed00 	.word	0xe000ed00
 8002cf4:	410fc241 	.word	0x410fc241
	...

08002d00 <chSchWakeupS.constprop.47>:
 * @param[in] ntp       the thread to be made ready
 * @param[in] msg       the wakeup message
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8002d00:	b570      	push	{r4, r5, r6, lr}
              (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
              "priority order violation");

  /* Storing the message to be retrieved by the target thread when it will
     restart execution.*/
  ntp->u.rdymsg = msg;
 8002d02:	2500      	movs	r5, #0
  thread_t *otp = currp;
 8002d04:	4b11      	ldr	r3, [pc, #68]	; (8002d4c <chSchWakeupS.constprop.47+0x4c>)
  ntp->u.rdymsg = msg;
 8002d06:	6205      	str	r5, [r0, #32]
  thread_t *otp = currp;
 8002d08:	6999      	ldr	r1, [r3, #24]

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->prio <= otp->prio) {
 8002d0a:	6882      	ldr	r2, [r0, #8]
 8002d0c:	688c      	ldr	r4, [r1, #8]
 8002d0e:	42a2      	cmp	r2, r4
 8002d10:	d80a      	bhi.n	8002d28 <chSchWakeupS.constprop.47+0x28>
  tp->state = CH_STATE_READY;
 8002d12:	7705      	strb	r5, [r0, #28]
    cp = cp->queue.next;
 8002d14:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8002d16:	6899      	ldr	r1, [r3, #8]
 8002d18:	428a      	cmp	r2, r1
 8002d1a:	d9fb      	bls.n	8002d14 <chSchWakeupS.constprop.47+0x14>
  tp->queue.prev             = cp->queue.prev;
 8002d1c:	685a      	ldr	r2, [r3, #4]
  tp->queue.next             = cp;
 8002d1e:	6003      	str	r3, [r0, #0]
  tp->queue.prev             = cp->queue.prev;
 8002d20:	6042      	str	r2, [r0, #4]
  tp->queue.prev->queue.next = tp;
 8002d22:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 8002d24:	6058      	str	r0, [r3, #4]
    ntp->state = CH_STATE_CURRENT;

    /* Swap operation as tail call.*/
    chSysSwitch(ntp, otp);
  }
}
 8002d26:	bd70      	pop	{r4, r5, r6, pc}
  cp = (thread_t *)&ch.rlist.queue;
 8002d28:	001a      	movs	r2, r3
  tp->state = CH_STATE_READY;
 8002d2a:	770d      	strb	r5, [r1, #28]
    cp = cp->queue.next;
 8002d2c:	6812      	ldr	r2, [r2, #0]
  } while (cp->prio >= tp->prio);
 8002d2e:	6895      	ldr	r5, [r2, #8]
 8002d30:	42ac      	cmp	r4, r5
 8002d32:	d9fb      	bls.n	8002d2c <chSchWakeupS.constprop.47+0x2c>
  tp->queue.prev             = cp->queue.prev;
 8002d34:	6854      	ldr	r4, [r2, #4]
  tp->queue.next             = cp;
 8002d36:	600a      	str	r2, [r1, #0]
  tp->queue.prev             = cp->queue.prev;
 8002d38:	604c      	str	r4, [r1, #4]
  tp->queue.prev->queue.next = tp;
 8002d3a:	6021      	str	r1, [r4, #0]
  cp->queue.prev             = tp;
 8002d3c:	6051      	str	r1, [r2, #4]
    currp = ntp;
 8002d3e:	6198      	str	r0, [r3, #24]
    ntp->state = CH_STATE_CURRENT;
 8002d40:	2301      	movs	r3, #1
 8002d42:	7703      	strb	r3, [r0, #28]
    chSysSwitch(ntp, otp);
 8002d44:	f7fd faa6 	bl	8000294 <_port_switch>
 8002d48:	e7ed      	b.n	8002d26 <chSchWakeupS.constprop.47+0x26>
 8002d4a:	46c0      	nop			; (mov r8, r8)
 8002d4c:	200008a8 	.word	0x200008a8

08002d50 <chThdCreateStatic.constprop.42>:
thread_t *chThdCreateStatic(void *wsp, size_t size,
 8002d50:	b510      	push	{r4, lr}
 8002d52:	2320      	movs	r3, #32
 8002d54:	f383 8811 	msr	BASEPRI, r3
  tp = (thread_t *)((uint8_t *)wsp + size -
 8002d58:	0004      	movs	r4, r0
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8002d5a:	0002      	movs	r2, r0
  tp = (thread_t *)((uint8_t *)wsp + size -
 8002d5c:	3481      	adds	r4, #129	; 0x81
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8002d5e:	325d      	adds	r2, #93	; 0x5d
 8002d60:	333d      	adds	r3, #61	; 0x3d
  tp = (thread_t *)((uint8_t *)wsp + size -
 8002d62:	34ff      	adds	r4, #255	; 0xff
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8002d64:	32ff      	adds	r2, #255	; 0xff
 8002d66:	33ff      	adds	r3, #255	; 0xff
 8002d68:	60e2      	str	r2, [r4, #12]
 8002d6a:	50c1      	str	r1, [r0, r3]
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	4915      	ldr	r1, [pc, #84]	; (8002dc4 <chThdCreateStatic.constprop.42+0x74>)
 8002d70:	6053      	str	r3, [r2, #4]
 8002d72:	6211      	str	r1, [r2, #32]
  tp->prio      = prio;
 8002d74:	2287      	movs	r2, #135	; 0x87
  tp->state     = CH_STATE_WTSTART;
 8002d76:	2102      	movs	r1, #2
  tp->flags     = CH_FLAG_MODE_STATIC;
 8002d78:	7763      	strb	r3, [r4, #29]
  tp->mtxlist   = NULL;
 8002d7a:	6363      	str	r3, [r4, #52]	; 0x34
  tp->epending  = (eventmask_t)0;
 8002d7c:	6323      	str	r3, [r4, #48]	; 0x30
  tp->refs      = (trefs_t)1;
 8002d7e:	3301      	adds	r3, #1
 8002d80:	77a3      	strb	r3, [r4, #30]
  tp->name      = name;
 8002d82:	4b11      	ldr	r3, [pc, #68]	; (8002dc8 <chThdCreateStatic.constprop.42+0x78>)
  tp->prio      = prio;
 8002d84:	60a2      	str	r2, [r4, #8]
  tp->name      = name;
 8002d86:	61a3      	str	r3, [r4, #24]
  REG_INSERT(tp);
 8002d88:	4b10      	ldr	r3, [pc, #64]	; (8002dcc <chThdCreateStatic.constprop.42+0x7c>)
  tp->realprio  = prio;
 8002d8a:	63a2      	str	r2, [r4, #56]	; 0x38
  REG_INSERT(tp);
 8002d8c:	695a      	ldr	r2, [r3, #20]
 8002d8e:	6123      	str	r3, [r4, #16]
 8002d90:	6162      	str	r2, [r4, #20]
  tp->state     = CH_STATE_WTSTART;
 8002d92:	7721      	strb	r1, [r4, #28]
  REG_INSERT(tp);
 8002d94:	6114      	str	r4, [r2, #16]
  list_init(&tp->waiting);
 8002d96:	0002      	movs	r2, r0
  REG_INSERT(tp);
 8002d98:	615c      	str	r4, [r3, #20]
  tlp->next = (thread_t *)tlp;
 8002d9a:	23d2      	movs	r3, #210	; 0xd2
  list_init(&tp->waiting);
 8002d9c:	32a5      	adds	r2, #165	; 0xa5
 8002d9e:	32ff      	adds	r2, #255	; 0xff
 8002da0:	005b      	lsls	r3, r3, #1
 8002da2:	50c2      	str	r2, [r0, r3]
  queue_init(&tp->msgqueue);
 8002da4:	0003      	movs	r3, r0
  tqp->next = (thread_t *)tqp;
 8002da6:	22d4      	movs	r2, #212	; 0xd4
 8002da8:	33a9      	adds	r3, #169	; 0xa9
 8002daa:	33ff      	adds	r3, #255	; 0xff
 8002dac:	0052      	lsls	r2, r2, #1
 8002dae:	5083      	str	r3, [r0, r2]
  tqp->prev = (thread_t *)tqp;
 8002db0:	605b      	str	r3, [r3, #4]
  chSchWakeupS(tp, MSG_OK);
 8002db2:	0020      	movs	r0, r4
 8002db4:	f7ff ffa4 	bl	8002d00 <chSchWakeupS.constprop.47>
 8002db8:	2300      	movs	r3, #0
 8002dba:	f383 8811 	msr	BASEPRI, r3
}
 8002dbe:	0020      	movs	r0, r4
 8002dc0:	bd10      	pop	{r4, pc}
 8002dc2:	46c0      	nop			; (mov r8, r8)
 8002dc4:	080002a5 	.word	0x080002a5
 8002dc8:	08004654 	.word	0x08004654
 8002dcc:	200008a8 	.word	0x200008a8

08002dd0 <can_tx>:
 * Transmitter thread.
 */

static THD_WORKING_AREA(can_tx_wa, 256);
static THD_FUNCTION(can_tx, p)
{
 8002dd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dd2:	46c6      	mov	lr, r8
    CANTxFrame txmsg;

    (void)p;
    chRegSetThreadName("transmitter");
    txmsg.IDE = CAN_IDE_EXT;
    txmsg.EID = 0x11;
 8002dd4:	2111      	movs	r1, #17
{
 8002dd6:	b500      	push	{lr}
 8002dd8:	4f3d      	ldr	r7, [pc, #244]	; (8002ed0 <can_tx+0x100>)
 8002dda:	4a3e      	ldr	r2, [pc, #248]	; (8002ed4 <can_tx+0x104>)
 8002ddc:	69bb      	ldr	r3, [r7, #24]
 8002dde:	b086      	sub	sp, #24
 8002de0:	619a      	str	r2, [r3, #24]
    txmsg.EID = 0x11;
 8002de2:	9a03      	ldr	r2, [sp, #12]
 8002de4:	4c3c      	ldr	r4, [pc, #240]	; (8002ed8 <can_tx+0x108>)
 8002de6:	9201      	str	r2, [sp, #4]
 8002de8:	0f52      	lsrs	r2, r2, #29
 8002dea:	0752      	lsls	r2, r2, #29
 8002dec:	430a      	orrs	r2, r1
 8002dee:	9203      	str	r2, [sp, #12]
    txmsg.RTR = CAN_RTR_DATA;
    txmsg.DLC = 8;
    txmsg.data8[0] = 0x00;
 8002df0:	2200      	movs	r2, #0
 8002df2:	a902      	add	r1, sp, #8
 8002df4:	720a      	strb	r2, [r1, #8]
    txmsg.data8[1] = 0x00;
 8002df6:	724a      	strb	r2, [r1, #9]
    txmsg.data8[2] = 0x00;
 8002df8:	728a      	strb	r2, [r1, #10]
    txmsg.data8[3] = 0x00;
 8002dfa:	72ca      	strb	r2, [r1, #11]
    txmsg.data8[4] = 0x00;
 8002dfc:	730a      	strb	r2, [r1, #12]
    txmsg.data8[5] = 0x00;
 8002dfe:	734a      	strb	r2, [r1, #13]
    txmsg.data8[6] = 0x00;
 8002e00:	738a      	strb	r2, [r1, #14]
    txmsg.data8[7] = 0x00;
 8002e02:	73ca      	strb	r2, [r1, #15]

    // Start TX Loop
    while (!chThdShouldTerminateX())
 8002e04:	3204      	adds	r2, #4
 8002e06:	4690      	mov	r8, r2
  return chThdEnqueueTimeoutS(tqp, time);
 8002e08:	0025      	movs	r5, r4
 8002e0a:	4642      	mov	r2, r8
 8002e0c:	7f5b      	ldrb	r3, [r3, #29]
 8002e0e:	3508      	adds	r5, #8
 8002e10:	421a      	tst	r2, r3
 8002e12:	d120      	bne.n	8002e56 <can_tx+0x86>
    {
        //Process TSR and ESR
        /*chprintf(DEBUG_CHP, "\n\rStatus:\n\r");*/
        /*CAN_TSR_break(&CAND1);*/
        chThdSleepMilliseconds(250);
 8002e14:	4831      	ldr	r0, [pc, #196]	; (8002edc <can_tx+0x10c>)
 8002e16:	f001 f8db 	bl	8003fd0 <chThdSleep>
        /*CAN_ESR_break(&CAND1);*/
        chThdSleepMilliseconds(750);
 8002e1a:	4831      	ldr	r0, [pc, #196]	; (8002ee0 <can_tx+0x110>)
 8002e1c:	f001 f8d8 	bl	8003fd0 <chThdSleep>
 8002e20:	2320      	movs	r3, #32
 8002e22:	f383 8811 	msr	BASEPRI, r3
    return (canp->can->TSR & CAN_TSR_TME) != 0;
 8002e26:	26e0      	movs	r6, #224	; 0xe0
 8002e28:	0576      	lsls	r6, r6, #21
  while ((canp->state == CAN_SLEEP) || !can_lld_is_tx_empty(canp, mailbox)) {
 8002e2a:	7823      	ldrb	r3, [r4, #0]
 8002e2c:	2b04      	cmp	r3, #4
 8002e2e:	d003      	beq.n	8002e38 <can_tx+0x68>
 8002e30:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002e32:	689a      	ldr	r2, [r3, #8]
 8002e34:	4232      	tst	r2, r6
 8002e36:	d112      	bne.n	8002e5e <can_tx+0x8e>
 8002e38:	21fa      	movs	r1, #250	; 0xfa
 8002e3a:	0028      	movs	r0, r5
 8002e3c:	0089      	lsls	r1, r1, #2
 8002e3e:	f000 ff3f 	bl	8003cc0 <chThdEnqueueTimeoutS>
    if (msg != MSG_OK) {
 8002e42:	2800      	cmp	r0, #0
 8002e44:	d0f1      	beq.n	8002e2a <can_tx+0x5a>
 8002e46:	2300      	movs	r3, #0
 8002e48:	f383 8811 	msr	BASEPRI, r3
 8002e4c:	69bb      	ldr	r3, [r7, #24]
    while (!chThdShouldTerminateX())
 8002e4e:	4642      	mov	r2, r8
 8002e50:	7f5b      	ldrb	r3, [r3, #29]
 8002e52:	421a      	tst	r2, r3
 8002e54:	d0de      	beq.n	8002e14 <can_tx+0x44>

        //Transmit message
        canTransmit(&CAND1, CAN_ANY_MAILBOX, &txmsg, MS2ST(100));
        /*chprintf(DEBUG_CHP, "TX msg: %d\n\r", msg);*/
    }
}
 8002e56:	b006      	add	sp, #24
 8002e58:	bc04      	pop	{r2}
 8002e5a:	4690      	mov	r8, r2
 8002e5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmbp = &canp->can->sTxMailBox[(canp->can->TSR & CAN_TSR_CODE) >> 24];
 8002e5e:	6899      	ldr	r1, [r3, #8]
  if (ctfp->IDE)
 8002e60:	aa02      	add	r2, sp, #8
    tmbp = &canp->can->sTxMailBox[(canp->can->TSR & CAN_TSR_CODE) >> 24];
 8002e62:	0189      	lsls	r1, r1, #6
 8002e64:	0f88      	lsrs	r0, r1, #30
  if (ctfp->IDE)
 8002e66:	210f      	movs	r1, #15
 8002e68:	7812      	ldrb	r2, [r2, #0]
 8002e6a:	438a      	bics	r2, r1
 8002e6c:	2108      	movs	r1, #8
 8002e6e:	4311      	orrs	r1, r2
 8002e70:	22ef      	movs	r2, #239	; 0xef
 8002e72:	400a      	ands	r2, r1
 8002e74:	2120      	movs	r1, #32
 8002e76:	430a      	orrs	r2, r1
 8002e78:	a902      	add	r1, sp, #8
 8002e7a:	700a      	strb	r2, [r1, #0]
 8002e7c:	0692      	lsls	r2, r2, #26
 8002e7e:	d522      	bpl.n	8002ec6 <can_tx+0xf6>
    tir = ((uint32_t)ctfp->EID << 3) | ((uint32_t)ctfp->RTR << 1) |
 8002e80:	4641      	mov	r1, r8
 8002e82:	9a03      	ldr	r2, [sp, #12]
 8002e84:	9201      	str	r2, [sp, #4]
 8002e86:	00d2      	lsls	r2, r2, #3
 8002e88:	430a      	orrs	r2, r1
 8002e8a:	0100      	lsls	r0, r0, #4
  tmbp->TDTR = ctfp->DLC;
 8002e8c:	21c2      	movs	r1, #194	; 0xc2
 8002e8e:	181b      	adds	r3, r3, r0
 8002e90:	2008      	movs	r0, #8
 8002e92:	0049      	lsls	r1, r1, #1
 8002e94:	5058      	str	r0, [r3, r1]
  tmbp->TDLR = ctfp->data32[0];
 8002e96:	9904      	ldr	r1, [sp, #16]
 8002e98:	9101      	str	r1, [sp, #4]
 8002e9a:	0019      	movs	r1, r3
 8002e9c:	9801      	ldr	r0, [sp, #4]
 8002e9e:	3189      	adds	r1, #137	; 0x89
 8002ea0:	31ff      	adds	r1, #255	; 0xff
 8002ea2:	6008      	str	r0, [r1, #0]
  tmbp->TDHR = ctfp->data32[1];
 8002ea4:	9905      	ldr	r1, [sp, #20]
 8002ea6:	9101      	str	r1, [sp, #4]
 8002ea8:	0019      	movs	r1, r3
 8002eaa:	9801      	ldr	r0, [sp, #4]
 8002eac:	318d      	adds	r1, #141	; 0x8d
 8002eae:	31ff      	adds	r1, #255	; 0xff
 8002eb0:	6008      	str	r0, [r1, #0]
  tmbp->TIR  = tir | CAN_TI0R_TXRQ;
 8002eb2:	2101      	movs	r1, #1
 8002eb4:	430a      	orrs	r2, r1
 8002eb6:	3180      	adds	r1, #128	; 0x80
 8002eb8:	31ff      	adds	r1, #255	; 0xff
 8002eba:	505a      	str	r2, [r3, r1]
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	f383 8811 	msr	BASEPRI, r3
 8002ec2:	69bb      	ldr	r3, [r7, #24]
 8002ec4:	e7c3      	b.n	8002e4e <can_tx+0x7e>
    tir = ((uint32_t)ctfp->SID << 21) | ((uint32_t)ctfp->RTR << 1);
 8002ec6:	aa02      	add	r2, sp, #8
 8002ec8:	8892      	ldrh	r2, [r2, #4]
 8002eca:	0552      	lsls	r2, r2, #21
 8002ecc:	e7dd      	b.n	8002e8a <can_tx+0xba>
 8002ece:	46c0      	nop			; (mov r8, r8)
 8002ed0:	200008a8 	.word	0x200008a8
 8002ed4:	08004640 	.word	0x08004640
 8002ed8:	20000410 	.word	0x20000410
 8002edc:	000009c4 	.word	0x000009c4
 8002ee0:	00001d4c 	.word	0x00001d4c
	...

08002ef0 <chThdDequeueAllI.constprop.40>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 8002ef0:	b570      	push	{r4, r5, r6, lr}
 8002ef2:	0004      	movs	r4, r0
  return (bool)(tqp->next != (const thread_t *)tqp);
 8002ef4:	6800      	ldr	r0, [r0, #0]
  tp->u.rdymsg = msg;
 8002ef6:	2500      	movs	r5, #0

  while (queue_notempty(tqp)) {
 8002ef8:	4284      	cmp	r4, r0
 8002efa:	d008      	beq.n	8002f0e <chThdDequeueAllI.constprop.40+0x1e>
  tqp->next             = tp->queue.next;
 8002efc:	6803      	ldr	r3, [r0, #0]
 8002efe:	6023      	str	r3, [r4, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8002f00:	605c      	str	r4, [r3, #4]
 8002f02:	6205      	str	r5, [r0, #32]
  (void) chSchReadyI(tp);
 8002f04:	f001 f874 	bl	8003ff0 <chSchReadyI>
  return (bool)(tqp->next != (const thread_t *)tqp);
 8002f08:	6820      	ldr	r0, [r4, #0]
 8002f0a:	42a0      	cmp	r0, r4
 8002f0c:	d1f6      	bne.n	8002efc <chThdDequeueAllI.constprop.40+0xc>
    chThdDoDequeueNextI(tqp, msg);
  }
}
 8002f0e:	bd70      	pop	{r4, r5, r6, pc}

08002f10 <chprintf.constprop.3>:
 * @param[in] chp       pointer to a @p BaseSequentialStream implementing object
 * @param[in] fmt       formatting string
 *
 * @api
 */
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 8002f10:	b40e      	push	{r1, r2, r3}
 8002f12:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f14:	46de      	mov	lr, fp
 8002f16:	4657      	mov	r7, sl
 8002f18:	4645      	mov	r5, r8
 8002f1a:	464e      	mov	r6, r9
 8002f1c:	b5e0      	push	{r5, r6, r7, lr}
 8002f1e:	b08a      	sub	sp, #40	; 0x28
 8002f20:	ab13      	add	r3, sp, #76	; 0x4c
 8002f22:	cb04      	ldmia	r3!, {r2}
 8002f24:	469a      	mov	sl, r3
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 8002f26:	9306      	str	r3, [sp, #24]
  int n = 0;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	9301      	str	r3, [sp, #4]
 8002f2c:	4bc3      	ldr	r3, [pc, #780]	; (800323c <chprintf.constprop.3+0x32c>)
        streamPut(chp, (uint8_t)*s++);
 8002f2e:	4655      	mov	r5, sl
 8002f30:	469b      	mov	fp, r3
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 8002f32:	9202      	str	r2, [sp, #8]
    c = *fmt++;
 8002f34:	9b02      	ldr	r3, [sp, #8]
 8002f36:	7819      	ldrb	r1, [r3, #0]
 8002f38:	1c5e      	adds	r6, r3, #1
    if (c == 0)
 8002f3a:	2900      	cmp	r1, #0
 8002f3c:	d00f      	beq.n	8002f5e <chprintf.constprop.3+0x4e>
    if (c != '%') {
 8002f3e:	2925      	cmp	r1, #37	; 0x25
 8002f40:	d018      	beq.n	8002f74 <chprintf.constprop.3+0x64>
      streamPut(chp, (uint8_t)c);
 8002f42:	4fbe      	ldr	r7, [pc, #760]	; (800323c <chprintf.constprop.3+0x32c>)
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	0038      	movs	r0, r7
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	4798      	blx	r3
      n++;
 8002f4c:	9b01      	ldr	r3, [sp, #4]
    c = *fmt++;
 8002f4e:	9602      	str	r6, [sp, #8]
      n++;
 8002f50:	3301      	adds	r3, #1
 8002f52:	9301      	str	r3, [sp, #4]
    c = *fmt++;
 8002f54:	9b02      	ldr	r3, [sp, #8]
 8002f56:	7819      	ldrb	r1, [r3, #0]
 8002f58:	1c5e      	adds	r6, r3, #1
    if (c == 0)
 8002f5a:	2900      	cmp	r1, #0
 8002f5c:	d1ef      	bne.n	8002f3e <chprintf.constprop.3+0x2e>
  formatted_bytes = chvprintf(chp, fmt, ap);
  va_end(ap);

  return formatted_bytes;
}
 8002f5e:	9801      	ldr	r0, [sp, #4]
 8002f60:	b00a      	add	sp, #40	; 0x28
 8002f62:	bc3c      	pop	{r2, r3, r4, r5}
 8002f64:	4690      	mov	r8, r2
 8002f66:	4699      	mov	r9, r3
 8002f68:	46a2      	mov	sl, r4
 8002f6a:	46ab      	mov	fp, r5
 8002f6c:	bcf0      	pop	{r4, r5, r6, r7}
 8002f6e:	bc08      	pop	{r3}
 8002f70:	b003      	add	sp, #12
 8002f72:	4718      	bx	r3
    left_align = FALSE;
 8002f74:	2200      	movs	r2, #0
    if (*fmt == '-') {
 8002f76:	9b02      	ldr	r3, [sp, #8]
    left_align = FALSE;
 8002f78:	9203      	str	r2, [sp, #12]
    if (*fmt == '-') {
 8002f7a:	785b      	ldrb	r3, [r3, #1]
 8002f7c:	2b2d      	cmp	r3, #45	; 0x2d
 8002f7e:	d100      	bne.n	8002f82 <chprintf.constprop.3+0x72>
 8002f80:	e151      	b.n	8003226 <chprintf.constprop.3+0x316>
    filler = ' ';
 8002f82:	2220      	movs	r2, #32
 8002f84:	4691      	mov	r9, r2
    if (*fmt == '0') {
 8002f86:	2b30      	cmp	r3, #48	; 0x30
 8002f88:	d100      	bne.n	8002f8c <chprintf.constprop.3+0x7c>
 8002f8a:	e147      	b.n	800321c <chprintf.constprop.3+0x30c>
    width = 0;
 8002f8c:	2400      	movs	r4, #0
 8002f8e:	0021      	movs	r1, r4
 8002f90:	e006      	b.n	8002fa0 <chprintf.constprop.3+0x90>
        c = va_arg(ap, int);
 8002f92:	782a      	ldrb	r2, [r5, #0]
 8002f94:	3504      	adds	r5, #4
      width = width * 10 + c;
 8002f96:	008c      	lsls	r4, r1, #2
 8002f98:	1864      	adds	r4, r4, r1
 8002f9a:	0064      	lsls	r4, r4, #1
 8002f9c:	7833      	ldrb	r3, [r6, #0]
 8002f9e:	1911      	adds	r1, r2, r4
      if (c >= '0' && c <= '9')
 8002fa0:	001a      	movs	r2, r3
 8002fa2:	3a30      	subs	r2, #48	; 0x30
 8002fa4:	b2d2      	uxtb	r2, r2
      c = *fmt++;
 8002fa6:	3601      	adds	r6, #1
      if (c >= '0' && c <= '9')
 8002fa8:	2a09      	cmp	r2, #9
 8002faa:	d9f4      	bls.n	8002f96 <chprintf.constprop.3+0x86>
      else if (c == '*')
 8002fac:	2b2a      	cmp	r3, #42	; 0x2a
 8002fae:	d0f0      	beq.n	8002f92 <chprintf.constprop.3+0x82>
 8002fb0:	000c      	movs	r4, r1
    precision = 0;
 8002fb2:	2200      	movs	r2, #0
    if (c == '.') {
 8002fb4:	2b2e      	cmp	r3, #46	; 0x2e
 8002fb6:	d100      	bne.n	8002fba <chprintf.constprop.3+0xaa>
 8002fb8:	e11b      	b.n	80031f2 <chprintf.constprop.3+0x2e2>
    if (c == 'l' || c == 'L') {
 8002fba:	2120      	movs	r1, #32
 8002fbc:	0018      	movs	r0, r3
 8002fbe:	4388      	bics	r0, r1
 8002fc0:	284c      	cmp	r0, #76	; 0x4c
 8002fc2:	d100      	bne.n	8002fc6 <chprintf.constprop.3+0xb6>
 8002fc4:	e107      	b.n	80031d6 <chprintf.constprop.3+0x2c6>
    switch (c) {
 8002fc6:	0019      	movs	r1, r3
 8002fc8:	3944      	subs	r1, #68	; 0x44
 8002fca:	b2c9      	uxtb	r1, r1
 8002fcc:	2934      	cmp	r1, #52	; 0x34
 8002fce:	d900      	bls.n	8002fd2 <chprintf.constprop.3+0xc2>
 8002fd0:	e0f2      	b.n	80031b8 <chprintf.constprop.3+0x2a8>
 8002fd2:	4f9b      	ldr	r7, [pc, #620]	; (8003240 <chprintf.constprop.3+0x330>)
 8002fd4:	0089      	lsls	r1, r1, #2
 8002fd6:	5879      	ldr	r1, [r7, r1]
 8002fd8:	468f      	mov	pc, r1
 8002fda:	230a      	movs	r3, #10
 8002fdc:	469a      	mov	sl, r3
        l = va_arg(ap, unsigned int);
 8002fde:	682b      	ldr	r3, [r5, #0]
  q = p + MAX_FILLER;
 8002fe0:	aa06      	add	r2, sp, #24
        l = va_arg(ap, unsigned int);
 8002fe2:	4698      	mov	r8, r3
  q = p + MAX_FILLER;
 8002fe4:	4694      	mov	ip, r2
 8002fe6:	230f      	movs	r3, #15
 8002fe8:	4463      	add	r3, ip
 8002fea:	001f      	movs	r7, r3
 8002fec:	4653      	mov	r3, sl
        l = va_arg(ap, unsigned int);
 8002fee:	3504      	adds	r5, #4
  q = p + MAX_FILLER;
 8002ff0:	46a2      	mov	sl, r4
 8002ff2:	4644      	mov	r4, r8
 8002ff4:	46a8      	mov	r8, r5
 8002ff6:	001d      	movs	r5, r3
        l = va_arg(ap, unsigned int);
 8002ff8:	9602      	str	r6, [sp, #8]
    i = (int)(l % radix);
 8002ffa:	0029      	movs	r1, r5
 8002ffc:	0020      	movs	r0, r4
 8002ffe:	f7fd f9e3 	bl	80003c8 <__aeabi_uidivmod>
    i += '0';
 8003002:	000e      	movs	r6, r1
 8003004:	3630      	adds	r6, #48	; 0x30
    if (i > '9')
 8003006:	2e39      	cmp	r6, #57	; 0x39
 8003008:	dd01      	ble.n	800300e <chprintf.constprop.3+0xfe>
      i += 'A' - '0' - 10;
 800300a:	3137      	adds	r1, #55	; 0x37
 800300c:	000e      	movs	r6, r1
    *--q = i;
 800300e:	3f01      	subs	r7, #1
 8003010:	b2f6      	uxtb	r6, r6
    l /= radix;
 8003012:	0020      	movs	r0, r4
    *--q = i;
 8003014:	703e      	strb	r6, [r7, #0]
    l /= radix;
 8003016:	0029      	movs	r1, r5
 8003018:	f7fd f950 	bl	80002bc <__udivsi3>
 800301c:	1e04      	subs	r4, r0, #0
  } while ((ll /= radix) != 0);
 800301e:	d1ec      	bne.n	8002ffa <chprintf.constprop.3+0xea>
  i = (int)(p + MAX_FILLER - q);
 8003020:	aa06      	add	r2, sp, #24
 8003022:	4694      	mov	ip, r2
 8003024:	230f      	movs	r3, #15
 8003026:	4463      	add	r3, ip
 8003028:	1bda      	subs	r2, r3, r7
 800302a:	4645      	mov	r5, r8
 800302c:	4654      	mov	r4, sl
 800302e:	2300      	movs	r3, #0
 8003030:	a907      	add	r1, sp, #28
 8003032:	e000      	b.n	8003036 <chprintf.constprop.3+0x126>
 8003034:	5cfe      	ldrb	r6, [r7, r3]
    *p++ = *q++;
 8003036:	54ce      	strb	r6, [r1, r3]
 8003038:	3301      	adds	r3, #1
  while (--i);
 800303a:	429a      	cmp	r2, r3
 800303c:	d1fa      	bne.n	8003034 <chprintf.constprop.3+0x124>
 800303e:	1e53      	subs	r3, r2, #1
 8003040:	4688      	mov	r8, r1
 8003042:	469a      	mov	sl, r3
    if ((width -= i) < 0)
 8003044:	1aa4      	subs	r4, r4, r2
 8003046:	d500      	bpl.n	800304a <chprintf.constprop.3+0x13a>
 8003048:	e082      	b.n	8003150 <chprintf.constprop.3+0x240>
    if (left_align == FALSE)
 800304a:	9b03      	ldr	r3, [sp, #12]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d000      	beq.n	8003052 <chprintf.constprop.3+0x142>
 8003050:	e0bb      	b.n	80031ca <chprintf.constprop.3+0x2ba>
 8003052:	4266      	negs	r6, r4
    if (width < 0) {
 8003054:	2c00      	cmp	r4, #0
 8003056:	d100      	bne.n	800305a <chprintf.constprop.3+0x14a>
 8003058:	e0b6      	b.n	80031c8 <chprintf.constprop.3+0x2b8>
      if (*s == '-' && filler == '0') {
 800305a:	4643      	mov	r3, r8
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	2b2d      	cmp	r3, #45	; 0x2d
 8003060:	d100      	bne.n	8003064 <chprintf.constprop.3+0x154>
 8003062:	e0f3      	b.n	800324c <chprintf.constprop.3+0x33c>
 8003064:	0023      	movs	r3, r4
 8003066:	464c      	mov	r4, r9
 8003068:	4699      	mov	r9, r3
 800306a:	4f74      	ldr	r7, [pc, #464]	; (800323c <chprintf.constprop.3+0x32c>)
        streamPut(chp, (uint8_t)filler);
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	0021      	movs	r1, r4
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	0038      	movs	r0, r7
      } while (++width != 0);
 8003074:	3601      	adds	r6, #1
        streamPut(chp, (uint8_t)filler);
 8003076:	4798      	blx	r3
      } while (++width != 0);
 8003078:	2e00      	cmp	r6, #0
 800307a:	d1f7      	bne.n	800306c <chprintf.constprop.3+0x15c>
 800307c:	464b      	mov	r3, r9
 800307e:	46a1      	mov	r9, r4
 8003080:	001c      	movs	r4, r3
 8003082:	9b01      	ldr	r3, [sp, #4]
 8003084:	469c      	mov	ip, r3
 8003086:	44a4      	add	ip, r4
 8003088:	4663      	mov	r3, ip
 800308a:	9301      	str	r3, [sp, #4]
    while (--i >= 0) {
 800308c:	4653      	mov	r3, sl
 800308e:	2400      	movs	r4, #0
 8003090:	2b00      	cmp	r3, #0
 8003092:	da00      	bge.n	8003096 <chprintf.constprop.3+0x186>
 8003094:	e74e      	b.n	8002f34 <chprintf.constprop.3+0x24>
 8003096:	003b      	movs	r3, r7
 8003098:	4656      	mov	r6, sl
 800309a:	4647      	mov	r7, r8
 800309c:	46a0      	mov	r8, r4
 800309e:	001c      	movs	r4, r3
      streamPut(chp, (uint8_t)*s++);
 80030a0:	6823      	ldr	r3, [r4, #0]
 80030a2:	7839      	ldrb	r1, [r7, #0]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	0020      	movs	r0, r4
 80030a8:	4798      	blx	r3
 80030aa:	3701      	adds	r7, #1
    while (--i >= 0) {
 80030ac:	3e01      	subs	r6, #1
 80030ae:	d2f7      	bcs.n	80030a0 <chprintf.constprop.3+0x190>
 80030b0:	4644      	mov	r4, r8
 80030b2:	9b01      	ldr	r3, [sp, #4]
 80030b4:	3301      	adds	r3, #1
 80030b6:	4453      	add	r3, sl
 80030b8:	9301      	str	r3, [sp, #4]
    while (width) {
 80030ba:	2c00      	cmp	r4, #0
 80030bc:	d100      	bne.n	80030c0 <chprintf.constprop.3+0x1b0>
 80030be:	e739      	b.n	8002f34 <chprintf.constprop.3+0x24>
 80030c0:	0026      	movs	r6, r4
 80030c2:	464f      	mov	r7, r9
      streamPut(chp, (uint8_t)filler);
 80030c4:	465b      	mov	r3, fp
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	0039      	movs	r1, r7
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	4658      	mov	r0, fp
      width--;
 80030ce:	3e01      	subs	r6, #1
      streamPut(chp, (uint8_t)filler);
 80030d0:	4798      	blx	r3
    while (width) {
 80030d2:	2e00      	cmp	r6, #0
 80030d4:	d1f6      	bne.n	80030c4 <chprintf.constprop.3+0x1b4>
 80030d6:	9b01      	ldr	r3, [sp, #4]
 80030d8:	469c      	mov	ip, r3
 80030da:	44a4      	add	ip, r4
 80030dc:	4663      	mov	r3, ip
 80030de:	9301      	str	r3, [sp, #4]
 80030e0:	e728      	b.n	8002f34 <chprintf.constprop.3+0x24>
    switch (c) {
 80030e2:	2308      	movs	r3, #8
 80030e4:	469a      	mov	sl, r3
 80030e6:	e77a      	b.n	8002fde <chprintf.constprop.3+0xce>
        l = va_arg(ap, int);
 80030e8:	682f      	ldr	r7, [r5, #0]
        *p++ = '-';
 80030ea:	ab07      	add	r3, sp, #28
        l = va_arg(ap, int);
 80030ec:	3504      	adds	r5, #4
 80030ee:	9602      	str	r6, [sp, #8]
        *p++ = '-';
 80030f0:	4698      	mov	r8, r3
      if (l < 0) {
 80030f2:	2f00      	cmp	r7, #0
 80030f4:	da00      	bge.n	80030f8 <chprintf.constprop.3+0x1e8>
 80030f6:	e0c1      	b.n	800327c <chprintf.constprop.3+0x36c>
    p = tmpbuf;
 80030f8:	9304      	str	r3, [sp, #16]
  q = p + MAX_FILLER;
 80030fa:	9b04      	ldr	r3, [sp, #16]
 80030fc:	330b      	adds	r3, #11
 80030fe:	469a      	mov	sl, r3
 8003100:	9305      	str	r3, [sp, #20]
 8003102:	0023      	movs	r3, r4
 8003104:	4654      	mov	r4, sl
 8003106:	469a      	mov	sl, r3
    i = (int)(l % radix);
 8003108:	0038      	movs	r0, r7
 800310a:	210a      	movs	r1, #10
 800310c:	f7fd f95c 	bl	80003c8 <__aeabi_uidivmod>
    i += '0';
 8003110:	3130      	adds	r1, #48	; 0x30
    *--q = i;
 8003112:	b2ce      	uxtb	r6, r1
 8003114:	3c01      	subs	r4, #1
    l /= radix;
 8003116:	0038      	movs	r0, r7
    *--q = i;
 8003118:	7026      	strb	r6, [r4, #0]
    l /= radix;
 800311a:	210a      	movs	r1, #10
 800311c:	f7fd f8ce 	bl	80002bc <__udivsi3>
 8003120:	1e07      	subs	r7, r0, #0
  } while ((ll /= radix) != 0);
 8003122:	d1f1      	bne.n	8003108 <chprintf.constprop.3+0x1f8>
 8003124:	4653      	mov	r3, sl
 8003126:	46a2      	mov	sl, r4
  i = (int)(p + MAX_FILLER - q);
 8003128:	4651      	mov	r1, sl
 800312a:	9a05      	ldr	r2, [sp, #20]
 800312c:	001c      	movs	r4, r3
 800312e:	9b04      	ldr	r3, [sp, #16]
 8003130:	1a52      	subs	r2, r2, r1
 8003132:	189a      	adds	r2, r3, r2
 8003134:	e000      	b.n	8003138 <chprintf.constprop.3+0x228>
 8003136:	780e      	ldrb	r6, [r1, #0]
    *p++ = *q++;
 8003138:	701e      	strb	r6, [r3, #0]
 800313a:	3301      	adds	r3, #1
 800313c:	3101      	adds	r1, #1
  while (--i);
 800313e:	429a      	cmp	r2, r3
 8003140:	d1f9      	bne.n	8003136 <chprintf.constprop.3+0x226>
 8003142:	4643      	mov	r3, r8
 8003144:	1ad2      	subs	r2, r2, r3
 8003146:	1e53      	subs	r3, r2, #1
 8003148:	469a      	mov	sl, r3
    if ((width -= i) < 0)
 800314a:	1aa4      	subs	r4, r4, r2
 800314c:	d400      	bmi.n	8003150 <chprintf.constprop.3+0x240>
 800314e:	e77c      	b.n	800304a <chprintf.constprop.3+0x13a>
    while (--i >= 0) {
 8003150:	4653      	mov	r3, sl
 8003152:	2400      	movs	r4, #0
 8003154:	2b00      	cmp	r3, #0
 8003156:	da00      	bge.n	800315a <chprintf.constprop.3+0x24a>
 8003158:	e6ec      	b.n	8002f34 <chprintf.constprop.3+0x24>
 800315a:	4f38      	ldr	r7, [pc, #224]	; (800323c <chprintf.constprop.3+0x32c>)
 800315c:	e79b      	b.n	8003096 <chprintf.constprop.3+0x186>
      if ((s = va_arg(ap, char *)) == 0)
 800315e:	682b      	ldr	r3, [r5, #0]
 8003160:	1d29      	adds	r1, r5, #4
 8003162:	4698      	mov	r8, r3
 8003164:	2b00      	cmp	r3, #0
 8003166:	d100      	bne.n	800316a <chprintf.constprop.3+0x25a>
 8003168:	e092      	b.n	8003290 <chprintf.constprop.3+0x380>
      if (precision == 0)
 800316a:	2a00      	cmp	r2, #0
 800316c:	d161      	bne.n	8003232 <chprintf.constprop.3+0x322>
      for (p = s; *p && (--precision >= 0); p++)
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d100      	bne.n	8003176 <chprintf.constprop.3+0x266>
 8003174:	e09b      	b.n	80032ae <chprintf.constprop.3+0x39e>
 8003176:	4a33      	ldr	r2, [pc, #204]	; (8003244 <chprintf.constprop.3+0x334>)
 8003178:	4643      	mov	r3, r8
 800317a:	e001      	b.n	8003180 <chprintf.constprop.3+0x270>
 800317c:	3a01      	subs	r2, #1
 800317e:	d403      	bmi.n	8003188 <chprintf.constprop.3+0x278>
 8003180:	3301      	adds	r3, #1
 8003182:	7818      	ldrb	r0, [r3, #0]
 8003184:	2800      	cmp	r0, #0
 8003186:	d1f9      	bne.n	800317c <chprintf.constprop.3+0x26c>
 8003188:	4642      	mov	r2, r8
 800318a:	1a9a      	subs	r2, r3, r2
 800318c:	1e53      	subs	r3, r2, #1
 800318e:	469a      	mov	sl, r3
      filler = ' ';
 8003190:	2320      	movs	r3, #32
      if ((s = va_arg(ap, char *)) == 0)
 8003192:	000d      	movs	r5, r1
      for (p = s; *p && (--precision >= 0); p++)
 8003194:	9602      	str	r6, [sp, #8]
      filler = ' ';
 8003196:	4699      	mov	r9, r3
 8003198:	e754      	b.n	8003044 <chprintf.constprop.3+0x134>
      *p++ = va_arg(ap, int);
 800319a:	782a      	ldrb	r2, [r5, #0]
 800319c:	ab07      	add	r3, sp, #28
 800319e:	701a      	strb	r2, [r3, #0]
 80031a0:	4698      	mov	r8, r3
 80031a2:	2300      	movs	r3, #0
 80031a4:	469a      	mov	sl, r3
      filler = ' ';
 80031a6:	3320      	adds	r3, #32
      *p++ = va_arg(ap, int);
 80031a8:	3504      	adds	r5, #4
 80031aa:	9602      	str	r6, [sp, #8]
 80031ac:	2201      	movs	r2, #1
      filler = ' ';
 80031ae:	4699      	mov	r9, r3
 80031b0:	e748      	b.n	8003044 <chprintf.constprop.3+0x134>
    switch (c) {
 80031b2:	2310      	movs	r3, #16
 80031b4:	469a      	mov	sl, r3
 80031b6:	e712      	b.n	8002fde <chprintf.constprop.3+0xce>
      *p++ = c;
 80031b8:	aa07      	add	r2, sp, #28
 80031ba:	7013      	strb	r3, [r2, #0]
 80031bc:	2300      	movs	r3, #0
 80031be:	4690      	mov	r8, r2
 80031c0:	9602      	str	r6, [sp, #8]
 80031c2:	469a      	mov	sl, r3
 80031c4:	2201      	movs	r2, #1
 80031c6:	e73d      	b.n	8003044 <chprintf.constprop.3+0x134>
    if (width < 0) {
 80031c8:	0034      	movs	r4, r6
    while (--i >= 0) {
 80031ca:	4653      	mov	r3, sl
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	da00      	bge.n	80031d2 <chprintf.constprop.3+0x2c2>
 80031d0:	e773      	b.n	80030ba <chprintf.constprop.3+0x1aa>
 80031d2:	4f1a      	ldr	r7, [pc, #104]	; (800323c <chprintf.constprop.3+0x32c>)
 80031d4:	e75f      	b.n	8003096 <chprintf.constprop.3+0x186>
      if (*fmt)
 80031d6:	7831      	ldrb	r1, [r6, #0]
 80031d8:	2900      	cmp	r1, #0
 80031da:	d001      	beq.n	80031e0 <chprintf.constprop.3+0x2d0>
        c = *fmt++;
 80031dc:	000b      	movs	r3, r1
 80031de:	3601      	adds	r6, #1
    switch (c) {
 80031e0:	0019      	movs	r1, r3
 80031e2:	3944      	subs	r1, #68	; 0x44
 80031e4:	b2c9      	uxtb	r1, r1
 80031e6:	2934      	cmp	r1, #52	; 0x34
 80031e8:	d8e6      	bhi.n	80031b8 <chprintf.constprop.3+0x2a8>
 80031ea:	4817      	ldr	r0, [pc, #92]	; (8003248 <chprintf.constprop.3+0x338>)
 80031ec:	0089      	lsls	r1, r1, #2
 80031ee:	5841      	ldr	r1, [r0, r1]
 80031f0:	468f      	mov	pc, r1
    if (c == '.') {
 80031f2:	0033      	movs	r3, r6
 80031f4:	0010      	movs	r0, r2
 80031f6:	e006      	b.n	8003206 <chprintf.constprop.3+0x2f6>
          c = va_arg(ap, int);
 80031f8:	7829      	ldrb	r1, [r5, #0]
 80031fa:	3504      	adds	r5, #4
        c = *fmt++;
 80031fc:	0033      	movs	r3, r6
        precision *= 10;
 80031fe:	0082      	lsls	r2, r0, #2
 8003200:	1812      	adds	r2, r2, r0
 8003202:	0052      	lsls	r2, r2, #1
        precision += c;
 8003204:	1888      	adds	r0, r1, r2
        c = *fmt++;
 8003206:	781b      	ldrb	r3, [r3, #0]
 8003208:	3601      	adds	r6, #1
        if (c >= '0' && c <= '9')
 800320a:	0019      	movs	r1, r3
 800320c:	3930      	subs	r1, #48	; 0x30
 800320e:	b2c9      	uxtb	r1, r1
 8003210:	2909      	cmp	r1, #9
 8003212:	d9f3      	bls.n	80031fc <chprintf.constprop.3+0x2ec>
        else if (c == '*')
 8003214:	2b2a      	cmp	r3, #42	; 0x2a
 8003216:	d0ef      	beq.n	80031f8 <chprintf.constprop.3+0x2e8>
 8003218:	0002      	movs	r2, r0
 800321a:	e6ce      	b.n	8002fba <chprintf.constprop.3+0xaa>
      filler = '0';
 800321c:	3210      	adds	r2, #16
 800321e:	7873      	ldrb	r3, [r6, #1]
 8003220:	4691      	mov	r9, r2
      fmt++;
 8003222:	3601      	adds	r6, #1
 8003224:	e6b2      	b.n	8002f8c <chprintf.constprop.3+0x7c>
      fmt++;
 8003226:	9b02      	ldr	r3, [sp, #8]
      left_align = TRUE;
 8003228:	3201      	adds	r2, #1
      fmt++;
 800322a:	1c9e      	adds	r6, r3, #2
      left_align = TRUE;
 800322c:	9203      	str	r2, [sp, #12]
 800322e:	789b      	ldrb	r3, [r3, #2]
 8003230:	e6a7      	b.n	8002f82 <chprintf.constprop.3+0x72>
      for (p = s; *p && (--precision >= 0); p++)
 8003232:	781b      	ldrb	r3, [r3, #0]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d032      	beq.n	800329e <chprintf.constprop.3+0x38e>
 8003238:	3a01      	subs	r2, #1
 800323a:	e79d      	b.n	8003178 <chprintf.constprop.3+0x268>
 800323c:	20000478 	.word	0x20000478
 8003240:	080043d8 	.word	0x080043d8
 8003244:	00007ffe 	.word	0x00007ffe
 8003248:	080044ac 	.word	0x080044ac
      if (*s == '-' && filler == '0') {
 800324c:	464b      	mov	r3, r9
 800324e:	2b30      	cmp	r3, #48	; 0x30
 8003250:	d000      	beq.n	8003254 <chprintf.constprop.3+0x344>
 8003252:	e707      	b.n	8003064 <chprintf.constprop.3+0x154>
        streamPut(chp, (uint8_t)*s++);
 8003254:	2301      	movs	r3, #1
 8003256:	469c      	mov	ip, r3
 8003258:	4f18      	ldr	r7, [pc, #96]	; (80032bc <chprintf.constprop.3+0x3ac>)
 800325a:	212d      	movs	r1, #45	; 0x2d
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	0038      	movs	r0, r7
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	44e0      	add	r8, ip
 8003264:	4798      	blx	r3
        n++;
 8003266:	9b01      	ldr	r3, [sp, #4]
 8003268:	3301      	adds	r3, #1
 800326a:	9301      	str	r3, [sp, #4]
 800326c:	2301      	movs	r3, #1
 800326e:	425b      	negs	r3, r3
 8003270:	469c      	mov	ip, r3
 8003272:	0023      	movs	r3, r4
 8003274:	44e2      	add	sl, ip
 8003276:	464c      	mov	r4, r9
 8003278:	4699      	mov	r9, r3
 800327a:	e6f7      	b.n	800306c <chprintf.constprop.3+0x15c>
        *p++ = '-';
 800327c:	232d      	movs	r3, #45	; 0x2d
 800327e:	4642      	mov	r2, r8
 8003280:	7013      	strb	r3, [r2, #0]
 8003282:	aa06      	add	r2, sp, #24
 8003284:	4694      	mov	ip, r2
 8003286:	3b28      	subs	r3, #40	; 0x28
 8003288:	4463      	add	r3, ip
        l = -l;
 800328a:	427f      	negs	r7, r7
        *p++ = '-';
 800328c:	9304      	str	r3, [sp, #16]
 800328e:	e734      	b.n	80030fa <chprintf.constprop.3+0x1ea>
      if (precision == 0)
 8003290:	2a00      	cmp	r2, #0
 8003292:	d100      	bne.n	8003296 <chprintf.constprop.3+0x386>
        precision = 32767;
 8003294:	4a0a      	ldr	r2, [pc, #40]	; (80032c0 <chprintf.constprop.3+0x3b0>)
        s = "(null)";
 8003296:	4b0b      	ldr	r3, [pc, #44]	; (80032c4 <chprintf.constprop.3+0x3b4>)
      for (p = s; *p && (--precision >= 0); p++)
 8003298:	3a01      	subs	r2, #1
        s = "(null)";
 800329a:	4698      	mov	r8, r3
 800329c:	e76c      	b.n	8003178 <chprintf.constprop.3+0x268>
      for (p = s; *p && (--precision >= 0); p++)
 800329e:	2301      	movs	r3, #1
 80032a0:	425b      	negs	r3, r3
 80032a2:	469a      	mov	sl, r3
 80032a4:	3321      	adds	r3, #33	; 0x21
 80032a6:	9602      	str	r6, [sp, #8]
 80032a8:	000d      	movs	r5, r1
 80032aa:	4699      	mov	r9, r3
 80032ac:	e6cd      	b.n	800304a <chprintf.constprop.3+0x13a>
 80032ae:	3b01      	subs	r3, #1
 80032b0:	469a      	mov	sl, r3
 80032b2:	3321      	adds	r3, #33	; 0x21
 80032b4:	9602      	str	r6, [sp, #8]
 80032b6:	000d      	movs	r5, r1
 80032b8:	4699      	mov	r9, r3
 80032ba:	e6c6      	b.n	800304a <chprintf.constprop.3+0x13a>
 80032bc:	20000478 	.word	0x20000478
 80032c0:	00007fff 	.word	0x00007fff
 80032c4:	08004674 	.word	0x08004674
	...

080032d0 <main>:
  rccResetAHB1(~0);
 80032d0:	4b1e      	ldr	r3, [pc, #120]	; (800334c <main+0x7c>)
 80032d2:	2101      	movs	r1, #1
    // CAN Driver 1
    canStart(&CAND1, &cancfg);

}

int main(void) {
 80032d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032d6:	691a      	ldr	r2, [r3, #16]
 80032d8:	46de      	mov	lr, fp
 80032da:	2200      	movs	r2, #0
 80032dc:	4657      	mov	r7, sl
 80032de:	464e      	mov	r6, r9
 80032e0:	4645      	mov	r5, r8
 80032e2:	4249      	negs	r1, r1
 80032e4:	b5e0      	push	{r5, r6, r7, lr}
 80032e6:	6119      	str	r1, [r3, #16]
 80032e8:	611a      	str	r2, [r3, #16]
  rccResetAHB2(~0);
 80032ea:	6958      	ldr	r0, [r3, #20]
 80032ec:	6159      	str	r1, [r3, #20]
 80032ee:	615a      	str	r2, [r3, #20]
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 80032f0:	6a1c      	ldr	r4, [r3, #32]
 80032f2:	4817      	ldr	r0, [pc, #92]	; (8003350 <main+0x80>)
 80032f4:	b083      	sub	sp, #12
 80032f6:	4320      	orrs	r0, r4
 80032f8:	6218      	str	r0, [r3, #32]
 80032fa:	621a      	str	r2, [r3, #32]
  rccResetAPB2(~0);
 80032fc:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80032fe:	6259      	str	r1, [r3, #36]	; 0x24
  rccEnablePWRInterface(FALSE);
 8003300:	2180      	movs	r1, #128	; 0x80
  rccResetAPB2(~0);
 8003302:	625a      	str	r2, [r3, #36]	; 0x24
  rccEnablePWRInterface(FALSE);
 8003304:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8003306:	0549      	lsls	r1, r1, #21
 8003308:	4301      	orrs	r1, r0
 800330a:	6419      	str	r1, [r3, #64]	; 0x40
  PWR->CR |= PWR_CR_DBP;
 800330c:	2180      	movs	r1, #128	; 0x80
 800330e:	4811      	ldr	r0, [pc, #68]	; (8003354 <main+0x84>)
 8003310:	0049      	lsls	r1, r1, #1
 8003312:	6804      	ldr	r4, [r0, #0]
 8003314:	4321      	orrs	r1, r4
 8003316:	6001      	str	r1, [r0, #0]
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
 8003318:	20c0      	movs	r0, #192	; 0xc0
 800331a:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800331c:	0080      	lsls	r0, r0, #2
 800331e:	4001      	ands	r1, r0
 8003320:	3801      	subs	r0, #1
 8003322:	38ff      	subs	r0, #255	; 0xff
 8003324:	4281      	cmp	r1, r0
 8003326:	d003      	beq.n	8003330 <main+0x60>
    RCC->BDCR = RCC_BDCR_BDRST;
 8003328:	2180      	movs	r1, #128	; 0x80
 800332a:	0249      	lsls	r1, r1, #9
 800332c:	6719      	str	r1, [r3, #112]	; 0x70
    RCC->BDCR = 0;
 800332e:	671a      	str	r2, [r3, #112]	; 0x70
 8003330:	4f09      	ldr	r7, [pc, #36]	; (8003358 <main+0x88>)
  PWR->CSR &= ~PWR_CSR_BRE;
 8003332:	4a08      	ldr	r2, [pc, #32]	; (8003354 <main+0x84>)
 8003334:	003c      	movs	r4, r7
 8003336:	6853      	ldr	r3, [r2, #4]
 8003338:	4908      	ldr	r1, [pc, #32]	; (800335c <main+0x8c>)
 800333a:	34c0      	adds	r4, #192	; 0xc0
 800333c:	400b      	ands	r3, r1
 800333e:	6053      	str	r3, [r2, #4]
 8003340:	4907      	ldr	r1, [pc, #28]	; (8003360 <main+0x90>)
 8003342:	003a      	movs	r2, r7
 8003344:	4807      	ldr	r0, [pc, #28]	; (8003364 <main+0x94>)
void dmaInit(void) {
  unsigned i;

  dma_streams_mask = 0U;
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].stream->CR = 0U;
 8003346:	2300      	movs	r3, #0
 8003348:	e00f      	b.n	800336a <main+0x9a>
 800334a:	46c0      	nop			; (mov r8, r8)
 800334c:	40023800 	.word	0x40023800
 8003350:	efffffff 	.word	0xefffffff
 8003354:	40007000 	.word	0x40007000
 8003358:	08004580 	.word	0x08004580
 800335c:	fffffdff 	.word	0xfffffdff
 8003360:	20000a08 	.word	0x20000a08
 8003364:	40026010 	.word	0x40026010
 8003368:	6810      	ldr	r0, [r2, #0]
 800336a:	320c      	adds	r2, #12
 800336c:	6003      	str	r3, [r0, #0]
    dma_isr_redir[i].dma_func = NULL;
 800336e:	600b      	str	r3, [r1, #0]
 8003370:	3108      	adds	r1, #8
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
 8003372:	42a2      	cmp	r2, r4
 8003374:	d1f8      	bne.n	8003368 <main+0x98>
  }
  DMA1->LIFCR = 0xFFFFFFFFU;
 8003376:	2101      	movs	r1, #1
 8003378:	4af9      	ldr	r2, [pc, #996]	; (8003760 <main+0x490>)
 800337a:	4249      	negs	r1, r1
 800337c:	6091      	str	r1, [r2, #8]
  DMA1->HIFCR = 0xFFFFFFFFU;
 800337e:	60d1      	str	r1, [r2, #12]
  DMA2->LIFCR = 0xFFFFFFFFU;
 8003380:	4af8      	ldr	r2, [pc, #992]	; (8003764 <main+0x494>)
#elif defined(STM32F0XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F3XX) || defined(STM32F37X)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F2XX) || defined(STM32F4XX) || defined(STM32F7XX)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
 8003382:	24ff      	movs	r4, #255	; 0xff
 8003384:	6091      	str	r1, [r2, #8]
  DMA2->HIFCR = 0xFFFFFFFFU;
 8003386:	60d1      	str	r1, [r2, #12]
 8003388:	4af7      	ldr	r2, [pc, #988]	; (8003768 <main+0x498>)
  gpiop->AFRH    = config->afrh;
 800338a:	2599      	movs	r5, #153	; 0x99
  RCC->AHB1ENR   |= AHB1_EN_MASK;
 800338c:	4693      	mov	fp, r2
 800338e:	6b10      	ldr	r0, [r2, #48]	; 0x30
 8003390:	4320      	orrs	r0, r4
 8003392:	6310      	str	r0, [r2, #48]	; 0x30
  RCC->AHB1LPENR |= AHB1_LPEN_MASK;
 8003394:	4658      	mov	r0, fp
 8003396:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003398:	4322      	orrs	r2, r4
 800339a:	6502      	str	r2, [r0, #80]	; 0x50
  gpiop->OSPEEDR = config->ospeedr;
 800339c:	2051      	movs	r0, #81	; 0x51
  gpiop->OTYPER  = config->otyper;
 800339e:	4af3      	ldr	r2, [pc, #972]	; (800376c <main+0x49c>)
  gpiop->OSPEEDR = config->ospeedr;
 80033a0:	4240      	negs	r0, r0
  gpiop->OTYPER  = config->otyper;
 80033a2:	6053      	str	r3, [r2, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80033a4:	6090      	str	r0, [r2, #8]
  gpiop->PUPDR   = config->pupdr;
 80033a6:	48f2      	ldr	r0, [pc, #968]	; (8003770 <main+0x4a0>)
 80033a8:	4cf2      	ldr	r4, [pc, #968]	; (8003774 <main+0x4a4>)
 80033aa:	60d0      	str	r0, [r2, #12]
  gpiop->ODR     = config->odr;
 80033ac:	48f2      	ldr	r0, [pc, #968]	; (8003778 <main+0x4a8>)
 80033ae:	6150      	str	r0, [r2, #20]
  gpiop->AFRL    = config->afrl;
 80033b0:	48f2      	ldr	r0, [pc, #968]	; (800377c <main+0x4ac>)
 80033b2:	6210      	str	r0, [r2, #32]
  gpiop->AFRH    = config->afrh;
 80033b4:	20aa      	movs	r0, #170	; 0xaa
 80033b6:	0300      	lsls	r0, r0, #12
 80033b8:	6250      	str	r0, [r2, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80033ba:	48f1      	ldr	r0, [pc, #964]	; (8003780 <main+0x4b0>)
 80033bc:	6010      	str	r0, [r2, #0]
  gpiop->OTYPER  = config->otyper;
 80033be:	4af1      	ldr	r2, [pc, #964]	; (8003784 <main+0x4b4>)
  gpiop->ODR     = config->odr;
 80033c0:	48f1      	ldr	r0, [pc, #964]	; (8003788 <main+0x4b8>)
  gpiop->OTYPER  = config->otyper;
 80033c2:	6053      	str	r3, [r2, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80033c4:	6091      	str	r1, [r2, #8]
  gpiop->PUPDR   = config->pupdr;
 80033c6:	60d4      	str	r4, [r2, #12]
  gpiop->ODR     = config->odr;
 80033c8:	6150      	str	r0, [r2, #20]
  gpiop->AFRL    = config->afrl;
 80033ca:	6213      	str	r3, [r2, #32]
  gpiop->AFRH    = config->afrh;
 80033cc:	6255      	str	r5, [r2, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80033ce:	4def      	ldr	r5, [pc, #956]	; (800378c <main+0x4bc>)
 80033d0:	6015      	str	r5, [r2, #0]
  gpiop->OTYPER  = config->otyper;
 80033d2:	4aef      	ldr	r2, [pc, #956]	; (8003790 <main+0x4c0>)
  gpiop->PUPDR   = config->pupdr;
 80033d4:	4def      	ldr	r5, [pc, #956]	; (8003794 <main+0x4c4>)
  gpiop->OTYPER  = config->otyper;
 80033d6:	6053      	str	r3, [r2, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80033d8:	6091      	str	r1, [r2, #8]
  gpiop->PUPDR   = config->pupdr;
 80033da:	60d5      	str	r5, [r2, #12]
  gpiop->ODR     = config->odr;
 80033dc:	6150      	str	r0, [r2, #20]
  gpiop->AFRL    = config->afrl;
 80033de:	6213      	str	r3, [r2, #32]
  gpiop->AFRH    = config->afrh;
 80033e0:	6253      	str	r3, [r2, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80033e2:	6013      	str	r3, [r2, #0]
  gpiop->OTYPER  = config->otyper;
 80033e4:	4aec      	ldr	r2, [pc, #944]	; (8003798 <main+0x4c8>)
 80033e6:	6053      	str	r3, [r2, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80033e8:	6091      	str	r1, [r2, #8]
  gpiop->PUPDR   = config->pupdr;
 80033ea:	60d4      	str	r4, [r2, #12]
  gpiop->ODR     = config->odr;
 80033ec:	6150      	str	r0, [r2, #20]
  gpiop->AFRL    = config->afrl;
 80033ee:	6213      	str	r3, [r2, #32]
  gpiop->AFRH    = config->afrh;
 80033f0:	6253      	str	r3, [r2, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80033f2:	6013      	str	r3, [r2, #0]
  gpiop->OTYPER  = config->otyper;
 80033f4:	4ae9      	ldr	r2, [pc, #932]	; (800379c <main+0x4cc>)
  canp->state    = CAN_STOP;
 80033f6:	4dea      	ldr	r5, [pc, #936]	; (80037a0 <main+0x4d0>)
 80033f8:	6053      	str	r3, [r2, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80033fa:	6091      	str	r1, [r2, #8]
  gpiop->PUPDR   = config->pupdr;
 80033fc:	60d4      	str	r4, [r2, #12]
  gpiop->ODR     = config->odr;
 80033fe:	6150      	str	r0, [r2, #20]
  gpiop->AFRL    = config->afrl;
 8003400:	6213      	str	r3, [r2, #32]
  gpiop->AFRH    = config->afrh;
 8003402:	6253      	str	r3, [r2, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8003404:	6013      	str	r3, [r2, #0]
  gpiop->OTYPER  = config->otyper;
 8003406:	4ae7      	ldr	r2, [pc, #924]	; (80037a4 <main+0x4d4>)
 8003408:	6053      	str	r3, [r2, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800340a:	6091      	str	r1, [r2, #8]
  gpiop->PUPDR   = config->pupdr;
 800340c:	60d4      	str	r4, [r2, #12]
  gpiop->ODR     = config->odr;
 800340e:	6150      	str	r0, [r2, #20]
  gpiop->AFRL    = config->afrl;
 8003410:	6213      	str	r3, [r2, #32]
  gpiop->AFRH    = config->afrh;
 8003412:	6253      	str	r3, [r2, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8003414:	6013      	str	r3, [r2, #0]
  gpiop->OTYPER  = config->otyper;
 8003416:	4ae4      	ldr	r2, [pc, #912]	; (80037a8 <main+0x4d8>)
 8003418:	6053      	str	r3, [r2, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800341a:	6091      	str	r1, [r2, #8]
  gpiop->PUPDR   = config->pupdr;
 800341c:	60d4      	str	r4, [r2, #12]
  gpiop->ODR     = config->odr;
 800341e:	6150      	str	r0, [r2, #20]
  gpiop->PUPDR   = config->pupdr;
 8003420:	4ce2      	ldr	r4, [pc, #904]	; (80037ac <main+0x4dc>)
  gpiop->AFRL    = config->afrl;
 8003422:	6213      	str	r3, [r2, #32]
  gpiop->AFRH    = config->afrh;
 8003424:	6253      	str	r3, [r2, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8003426:	6013      	str	r3, [r2, #0]
  gpiop->OTYPER  = config->otyper;
 8003428:	4ae1      	ldr	r2, [pc, #900]	; (80037b0 <main+0x4e0>)
 800342a:	6053      	str	r3, [r2, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800342c:	6091      	str	r1, [r2, #8]
  gpiop->PUPDR   = config->pupdr;
 800342e:	60d4      	str	r4, [r2, #12]
  gpiop->ODR     = config->odr;
 8003430:	6150      	str	r0, [r2, #20]
  gpiop->AFRL    = config->afrl;
 8003432:	6213      	str	r3, [r2, #32]
  gpiop->AFRH    = config->afrh;
 8003434:	6253      	str	r3, [r2, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8003436:	6013      	str	r3, [r2, #0]
  tqp->next = (thread_t *)tqp;
 8003438:	002a      	movs	r2, r5
 800343a:	2001      	movs	r0, #1
 800343c:	3208      	adds	r2, #8
 800343e:	7028      	strb	r0, [r5, #0]
 8003440:	60aa      	str	r2, [r5, #8]
  tqp->prev = (thread_t *)tqp;
 8003442:	60ea      	str	r2, [r5, #12]
  tqp->next = (thread_t *)tqp;
 8003444:	002a      	movs	r2, r5
 8003446:	3210      	adds	r2, #16
 8003448:	612a      	str	r2, [r5, #16]
  tqp->prev = (thread_t *)tqp;
 800344a:	616a      	str	r2, [r5, #20]
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->next = (event_listener_t *)esp;
 800344c:	002a      	movs	r2, r5
 800344e:	3218      	adds	r2, #24
 8003450:	61aa      	str	r2, [r5, #24]
 8003452:	002a      	movs	r2, r5
    rccEnableCAN1(FALSE);
 8003454:	465c      	mov	r4, fp
 8003456:	321c      	adds	r2, #28
 8003458:	61ea      	str	r2, [r5, #28]
 800345a:	002a      	movs	r2, r5
 800345c:	6c24      	ldr	r4, [r4, #64]	; 0x40
 800345e:	3220      	adds	r2, #32
 8003460:	46a4      	mov	ip, r4
 8003462:	622a      	str	r2, [r5, #32]
 8003464:	002a      	movs	r2, r5
 8003466:	2480      	movs	r4, #128	; 0x80
 8003468:	4666      	mov	r6, ip
 800346a:	3224      	adds	r2, #36	; 0x24
 800346c:	626a      	str	r2, [r5, #36]	; 0x24
 800346e:	002a      	movs	r2, r5
 8003470:	04a4      	lsls	r4, r4, #18
 8003472:	4334      	orrs	r4, r6
 8003474:	465e      	mov	r6, fp
 8003476:	3228      	adds	r2, #40	; 0x28
 8003478:	62aa      	str	r2, [r5, #40]	; 0x28
  CAND1.can = CAN1;
 800347a:	4ace      	ldr	r2, [pc, #824]	; (80037b4 <main+0x4e4>)
  canp->config   = NULL;
 800347c:	606b      	str	r3, [r5, #4]
 800347e:	62ea      	str	r2, [r5, #44]	; 0x2c
    rccEnableCAN1(FALSE);
 8003480:	6434      	str	r4, [r6, #64]	; 0x40
    canp->can->FMR = (canp->can->FMR & 0xFFFF0000) | CAN_FMR_FINIT;
 8003482:	2480      	movs	r4, #128	; 0x80
 8003484:	00a4      	lsls	r4, r4, #2
 8003486:	46a4      	mov	ip, r4
 8003488:	4666      	mov	r6, ip
 800348a:	5914      	ldr	r4, [r2, r4]
 800348c:	0c24      	lsrs	r4, r4, #16
 800348e:	0424      	lsls	r4, r4, #16
 8003490:	4304      	orrs	r4, r0
 8003492:	5194      	str	r4, [r2, r6]
    canp->can->FMR = (canp->can->FMR & 0xFFFF0000) | (can2sb << 8) | CAN_FMR_FINIT;
 8003494:	5994      	ldr	r4, [r2, r6]
 8003496:	4ec8      	ldr	r6, [pc, #800]	; (80037b8 <main+0x4e8>)
 8003498:	0c24      	lsrs	r4, r4, #16
 800349a:	0424      	lsls	r4, r4, #16
 800349c:	4334      	orrs	r4, r6
 800349e:	4666      	mov	r6, ip
 80034a0:	5194      	str	r4, [r2, r6]
    canp->can->sFilterRegister[0].FR1 = 0;
 80034a2:	2490      	movs	r4, #144	; 0x90
 80034a4:	00a4      	lsls	r4, r4, #2
 80034a6:	5113      	str	r3, [r2, r4]
    canp->can->sFilterRegister[0].FR2 = 0;
 80034a8:	3404      	adds	r4, #4
 80034aa:	5113      	str	r3, [r2, r4]
    canp->can->FM1R = 0;
 80034ac:	3c40      	subs	r4, #64	; 0x40
 80034ae:	5113      	str	r3, [r2, r4]
    canp->can->FFA1R = 0;
 80034b0:	3410      	adds	r4, #16
 80034b2:	5113      	str	r3, [r2, r4]
    canp->can->FS1R = 1;
 80034b4:	3c08      	subs	r4, #8
 80034b6:	5110      	str	r0, [r2, r4]
    canp->can->FA1R = 1;
 80034b8:	3410      	adds	r4, #16
 80034ba:	5110      	str	r0, [r2, r4]
  canp->can->FMR &= ~CAN_FMR_FINIT;
 80034bc:	5994      	ldr	r4, [r2, r6]
 80034be:	4384      	bics	r4, r0
 80034c0:	5194      	str	r4, [r2, r6]
    rccDisableCAN1(FALSE);
 80034c2:	465a      	mov	r2, fp
 80034c4:	4cbd      	ldr	r4, [pc, #756]	; (80037bc <main+0x4ec>)
 80034c6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80034c8:	4022      	ands	r2, r4
 80034ca:	465c      	mov	r4, fp
 80034cc:	6422      	str	r2, [r4, #64]	; 0x40
 *
 * @init
 */
void i2cObjectInit(I2CDriver *i2cp) {

  i2cp->state  = I2C_STOP;
 80034ce:	4abc      	ldr	r2, [pc, #752]	; (80037c0 <main+0x4f0>)
  tqp->next = (thread_t *)tqp;
 80034d0:	0014      	movs	r4, r2
 80034d2:	340c      	adds	r4, #12
 80034d4:	60d4      	str	r4, [r2, #12]
  tqp->prev = (thread_t *)tqp;
 80034d6:	6114      	str	r4, [r2, #16]
void i2c_lld_init(void) {

#if STM32_I2C_USE_I2C1
  i2cObjectInit(&I2CD1);
  I2CD1.thread = NULL;
  I2CD1.i2c    = I2C1;
 80034d8:	4cba      	ldr	r4, [pc, #744]	; (80037c4 <main+0x4f4>)
 80034da:	7010      	strb	r0, [r2, #0]
  i2cp->config = NULL;
 80034dc:	6053      	str	r3, [r2, #4]
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->queue);
  mp->owner = NULL;
 80034de:	6153      	str	r3, [r2, #20]
 80034e0:	6354      	str	r4, [r2, #52]	; 0x34
  I2CD1.dmarx  = STM32_DMA_STREAM(STM32_I2C_I2C1_RX_DMA_STREAM);
  I2CD1.dmatx  = STM32_DMA_STREAM(STM32_I2C_I2C1_TX_DMA_STREAM);
 80034e2:	003c      	movs	r4, r7
 80034e4:	3448      	adds	r4, #72	; 0x48
 80034e6:	6314      	str	r4, [r2, #48]	; 0x30
  sdp->vmt = &vmt;
 80034e8:	4cb7      	ldr	r4, [pc, #732]	; (80037c8 <main+0x4f8>)
  I2CD1.thread = NULL;
 80034ea:	61d3      	str	r3, [r2, #28]
  I2CD1.dmarx  = STM32_DMA_STREAM(STM32_I2C_I2C1_RX_DMA_STREAM);
 80034ec:	62d7      	str	r7, [r2, #44]	; 0x2c
 80034ee:	0022      	movs	r2, r4
 80034f0:	4eb6      	ldr	r6, [pc, #728]	; (80037cc <main+0x4fc>)
  iqp->q_counter = 0;
 80034f2:	6163      	str	r3, [r4, #20]
 80034f4:	c240      	stmia	r2!, {r6}
  tqp->next = (thread_t *)tqp;
 80034f6:	2630      	movs	r6, #48	; 0x30
 80034f8:	6062      	str	r2, [r4, #4]
 80034fa:	0022      	movs	r2, r4
 80034fc:	46b4      	mov	ip, r6
 80034fe:	320c      	adds	r2, #12
 8003500:	60e2      	str	r2, [r4, #12]
  tqp->prev = (thread_t *)tqp;
 8003502:	6122      	str	r2, [r4, #16]
  iqp->q_buffer  = bp;
 8003504:	0022      	movs	r2, r4
  tqp->next = (thread_t *)tqp;
 8003506:	44a4      	add	ip, r4
 8003508:	4666      	mov	r6, ip
 800350a:	3254      	adds	r2, #84	; 0x54
 800350c:	61a2      	str	r2, [r4, #24]
  iqp->q_rdptr   = bp;
 800350e:	6262      	str	r2, [r4, #36]	; 0x24
  iqp->q_wrptr   = bp;
 8003510:	6222      	str	r2, [r4, #32]
  iqp->q_top     = bp + size;
 8003512:	0022      	movs	r2, r4
 8003514:	6326      	str	r6, [r4, #48]	; 0x30
  tqp->prev = (thread_t *)tqp;
 8003516:	6366      	str	r6, [r4, #52]	; 0x34
  oqp->q_counter = size;
 8003518:	2610      	movs	r6, #16
  iqp->q_top     = bp + size;
 800351a:	3264      	adds	r2, #100	; 0x64
 800351c:	61e2      	str	r2, [r4, #28]
  oqp->q_buffer  = bp;
 800351e:	63e2      	str	r2, [r4, #60]	; 0x3c
  oqp->q_rdptr   = bp;
 8003520:	64a2      	str	r2, [r4, #72]	; 0x48
  oqp->q_wrptr   = bp;
 8003522:	6462      	str	r2, [r4, #68]	; 0x44
  oqp->q_top     = bp + size;
 8003524:	0022      	movs	r2, r4
  oqp->q_counter = size;
 8003526:	46b4      	mov	ip, r6
 8003528:	63a6      	str	r6, [r4, #56]	; 0x38
  tqp->next = (thread_t *)tqp;
 800352a:	3e04      	subs	r6, #4
 800352c:	46b0      	mov	r8, r6
  oqp->q_top     = bp + size;
 800352e:	3274      	adds	r2, #116	; 0x74
 8003530:	6422      	str	r2, [r4, #64]	; 0x40
  oqp->q_notify  = onfy;
 8003532:	4aa7      	ldr	r2, [pc, #668]	; (80037d0 <main+0x500>)
  sdp->state = SD_STOP;
 8003534:	7220      	strb	r0, [r4, #8]
 8003536:	64e2      	str	r2, [r4, #76]	; 0x4c
  SD1.usart = USART1;
#endif

#if STM32_SERIAL_USE_USART2
  sdObjectInit(&SD2, NULL, notify2);
  SD2.usart = USART2;
 8003538:	4aa6      	ldr	r2, [pc, #664]	; (80037d4 <main+0x504>)
  iqp->q_notify  = infy;
 800353a:	62a3      	str	r3, [r4, #40]	; 0x28
 800353c:	6762      	str	r2, [r4, #116]	; 0x74
 *
 * @init
 */
void spiObjectInit(SPIDriver *spip) {

  spip->state = SPI_STOP;
 800353e:	4aa6      	ldr	r2, [pc, #664]	; (80037d8 <main+0x508>)
  iqp->q_link    = link;
 8003540:	62e4      	str	r4, [r4, #44]	; 0x2c
 8003542:	4490      	add	r8, r2
 8003544:	4646      	mov	r6, r8
 8003546:	7010      	strb	r0, [r2, #0]
  spip->config = NULL;
 8003548:	6053      	str	r3, [r2, #4]
  oqp->q_link    = link;
 800354a:	6524      	str	r4, [r4, #80]	; 0x50
#if SPI_USE_WAIT == TRUE
  spip->thread = NULL;
 800354c:	6093      	str	r3, [r2, #8]
 800354e:	60d6      	str	r6, [r2, #12]
  tqp->prev = (thread_t *)tqp;
 8003550:	6116      	str	r6, [r2, #16]
 */
void spi_lld_init(void) {

#if STM32_SPI_USE_SPI1
  spiObjectInit(&SPID1);
  SPID1.spi       = SPI1;
 8003552:	4ea2      	ldr	r6, [pc, #648]	; (80037dc <main+0x50c>)
 8003554:	6153      	str	r3, [r2, #20]
 8003556:	61d6      	str	r6, [r2, #28]
  SPID1.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI1_RX_DMA_STREAM);
 8003558:	2660      	movs	r6, #96	; 0x60
 800355a:	46b0      	mov	r8, r6
 800355c:	44b8      	add	r8, r7
 800355e:	4646      	mov	r6, r8
  SPID1.dmatx     = STM32_DMA_STREAM(STM32_SPI_SPI1_TX_DMA_STREAM);
 8003560:	3784      	adds	r7, #132	; 0x84
 8003562:	6257      	str	r7, [r2, #36]	; 0x24
  SPID1.rxdmamode = STM32_DMA_CR_CHSEL(SPI1_RX_DMA_CHANNEL) |
 8003564:	4f9e      	ldr	r7, [pc, #632]	; (80037e0 <main+0x510>)
  SPID1.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI1_RX_DMA_STREAM);
 8003566:	6216      	str	r6, [r2, #32]
  SPID1.rxdmamode = STM32_DMA_CR_CHSEL(SPI1_RX_DMA_CHANNEL) |
 8003568:	6297      	str	r7, [r2, #40]	; 0x28
                    STM32_DMA_CR_PL(STM32_SPI_SPI1_DMA_PRIORITY) |
                    STM32_DMA_CR_DIR_P2M |
                    STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE;
  SPID1.txdmamode = STM32_DMA_CR_CHSEL(SPI1_TX_DMA_CHANNEL) |
 800356a:	4f9e      	ldr	r7, [pc, #632]	; (80037e4 <main+0x514>)

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 800356c:	465e      	mov	r6, fp
 800356e:	62d7      	str	r7, [r2, #44]	; 0x2c
 8003570:	465a      	mov	r2, fp
 8003572:	6c12      	ldr	r2, [r2, #64]	; 0x40

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 8003574:	4f9c      	ldr	r7, [pc, #624]	; (80037e8 <main+0x518>)
  ST_ENABLE_CLOCK();
 8003576:	4302      	orrs	r2, r0
 8003578:	6432      	str	r2, [r6, #64]	; 0x40
  ST_ENABLE_STOP();
 800357a:	68ba      	ldr	r2, [r7, #8]
 800357c:	4302      	orrs	r2, r0
 800357e:	60ba      	str	r2, [r7, #8]

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8003580:	2280      	movs	r2, #128	; 0x80
 8003582:	4f9a      	ldr	r7, [pc, #616]	; (80037ec <main+0x51c>)
 8003584:	05d2      	lsls	r2, r2, #23
 8003586:	6297      	str	r7, [r2, #40]	; 0x28
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 8003588:	62d1      	str	r1, [r2, #44]	; 0x2c
  STM32_ST_TIM->CCMR1  = 0;
 800358a:	6193      	str	r3, [r2, #24]
  STM32_ST_TIM->CCR[0] = 0;
 800358c:	6353      	str	r3, [r2, #52]	; 0x34
  STM32_ST_TIM->DIER   = 0;
 800358e:	60d3      	str	r3, [r2, #12]
  STM32_ST_TIM->CR2    = 0;
 8003590:	6053      	str	r3, [r2, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 8003592:	6150      	str	r0, [r2, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 8003594:	6010      	str	r0, [r2, #0]

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8003596:	2280      	movs	r2, #128	; 0x80
 8003598:	4690      	mov	r8, r2
 800359a:	22c7      	movs	r2, #199	; 0xc7
 800359c:	4646      	mov	r6, r8
 800359e:	4f94      	ldr	r7, [pc, #592]	; (80037f0 <main+0x520>)
 80035a0:	0092      	lsls	r2, r2, #2
 80035a2:	54be      	strb	r6, [r7, r2]
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80035a4:	2280      	movs	r2, #128	; 0x80
 80035a6:	26c0      	movs	r6, #192	; 0xc0
 80035a8:	0552      	lsls	r2, r2, #21
 80035aa:	0076      	lsls	r6, r6, #1
 80035ac:	51ba      	str	r2, [r7, r6]
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
 80035ae:	261c      	movs	r6, #28
 80035b0:	46b1      	mov	r9, r6
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80035b2:	603a      	str	r2, [r7, #0]
  tqp->next = (thread_t *)tqp;
 80035b4:	4a8f      	ldr	r2, [pc, #572]	; (80037f4 <main+0x524>)
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035b6:	4f90      	ldr	r7, [pc, #576]	; (80037f8 <main+0x528>)
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.delta = (systime_t)-1;
 80035b8:	6251      	str	r1, [r2, #36]	; 0x24
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = __heap_base__;
 80035ba:	4990      	ldr	r1, [pc, #576]	; (80037fc <main+0x52c>)
  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
 80035bc:	4491      	add	r9, r2
 80035be:	464e      	mov	r6, r9
 80035c0:	4689      	mov	r9, r1
 80035c2:	61d6      	str	r6, [r2, #28]
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
 80035c4:	6216      	str	r6, [r2, #32]
 80035c6:	464e      	mov	r6, r9
 80035c8:	6012      	str	r2, [r2, #0]
  tqp->prev = (thread_t *)tqp;
 80035ca:	6052      	str	r2, [r2, #4]
  ch.rlist.prio = NOPRIO;
 80035cc:	6093      	str	r3, [r2, #8]
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.systime = (systime_t)0;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  ch.vtlist.lasttime = (systime_t)0;
 80035ce:	6293      	str	r3, [r2, #40]	; 0x28
 80035d0:	498b      	ldr	r1, [pc, #556]	; (8003800 <main+0x530>)
  tp->epending  = (eventmask_t)0;
 80035d2:	6613      	str	r3, [r2, #96]	; 0x60
 80035d4:	600e      	str	r6, [r1, #0]
  endmem  = __heap_end__;
 80035d6:	498b      	ldr	r1, [pc, #556]	; (8003804 <main+0x534>)
  tp->mtxlist   = NULL;
 80035d8:	6653      	str	r3, [r2, #100]	; 0x64
 80035da:	4689      	mov	r9, r1
 80035dc:	464e      	mov	r6, r9
 80035de:	498a      	ldr	r1, [pc, #552]	; (8003808 <main+0x538>)
  REG_INSERT(tp);
 80035e0:	6412      	str	r2, [r2, #64]	; 0x40
 80035e2:	600e      	str	r6, [r1, #0]
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.provider = chCoreAllocAligned;
 80035e4:	4989      	ldr	r1, [pc, #548]	; (800380c <main+0x53c>)
 80035e6:	4e8a      	ldr	r6, [pc, #552]	; (8003810 <main+0x540>)
  H_NEXT(&default_heap.header) = NULL;
 80035e8:	608b      	str	r3, [r1, #8]
  default_heap.provider = chCoreAllocAligned;
 80035ea:	600e      	str	r6, [r1, #0]
  tqp->next = (thread_t *)tqp;
 80035ec:	2610      	movs	r6, #16
 80035ee:	46b1      	mov	r9, r6
 80035f0:	4489      	add	r9, r1
 80035f2:	464e      	mov	r6, r9
  H_PAGES(&default_heap.header) = 0;
 80035f4:	60cb      	str	r3, [r1, #12]
 80035f6:	610e      	str	r6, [r1, #16]
  tqp->prev = (thread_t *)tqp;
 80035f8:	614e      	str	r6, [r1, #20]
 80035fa:	618b      	str	r3, [r1, #24]
  tp->prio      = prio;
 80035fc:	4641      	mov	r1, r8
  tlp->next = (thread_t *)tlp;
 80035fe:	2654      	movs	r6, #84	; 0x54
 8003600:	6391      	str	r1, [r2, #56]	; 0x38
  tp->flags     = CH_FLAG_MODE_STATIC;
 8003602:	3933      	subs	r1, #51	; 0x33
 8003604:	5453      	strb	r3, [r2, r1]
  tp->realprio  = prio;
 8003606:	4641      	mov	r1, r8
 8003608:	46b0      	mov	r8, r6
 800360a:	4490      	add	r8, r2
 800360c:	4646      	mov	r6, r8
 800360e:	6556      	str	r6, [r2, #84]	; 0x54
  tqp->next = (thread_t *)tqp;
 8003610:	2658      	movs	r6, #88	; 0x58
 8003612:	6691      	str	r1, [r2, #104]	; 0x68
  tp->refs      = (trefs_t)1;
 8003614:	3932      	subs	r1, #50	; 0x32
 8003616:	5450      	strb	r0, [r2, r1]
  tp->name      = name;
 8003618:	497e      	ldr	r1, [pc, #504]	; (8003814 <main+0x544>)
 800361a:	46b0      	mov	r8, r6
 800361c:	6491      	str	r1, [r2, #72]	; 0x48
  REG_INSERT(tp);
 800361e:	0011      	movs	r1, r2
 8003620:	3130      	adds	r1, #48	; 0x30
 8003622:	6111      	str	r1, [r2, #16]
 8003624:	6151      	str	r1, [r2, #20]
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
#if CH_CFG_USE_REGISTRY == TRUE
  currp = _thread_init(&ch.mainthread, (const char *)&ch_debug, NORMALPRIO);
 8003626:	6191      	str	r1, [r2, #24]
 8003628:	4490      	add	r8, r2
#elif CH_CFG_USE_DYNAMIC == TRUE
  currp->wabase = NULL;
#endif

  /* Setting up the caller as current thread.*/
  currp->state = CH_STATE_CURRENT;
 800362a:	214c      	movs	r1, #76	; 0x4c
 800362c:	4646      	mov	r6, r8
 800362e:	5450      	strb	r0, [r2, r1]
 8003630:	6596      	str	r6, [r2, #88]	; 0x58
  tqp->prev = (thread_t *)tqp;
 8003632:	65d6      	str	r6, [r2, #92]	; 0x5c
 8003634:	68fe      	ldr	r6, [r7, #12]
 8003636:	6452      	str	r2, [r2, #68]	; 0x44
 8003638:	46b0      	mov	r8, r6
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800363a:	4e77      	ldr	r6, [pc, #476]	; (8003818 <main+0x548>)
 800363c:	46b1      	mov	r9, r6
 800363e:	4646      	mov	r6, r8
 8003640:	4649      	mov	r1, r9
 8003642:	400e      	ands	r6, r1
  reg_value  =  (reg_value                                   |
 8003644:	4975      	ldr	r1, [pc, #468]	; (800381c <main+0x54c>)
 8003646:	430e      	orrs	r6, r1

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable, note, the M7 requires DWT unlocking.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8003648:	4975      	ldr	r1, [pc, #468]	; (8003820 <main+0x550>)
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 800364a:	60fe      	str	r6, [r7, #12]
 800364c:	4689      	mov	r9, r1
 800364e:	68c9      	ldr	r1, [r1, #12]
 8003650:	468a      	mov	sl, r1
 8003652:	2180      	movs	r1, #128	; 0x80
 8003654:	4656      	mov	r6, sl
 8003656:	0449      	lsls	r1, r1, #17
 8003658:	430e      	orrs	r6, r1
 800365a:	4649      	mov	r1, r9
 800365c:	60ce      	str	r6, [r1, #12]
#if CORTEX_MODEL == 7
  DWT->LAR = 0xC5ACCE55U;
#endif
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800365e:	4971      	ldr	r1, [pc, #452]	; (8003824 <main+0x554>)
 8003660:	4689      	mov	r9, r1
 8003662:	6809      	ldr	r1, [r1, #0]
 8003664:	000e      	movs	r6, r1
 8003666:	4649      	mov	r1, r9
 8003668:	4306      	orrs	r6, r0
 800366a:	600e      	str	r6, [r1, #0]
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800366c:	4661      	mov	r1, ip
 800366e:	77f9      	strb	r1, [r7, #31]
 8003670:	2120      	movs	r1, #32
 8003672:	4688      	mov	r8, r1
 8003674:	4646      	mov	r6, r8
 8003676:	3102      	adds	r1, #2
 8003678:	547e      	strb	r6, [r7, r1]
 800367a:	2100      	movs	r1, #0
 800367c:	468a      	mov	sl, r1
 800367e:	f381 8811 	msr	BASEPRI, r1
  __ASM volatile ("cpsie i" : : : "memory");
 8003682:	b662      	cpsie	i
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8003684:	f388 8811 	msr	BASEPRI, r8
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8003688:	266c      	movs	r6, #108	; 0x6c
 800368a:	46b1      	mov	r9, r6
 800368c:	4966      	ldr	r1, [pc, #408]	; (8003828 <main+0x558>)
 800368e:	3630      	adds	r6, #48	; 0x30
 8003690:	4489      	add	r9, r1
 8003692:	464f      	mov	r7, r9
 8003694:	518f      	str	r7, [r1, r6]
 8003696:	4e65      	ldr	r6, [pc, #404]	; (800382c <main+0x55c>)
 8003698:	670b      	str	r3, [r1, #112]	; 0x70
 800369a:	66ce      	str	r6, [r1, #108]	; 0x6c
 800369c:	4e64      	ldr	r6, [pc, #400]	; (8003830 <main+0x560>)
 800369e:	46b1      	mov	r9, r6
 80036a0:	268c      	movs	r6, #140	; 0x8c
 80036a2:	464f      	mov	r7, r9
 80036a4:	518f      	str	r7, [r1, r6]
  tp->prio      = prio;
 80036a6:	360c      	adds	r6, #12
 80036a8:	5188      	str	r0, [r1, r6]
  tp->state     = CH_STATE_WTSTART;
 80036aa:	3e96      	subs	r6, #150	; 0x96
 80036ac:	46b1      	mov	r9, r6
 80036ae:	464f      	mov	r7, r9
 80036b0:	36aa      	adds	r6, #170	; 0xaa
 80036b2:	558f      	strb	r7, [r1, r6]
  tp->flags     = CH_FLAG_MODE_STATIC;
 80036b4:	3601      	adds	r6, #1
 80036b6:	558b      	strb	r3, [r1, r6]
  tp->realprio  = prio;
 80036b8:	361b      	adds	r6, #27
 80036ba:	5188      	str	r0, [r1, r6]
  tp->mtxlist   = NULL;
 80036bc:	3e04      	subs	r6, #4
 80036be:	518b      	str	r3, [r1, r6]
  tp->epending  = (eventmask_t)0;
 80036c0:	3e04      	subs	r6, #4
 80036c2:	518b      	str	r3, [r1, r6]
  tp->refs      = (trefs_t)1;
 80036c4:	23ae      	movs	r3, #174	; 0xae
 80036c6:	54c8      	strb	r0, [r1, r3]
  tp->name      = name;
 80036c8:	485a      	ldr	r0, [pc, #360]	; (8003834 <main+0x564>)
 80036ca:	3b06      	subs	r3, #6
 80036cc:	50c8      	str	r0, [r1, r3]
  REG_INSERT(tp);
 80036ce:	20a4      	movs	r0, #164	; 0xa4
 80036d0:	3b08      	subs	r3, #8
 80036d2:	50ca      	str	r2, [r1, r3]
 80036d4:	6953      	ldr	r3, [r2, #20]
 80036d6:	500b      	str	r3, [r1, r0]
 80036d8:	0008      	movs	r0, r1
 80036da:	3090      	adds	r0, #144	; 0x90
 80036dc:	6118      	str	r0, [r3, #16]
 80036de:	6150      	str	r0, [r2, #20]
  tlp->next = (thread_t *)tlp;
 80036e0:	000a      	movs	r2, r1
 80036e2:	23b4      	movs	r3, #180	; 0xb4
 80036e4:	32b4      	adds	r2, #180	; 0xb4
 80036e6:	50ca      	str	r2, [r1, r3]
  tqp->next = (thread_t *)tqp;
 80036e8:	000b      	movs	r3, r1
 80036ea:	22b8      	movs	r2, #184	; 0xb8
 80036ec:	33b8      	adds	r3, #184	; 0xb8
 80036ee:	508b      	str	r3, [r1, r2]
  tqp->prev = (thread_t *)tqp;
 80036f0:	3204      	adds	r2, #4
 80036f2:	508b      	str	r3, [r1, r2]
  chSchWakeupS(tp, MSG_OK);
 80036f4:	f7ff fb04 	bl	8002d00 <chSchWakeupS.constprop.47>
 80036f8:	f38a 8811 	msr	BASEPRI, sl
 80036fc:	f388 8811 	msr	BASEPRI, r8
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    config = &default_config;

  if (sdp->state == SD_STOP) {
 8003700:	7a23      	ldrb	r3, [r4, #8]
 8003702:	2b01      	cmp	r3, #1
 8003704:	d100      	bne.n	8003708 <main+0x438>
 8003706:	e129      	b.n	800395c <main+0x68c>
    u->BRR = STM32_PCLK2 / config->speed;
 8003708:	4f4b      	ldr	r7, [pc, #300]	; (8003838 <main+0x568>)
  USART_TypeDef *u = sdp->usart;
 800370a:	6f66      	ldr	r6, [r4, #116]	; 0x74
  if ((sdp->usart == USART1) || (sdp->usart == USART6))
 800370c:	4b4b      	ldr	r3, [pc, #300]	; (800383c <main+0x56c>)
    u->BRR = STM32_PCLK2 / config->speed;
 800370e:	6839      	ldr	r1, [r7, #0]
  if ((sdp->usart == USART1) || (sdp->usart == USART6))
 8003710:	429e      	cmp	r6, r3
 8003712:	d100      	bne.n	8003716 <main+0x446>
 8003714:	e11d      	b.n	8003952 <main+0x682>
 8003716:	4b4a      	ldr	r3, [pc, #296]	; (8003840 <main+0x570>)
 8003718:	429e      	cmp	r6, r3
 800371a:	d100      	bne.n	800371e <main+0x44e>
 800371c:	e119      	b.n	8003952 <main+0x682>
    u->BRR = STM32_PCLK1 / config->speed;
 800371e:	4849      	ldr	r0, [pc, #292]	; (8003844 <main+0x574>)
 8003720:	f7fc fdcc 	bl	80002bc <__udivsi3>
 8003724:	60b0      	str	r0, [r6, #8]
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8003726:	2240      	movs	r2, #64	; 0x40
 8003728:	88fb      	ldrh	r3, [r7, #6]
  if ((config->cr1 & (USART_CR1_M | USART_CR1_PCE)) == USART_CR1_PCE) {
 800372a:	21a0      	movs	r1, #160	; 0xa0
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 800372c:	4313      	orrs	r3, r2
 800372e:	6133      	str	r3, [r6, #16]
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8003730:	893b      	ldrh	r3, [r7, #8]
 8003732:	3a3f      	subs	r2, #63	; 0x3f
 8003734:	4313      	orrs	r3, r2
 8003736:	6173      	str	r3, [r6, #20]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 8003738:	88bb      	ldrh	r3, [r7, #4]
                         USART_CR1_RXNEIE | USART_CR1_TE |
 800373a:	4a43      	ldr	r2, [pc, #268]	; (8003848 <main+0x578>)
  if ((config->cr1 & (USART_CR1_M | USART_CR1_PCE)) == USART_CR1_PCE) {
 800373c:	0149      	lsls	r1, r1, #5
                         USART_CR1_RXNEIE | USART_CR1_TE |
 800373e:	431a      	orrs	r2, r3
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 8003740:	60f2      	str	r2, [r6, #12]
  u->SR = 0;
 8003742:	2200      	movs	r2, #0
 8003744:	6032      	str	r2, [r6, #0]
  (void)u->SR;  /* SR reset step 1.*/
 8003746:	6832      	ldr	r2, [r6, #0]
  (void)u->DR;  /* SR reset step 2.*/
 8003748:	6872      	ldr	r2, [r6, #4]
  if ((config->cr1 & (USART_CR1_M | USART_CR1_PCE)) == USART_CR1_PCE) {
 800374a:	2280      	movs	r2, #128	; 0x80
 800374c:	400b      	ands	r3, r1
 800374e:	00d2      	lsls	r2, r2, #3
 8003750:	4293      	cmp	r3, r2
 8003752:	d100      	bne.n	8003756 <main+0x486>
 8003754:	e0f9      	b.n	800394a <main+0x67a>
    sdp->rxmask = 0xFF;
 8003756:	22ff      	movs	r2, #255	; 0xff
 8003758:	2378      	movs	r3, #120	; 0x78
 800375a:	54e2      	strb	r2, [r4, r3]
 800375c:	e076      	b.n	800384c <main+0x57c>
 800375e:	46c0      	nop			; (mov r8, r8)
 8003760:	40026000 	.word	0x40026000
 8003764:	40026400 	.word	0x40026400
 8003768:	40023800 	.word	0x40023800
 800376c:	40020000 	.word	0x40020000
 8003770:	64155505 	.word	0x64155505
 8003774:	55555555 	.word	0x55555555
 8003778:	0000fbff 	.word	0x0000fbff
 800377c:	55507700 	.word	0x55507700
 8003780:	2a91a9a0 	.word	0x2a91a9a0
 8003784:	40020400 	.word	0x40020400
 8003788:	0000ffff 	.word	0x0000ffff
 800378c:	000a0080 	.word	0x000a0080
 8003790:	40020800 	.word	0x40020800
 8003794:	01555555 	.word	0x01555555
 8003798:	40020c00 	.word	0x40020c00
 800379c:	40021000 	.word	0x40021000
 80037a0:	20000410 	.word	0x20000410
 80037a4:	40021400 	.word	0x40021400
 80037a8:	40021800 	.word	0x40021800
 80037ac:	55555550 	.word	0x55555550
 80037b0:	40021c00 	.word	0x40021c00
 80037b4:	40006400 	.word	0x40006400
 80037b8:	00000e01 	.word	0x00000e01
 80037bc:	fdffffff 	.word	0xfdffffff
 80037c0:	20000440 	.word	0x20000440
 80037c4:	40005400 	.word	0x40005400
 80037c8:	20000478 	.word	0x20000478
 80037cc:	080046fc 	.word	0x080046fc
 80037d0:	08002071 	.word	0x08002071
 80037d4:	40004400 	.word	0x40004400
 80037d8:	200004f4 	.word	0x200004f4
 80037dc:	40013000 	.word	0x40013000
 80037e0:	06010016 	.word	0x06010016
 80037e4:	06010046 	.word	0x06010046
 80037e8:	e0042000 	.word	0xe0042000
 80037ec:	00002327 	.word	0x00002327
 80037f0:	e000e100 	.word	0xe000e100
 80037f4:	200008a8 	.word	0x200008a8
 80037f8:	e000ed00 	.word	0xe000ed00
 80037fc:	20000ad0 	.word	0x20000ad0
 8003800:	20000a8c 	.word	0x20000a8c
 8003804:	20020000 	.word	0x20020000
 8003808:	20000a88 	.word	0x20000a88
 800380c:	200009e8 	.word	0x200009e8
 8003810:	08003a01 	.word	0x08003a01
 8003814:	0800465c 	.word	0x0800465c
 8003818:	0000f8ff 	.word	0x0000f8ff
 800381c:	05fa0300 	.word	0x05fa0300
 8003820:	e000edf0 	.word	0xe000edf0
 8003824:	e0001000 	.word	0xe0001000
 8003828:	20000918 	.word	0x20000918
 800382c:	08003aa1 	.word	0x08003aa1
 8003830:	080002a5 	.word	0x080002a5
 8003834:	0800467c 	.word	0x0800467c
 8003838:	20000400 	.word	0x20000400
 800383c:	40011000 	.word	0x40011000
 8003840:	40011400 	.word	0x40011400
 8003844:	02aea540 	.word	0x02aea540
 8003848:	0000212c 	.word	0x0000212c
  sdp->state = SD_READY;
 800384c:	2702      	movs	r7, #2
 800384e:	2300      	movs	r3, #0
 8003850:	7227      	strb	r7, [r4, #8]
 8003852:	f383 8811 	msr	BASEPRI, r3
void set_util_fwversion(VERSIONData * ver_data)
{
#ifndef GIT_COMMIT_VERSION
#define GIT_COMMIT_VERSION "Unknown"
#endif
    strncpy(ver_data->firmware, GIT_COMMIT_VERSION, MAX_FW_VERSION_LENGTH);
 8003856:	4e49      	ldr	r6, [pc, #292]	; (800397c <main+0x6ac>)
 8003858:	2232      	movs	r2, #50	; 0x32
 800385a:	4949      	ldr	r1, [pc, #292]	; (8003980 <main+0x6b0>)
 800385c:	0030      	movs	r0, r6
 800385e:	f7fe fbcb 	bl	8001ff8 <strncpy>
 * 4 32 bit registers: base address: 0x1FFF 7A10
 * ST Ref. STM32f40x Page 1399 section 34 'Device Electronic Signature'
 */
void set_util_hwversion(VERSIONData * ver_data)
{
        ver_data->hardware.id_low    = *STM32F4_UNIQUE_ID_LOW;
 8003862:	4b48      	ldr	r3, [pc, #288]	; (8003984 <main+0x6b4>)
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, time);
 8003864:	4948      	ldr	r1, [pc, #288]	; (8003988 <main+0x6b8>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2008      	movs	r0, #8
 800386a:	63f3      	str	r3, [r6, #60]	; 0x3c
        ver_data->hardware.id_center = *STM32F4_UNIQUE_ID_CENTER;
 800386c:	4b47      	ldr	r3, [pc, #284]	; (800398c <main+0x6bc>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	63b3      	str	r3, [r6, #56]	; 0x38
        ver_data->hardware.id_high   = *STM32F4_UNIQUE_ID_HIGH;
 8003872:	4b47      	ldr	r3, [pc, #284]	; (8003990 <main+0x6c0>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	6373      	str	r3, [r6, #52]	; 0x34
 8003878:	f000 f992 	bl	8003ba0 <chSchGoSleepTimeoutS>
    chprintf(DEBUG_CHP, "\r\nFirmware Info\r\n");
 800387c:	4945      	ldr	r1, [pc, #276]	; (8003994 <main+0x6c4>)
 800387e:	0020      	movs	r0, r4
 8003880:	f7ff fb46 	bl	8002f10 <chprintf.constprop.3>
    chprintf(DEBUG_CHP, "FW HASH: %s\r\n", version_info.firmware);
 8003884:	0032      	movs	r2, r6
 8003886:	4944      	ldr	r1, [pc, #272]	; (8003998 <main+0x6c8>)
 8003888:	0020      	movs	r0, r4
 800388a:	f7ff fb41 	bl	8002f10 <chprintf.constprop.3>
    chprintf(DEBUG_CHP, "STF0x UNIQUE HW ID (H,C,L):\r\n0x%x\t0x%x\t0x%x\r\n"
 800388e:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
 8003890:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8003892:	6b72      	ldr	r2, [r6, #52]	; 0x34
 8003894:	0020      	movs	r0, r4
 8003896:	9100      	str	r1, [sp, #0]
 8003898:	4940      	ldr	r1, [pc, #256]	; (800399c <main+0x6cc>)
 800389a:	f7ff fb39 	bl	8002f10 <chprintf.constprop.3>
 800389e:	2320      	movs	r3, #32
 80038a0:	f383 8811 	msr	BASEPRI, r3
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80038a4:	21b0      	movs	r1, #176	; 0xb0
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80038a6:	2080      	movs	r0, #128	; 0x80
  canp->config = config;
 80038a8:	4b3d      	ldr	r3, [pc, #244]	; (80039a0 <main+0x6d0>)
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80038aa:	4a3e      	ldr	r2, [pc, #248]	; (80039a4 <main+0x6d4>)
 80038ac:	606b      	str	r3, [r5, #4]
 80038ae:	4b3e      	ldr	r3, [pc, #248]	; (80039a8 <main+0x6d8>)
  canp->state = CAN_STARTING;
 80038b0:	702f      	strb	r7, [r5, #0]
 80038b2:	5499      	strb	r1, [r3, r2]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80038b4:	3a94      	subs	r2, #148	; 0x94
 80038b6:	3aff      	subs	r2, #255	; 0xff
 80038b8:	0300      	lsls	r0, r0, #12
 80038ba:	5098      	str	r0, [r3, r2]
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80038bc:	6018      	str	r0, [r3, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80038be:	20c5      	movs	r0, #197	; 0xc5
 80038c0:	0080      	lsls	r0, r0, #2
 80038c2:	5419      	strb	r1, [r3, r0]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80038c4:	2080      	movs	r0, #128	; 0x80
 80038c6:	0340      	lsls	r0, r0, #13
 80038c8:	5098      	str	r0, [r3, r2]
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80038ca:	6018      	str	r0, [r3, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80038cc:	4837      	ldr	r0, [pc, #220]	; (80039ac <main+0x6dc>)
 80038ce:	5419      	strb	r1, [r3, r0]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80038d0:	2080      	movs	r0, #128	; 0x80
 80038d2:	0380      	lsls	r0, r0, #14
 80038d4:	5098      	str	r0, [r3, r2]
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80038d6:	6018      	str	r0, [r3, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80038d8:	4835      	ldr	r0, [pc, #212]	; (80039b0 <main+0x6e0>)
 80038da:	5419      	strb	r1, [r3, r0]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80038dc:	2180      	movs	r1, #128	; 0x80
 80038de:	03c9      	lsls	r1, r1, #15
 80038e0:	5099      	str	r1, [r3, r2]
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80038e2:	6019      	str	r1, [r3, #0]
    rccEnableCAN1(FALSE);
 80038e4:	2380      	movs	r3, #128	; 0x80
 80038e6:	4a33      	ldr	r2, [pc, #204]	; (80039b4 <main+0x6e4>)
 80038e8:	049b      	lsls	r3, r3, #18
 80038ea:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80038ec:	430b      	orrs	r3, r1
 80038ee:	6413      	str	r3, [r2, #64]	; 0x40
  canp->can->MCR = CAN_MCR_INRQ;
 80038f0:	2201      	movs	r2, #1
 80038f2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80038f4:	601a      	str	r2, [r3, #0]
  while ((canp->can->MSR & CAN_MSR_INAK) == 0)
 80038f6:	6859      	ldr	r1, [r3, #4]
 80038f8:	420a      	tst	r2, r1
 80038fa:	d123      	bne.n	8003944 <main+0x674>
 80038fc:	2101      	movs	r1, #1
 80038fe:	2008      	movs	r0, #8
 8003900:	f000 f94e 	bl	8003ba0 <chSchGoSleepTimeoutS>
 8003904:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003906:	685a      	ldr	r2, [r3, #4]
 8003908:	07d2      	lsls	r2, r2, #31
 800390a:	d5f7      	bpl.n	80038fc <main+0x62c>
 800390c:	686a      	ldr	r2, [r5, #4]
 800390e:	6851      	ldr	r1, [r2, #4]
 8003910:	6812      	ldr	r2, [r2, #0]
  canp->can->BTR = canp->config->btr;
 8003912:	61d9      	str	r1, [r3, #28]
  canp->can->MCR = canp->config->mcr;
 8003914:	601a      	str	r2, [r3, #0]
  canp->can->IER = CAN_IER_TMEIE  | CAN_IER_FMPIE0 | CAN_IER_FMPIE1 |
 8003916:	4a28      	ldr	r2, [pc, #160]	; (80039b8 <main+0x6e8>)
 8003918:	615a      	str	r2, [r3, #20]
  canp->state = CAN_READY;
 800391a:	2303      	movs	r3, #3
 800391c:	702b      	strb	r3, [r5, #0]
 800391e:	2300      	movs	r3, #0
 8003920:	f383 8811 	msr	BASEPRI, r3
    app_init();

    /*
     * Starting the working threads.
     */
    chprintf(DEBUG_CHP, "\r\nStarting threads...\r\n");
 8003924:	4925      	ldr	r1, [pc, #148]	; (80039bc <main+0x6ec>)
 8003926:	0020      	movs	r0, r4
 8003928:	f7ff faf2 	bl	8002f10 <chprintf.constprop.3>
    chThdCreateStatic(can_rx_wa, sizeof(can_rx_wa), NORMALPRIO + 7, can_rx, NULL);
 800392c:	4924      	ldr	r1, [pc, #144]	; (80039c0 <main+0x6f0>)
 800392e:	4825      	ldr	r0, [pc, #148]	; (80039c4 <main+0x6f4>)
 8003930:	f7ff fa0e 	bl	8002d50 <chThdCreateStatic.constprop.42>
    chThdCreateStatic(can_tx_wa, sizeof(can_tx_wa), NORMALPRIO + 7, can_tx, NULL);
 8003934:	4924      	ldr	r1, [pc, #144]	; (80039c8 <main+0x6f8>)
 8003936:	4825      	ldr	r0, [pc, #148]	; (80039cc <main+0x6fc>)
 8003938:	f7ff fa0a 	bl	8002d50 <chThdCreateStatic.constprop.42>
    /*
     * Begin main loop
     */
    while (true)
    {
        chThdSleepMilliseconds(500);
 800393c:	4824      	ldr	r0, [pc, #144]	; (80039d0 <main+0x700>)
 800393e:	f000 fb47 	bl	8003fd0 <chThdSleep>
 8003942:	e7fb      	b.n	800393c <main+0x66c>
  while ((canp->can->MSR & CAN_MSR_INAK) == 0)
 8003944:	2264      	movs	r2, #100	; 0x64
 8003946:	4923      	ldr	r1, [pc, #140]	; (80039d4 <main+0x704>)
 8003948:	e7e3      	b.n	8003912 <main+0x642>
    sdp->rxmask = 0x7F;
 800394a:	227f      	movs	r2, #127	; 0x7f
 800394c:	2378      	movs	r3, #120	; 0x78
 800394e:	54e2      	strb	r2, [r4, r3]
 8003950:	e77c      	b.n	800384c <main+0x57c>
    u->BRR = STM32_PCLK2 / config->speed;
 8003952:	4821      	ldr	r0, [pc, #132]	; (80039d8 <main+0x708>)
 8003954:	f7fc fcb2 	bl	80002bc <__udivsi3>
 8003958:	60b0      	str	r0, [r6, #8]
 800395a:	e6e4      	b.n	8003726 <main+0x456>
      nvicEnableVector(STM32_USART1_NUMBER, STM32_SERIAL_USART1_PRIORITY);
    }
#endif
#if STM32_SERIAL_USE_USART2
    if (&SD2 == sdp) {
      rccEnableUSART2(FALSE);
 800395c:	465b      	mov	r3, fp
 800395e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003960:	2380      	movs	r3, #128	; 0x80
 8003962:	029b      	lsls	r3, r3, #10
 8003964:	4313      	orrs	r3, r2
 8003966:	465a      	mov	r2, fp
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8003968:	490f      	ldr	r1, [pc, #60]	; (80039a8 <main+0x6d8>)
 800396a:	6413      	str	r3, [r2, #64]	; 0x40
 800396c:	4b1b      	ldr	r3, [pc, #108]	; (80039dc <main+0x70c>)
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800396e:	22c2      	movs	r2, #194	; 0xc2
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8003970:	54ce      	strb	r6, [r1, r3]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8003972:	2340      	movs	r3, #64	; 0x40
 8003974:	0052      	lsls	r2, r2, #1
 8003976:	508b      	str	r3, [r1, r2]
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8003978:	604b      	str	r3, [r1, #4]
 800397a:	e6c5      	b.n	8003708 <main+0x438>
 800397c:	20000a90 	.word	0x20000a90
 8003980:	08004684 	.word	0x08004684
 8003984:	1fff7a10 	.word	0x1fff7a10
 8003988:	00004e20 	.word	0x00004e20
 800398c:	1fff7a14 	.word	0x1fff7a14
 8003990:	1fff7a18 	.word	0x1fff7a18
 8003994:	08004690 	.word	0x08004690
 8003998:	080046a4 	.word	0x080046a4
 800399c:	080046b4 	.word	0x080046b4
 80039a0:	0800464c 	.word	0x0800464c
 80039a4:	00000313 	.word	0x00000313
 80039a8:	e000e100 	.word	0xe000e100
 80039ac:	00000315 	.word	0x00000315
 80039b0:	00000316 	.word	0x00000316
 80039b4:	40023800 	.word	0x40023800
 80039b8:	0001875b 	.word	0x0001875b
 80039bc:	080046e4 	.word	0x080046e4
 80039c0:	08002081 	.word	0x08002081
 80039c4:	20000528 	.word	0x20000528
 80039c8:	08002dd1 	.word	0x08002dd1
 80039cc:	200006e8 	.word	0x200006e8
 80039d0:	00001388 	.word	0x00001388
 80039d4:	001e0004 	.word	0x001e0004
 80039d8:	055d4a80 	.word	0x055d4a80
 80039dc:	00000326 	.word	0x00000326

080039e0 <SVC_Handler>:
 * @details The SVC vector is used for exception mode re-entering after a
 *          context switch.
 * @note    The PendSV vector is only used in advanced kernel mode.
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void SVC_Handler(void) {
 80039e0:	b580      	push	{r7, lr}
 80039e2:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 80039e4:	f3ef 8309 	mrs	r3, PSP
  /* The port_extctx structure is pointed by the PSP register.*/
  ctxp = (struct port_extctx *)__get_PSP();

  /* Discarding the current exception context and positioning the stack to
     point to the real one.*/
  ctxp++;
 80039e8:	3320      	adds	r3, #32
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 80039ea:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80039ee:	2300      	movs	r3, #0
 80039f0:	f383 8811 	msr	BASEPRI, r3
  /* Restoring real position of the original stack frame.*/
  __set_PSP((uint32_t)ctxp);

  /* Restoring the normal interrupts status.*/
  port_unlock_from_isr();
}
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}
	...

08003a00 <chCoreAllocAligned>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAllocAligned(size_t size, unsigned align) {
 8003a00:	b510      	push	{r4, lr}
 8003a02:	2320      	movs	r3, #32
 8003a04:	f383 8811 	msr	BASEPRI, r3
  p = (uint8_t *)MEM_ALIGN_NEXT(nextmem, align);
 8003a08:	4c0a      	ldr	r4, [pc, #40]	; (8003a34 <chCoreAllocAligned+0x34>)
  size = MEM_ALIGN_NEXT(size, align);
 8003a0a:	1e4a      	subs	r2, r1, #1
 8003a0c:	1812      	adds	r2, r2, r0
  p = (uint8_t *)MEM_ALIGN_NEXT(nextmem, align);
 8003a0e:	6820      	ldr	r0, [r4, #0]
  size = MEM_ALIGN_NEXT(size, align);
 8003a10:	424b      	negs	r3, r1
  p = (uint8_t *)MEM_ALIGN_NEXT(nextmem, align);
 8003a12:	3801      	subs	r0, #1
 8003a14:	1840      	adds	r0, r0, r1
 8003a16:	4018      	ands	r0, r3
  size = MEM_ALIGN_NEXT(size, align);
 8003a18:	401a      	ands	r2, r3
  if (((size_t)endmem - (size_t)p) < size) {
 8003a1a:	4b07      	ldr	r3, [pc, #28]	; (8003a38 <chCoreAllocAligned+0x38>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	1a1b      	subs	r3, r3, r0
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d805      	bhi.n	8003a30 <chCoreAllocAligned+0x30>
  nextmem = p + size;
 8003a24:	1882      	adds	r2, r0, r2
 8003a26:	6022      	str	r2, [r4, #0]
 8003a28:	2300      	movs	r3, #0
 8003a2a:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocAlignedI(size, align);
  chSysUnlock();

  return p;
}
 8003a2e:	bd10      	pop	{r4, pc}
    return NULL;
 8003a30:	2000      	movs	r0, #0
 8003a32:	e7f9      	b.n	8003a28 <chCoreAllocAligned+0x28>
 8003a34:	20000a8c 	.word	0x20000a8c
 8003a38:	20000a88 	.word	0x20000a88
 8003a3c:	00000000 	.word	0x00000000

08003a40 <wakeup>:
 8003a40:	2320      	movs	r3, #32
 8003a42:	f383 8811 	msr	BASEPRI, r3
  switch (tp->state) {
 8003a46:	7f03      	ldrb	r3, [r0, #28]
 8003a48:	2b07      	cmp	r3, #7
 8003a4a:	d80c      	bhi.n	8003a66 <wakeup+0x26>
 8003a4c:	4a12      	ldr	r2, [pc, #72]	; (8003a98 <wakeup+0x58>)
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	58d3      	ldr	r3, [r2, r3]
 8003a52:	469f      	mov	pc, r3
    chSemFastSignalI(tp->u.wtsemp);
 8003a54:	6a02      	ldr	r2, [r0, #32]
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->cnt++;
 8003a56:	6893      	ldr	r3, [r2, #8]
 8003a58:	3301      	adds	r3, #1
 8003a5a:	6093      	str	r3, [r2, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->queue.prev->queue.next = tp->queue.next;
 8003a5c:	6802      	ldr	r2, [r0, #0]
 8003a5e:	6843      	ldr	r3, [r0, #4]
 8003a60:	601a      	str	r2, [r3, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 8003a62:	6802      	ldr	r2, [r0, #0]
 8003a64:	6053      	str	r3, [r2, #4]
  tp->u.rdymsg = MSG_TIMEOUT;
 8003a66:	2301      	movs	r3, #1
 8003a68:	425b      	negs	r3, r3
 8003a6a:	6203      	str	r3, [r0, #32]
  tp->state = CH_STATE_READY;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	6882      	ldr	r2, [r0, #8]
 8003a70:	7703      	strb	r3, [r0, #28]
  cp = (thread_t *)&ch.rlist.queue;
 8003a72:	4b0a      	ldr	r3, [pc, #40]	; (8003a9c <wakeup+0x5c>)
    cp = cp->queue.next;
 8003a74:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8003a76:	6899      	ldr	r1, [r3, #8]
 8003a78:	4291      	cmp	r1, r2
 8003a7a:	d2fb      	bcs.n	8003a74 <wakeup+0x34>
  tp->queue.prev             = cp->queue.prev;
 8003a7c:	685a      	ldr	r2, [r3, #4]
  tp->queue.next             = cp;
 8003a7e:	6003      	str	r3, [r0, #0]
  tp->queue.prev             = cp->queue.prev;
 8003a80:	6042      	str	r2, [r0, #4]
  tp->queue.prev->queue.next = tp;
 8003a82:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 8003a84:	6058      	str	r0, [r3, #4]
 8003a86:	2300      	movs	r3, #0
 8003a88:	f383 8811 	msr	BASEPRI, r3
}
 8003a8c:	4770      	bx	lr
    *tp->u.wttrp = NULL;
 8003a8e:	2200      	movs	r2, #0
 8003a90:	6a03      	ldr	r3, [r0, #32]
 8003a92:	601a      	str	r2, [r3, #0]
 8003a94:	e7e7      	b.n	8003a66 <wakeup+0x26>
 8003a96:	46c0      	nop			; (mov r8, r8)
 8003a98:	0800471c 	.word	0x0800471c
 8003a9c:	200008a8 	.word	0x200008a8

08003aa0 <_idle_thread.lto_priv.50>:
static void _idle_thread(void *p) {
 8003aa0:	e7fe      	b.n	8003aa0 <_idle_thread.lto_priv.50>
 8003aa2:	46c0      	nop			; (mov r8, r8)
	...

08003ab0 <chSchGoSleepS>:
  thread_t *otp = currp;
 8003ab0:	4b06      	ldr	r3, [pc, #24]	; (8003acc <chSchGoSleepS+0x1c>)
void chSchGoSleepS(tstate_t newstate) {
 8003ab2:	b510      	push	{r4, lr}
  thread_t *otp = currp;
 8003ab4:	6999      	ldr	r1, [r3, #24]
  otp->state = newstate;
 8003ab6:	7708      	strb	r0, [r1, #28]
  thread_t *tp = tqp->next;
 8003ab8:	6818      	ldr	r0, [r3, #0]
  tqp->next             = tp->queue.next;
 8003aba:	6802      	ldr	r2, [r0, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8003abc:	6053      	str	r3, [r2, #4]
  tqp->next             = tp->queue.next;
 8003abe:	601a      	str	r2, [r3, #0]
  currp = queue_fifo_remove(&ch.rlist.queue);
 8003ac0:	6198      	str	r0, [r3, #24]
  currp->state = CH_STATE_CURRENT;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	7703      	strb	r3, [r0, #28]
  chSysSwitch(currp, otp);
 8003ac6:	f7fc fbe5 	bl	8000294 <_port_switch>
}
 8003aca:	bd10      	pop	{r4, pc}
 8003acc:	200008a8 	.word	0x200008a8

08003ad0 <_port_irq_epilogue>:
/*===========================================================================*/

/**
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	2320      	movs	r3, #32
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	f383 8811 	msr	BASEPRI, r3

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8003ada:	4b0f      	ldr	r3, [pc, #60]	; (8003b18 <_port_irq_epilogue+0x48>)
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	051b      	lsls	r3, r3, #20
 8003ae0:	d404      	bmi.n	8003aec <_port_irq_epilogue+0x1c>
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	f383 8811 	msr	BASEPRI, r3
    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
    return;
  }
  port_unlock_from_isr();
}
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}
  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 8003aec:	f3ef 8309 	mrs	r3, PSP
    ctxp->xpsr = (regarm_t)0x01000000;
 8003af0:	2280      	movs	r2, #128	; 0x80
 8003af2:	3b20      	subs	r3, #32
 8003af4:	0452      	lsls	r2, r2, #17
 8003af6:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 8003af8:	f383 8809 	msr	PSP, r3
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.queue);
 8003afc:	4a07      	ldr	r2, [pc, #28]	; (8003b1c <_port_irq_epilogue+0x4c>)
 8003afe:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->prio;
 8003b00:	6992      	ldr	r2, [r2, #24]
    if (chSchIsPreemptionRequired()) {
 8003b02:	6889      	ldr	r1, [r1, #8]
 8003b04:	6892      	ldr	r2, [r2, #8]
 8003b06:	4291      	cmp	r1, r2
 8003b08:	d902      	bls.n	8003b10 <_port_irq_epilogue+0x40>
      ctxp->pc = (regarm_t)_port_switch_from_isr;
 8003b0a:	4a05      	ldr	r2, [pc, #20]	; (8003b20 <_port_irq_epilogue+0x50>)
 8003b0c:	619a      	str	r2, [r3, #24]
 8003b0e:	e7eb      	b.n	8003ae8 <_port_irq_epilogue+0x18>
      ctxp->pc = (regarm_t)_port_exit_from_isr;
 8003b10:	4a04      	ldr	r2, [pc, #16]	; (8003b24 <_port_irq_epilogue+0x54>)
 8003b12:	619a      	str	r2, [r3, #24]
 8003b14:	e7e8      	b.n	8003ae8 <_port_irq_epilogue+0x18>
 8003b16:	46c0      	nop			; (mov r8, r8)
 8003b18:	e000ed00 	.word	0xe000ed00
 8003b1c:	200008a8 	.word	0x200008a8
 8003b20:	080002b5 	.word	0x080002b5
 8003b24:	080002b8 	.word	0x080002b8
	...

08003b30 <Vector6C>:
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8003b30:	213d      	movs	r1, #61	; 0x3d
 8003b32:	4b07      	ldr	r3, [pc, #28]	; (8003b50 <Vector6C+0x20>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH0_HANDLER) {
 8003b34:	b510      	push	{r4, lr}
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	4011      	ands	r1, r2
  if (dma_isr_redir[0].dma_func)
 8003b3a:	4a06      	ldr	r2, [pc, #24]	; (8003b54 <Vector6C+0x24>)
  DMA1->LIFCR = flags << 0U;
 8003b3c:	6099      	str	r1, [r3, #8]
  if (dma_isr_redir[0].dma_func)
 8003b3e:	6813      	ldr	r3, [r2, #0]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d001      	beq.n	8003b48 <Vector6C+0x18>
    dma_isr_redir[0].dma_func(dma_isr_redir[0].dma_param, flags);
 8003b44:	6850      	ldr	r0, [r2, #4]
 8003b46:	4798      	blx	r3
  OSAL_IRQ_EPILOGUE();
 8003b48:	f7ff ffc2 	bl	8003ad0 <_port_irq_epilogue>
}
 8003b4c:	bd10      	pop	{r4, pc}
 8003b4e:	46c0      	nop			; (mov r8, r8)
 8003b50:	40026000 	.word	0x40026000
 8003b54:	20000a08 	.word	0x20000a08
	...

08003b60 <chSchDoReschedule>:
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoReschedule(void) {
  thread_t *otp = currp;
 8003b60:	4a0c      	ldr	r2, [pc, #48]	; (8003b94 <chSchDoReschedule+0x34>)
void chSchDoReschedule(void) {
 8003b62:	b510      	push	{r4, lr}
  thread_t *tp = tqp->next;
 8003b64:	6810      	ldr	r0, [r2, #0]
  thread_t *otp = currp;
 8003b66:	6991      	ldr	r1, [r2, #24]
  tqp->next             = tp->queue.next;
 8003b68:	6803      	ldr	r3, [r0, #0]
  tp->state = CH_STATE_READY;
 8003b6a:	2400      	movs	r4, #0
  tqp->next->queue.prev = (thread_t *)tqp;
 8003b6c:	605a      	str	r2, [r3, #4]
  tqp->next             = tp->queue.next;
 8003b6e:	6013      	str	r3, [r2, #0]

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
 8003b70:	6190      	str	r0, [r2, #24]
  currp->state = CH_STATE_CURRENT;
 8003b72:	2201      	movs	r2, #1
 8003b74:	7702      	strb	r2, [r0, #28]

  /* Handling idle-leave hook.*/
  if (otp->prio == IDLEPRIO) {
 8003b76:	688a      	ldr	r2, [r1, #8]
  tp->state = CH_STATE_READY;
 8003b78:	770c      	strb	r4, [r1, #28]
 8003b7a:	e000      	b.n	8003b7e <chSchDoReschedule+0x1e>
 8003b7c:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio > tp->prio);
 8003b7e:	689c      	ldr	r4, [r3, #8]
 8003b80:	42a2      	cmp	r2, r4
 8003b82:	d3fb      	bcc.n	8003b7c <chSchDoReschedule+0x1c>
  tp->queue.prev             = cp->queue.prev;
 8003b84:	685a      	ldr	r2, [r3, #4]
  tp->queue.next             = cp;
 8003b86:	600b      	str	r3, [r1, #0]
  tp->queue.prev             = cp->queue.prev;
 8003b88:	604a      	str	r2, [r1, #4]
  tp->queue.prev->queue.next = tp;
 8003b8a:	6011      	str	r1, [r2, #0]
  cp->queue.prev             = tp;
 8003b8c:	6059      	str	r1, [r3, #4]
     ahead of its peers.*/
  otp = chSchReadyAheadI(otp);
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 8003b8e:	f7fc fb81 	bl	8000294 <_port_switch>
}
 8003b92:	bd10      	pop	{r4, pc}
 8003b94:	200008a8 	.word	0x200008a8
	...

08003ba0 <chSchGoSleepTimeoutS>:
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 8003ba0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ba2:	b087      	sub	sp, #28
  if (TIME_INFINITE != time) {
 8003ba4:	1c4b      	adds	r3, r1, #1
 8003ba6:	d04c      	beq.n	8003c42 <chSchGoSleepTimeoutS+0xa2>
    chVTDoSetI(&vt, time, wakeup, currp);
 8003ba8:	4d43      	ldr	r5, [pc, #268]	; (8003cb8 <chSchGoSleepTimeoutS+0x118>)
  systime_t delta;

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->par = par;
 8003baa:	ac01      	add	r4, sp, #4
 8003bac:	69ab      	ldr	r3, [r5, #24]
 8003bae:	6123      	str	r3, [r4, #16]
  vtp->func = vtfunc;
 8003bb0:	4b42      	ldr	r3, [pc, #264]	; (8003cbc <chSchGoSleepTimeoutS+0x11c>)
 8003bb2:	60e3      	str	r3, [r4, #12]
  return (systime_t)STM32_ST_TIM->CNT;
 8003bb4:	2380      	movs	r3, #128	; 0x80
 8003bb6:	05db      	lsls	r3, r3, #23
 8003bb8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003bba:	2902      	cmp	r1, #2
 8003bbc:	d33a      	bcc.n	8003c34 <chSchGoSleepTimeoutS+0x94>
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8003bbe:	002e      	movs	r6, r5
 8003bc0:	69eb      	ldr	r3, [r5, #28]
 8003bc2:	361c      	adds	r6, #28
 8003bc4:	42b3      	cmp	r3, r6
 8003bc6:	d064      	beq.n	8003c92 <chSchGoSleepTimeoutS+0xf2>
    /* Pointer to the first element in the delta list, which is non-empty.*/
    p = ch.vtlist.next;

    /* Delay as delta from 'lasttime'. Note, it can overflow and the value
       becomes lower than 'now'.*/
    delta = now - ch.vtlist.lasttime + delay;
 8003bc8:	6aae      	ldr	r6, [r5, #40]	; 0x28
 8003bca:	1b92      	subs	r2, r2, r6
 8003bcc:	1889      	adds	r1, r1, r2

    if (delta < now - ch.vtlist.lasttime) {
 8003bce:	428a      	cmp	r2, r1
 8003bd0:	d832      	bhi.n	8003c38 <chSchGoSleepTimeoutS+0x98>
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->delta;
      p = p->next;
    }
    else if (delta < p->delta) {
 8003bd2:	689a      	ldr	r2, [r3, #8]
 8003bd4:	4291      	cmp	r1, r2
 8003bd6:	d203      	bcs.n	8003be0 <chSchGoSleepTimeoutS+0x40>
 8003bd8:	e037      	b.n	8003c4a <chSchGoSleepTimeoutS+0xaa>

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->delta < delta) {
    delta -= p->delta;
    p = p->next;
 8003bda:	681b      	ldr	r3, [r3, #0]
    delta -= p->delta;
 8003bdc:	1a89      	subs	r1, r1, r2
  while (p->delta < delta) {
 8003bde:	689a      	ldr	r2, [r3, #8]
 8003be0:	428a      	cmp	r2, r1
 8003be2:	d3fa      	bcc.n	8003bda <chSchGoSleepTimeoutS+0x3a>
  }

  /* The timer is inserted in the delta list.*/
  vtp->next = p;
  vtp->prev = vtp->next->prev;
 8003be4:	685a      	ldr	r2, [r3, #4]
  vtp->next = p;
 8003be6:	9301      	str	r3, [sp, #4]
  vtp->prev = vtp->next->prev;
 8003be8:	6062      	str	r2, [r4, #4]
  vtp->prev->next = vtp;
 8003bea:	6014      	str	r4, [r2, #0]
  p->prev = vtp;
 8003bec:	605c      	str	r4, [r3, #4]
  vtp->delta = delta
 8003bee:	60a1      	str	r1, [r4, #8]

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->delta -= delta;
 8003bf0:	689a      	ldr	r2, [r3, #8]
 8003bf2:	1a51      	subs	r1, r2, r1
 8003bf4:	6099      	str	r1, [r3, #8]
  ch.vtlist.delta = (systime_t)-1;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	425b      	negs	r3, r3
 8003bfa:	626b      	str	r3, [r5, #36]	; 0x24
    chSchGoSleepS(newstate);
 8003bfc:	f7ff ff58 	bl	8003ab0 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 8003c00:	9b04      	ldr	r3, [sp, #16]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d012      	beq.n	8003c2c <chSchGoSleepTimeoutS+0x8c>
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  systime_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.next != vtp) {
 8003c06:	69eb      	ldr	r3, [r5, #28]
 8003c08:	42a3      	cmp	r3, r4
 8003c0a:	d023      	beq.n	8003c54 <chSchGoSleepTimeoutS+0xb4>
    /* Removing the element from the delta list.*/
    vtp->prev->next = vtp->next;
 8003c0c:	6862      	ldr	r2, [r4, #4]
 8003c0e:	9b01      	ldr	r3, [sp, #4]
 8003c10:	6013      	str	r3, [r2, #0]
    vtp->next->prev = vtp->prev;
 8003c12:	9b01      	ldr	r3, [sp, #4]
 8003c14:	605a      	str	r2, [r3, #4]
    vtp->func = NULL;
 8003c16:	2200      	movs	r2, #0
 8003c18:	60e2      	str	r2, [r4, #12]

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 8003c1a:	002a      	movs	r2, r5
 8003c1c:	321c      	adds	r2, #28
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d004      	beq.n	8003c2c <chSchGoSleepTimeoutS+0x8c>
      vtp->next->delta += vtp->delta;
 8003c22:	6899      	ldr	r1, [r3, #8]
 8003c24:	68a2      	ldr	r2, [r4, #8]
 8003c26:	468c      	mov	ip, r1
 8003c28:	4462      	add	r2, ip
 8003c2a:	609a      	str	r2, [r3, #8]
  return currp->u.rdymsg;
 8003c2c:	69ab      	ldr	r3, [r5, #24]
 8003c2e:	6a18      	ldr	r0, [r3, #32]
}
 8003c30:	b007      	add	sp, #28
 8003c32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c34:	2102      	movs	r1, #2
 8003c36:	e7c2      	b.n	8003bbe <chSchGoSleepTimeoutS+0x1e>
      delta -= p->delta;
 8003c38:	689a      	ldr	r2, [r3, #8]
      p = p->next;
 8003c3a:	681b      	ldr	r3, [r3, #0]
      delta -= p->delta;
 8003c3c:	1a89      	subs	r1, r1, r2
 8003c3e:	689a      	ldr	r2, [r3, #8]
 8003c40:	e7ce      	b.n	8003be0 <chSchGoSleepTimeoutS+0x40>
    chSchGoSleepS(newstate);
 8003c42:	f7ff ff35 	bl	8003ab0 <chSchGoSleepS>
 8003c46:	4d1c      	ldr	r5, [pc, #112]	; (8003cb8 <chSchGoSleepTimeoutS+0x118>)
 8003c48:	e7f0      	b.n	8003c2c <chSchGoSleepTimeoutS+0x8c>
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8003c4a:	2780      	movs	r7, #128	; 0x80
      port_timer_set_alarm(ch.vtlist.lasttime + delta);
 8003c4c:	1876      	adds	r6, r6, r1
 8003c4e:	05ff      	lsls	r7, r7, #23
 8003c50:	637e      	str	r6, [r7, #52]	; 0x34
 8003c52:	e7c5      	b.n	8003be0 <chSchGoSleepTimeoutS+0x40>
    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.next = vtp->next;
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
 8003c54:	002b      	movs	r3, r5
  vtp->func = NULL;
 8003c56:	2100      	movs	r1, #0
  ch.vtlist.next = vtp->next;
 8003c58:	6822      	ldr	r2, [r4, #0]
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
 8003c5a:	331c      	adds	r3, #28
  ch.vtlist.next = vtp->next;
 8003c5c:	61ea      	str	r2, [r5, #28]
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
 8003c5e:	6053      	str	r3, [r2, #4]
  vtp->func = NULL;
 8003c60:	60e1      	str	r1, [r4, #12]

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d024      	beq.n	8003cb0 <chSchGoSleepTimeoutS+0x110>

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.next->delta += vtp->delta;
 8003c66:	6891      	ldr	r1, [r2, #8]
 8003c68:	68a3      	ldr	r3, [r4, #8]
 8003c6a:	468c      	mov	ip, r1
 8003c6c:	4463      	add	r3, ip
 8003c6e:	6093      	str	r3, [r2, #8]
  return (systime_t)STM32_ST_TIM->CNT;
 8003c70:	2280      	movs	r2, #128	; 0x80
 8003c72:	05d2      	lsls	r2, r2, #23
 8003c74:	6a51      	ldr	r1, [r2, #36]	; 0x24
/*  if (ch.vtlist.next->delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.lasttime;
 8003c76:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8003c78:	1a8a      	subs	r2, r1, r2

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= ch.vtlist.next->delta) {
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d9d6      	bls.n	8003c2c <chSchGoSleepTimeoutS+0x8c>
    return;
  }

  /* Distance from the next scheduled event and now.*/
  delta = ch.vtlist.next->delta - nowdelta;
 8003c7e:	1a9b      	subs	r3, r3, r2
     ticks from now.*/
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
  }

  port_timer_set_alarm(ch.vtlist.lasttime + nowdelta + delta);
 8003c80:	2b02      	cmp	r3, #2
 8003c82:	d304      	bcc.n	8003c8e <chSchGoSleepTimeoutS+0xee>
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8003c84:	2280      	movs	r2, #128	; 0x80
 8003c86:	185b      	adds	r3, r3, r1
 8003c88:	05d2      	lsls	r2, r2, #23
 8003c8a:	6353      	str	r3, [r2, #52]	; 0x34
 8003c8c:	e7ce      	b.n	8003c2c <chSchGoSleepTimeoutS+0x8c>
 8003c8e:	2302      	movs	r3, #2
 8003c90:	e7f8      	b.n	8003c84 <chSchGoSleepTimeoutS+0xe4>
      vtp->next = (virtual_timer_t *)&ch.vtlist;
 8003c92:	9301      	str	r3, [sp, #4]
      vtp->prev = (virtual_timer_t *)&ch.vtlist;
 8003c94:	6063      	str	r3, [r4, #4]
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8003c96:	2380      	movs	r3, #128	; 0x80
      ch.vtlist.lasttime = now;
 8003c98:	62aa      	str	r2, [r5, #40]	; 0x28
      vtp->delta = delay;
 8003c9a:	60a1      	str	r1, [r4, #8]
      port_timer_start_alarm(ch.vtlist.lasttime + delay);
 8003c9c:	1889      	adds	r1, r1, r2
  STM32_ST_TIM->SR     = 0;
 8003c9e:	2200      	movs	r2, #0
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8003ca0:	05db      	lsls	r3, r3, #23
      ch.vtlist.next = vtp;
 8003ca2:	61ec      	str	r4, [r5, #28]
      ch.vtlist.prev = vtp;
 8003ca4:	622c      	str	r4, [r5, #32]
 8003ca6:	6359      	str	r1, [r3, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 8003ca8:	611a      	str	r2, [r3, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8003caa:	3202      	adds	r2, #2
 8003cac:	60da      	str	r2, [r3, #12]
 8003cae:	e7a5      	b.n	8003bfc <chSchGoSleepTimeoutS+0x5c>
  STM32_ST_TIM->DIER = 0;
 8003cb0:	2380      	movs	r3, #128	; 0x80
 8003cb2:	05db      	lsls	r3, r3, #23
 8003cb4:	60d9      	str	r1, [r3, #12]
 8003cb6:	e7b9      	b.n	8003c2c <chSchGoSleepTimeoutS+0x8c>
 8003cb8:	200008a8 	.word	0x200008a8
 8003cbc:	08003a41 	.word	0x08003a41

08003cc0 <chThdEnqueueTimeoutS>:
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {
 8003cc0:	b510      	push	{r4, lr}
  if (TIME_IMMEDIATE == timeout) {
 8003cc2:	2900      	cmp	r1, #0
 8003cc4:	d00a      	beq.n	8003cdc <chThdEnqueueTimeoutS+0x1c>
  queue_insert(currp, tqp);
 8003cc6:	4b07      	ldr	r3, [pc, #28]	; (8003ce4 <chThdEnqueueTimeoutS+0x24>)
  tp->queue.prev             = tqp->prev;
 8003cc8:	6842      	ldr	r2, [r0, #4]
 8003cca:	699b      	ldr	r3, [r3, #24]
  tp->queue.next             = (thread_t *)tqp;
 8003ccc:	6018      	str	r0, [r3, #0]
  tp->queue.prev             = tqp->prev;
 8003cce:	605a      	str	r2, [r3, #4]
  tp->queue.prev->queue.next = tp;
 8003cd0:	6013      	str	r3, [r2, #0]
  tqp->prev                  = tp;
 8003cd2:	6043      	str	r3, [r0, #4]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8003cd4:	2004      	movs	r0, #4
 8003cd6:	f7ff ff63 	bl	8003ba0 <chSchGoSleepTimeoutS>
}
 8003cda:	bd10      	pop	{r4, pc}
    return MSG_TIMEOUT;
 8003cdc:	2001      	movs	r0, #1
 8003cde:	4240      	negs	r0, r0
 8003ce0:	e7fb      	b.n	8003cda <chThdEnqueueTimeoutS+0x1a>
 8003ce2:	46c0      	nop			; (mov r8, r8)
 8003ce4:	200008a8 	.word	0x200008a8
	...

08003cf0 <oqWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, systime_t timeout) {
 8003cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cf2:	464e      	mov	r6, r9
 8003cf4:	4645      	mov	r5, r8
 8003cf6:	46de      	mov	lr, fp
 8003cf8:	4657      	mov	r7, sl
 8003cfa:	b5e0      	push	{r5, r6, r7, lr}
 8003cfc:	000e      	movs	r6, r1
  systime_t deadline;
  qnotify_t nfy = oqp->q_notify;
 8003cfe:	69c1      	ldr	r1, [r0, #28]
                      size_t n, systime_t timeout) {
 8003d00:	b085      	sub	sp, #20
 8003d02:	0015      	movs	r5, r2
 8003d04:	9301      	str	r3, [sp, #4]
 8003d06:	001a      	movs	r2, r3
 8003d08:	0004      	movs	r4, r0
  qnotify_t nfy = oqp->q_notify;
 8003d0a:	4689      	mov	r9, r1
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8003d0c:	2320      	movs	r3, #32
 8003d0e:	f383 8811 	msr	BASEPRI, r3
  return (systime_t)STM32_ST_TIM->CNT;
 8003d12:	2380      	movs	r3, #128	; 0x80
  osalSysLock();

  /* Time deadline for the whole operation, note the result is invalid
     when timeout is TIME_INFINITE or TIME_IMMEDIATE but in that case
     the deadline is not used.*/
  deadline = osalOsGetSystemTimeX() + timeout;
 8003d14:	4694      	mov	ip, r2
 8003d16:	05db      	lsls	r3, r3, #23
 8003d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  size_t w = 0;
 8003d1a:	2700      	movs	r7, #0
  deadline = osalOsGetSystemTimeX() + timeout;
 8003d1c:	4463      	add	r3, ip
 8003d1e:	9303      	str	r3, [sp, #12]
 8003d20:	2300      	movs	r3, #0
 8003d22:	469a      	mov	sl, r3
 8003d24:	3320      	adds	r3, #32
 8003d26:	469b      	mov	fp, r3
    msg_t msg;

    while (oqIsFullI(oqp)) {
      /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
         deadline.*/
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 8003d28:	1e53      	subs	r3, r2, #1
 8003d2a:	9302      	str	r3, [sp, #8]
    while (oqIsFullI(oqp)) {
 8003d2c:	68a3      	ldr	r3, [r4, #8]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d020      	beq.n	8003d74 <oqWriteTimeout+0x84>
        return w;
      }
    }

    /* Putting the character into the queue.*/
    oqp->q_counter--;
 8003d32:	68a3      	ldr	r3, [r4, #8]
 8003d34:	3b01      	subs	r3, #1
 8003d36:	60a3      	str	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 8003d38:	6963      	ldr	r3, [r4, #20]
 8003d3a:	1c5a      	adds	r2, r3, #1
 8003d3c:	6162      	str	r2, [r4, #20]
 8003d3e:	1c72      	adds	r2, r6, #1
 8003d40:	4690      	mov	r8, r2
 8003d42:	7832      	ldrb	r2, [r6, #0]
 8003d44:	701a      	strb	r2, [r3, #0]
    if (oqp->q_wrptr >= oqp->q_top) {
 8003d46:	6963      	ldr	r3, [r4, #20]
 8003d48:	6922      	ldr	r2, [r4, #16]
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d301      	bcc.n	8003d52 <oqWriteTimeout+0x62>
      oqp->q_wrptr = oqp->q_buffer;
 8003d4e:	68e3      	ldr	r3, [r4, #12]
 8003d50:	6163      	str	r3, [r4, #20]
    }

    /* Inform the low side that the queue has at least one character available.*/
    if (nfy != NULL) {
 8003d52:	464b      	mov	r3, r9
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d001      	beq.n	8003d5c <oqWriteTimeout+0x6c>
      nfy(oqp);
 8003d58:	0020      	movs	r0, r4
 8003d5a:	47c8      	blx	r9
 8003d5c:	f38a 8811 	msr	BASEPRI, sl

    /* Giving a preemption chance in a controlled point.*/
    osalSysUnlock();

    w++;
    if (--n == 0U) {
 8003d60:	3d01      	subs	r5, #1
    w++;
 8003d62:	3701      	adds	r7, #1
    if (--n == 0U) {
 8003d64:	2d00      	cmp	r5, #0
 8003d66:	d018      	beq.n	8003d9a <oqWriteTimeout+0xaa>
 8003d68:	f38b 8811 	msr	BASEPRI, fp
    while (oqIsFullI(oqp)) {
 8003d6c:	68a3      	ldr	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 8003d6e:	4646      	mov	r6, r8
    while (oqIsFullI(oqp)) {
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d1de      	bne.n	8003d32 <oqWriteTimeout+0x42>
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 8003d74:	9b02      	ldr	r3, [sp, #8]
 8003d76:	3303      	adds	r3, #3
 8003d78:	d817      	bhi.n	8003daa <oqWriteTimeout+0xba>
 8003d7a:	2380      	movs	r3, #128	; 0x80
 8003d7c:	05db      	lsls	r3, r3, #23
 8003d7e:	6a59      	ldr	r1, [r3, #36]	; 0x24
        systime_t next_timeout = deadline - osalOsGetSystemTimeX();
 8003d80:	9b03      	ldr	r3, [sp, #12]
 8003d82:	1a59      	subs	r1, r3, r1
        if (next_timeout > timeout) {
 8003d84:	9b01      	ldr	r3, [sp, #4]
 8003d86:	428b      	cmp	r3, r1
 8003d88:	d304      	bcc.n	8003d94 <oqWriteTimeout+0xa4>
 8003d8a:	0020      	movs	r0, r4
 8003d8c:	f7ff ff98 	bl	8003cc0 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
 8003d90:	2800      	cmp	r0, #0
 8003d92:	d0cb      	beq.n	8003d2c <oqWriteTimeout+0x3c>
 8003d94:	2300      	movs	r3, #0
 8003d96:	f383 8811 	msr	BASEPRI, r3
      return w;
    }

    osalSysLock();
  }
}
 8003d9a:	0038      	movs	r0, r7
 8003d9c:	b005      	add	sp, #20
 8003d9e:	bc3c      	pop	{r2, r3, r4, r5}
 8003da0:	4690      	mov	r8, r2
 8003da2:	4699      	mov	r9, r3
 8003da4:	46a2      	mov	sl, r4
 8003da6:	46ab      	mov	fp, r5
 8003da8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003daa:	9901      	ldr	r1, [sp, #4]
 8003dac:	0020      	movs	r0, r4
 8003dae:	f7ff ff87 	bl	8003cc0 <chThdEnqueueTimeoutS>
 8003db2:	e7ed      	b.n	8003d90 <oqWriteTimeout+0xa0>
	...

08003dc0 <_writet.lto_priv.57>:
static size_t _writet(void *ip, const uint8_t *bp, size_t n, systime_t timeout) {
 8003dc0:	b510      	push	{r4, lr}
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 8003dc2:	3030      	adds	r0, #48	; 0x30
 8003dc4:	f7ff ff94 	bl	8003cf0 <oqWriteTimeout>
}
 8003dc8:	bd10      	pop	{r4, pc}
 8003dca:	46c0      	nop			; (mov r8, r8)
 8003dcc:	0000      	movs	r0, r0
	...

08003dd0 <_write.lto_priv.51>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 8003dd0:	2301      	movs	r3, #1
static size_t _write(void *ip, const uint8_t *bp, size_t n) {
 8003dd2:	b510      	push	{r4, lr}
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 8003dd4:	3030      	adds	r0, #48	; 0x30
 8003dd6:	425b      	negs	r3, r3
 8003dd8:	f7ff ff8a 	bl	8003cf0 <oqWriteTimeout>
}
 8003ddc:	bd10      	pop	{r4, pc}
 8003dde:	46c0      	nop			; (mov r8, r8)

08003de0 <oqPutTimeout>:
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {
 8003de0:	b570      	push	{r4, r5, r6, lr}
 8003de2:	2320      	movs	r3, #32
 8003de4:	0004      	movs	r4, r0
 8003de6:	000e      	movs	r6, r1
 8003de8:	0015      	movs	r5, r2
 8003dea:	f383 8811 	msr	BASEPRI, r3
 8003dee:	e005      	b.n	8003dfc <oqPutTimeout+0x1c>
 8003df0:	0029      	movs	r1, r5
 8003df2:	0020      	movs	r0, r4
 8003df4:	f7ff ff64 	bl	8003cc0 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
 8003df8:	2800      	cmp	r0, #0
 8003dfa:	db19      	blt.n	8003e30 <oqPutTimeout+0x50>
  while (oqIsFullI(oqp)) {
 8003dfc:	68a3      	ldr	r3, [r4, #8]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d0f6      	beq.n	8003df0 <oqPutTimeout+0x10>
  oqp->q_counter--;
 8003e02:	68a3      	ldr	r3, [r4, #8]
 8003e04:	3b01      	subs	r3, #1
 8003e06:	60a3      	str	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 8003e08:	6963      	ldr	r3, [r4, #20]
 8003e0a:	1c5a      	adds	r2, r3, #1
 8003e0c:	6162      	str	r2, [r4, #20]
 8003e0e:	701e      	strb	r6, [r3, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 8003e10:	6963      	ldr	r3, [r4, #20]
 8003e12:	6922      	ldr	r2, [r4, #16]
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d301      	bcc.n	8003e1c <oqPutTimeout+0x3c>
    oqp->q_wrptr = oqp->q_buffer;
 8003e18:	68e3      	ldr	r3, [r4, #12]
 8003e1a:	6163      	str	r3, [r4, #20]
  if (oqp->q_notify != NULL) {
 8003e1c:	69e3      	ldr	r3, [r4, #28]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d001      	beq.n	8003e26 <oqPutTimeout+0x46>
    oqp->q_notify(oqp);
 8003e22:	0020      	movs	r0, r4
 8003e24:	4798      	blx	r3
 8003e26:	2300      	movs	r3, #0
 8003e28:	f383 8811 	msr	BASEPRI, r3
 8003e2c:	2000      	movs	r0, #0
}
 8003e2e:	bd70      	pop	{r4, r5, r6, pc}
 8003e30:	2300      	movs	r3, #0
 8003e32:	f383 8811 	msr	BASEPRI, r3
 8003e36:	e7fa      	b.n	8003e2e <oqPutTimeout+0x4e>
	...

08003e40 <_putt.lto_priv.55>:
static msg_t _putt(void *ip, uint8_t b, systime_t timeout) {
 8003e40:	b510      	push	{r4, lr}
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 8003e42:	3030      	adds	r0, #48	; 0x30
 8003e44:	f7ff ffcc 	bl	8003de0 <oqPutTimeout>
}
 8003e48:	bd10      	pop	{r4, pc}
 8003e4a:	46c0      	nop			; (mov r8, r8)
 8003e4c:	0000      	movs	r0, r0
	...

08003e50 <_put.lto_priv.53>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 8003e50:	2201      	movs	r2, #1
static msg_t _put(void *ip, uint8_t b) {
 8003e52:	b510      	push	{r4, lr}
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 8003e54:	3030      	adds	r0, #48	; 0x30
 8003e56:	4252      	negs	r2, r2
 8003e58:	f7ff ffc2 	bl	8003de0 <oqPutTimeout>
}
 8003e5c:	bd10      	pop	{r4, pc}
 8003e5e:	46c0      	nop			; (mov r8, r8)

08003e60 <iqReadTimeout>:
                     size_t n, systime_t timeout) {
 8003e60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e62:	464e      	mov	r6, r9
 8003e64:	4645      	mov	r5, r8
 8003e66:	46de      	mov	lr, fp
 8003e68:	4657      	mov	r7, sl
 8003e6a:	b5e0      	push	{r5, r6, r7, lr}
 8003e6c:	000e      	movs	r6, r1
  qnotify_t nfy = iqp->q_notify;
 8003e6e:	69c1      	ldr	r1, [r0, #28]
                     size_t n, systime_t timeout) {
 8003e70:	b085      	sub	sp, #20
 8003e72:	0015      	movs	r5, r2
 8003e74:	9301      	str	r3, [sp, #4]
 8003e76:	001a      	movs	r2, r3
 8003e78:	0004      	movs	r4, r0
  qnotify_t nfy = iqp->q_notify;
 8003e7a:	4689      	mov	r9, r1
 8003e7c:	2320      	movs	r3, #32
 8003e7e:	f383 8811 	msr	BASEPRI, r3
 8003e82:	2380      	movs	r3, #128	; 0x80
  deadline = osalOsGetSystemTimeX() + timeout;
 8003e84:	4694      	mov	ip, r2
 8003e86:	05db      	lsls	r3, r3, #23
 8003e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  size_t r = 0;
 8003e8a:	2700      	movs	r7, #0
  deadline = osalOsGetSystemTimeX() + timeout;
 8003e8c:	4463      	add	r3, ip
 8003e8e:	9303      	str	r3, [sp, #12]
 8003e90:	2300      	movs	r3, #0
 8003e92:	469a      	mov	sl, r3
 8003e94:	3320      	adds	r3, #32
 8003e96:	469b      	mov	fp, r3
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 8003e98:	1e53      	subs	r3, r2, #1
 8003e9a:	9302      	str	r3, [sp, #8]
    while (iqIsEmptyI(iqp)) {
 8003e9c:	68a3      	ldr	r3, [r4, #8]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d020      	beq.n	8003ee4 <iqReadTimeout+0x84>
    iqp->q_counter--;
 8003ea2:	68a3      	ldr	r3, [r4, #8]
 8003ea4:	3b01      	subs	r3, #1
 8003ea6:	60a3      	str	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
 8003ea8:	1c73      	adds	r3, r6, #1
 8003eaa:	4698      	mov	r8, r3
 8003eac:	69a3      	ldr	r3, [r4, #24]
 8003eae:	1c5a      	adds	r2, r3, #1
 8003eb0:	61a2      	str	r2, [r4, #24]
 8003eb2:	781b      	ldrb	r3, [r3, #0]
 8003eb4:	7033      	strb	r3, [r6, #0]
    if (iqp->q_rdptr >= iqp->q_top) {
 8003eb6:	69a3      	ldr	r3, [r4, #24]
 8003eb8:	6922      	ldr	r2, [r4, #16]
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d301      	bcc.n	8003ec2 <iqReadTimeout+0x62>
      iqp->q_rdptr = iqp->q_buffer;
 8003ebe:	68e3      	ldr	r3, [r4, #12]
 8003ec0:	61a3      	str	r3, [r4, #24]
    if (nfy != NULL) {
 8003ec2:	464b      	mov	r3, r9
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d001      	beq.n	8003ecc <iqReadTimeout+0x6c>
      nfy(iqp);
 8003ec8:	0020      	movs	r0, r4
 8003eca:	47c8      	blx	r9
 8003ecc:	f38a 8811 	msr	BASEPRI, sl
    if (--n == 0U) {
 8003ed0:	3d01      	subs	r5, #1
    r++;
 8003ed2:	3701      	adds	r7, #1
    if (--n == 0U) {
 8003ed4:	2d00      	cmp	r5, #0
 8003ed6:	d018      	beq.n	8003f0a <iqReadTimeout+0xaa>
 8003ed8:	f38b 8811 	msr	BASEPRI, fp
    while (iqIsEmptyI(iqp)) {
 8003edc:	68a3      	ldr	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
 8003ede:	4646      	mov	r6, r8
    while (iqIsEmptyI(iqp)) {
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d1de      	bne.n	8003ea2 <iqReadTimeout+0x42>
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 8003ee4:	9b02      	ldr	r3, [sp, #8]
 8003ee6:	3303      	adds	r3, #3
 8003ee8:	d817      	bhi.n	8003f1a <iqReadTimeout+0xba>
 8003eea:	2380      	movs	r3, #128	; 0x80
 8003eec:	05db      	lsls	r3, r3, #23
 8003eee:	6a59      	ldr	r1, [r3, #36]	; 0x24
        systime_t next_timeout = deadline - osalOsGetSystemTimeX();
 8003ef0:	9b03      	ldr	r3, [sp, #12]
 8003ef2:	1a59      	subs	r1, r3, r1
        if (next_timeout > timeout) {
 8003ef4:	9b01      	ldr	r3, [sp, #4]
 8003ef6:	428b      	cmp	r3, r1
 8003ef8:	d304      	bcc.n	8003f04 <iqReadTimeout+0xa4>
 8003efa:	0020      	movs	r0, r4
 8003efc:	f7ff fee0 	bl	8003cc0 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
 8003f00:	2800      	cmp	r0, #0
 8003f02:	d0cb      	beq.n	8003e9c <iqReadTimeout+0x3c>
 8003f04:	2300      	movs	r3, #0
 8003f06:	f383 8811 	msr	BASEPRI, r3
}
 8003f0a:	0038      	movs	r0, r7
 8003f0c:	b005      	add	sp, #20
 8003f0e:	bc3c      	pop	{r2, r3, r4, r5}
 8003f10:	4690      	mov	r8, r2
 8003f12:	4699      	mov	r9, r3
 8003f14:	46a2      	mov	sl, r4
 8003f16:	46ab      	mov	fp, r5
 8003f18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f1a:	9901      	ldr	r1, [sp, #4]
 8003f1c:	0020      	movs	r0, r4
 8003f1e:	f7ff fecf 	bl	8003cc0 <chThdEnqueueTimeoutS>
 8003f22:	e7ed      	b.n	8003f00 <iqReadTimeout+0xa0>
	...

08003f30 <_readt.lto_priv.58>:
static size_t _readt(void *ip, uint8_t *bp, size_t n, systime_t timeout) {
 8003f30:	b510      	push	{r4, lr}
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 8003f32:	300c      	adds	r0, #12
 8003f34:	f7ff ff94 	bl	8003e60 <iqReadTimeout>
}
 8003f38:	bd10      	pop	{r4, pc}
 8003f3a:	46c0      	nop			; (mov r8, r8)
 8003f3c:	0000      	movs	r0, r0
	...

08003f40 <_read.lto_priv.52>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 8003f40:	2301      	movs	r3, #1
static size_t _read(void *ip, uint8_t *bp, size_t n) {
 8003f42:	b510      	push	{r4, lr}
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 8003f44:	300c      	adds	r0, #12
 8003f46:	425b      	negs	r3, r3
 8003f48:	f7ff ff8a 	bl	8003e60 <iqReadTimeout>
}
 8003f4c:	bd10      	pop	{r4, pc}
 8003f4e:	46c0      	nop			; (mov r8, r8)

08003f50 <iqGetTimeout>:
msg_t iqGetTimeout(input_queue_t *iqp, systime_t timeout) {
 8003f50:	b570      	push	{r4, r5, r6, lr}
 8003f52:	2320      	movs	r3, #32
 8003f54:	0004      	movs	r4, r0
 8003f56:	000d      	movs	r5, r1
 8003f58:	f383 8811 	msr	BASEPRI, r3
 8003f5c:	e005      	b.n	8003f6a <iqGetTimeout+0x1a>
 8003f5e:	0029      	movs	r1, r5
 8003f60:	0020      	movs	r0, r4
 8003f62:	f7ff fead 	bl	8003cc0 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
 8003f66:	2800      	cmp	r0, #0
 8003f68:	db18      	blt.n	8003f9c <iqGetTimeout+0x4c>
  while (iqIsEmptyI(iqp)) {
 8003f6a:	68a3      	ldr	r3, [r4, #8]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d0f6      	beq.n	8003f5e <iqGetTimeout+0xe>
  iqp->q_counter--;
 8003f70:	68a3      	ldr	r3, [r4, #8]
  b = *iqp->q_rdptr++;
 8003f72:	69a2      	ldr	r2, [r4, #24]
  iqp->q_counter--;
 8003f74:	3b01      	subs	r3, #1
 8003f76:	60a3      	str	r3, [r4, #8]
  b = *iqp->q_rdptr++;
 8003f78:	1c53      	adds	r3, r2, #1
 8003f7a:	61a3      	str	r3, [r4, #24]
 8003f7c:	7815      	ldrb	r5, [r2, #0]
  if (iqp->q_rdptr >= iqp->q_top) {
 8003f7e:	6922      	ldr	r2, [r4, #16]
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d301      	bcc.n	8003f88 <iqGetTimeout+0x38>
    iqp->q_rdptr = iqp->q_buffer;
 8003f84:	68e3      	ldr	r3, [r4, #12]
 8003f86:	61a3      	str	r3, [r4, #24]
  if (iqp->q_notify != NULL) {
 8003f88:	69e3      	ldr	r3, [r4, #28]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d001      	beq.n	8003f92 <iqGetTimeout+0x42>
    iqp->q_notify(iqp);
 8003f8e:	0020      	movs	r0, r4
 8003f90:	4798      	blx	r3
 8003f92:	2300      	movs	r3, #0
 8003f94:	f383 8811 	msr	BASEPRI, r3
  return (msg_t)b;
 8003f98:	0028      	movs	r0, r5
}
 8003f9a:	bd70      	pop	{r4, r5, r6, pc}
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	f383 8811 	msr	BASEPRI, r3
 8003fa2:	e7fa      	b.n	8003f9a <iqGetTimeout+0x4a>
	...

08003fb0 <_gett.lto_priv.56>:
static msg_t _gett(void *ip, systime_t timeout) {
 8003fb0:	b510      	push	{r4, lr}
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 8003fb2:	300c      	adds	r0, #12
 8003fb4:	f7ff ffcc 	bl	8003f50 <iqGetTimeout>
}
 8003fb8:	bd10      	pop	{r4, pc}
 8003fba:	46c0      	nop			; (mov r8, r8)
 8003fbc:	0000      	movs	r0, r0
	...

08003fc0 <_get.lto_priv.54>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 8003fc0:	2101      	movs	r1, #1
static msg_t _get(void *ip) {
 8003fc2:	b510      	push	{r4, lr}
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 8003fc4:	300c      	adds	r0, #12
 8003fc6:	4249      	negs	r1, r1
 8003fc8:	f7ff ffc2 	bl	8003f50 <iqGetTimeout>
}
 8003fcc:	bd10      	pop	{r4, pc}
 8003fce:	46c0      	nop			; (mov r8, r8)

08003fd0 <chThdSleep>:
void chThdSleep(systime_t time) {
 8003fd0:	b510      	push	{r4, lr}
 8003fd2:	0001      	movs	r1, r0
 8003fd4:	2320      	movs	r3, #32
 8003fd6:	f383 8811 	msr	BASEPRI, r3
 8003fda:	2008      	movs	r0, #8
 8003fdc:	f7ff fde0 	bl	8003ba0 <chSchGoSleepTimeoutS>
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	f383 8811 	msr	BASEPRI, r3
}
 8003fe6:	bd10      	pop	{r4, pc}
	...

08003ff0 <chSchReadyI>:
  tp->state = CH_STATE_READY;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	6882      	ldr	r2, [r0, #8]
 8003ff4:	7703      	strb	r3, [r0, #28]
  cp = (thread_t *)&ch.rlist.queue;
 8003ff6:	4b05      	ldr	r3, [pc, #20]	; (800400c <chSchReadyI+0x1c>)
    cp = cp->queue.next;
 8003ff8:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8003ffa:	6899      	ldr	r1, [r3, #8]
 8003ffc:	4291      	cmp	r1, r2
 8003ffe:	d2fb      	bcs.n	8003ff8 <chSchReadyI+0x8>
  tp->queue.prev             = cp->queue.prev;
 8004000:	685a      	ldr	r2, [r3, #4]
  tp->queue.next             = cp;
 8004002:	6003      	str	r3, [r0, #0]
  tp->queue.prev             = cp->queue.prev;
 8004004:	6042      	str	r2, [r0, #4]
  tp->queue.prev->queue.next = tp;
 8004006:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 8004008:	6058      	str	r0, [r3, #4]
}
 800400a:	4770      	bx	lr
 800400c:	200008a8 	.word	0x200008a8

08004010 <chEvtBroadcastFlagsI>:
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8004010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  elp = esp->next;
 8004012:	6804      	ldr	r4, [r0, #0]
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8004014:	0006      	movs	r6, r0
 8004016:	000d      	movs	r5, r1
    tp->u.rdymsg = MSG_OK;
 8004018:	2700      	movs	r7, #0
  while (elp != (event_listener_t *)esp) {
 800401a:	42a0      	cmp	r0, r4
 800401c:	d103      	bne.n	8004026 <chEvtBroadcastFlagsI+0x16>
 800401e:	e01e      	b.n	800405e <chEvtBroadcastFlagsI+0x4e>
    elp = elp->next;
 8004020:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 8004022:	42a6      	cmp	r6, r4
 8004024:	d01b      	beq.n	800405e <chEvtBroadcastFlagsI+0x4e>
    elp->flags |= flags;
 8004026:	68e3      	ldr	r3, [r4, #12]
 8004028:	432b      	orrs	r3, r5
 800402a:	60e3      	str	r3, [r4, #12]
    if ((flags == (eventflags_t)0) ||
 800402c:	2d00      	cmp	r5, #0
 800402e:	d002      	beq.n	8004036 <chEvtBroadcastFlagsI+0x26>
 8004030:	6922      	ldr	r2, [r4, #16]
 8004032:	421a      	tst	r2, r3
 8004034:	d0f4      	beq.n	8004020 <chEvtBroadcastFlagsI+0x10>
      chEvtSignalI(elp->listener, elp->events);
 8004036:	6860      	ldr	r0, [r4, #4]
  tp->epending |= events;
 8004038:	68a3      	ldr	r3, [r4, #8]
 800403a:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800403c:	4313      	orrs	r3, r2
  if (((tp->state == CH_STATE_WTOREVT) &&
 800403e:	7f02      	ldrb	r2, [r0, #28]
  tp->epending |= events;
 8004040:	6303      	str	r3, [r0, #48]	; 0x30
  if (((tp->state == CH_STATE_WTOREVT) &&
 8004042:	2a0a      	cmp	r2, #10
 8004044:	d00c      	beq.n	8004060 <chEvtBroadcastFlagsI+0x50>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 8004046:	2a0b      	cmp	r2, #11
 8004048:	d1ea      	bne.n	8004020 <chEvtBroadcastFlagsI+0x10>
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
 800404a:	6a02      	ldr	r2, [r0, #32]
 800404c:	4013      	ands	r3, r2
      ((tp->state == CH_STATE_WTANDEVT) &&
 800404e:	429a      	cmp	r2, r3
 8004050:	d1e6      	bne.n	8004020 <chEvtBroadcastFlagsI+0x10>
    tp->u.rdymsg = MSG_OK;
 8004052:	6207      	str	r7, [r0, #32]
    (void) chSchReadyI(tp);
 8004054:	f7ff ffcc 	bl	8003ff0 <chSchReadyI>
    elp = elp->next;
 8004058:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 800405a:	42a6      	cmp	r6, r4
 800405c:	d1e3      	bne.n	8004026 <chEvtBroadcastFlagsI+0x16>
}
 800405e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (((tp->state == CH_STATE_WTOREVT) &&
 8004060:	6a02      	ldr	r2, [r0, #32]
 8004062:	421a      	tst	r2, r3
 8004064:	d0dc      	beq.n	8004020 <chEvtBroadcastFlagsI+0x10>
    tp->u.rdymsg = MSG_OK;
 8004066:	6207      	str	r7, [r0, #32]
    (void) chSchReadyI(tp);
 8004068:	f7ff ffc2 	bl	8003ff0 <chSchReadyI>
 800406c:	e7f4      	b.n	8004058 <chEvtBroadcastFlagsI+0x48>
 800406e:	46c0      	nop			; (mov r8, r8)

08004070 <Vector98>:
OSAL_IRQ_HANDLER(STM32_CAN1_SCE_HANDLER) {
 8004070:	b570      	push	{r4, r5, r6, lr}
  msr = canp->can->MSR;
 8004072:	4c15      	ldr	r4, [pc, #84]	; (80040c8 <Vector98+0x58>)
 8004074:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004076:	685d      	ldr	r5, [r3, #4]
  canp->can->MSR = msr;
 8004078:	605d      	str	r5, [r3, #4]
  if (msr & CAN_MSR_WKUI) {
 800407a:	072a      	lsls	r2, r5, #28
 800407c:	d411      	bmi.n	80040a2 <Vector98+0x32>
  if (msr & CAN_MSR_ERRI) {
 800407e:	076b      	lsls	r3, r5, #29
 8004080:	d50c      	bpl.n	800409c <Vector98+0x2c>
    uint32_t esr = canp->can->ESR;
 8004082:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004084:	6999      	ldr	r1, [r3, #24]
 8004086:	2320      	movs	r3, #32
 8004088:	f383 8811 	msr	BASEPRI, r3
  chEvtBroadcastFlagsI(esp, flags);
 800408c:	0020      	movs	r0, r4
                             flags | (eventflags_t)(esr << 16U));
 800408e:	0409      	lsls	r1, r1, #16
 8004090:	3020      	adds	r0, #32
 8004092:	f7ff ffbd 	bl	8004010 <chEvtBroadcastFlagsI>
 8004096:	2300      	movs	r3, #0
 8004098:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_EPILOGUE();
 800409c:	f7ff fd18 	bl	8003ad0 <_port_irq_epilogue>
}
 80040a0:	bd70      	pop	{r4, r5, r6, pc}
    canp->state = CAN_READY;
 80040a2:	2203      	movs	r2, #3
    canp->can->MCR &= ~CAN_MCR_SLEEP;
 80040a4:	2102      	movs	r1, #2
    canp->state = CAN_READY;
 80040a6:	7022      	strb	r2, [r4, #0]
    canp->can->MCR &= ~CAN_MCR_SLEEP;
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	438a      	bics	r2, r1
 80040ac:	601a      	str	r2, [r3, #0]
 80040ae:	2320      	movs	r3, #32
 80040b0:	f383 8811 	msr	BASEPRI, r3
 80040b4:	0020      	movs	r0, r4
 80040b6:	2100      	movs	r1, #0
 80040b8:	3028      	adds	r0, #40	; 0x28
 80040ba:	f7ff ffa9 	bl	8004010 <chEvtBroadcastFlagsI>
 80040be:	2300      	movs	r3, #0
 80040c0:	f383 8811 	msr	BASEPRI, r3
 80040c4:	e7db      	b.n	800407e <Vector98+0xe>
 80040c6:	46c0      	nop			; (mov r8, r8)
 80040c8:	20000410 	.word	0x20000410
 80040cc:	00000000 	.word	0x00000000

080040d0 <Vector94>:
OSAL_IRQ_HANDLER(STM32_CAN1_RX1_HANDLER) {
 80040d0:	b570      	push	{r4, r5, r6, lr}
  rf1r = canp->can->RF1R;
 80040d2:	4c16      	ldr	r4, [pc, #88]	; (800412c <Vector94+0x5c>)
 80040d4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80040d6:	691d      	ldr	r5, [r3, #16]
  if ((rf1r & CAN_RF1R_FMP1) > 0) {
 80040d8:	07aa      	lsls	r2, r5, #30
 80040da:	d112      	bne.n	8004102 <Vector94+0x32>
  if ((rf1r & CAN_RF1R_FOVR1) > 0) {
 80040dc:	2310      	movs	r3, #16
 80040de:	422b      	tst	r3, r5
 80040e0:	d00c      	beq.n	80040fc <Vector94+0x2c>
    canp->can->RF1R = CAN_RF1R_FOVR1;
 80040e2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80040e4:	6113      	str	r3, [r2, #16]
 80040e6:	3310      	adds	r3, #16
 80040e8:	f383 8811 	msr	BASEPRI, r3
 80040ec:	0020      	movs	r0, r4
 80040ee:	2110      	movs	r1, #16
 80040f0:	3020      	adds	r0, #32
 80040f2:	f7ff ff8d 	bl	8004010 <chEvtBroadcastFlagsI>
 80040f6:	2300      	movs	r3, #0
 80040f8:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_EPILOGUE();
 80040fc:	f7ff fce8 	bl	8003ad0 <_port_irq_epilogue>
}
 8004100:	bd70      	pop	{r4, r5, r6, pc}
    canp->can->IER &= ~CAN_IER_FMPIE1;
 8004102:	2110      	movs	r1, #16
 8004104:	695a      	ldr	r2, [r3, #20]
 8004106:	438a      	bics	r2, r1
 8004108:	615a      	str	r2, [r3, #20]
 800410a:	2320      	movs	r3, #32
 800410c:	f383 8811 	msr	BASEPRI, r3
  chThdDequeueAllI(tqp, msg);
 8004110:	0020      	movs	r0, r4
 8004112:	3010      	adds	r0, #16
 8004114:	f7fe feec 	bl	8002ef0 <chThdDequeueAllI.constprop.40>
  chEvtBroadcastFlagsI(esp, flags);
 8004118:	0020      	movs	r0, r4
 800411a:	2102      	movs	r1, #2
 800411c:	3018      	adds	r0, #24
 800411e:	f7ff ff77 	bl	8004010 <chEvtBroadcastFlagsI>
 8004122:	2300      	movs	r3, #0
 8004124:	f383 8811 	msr	BASEPRI, r3
 8004128:	e7d8      	b.n	80040dc <Vector94+0xc>
 800412a:	46c0      	nop			; (mov r8, r8)
 800412c:	20000410 	.word	0x20000410

08004130 <Vector90>:
OSAL_IRQ_HANDLER(STM32_CAN1_RX0_HANDLER) {
 8004130:	b570      	push	{r4, r5, r6, lr}
  rf0r = canp->can->RF0R;
 8004132:	4c16      	ldr	r4, [pc, #88]	; (800418c <Vector90+0x5c>)
 8004134:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004136:	68dd      	ldr	r5, [r3, #12]
  if ((rf0r & CAN_RF0R_FMP0) > 0) {
 8004138:	07aa      	lsls	r2, r5, #30
 800413a:	d112      	bne.n	8004162 <Vector90+0x32>
  if ((rf0r & CAN_RF0R_FOVR0) > 0) {
 800413c:	2310      	movs	r3, #16
 800413e:	422b      	tst	r3, r5
 8004140:	d00c      	beq.n	800415c <Vector90+0x2c>
    canp->can->RF0R = CAN_RF0R_FOVR0;
 8004142:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004144:	60d3      	str	r3, [r2, #12]
 8004146:	3310      	adds	r3, #16
 8004148:	f383 8811 	msr	BASEPRI, r3
 800414c:	0020      	movs	r0, r4
 800414e:	2110      	movs	r1, #16
 8004150:	3020      	adds	r0, #32
 8004152:	f7ff ff5d 	bl	8004010 <chEvtBroadcastFlagsI>
 8004156:	2300      	movs	r3, #0
 8004158:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_EPILOGUE();
 800415c:	f7ff fcb8 	bl	8003ad0 <_port_irq_epilogue>
}
 8004160:	bd70      	pop	{r4, r5, r6, pc}
    canp->can->IER &= ~CAN_IER_FMPIE0;
 8004162:	2102      	movs	r1, #2
 8004164:	695a      	ldr	r2, [r3, #20]
 8004166:	438a      	bics	r2, r1
 8004168:	615a      	str	r2, [r3, #20]
 800416a:	2320      	movs	r3, #32
 800416c:	f383 8811 	msr	BASEPRI, r3
  chThdDequeueAllI(tqp, msg);
 8004170:	0020      	movs	r0, r4
 8004172:	3010      	adds	r0, #16
 8004174:	f7fe febc 	bl	8002ef0 <chThdDequeueAllI.constprop.40>
  chEvtBroadcastFlagsI(esp, flags);
 8004178:	0020      	movs	r0, r4
 800417a:	2101      	movs	r1, #1
 800417c:	3018      	adds	r0, #24
 800417e:	f7ff ff47 	bl	8004010 <chEvtBroadcastFlagsI>
 8004182:	2300      	movs	r3, #0
 8004184:	f383 8811 	msr	BASEPRI, r3
 8004188:	e7d8      	b.n	800413c <Vector90+0xc>
 800418a:	46c0      	nop			; (mov r8, r8)
 800418c:	20000410 	.word	0x20000410

08004190 <Vector8C>:
  tsr = canp->can->TSR;
 8004190:	4b1c      	ldr	r3, [pc, #112]	; (8004204 <Vector8C+0x74>)
OSAL_IRQ_HANDLER(STM32_CAN1_TX_HANDLER) {
 8004192:	b570      	push	{r4, r5, r6, lr}
  tsr = canp->can->TSR;
 8004194:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  flags = 0U;
 8004196:	2500      	movs	r5, #0
  tsr = canp->can->TSR;
 8004198:	6893      	ldr	r3, [r2, #8]
  canp->can->TSR = tsr;
 800419a:	6093      	str	r3, [r2, #8]
  if ((tsr & CAN_TSR_RQCP0) != 0U) {
 800419c:	07da      	lsls	r2, r3, #31
 800419e:	d503      	bpl.n	80041a8 <Vector8C+0x18>
    if ((tsr & (CAN_TSR_ALST0 | CAN_TSR_TERR0)) != 0U) {
 80041a0:	220c      	movs	r2, #12
      flags |= CAN_MAILBOX_TO_MASK(1U);
 80041a2:	3501      	adds	r5, #1
    if ((tsr & (CAN_TSR_ALST0 | CAN_TSR_TERR0)) != 0U) {
 80041a4:	421a      	tst	r2, r3
 80041a6:	d125      	bne.n	80041f4 <Vector8C+0x64>
  if ((tsr & CAN_TSR_RQCP1) != 0U) {
 80041a8:	05da      	lsls	r2, r3, #23
 80041aa:	d506      	bpl.n	80041ba <Vector8C+0x2a>
    if ((tsr & (CAN_TSR_ALST1 | CAN_TSR_TERR1)) != 0U) {
 80041ac:	22c0      	movs	r2, #192	; 0xc0
 80041ae:	0112      	lsls	r2, r2, #4
 80041b0:	4213      	tst	r3, r2
 80041b2:	d01c      	beq.n	80041ee <Vector8C+0x5e>
      flags |= CAN_MAILBOX_TO_MASK(2U) << 16U;
 80041b4:	2280      	movs	r2, #128	; 0x80
 80041b6:	0292      	lsls	r2, r2, #10
 80041b8:	4315      	orrs	r5, r2
  if ((tsr & CAN_TSR_RQCP2) != 0U) {
 80041ba:	03da      	lsls	r2, r3, #15
 80041bc:	d505      	bpl.n	80041ca <Vector8C+0x3a>
    if ((tsr & (CAN_TSR_ALST2 | CAN_TSR_TERR2)) != 0U) {
 80041be:	22c0      	movs	r2, #192	; 0xc0
 80041c0:	0312      	lsls	r2, r2, #12
 80041c2:	4213      	tst	r3, r2
 80041c4:	d119      	bne.n	80041fa <Vector8C+0x6a>
      flags |= CAN_MAILBOX_TO_MASK(3U);
 80041c6:	2304      	movs	r3, #4
 80041c8:	431d      	orrs	r5, r3
 80041ca:	2320      	movs	r3, #32
 80041cc:	f383 8811 	msr	BASEPRI, r3
  chThdDequeueAllI(tqp, msg);
 80041d0:	4c0d      	ldr	r4, [pc, #52]	; (8004208 <Vector8C+0x78>)
 80041d2:	0020      	movs	r0, r4
 80041d4:	f7fe fe8c 	bl	8002ef0 <chThdDequeueAllI.constprop.40>
  chEvtBroadcastFlagsI(esp, flags);
 80041d8:	0020      	movs	r0, r4
 80041da:	0029      	movs	r1, r5
 80041dc:	3014      	adds	r0, #20
 80041de:	f7ff ff17 	bl	8004010 <chEvtBroadcastFlagsI>
 80041e2:	2300      	movs	r3, #0
 80041e4:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_EPILOGUE();
 80041e8:	f7ff fc72 	bl	8003ad0 <_port_irq_epilogue>
}
 80041ec:	bd70      	pop	{r4, r5, r6, pc}
      flags |= CAN_MAILBOX_TO_MASK(2U);
 80041ee:	2202      	movs	r2, #2
 80041f0:	4315      	orrs	r5, r2
 80041f2:	e7e2      	b.n	80041ba <Vector8C+0x2a>
      flags |= CAN_MAILBOX_TO_MASK(1U) << 16U;
 80041f4:	2580      	movs	r5, #128	; 0x80
 80041f6:	026d      	lsls	r5, r5, #9
 80041f8:	e7d6      	b.n	80041a8 <Vector8C+0x18>
      flags |= CAN_MAILBOX_TO_MASK(3U) << 16U;
 80041fa:	2380      	movs	r3, #128	; 0x80
 80041fc:	02db      	lsls	r3, r3, #11
 80041fe:	431d      	orrs	r5, r3
 8004200:	e7e3      	b.n	80041ca <Vector8C+0x3a>
 8004202:	46c0      	nop			; (mov r8, r8)
 8004204:	20000410 	.word	0x20000410
 8004208:	20000418 	.word	0x20000418
 800420c:	00000000 	.word	0x00000000

08004210 <chThdExit>:
void chThdExit(msg_t msg) {
 8004210:	b570      	push	{r4, r5, r6, lr}
 8004212:	2320      	movs	r3, #32
 8004214:	f383 8811 	msr	BASEPRI, r3
  thread_t *tp = currp;
 8004218:	4b0d      	ldr	r3, [pc, #52]	; (8004250 <chThdExit+0x40>)
 800421a:	699c      	ldr	r4, [r3, #24]
  while (list_notempty(&tp->waiting)) {
 800421c:	0025      	movs	r5, r4
  tp->u.exitcode = msg;
 800421e:	6220      	str	r0, [r4, #32]
  return (bool)(tlp->next != (thread_t *)tlp);
 8004220:	6a60      	ldr	r0, [r4, #36]	; 0x24
  while (list_notempty(&tp->waiting)) {
 8004222:	3524      	adds	r5, #36	; 0x24
 8004224:	4285      	cmp	r5, r0
 8004226:	d006      	beq.n	8004236 <chThdExit+0x26>
  tlp->next = tp->queue.next;
 8004228:	6803      	ldr	r3, [r0, #0]
 800422a:	6263      	str	r3, [r4, #36]	; 0x24
    (void) chSchReadyI(list_remove(&tp->waiting));
 800422c:	f7ff fee0 	bl	8003ff0 <chSchReadyI>
  return (bool)(tlp->next != (thread_t *)tlp);
 8004230:	6a60      	ldr	r0, [r4, #36]	; 0x24
  while (list_notempty(&tp->waiting)) {
 8004232:	42a8      	cmp	r0, r5
 8004234:	d1f8      	bne.n	8004228 <chThdExit+0x18>
  if (tp->refs == (trefs_t)0) {
 8004236:	7fa3      	ldrb	r3, [r4, #30]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d104      	bne.n	8004246 <chThdExit+0x36>
    REG_REMOVE(tp);
 800423c:	6922      	ldr	r2, [r4, #16]
 800423e:	6963      	ldr	r3, [r4, #20]
 8004240:	611a      	str	r2, [r3, #16]
 8004242:	6922      	ldr	r2, [r4, #16]
 8004244:	6153      	str	r3, [r2, #20]
  chSchGoSleepS(CH_STATE_FINAL);
 8004246:	200f      	movs	r0, #15
 8004248:	f7ff fc32 	bl	8003ab0 <chSchGoSleepS>
}
 800424c:	bd70      	pop	{r4, r5, r6, pc}
 800424e:	46c0      	nop			; (mov r8, r8)
 8004250:	200008a8 	.word	0x200008a8
	...

08004260 <BusFault_Handler>:
 *
 * @notapi
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
__attribute__((weak))
void _unhandled_exception(void) {
 8004260:	e7fe      	b.n	8004260 <BusFault_Handler>
 8004262:	46c0      	nop			; (mov r8, r8)
	...

08004270 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 8004270:	2203      	movs	r2, #3
 8004272:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004274:	46c6      	mov	lr, r8
 8004276:	4690      	mov	r8, r2
      *p = 0;
      p++;
    }
    rap++;
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 8004278:	327d      	adds	r2, #125	; 0x7d
 800427a:	4694      	mov	ip, r2
      *p = 0;
 800427c:	2600      	movs	r6, #0
void __init_ram_areas(void) {
 800427e:	b500      	push	{lr}
  const ram_init_area_t *rap = ram_areas;
 8004280:	4f11      	ldr	r7, [pc, #68]	; (80042c8 <__init_ram_areas+0x58>)
void __init_ram_areas(void) {
 8004282:	4d12      	ldr	r5, [pc, #72]	; (80042cc <__init_ram_areas+0x5c>)
 8004284:	4c12      	ldr	r4, [pc, #72]	; (80042d0 <__init_ram_areas+0x60>)
 8004286:	4b13      	ldr	r3, [pc, #76]	; (80042d4 <__init_ram_areas+0x64>)
 8004288:	4913      	ldr	r1, [pc, #76]	; (80042d8 <__init_ram_areas+0x68>)
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 800428a:	44bc      	add	ip, r7
    while (p < rap->clear_area) {
 800428c:	429c      	cmp	r4, r3
 800428e:	d90d      	bls.n	80042ac <__init_ram_areas+0x3c>
 8004290:	001a      	movs	r2, r3
      *p = *tp;
 8004292:	c901      	ldmia	r1!, {r0}
 8004294:	c201      	stmia	r2!, {r0}
    while (p < rap->clear_area) {
 8004296:	4294      	cmp	r4, r2
 8004298:	d8fb      	bhi.n	8004292 <__init_ram_areas+0x22>
 800429a:	43da      	mvns	r2, r3
 800429c:	1914      	adds	r4, r2, r4
 800429e:	4642      	mov	r2, r8
 80042a0:	4394      	bics	r4, r2
 80042a2:	3404      	adds	r4, #4
 80042a4:	191b      	adds	r3, r3, r4
    while (p < rap->no_init_area) {
 80042a6:	429d      	cmp	r5, r3
 80042a8:	d902      	bls.n	80042b0 <__init_ram_areas+0x40>
      *p = 0;
 80042aa:	c340      	stmia	r3!, {r6}
    while (p < rap->no_init_area) {
 80042ac:	429d      	cmp	r5, r3
 80042ae:	d8fc      	bhi.n	80042aa <__init_ram_areas+0x3a>
    rap++;
 80042b0:	3710      	adds	r7, #16
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 80042b2:	4567      	cmp	r7, ip
 80042b4:	d004      	beq.n	80042c0 <__init_ram_areas+0x50>
 80042b6:	6839      	ldr	r1, [r7, #0]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	68bc      	ldr	r4, [r7, #8]
 80042bc:	68fd      	ldr	r5, [r7, #12]
 80042be:	e7e5      	b.n	800428c <__init_ram_areas+0x1c>
#endif
}
 80042c0:	bc04      	pop	{r2}
 80042c2:	4690      	mov	r8, r2
 80042c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042c6:	46c0      	nop			; (mov r8, r8)
 80042c8:	0800473c 	.word	0x0800473c
 80042cc:	20000ad0 	.word	0x20000ad0
 80042d0:	20000ad0 	.word	0x20000ad0
 80042d4:	20000ad0 	.word	0x20000ad0
 80042d8:	080047c8 	.word	0x080047c8
 80042dc:	00000000 	.word	0x00000000

080042e0 <__default_exit>:
void __default_exit(void) {
 80042e0:	e7fe      	b.n	80042e0 <__default_exit>
 80042e2:	46c0      	nop			; (mov r8, r8)
	...

080042f0 <__late_init>:
 80042f0:	4770      	bx	lr
 80042f2:	46c0      	nop			; (mov r8, r8)
	...

08004300 <__core_init>:
}
 8004300:	4770      	bx	lr
 8004302:	46c0      	nop			; (mov r8, r8)
